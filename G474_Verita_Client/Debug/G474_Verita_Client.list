
G474_Verita_Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009630  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  08009810  08009810  00019810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ddc  08009ddc  000203a4  2**0
                  CONTENTS
  4 .ARM          00000008  08009ddc  08009ddc  00019ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009de4  08009de4  000203a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009de4  08009de4  00019de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009de8  08009de8  00019de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a4  20000000  08009dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  200003a4  0800a190  000203a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  0800a190  00020640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013936  00000000  00000000  000203d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e9  00000000  00000000  00033d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  000363f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e30  00000000  00000000  00037320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a48  00000000  00000000  00038150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012afe  00000000  00000000  0003bb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101e90  00000000  00000000  0004e696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150526  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000514c  00000000  00000000  00150578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200003a4 	.word	0x200003a4
 80001fc:	00000000 	.word	0x00000000
 8000200:	080097f8 	.word	0x080097f8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003a8 	.word	0x200003a8
 800021c:	080097f8 	.word	0x080097f8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <gpio_selftest_input_pupdr_1>:
//// lists All port - pin to inspect first // avoid special pin like osilators / UART
//// GPIO_PIN_x is in bit position format (0 2 4 8 16 ...) which loss if stored in that form and log2() to calculate back



uint32_t gpio_selftest_input_pupdr_1(GPIO_TypeDef* GPIOx,uint16_t *Lista_GPIOx){
 8000f9c:	b590      	push	{r4, r7, lr}
 8000f9e:	b087      	sub	sp, #28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]

	uint32_t result = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]

	uint32_t temp_mode = GPIOx->MODER;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	617b      	str	r3, [r7, #20]
	uint32_t temp_pupdr = GPIOx->PUPDR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	613b      	str	r3, [r7, #16]

	//uint16_t sizearr = sizeof(Lista_GPIOx); // / sizeof(List_GPIOC[0])
	//// use instead of sizeof which return array length input into function as 4
	uint16_t sizearr = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	81fb      	strh	r3, [r7, #14]
	for(register int i = 0; i <= 17 ;i++){
 8000fba:	2400      	movs	r4, #0
 8000fbc:	e00a      	b.n	8000fd4 <gpio_selftest_input_pupdr_1+0x38>
		if(Lista_GPIOx[i] == 20){
 8000fbe:	4623      	mov	r3, r4
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	2b14      	cmp	r3, #20
 8000fca:	d006      	beq.n	8000fda <gpio_selftest_input_pupdr_1+0x3e>
			break;
		}else{
			sizearr++;
 8000fcc:	89fb      	ldrh	r3, [r7, #14]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	81fb      	strh	r3, [r7, #14]
	for(register int i = 0; i <= 17 ;i++){
 8000fd2:	3401      	adds	r4, #1
 8000fd4:	2c11      	cmp	r4, #17
 8000fd6:	ddf2      	ble.n	8000fbe <gpio_selftest_input_pupdr_1+0x22>
 8000fd8:	e000      	b.n	8000fdc <gpio_selftest_input_pupdr_1+0x40>
			break;
 8000fda:	bf00      	nop
		}
	}


	//// ------------------ Input PULLUP ------------------------------
	for(register int i = 0;i < sizearr; i++){
 8000fdc:	2400      	movs	r4, #0
 8000fde:	e00e      	b.n	8000ffe <gpio_selftest_input_pupdr_1+0x62>
		temp_mode &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 8000fe0:	4623      	mov	r3, r4
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2203      	movs	r2, #3
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	617b      	str	r3, [r7, #20]
	for(register int i = 0;i < sizearr; i++){
 8000ffc:	3401      	adds	r4, #1
 8000ffe:	89fb      	ldrh	r3, [r7, #14]
 8001000:	429c      	cmp	r4, r3
 8001002:	dbed      	blt.n	8000fe0 <gpio_selftest_input_pupdr_1+0x44>
		temp_mode |= ( GPIO_MODE_INPUT << (Lista_GPIOx[i] * 2U));
	}
	GPIOx->MODER = temp_mode;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	601a      	str	r2, [r3, #0]


	for(register int i = 0;i < sizearr; i++){
 800100a:	2400      	movs	r4, #0
 800100c:	e01a      	b.n	8001044 <gpio_selftest_input_pupdr_1+0xa8>
		temp_pupdr &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 800100e:	4623      	mov	r3, r4
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	4413      	add	r3, r2
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	461a      	mov	r2, r3
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
		temp_pupdr |= ( GPIO_PULLUP << (Lista_GPIOx[i] * 2U));
 800102a:	4623      	mov	r3, r4
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	4413      	add	r3, r2
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2201      	movs	r2, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
	for(register int i = 0;i < sizearr; i++){
 8001042:	3401      	adds	r4, #1
 8001044:	89fb      	ldrh	r3, [r7, #14]
 8001046:	429c      	cmp	r4, r3
 8001048:	dbe1      	blt.n	800100e <gpio_selftest_input_pupdr_1+0x72>
	}
	GPIOx->PUPDR = temp_pupdr;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	60da      	str	r2, [r3, #12]
	HAL_Delay(1);
 8001050:	2001      	movs	r0, #1
 8001052:	f001 fa71 	bl	8002538 <HAL_Delay>
	result |= (GPIOx->IDR) << 16;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	041b      	lsls	r3, r3, #16
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	4313      	orrs	r3, r2
 8001060:	60bb      	str	r3, [r7, #8]

	//// ------------------ Input PULLDOWN ------------------------------
	for(register int i = 0;i < sizearr; i++){
 8001062:	2400      	movs	r4, #0
 8001064:	e01a      	b.n	800109c <gpio_selftest_input_pupdr_1+0x100>
		temp_pupdr &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 8001066:	4623      	mov	r3, r4
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	4413      	add	r3, r2
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	461a      	mov	r2, r3
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
		temp_pupdr |= ( GPIO_PULLDOWN << (Lista_GPIOx[i] * 2U));
 8001082:	4623      	mov	r3, r4
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	4413      	add	r3, r2
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2202      	movs	r2, #2
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
	for(register int i = 0;i < sizearr; i++){
 800109a:	3401      	adds	r4, #1
 800109c:	89fb      	ldrh	r3, [r7, #14]
 800109e:	429c      	cmp	r4, r3
 80010a0:	dbe1      	blt.n	8001066 <gpio_selftest_input_pupdr_1+0xca>
	}
	GPIOx->PUPDR = temp_pupdr;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	60da      	str	r2, [r3, #12]
	HAL_Delay(5);
 80010a8:	2005      	movs	r0, #5
 80010aa:	f001 fa45 	bl	8002538 <HAL_Delay>
	result |= GPIOx->IDR;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]

	return result;
 80010b8:	68bb      	ldr	r3, [r7, #8]

	}
 80010ba:	4618      	mov	r0, r3
 80010bc:	371c      	adds	r7, #28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd90      	pop	{r4, r7, pc}

080010c2 <gpio_selftest_output_pp_1>:

//// output pushpull
uint32_t gpio_selftest_output_pp_1(GPIO_TypeDef* GPIOx,uint16_t *Lista_GPIOx){
 80010c2:	b590      	push	{r4, r7, lr}
 80010c4:	b087      	sub	sp, #28
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	6039      	str	r1, [r7, #0]
	uint32_t temp_mode = GPIOx->MODER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	617b      	str	r3, [r7, #20]
	uint32_t temp_bsrr = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
	uint32_t result = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]

	uint16_t sizearr = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	81fb      	strh	r3, [r7, #14]
	//// use instead of sizeof
	for(register int i = 0; i <= 17 ;i++){
 80010de:	2400      	movs	r4, #0
 80010e0:	e00a      	b.n	80010f8 <gpio_selftest_output_pp_1+0x36>
		if(Lista_GPIOx[i] == 20){
 80010e2:	4623      	mov	r3, r4
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	4413      	add	r3, r2
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	2b14      	cmp	r3, #20
 80010ee:	d006      	beq.n	80010fe <gpio_selftest_output_pp_1+0x3c>
			break;
		}else{
			sizearr++;
 80010f0:	89fb      	ldrh	r3, [r7, #14]
 80010f2:	3301      	adds	r3, #1
 80010f4:	81fb      	strh	r3, [r7, #14]
	for(register int i = 0; i <= 17 ;i++){
 80010f6:	3401      	adds	r4, #1
 80010f8:	2c11      	cmp	r4, #17
 80010fa:	ddf2      	ble.n	80010e2 <gpio_selftest_output_pp_1+0x20>
 80010fc:	e000      	b.n	8001100 <gpio_selftest_output_pp_1+0x3e>
			break;
 80010fe:	bf00      	nop
		}
	}

	///// -------------- Set Output Pushpull ---------------------
	for(register int i = 0;i < sizearr; i++){
 8001100:	2400      	movs	r4, #0
 8001102:	e01a      	b.n	800113a <gpio_selftest_output_pp_1+0x78>
			temp_mode &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 8001104:	4623      	mov	r3, r4
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	4413      	add	r3, r2
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2203      	movs	r2, #3
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	461a      	mov	r2, r3
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	4013      	ands	r3, r2
 800111e:	617b      	str	r3, [r7, #20]
			temp_mode |= ( GPIO_MODE_OUTPUT_PP << (Lista_GPIOx[i] * 2U));
 8001120:	4623      	mov	r3, r4
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	4413      	add	r3, r2
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2201      	movs	r2, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	4313      	orrs	r3, r2
 8001136:	617b      	str	r3, [r7, #20]
	for(register int i = 0;i < sizearr; i++){
 8001138:	3401      	adds	r4, #1
 800113a:	89fb      	ldrh	r3, [r7, #14]
 800113c:	429c      	cmp	r4, r3
 800113e:	dbe1      	blt.n	8001104 <gpio_selftest_output_pp_1+0x42>
		}
	GPIOx->MODER = temp_mode;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	601a      	str	r2, [r3, #0]

	//// write SET to BSRR
	for(register int i = 0;i < sizearr; i++){
 8001146:	2400      	movs	r4, #0
 8001148:	e019      	b.n	800117e <gpio_selftest_output_pp_1+0xbc>
			temp_bsrr &= ~( 0b1 << Lista_GPIOx[i]); // clear only register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 800114a:	4623      	mov	r3, r4
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	4413      	add	r3, r2
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	2301      	movs	r3, #1
 8001158:	4093      	lsls	r3, r2
 800115a:	43db      	mvns	r3, r3
 800115c:	461a      	mov	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
			temp_bsrr |= ( GPIO_PIN_SET << Lista_GPIOx[i]);
 8001164:	4623      	mov	r3, r4
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	4413      	add	r3, r2
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	2301      	movs	r3, #1
 8001172:	4093      	lsls	r3, r2
 8001174:	461a      	mov	r2, r3
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
	for(register int i = 0;i < sizearr; i++){
 800117c:	3401      	adds	r4, #1
 800117e:	89fb      	ldrh	r3, [r7, #14]
 8001180:	429c      	cmp	r4, r3
 8001182:	dbe2      	blt.n	800114a <gpio_selftest_output_pp_1+0x88>
		}
	GPIOx->BSRR = temp_bsrr; // insert 1 into SET position
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	619a      	str	r2, [r3, #24]

	//// Read Back #1 get set
	HAL_Delay(1);
 800118a:	2001      	movs	r0, #1
 800118c:	f001 f9d4 	bl	8002538 <HAL_Delay>
	result |= (GPIOx->IDR) << 16;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	041b      	lsls	r3, r3, #16
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	4313      	orrs	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
	HAL_Delay(1);
 800119c:	2001      	movs	r0, #1
 800119e:	f001 f9cb 	bl	8002538 <HAL_Delay>

	//// write RESET to BSRR
	GPIOx->BSRR = temp_bsrr << 16; // insert 1 into RESET position << 16
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	041a      	lsls	r2, r3, #16
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	619a      	str	r2, [r3, #24]
	//// Read Back #2 get Reset
	HAL_Delay(1);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f001 f9c4 	bl	8002538 <HAL_Delay>
	result |= GPIOx->IDR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	60bb      	str	r3, [r7, #8]

	return result;
 80011ba:	68bb      	ldr	r3, [r7, #8]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	371c      	adds	r7, #28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd90      	pop	{r4, r7, pc}

080011c4 <gpio_selftest_output_od_1>:

//// output opendrain
/* Open drain mode: A “0” in the Output register activates the N-MOS whereas a “1”
 * in the Output register leaves the port in Hi-Z (the P-MOS is never activated)
 * */
uint32_t gpio_selftest_output_od_1(GPIO_TypeDef* GPIOx,uint16_t *Lista_GPIOx){
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
	uint32_t temp_mode = GPIOx->MODER;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	61fb      	str	r3, [r7, #28]
	uint32_t temp_bsrr = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61bb      	str	r3, [r7, #24]
	uint32_t temp_pupdr = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
	uint32_t result = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]

	uint16_t sizearr = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	827b      	strh	r3, [r7, #18]
	//// use instead of sizeof
	for(register int i = 0; i <= 17 ;i++){
 80011e4:	2400      	movs	r4, #0
 80011e6:	e00a      	b.n	80011fe <gpio_selftest_output_od_1+0x3a>
		if(Lista_GPIOx[i] == 20){
 80011e8:	4623      	mov	r3, r4
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	2b14      	cmp	r3, #20
 80011f4:	d006      	beq.n	8001204 <gpio_selftest_output_od_1+0x40>
			break;
		}else{
			sizearr++;
 80011f6:	8a7b      	ldrh	r3, [r7, #18]
 80011f8:	3301      	adds	r3, #1
 80011fa:	827b      	strh	r3, [r7, #18]
	for(register int i = 0; i <= 17 ;i++){
 80011fc:	3401      	adds	r4, #1
 80011fe:	2c11      	cmp	r4, #17
 8001200:	ddf2      	ble.n	80011e8 <gpio_selftest_output_od_1+0x24>
 8001202:	e000      	b.n	8001206 <gpio_selftest_output_od_1+0x42>
			break;
 8001204:	bf00      	nop
		}
	}

	///// -------------- Set Output  opendrain ---------------------
	for(register int i = 0;i < sizearr; i++){
 8001206:	2400      	movs	r4, #0
 8001208:	e01a      	b.n	8001240 <gpio_selftest_output_od_1+0x7c>
			temp_mode &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 800120a:	4623      	mov	r3, r4
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	4413      	add	r3, r2
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	461a      	mov	r2, r3
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	4013      	ands	r3, r2
 8001224:	61fb      	str	r3, [r7, #28]
			temp_mode |= ( GPIO_MODE_OUTPUT_OD << (Lista_GPIOx[i] * 2U));
 8001226:	4623      	mov	r3, r4
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	4413      	add	r3, r2
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2211      	movs	r2, #17
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	4313      	orrs	r3, r2
 800123c:	61fb      	str	r3, [r7, #28]
	for(register int i = 0;i < sizearr; i++){
 800123e:	3401      	adds	r4, #1
 8001240:	8a7b      	ldrh	r3, [r7, #18]
 8001242:	429c      	cmp	r4, r3
 8001244:	dbe1      	blt.n	800120a <gpio_selftest_output_od_1+0x46>
		}
	GPIOx->MODER = temp_mode;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69fa      	ldr	r2, [r7, #28]
 800124a:	601a      	str	r2, [r3, #0]

	//// Set Pullup for Hi-Z State read
	for(register int i = 0;i < sizearr; i++){
 800124c:	2400      	movs	r4, #0
 800124e:	e01a      	b.n	8001286 <gpio_selftest_output_od_1+0xc2>
		temp_pupdr &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 8001250:	4623      	mov	r3, r4
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	4413      	add	r3, r2
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	4013      	ands	r3, r2
 800126a:	617b      	str	r3, [r7, #20]
		temp_pupdr |= ( GPIO_PULLUP << (Lista_GPIOx[i] * 2U));
 800126c:	4623      	mov	r3, r4
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	4413      	add	r3, r2
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	2201      	movs	r2, #1
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	4313      	orrs	r3, r2
 8001282:	617b      	str	r3, [r7, #20]
	for(register int i = 0;i < sizearr; i++){
 8001284:	3401      	adds	r4, #1
 8001286:	8a7b      	ldrh	r3, [r7, #18]
 8001288:	429c      	cmp	r4, r3
 800128a:	dbe1      	blt.n	8001250 <gpio_selftest_output_od_1+0x8c>
	}
	GPIOx->PUPDR = temp_pupdr;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	60da      	str	r2, [r3, #12]

	//// write SET to BSRR
	for(register int i = 0;i < sizearr; i++){
 8001292:	2400      	movs	r4, #0
 8001294:	e019      	b.n	80012ca <gpio_selftest_output_od_1+0x106>
			temp_bsrr &= ~( 0b1 << Lista_GPIOx[i]); // clear only register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 8001296:	4623      	mov	r3, r4
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	4413      	add	r3, r2
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	2301      	movs	r3, #1
 80012a4:	4093      	lsls	r3, r2
 80012a6:	43db      	mvns	r3, r3
 80012a8:	461a      	mov	r2, r3
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
			temp_bsrr |= ( GPIO_PIN_SET << Lista_GPIOx[i]);
 80012b0:	4623      	mov	r3, r4
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	2301      	movs	r3, #1
 80012be:	4093      	lsls	r3, r2
 80012c0:	461a      	mov	r2, r3
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
	for(register int i = 0;i < sizearr; i++){
 80012c8:	3401      	adds	r4, #1
 80012ca:	8a7b      	ldrh	r3, [r7, #18]
 80012cc:	429c      	cmp	r4, r3
 80012ce:	dbe2      	blt.n	8001296 <gpio_selftest_output_od_1+0xd2>
		}
	GPIOx->BSRR = temp_bsrr; // insert 1 into SET position
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	619a      	str	r2, [r3, #24]

	//// Read Back #1 get set
	HAL_Delay(1);
 80012d6:	2001      	movs	r0, #1
 80012d8:	f001 f92e 	bl	8002538 <HAL_Delay>
	result |= (GPIOx->IDR) << 16;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	041b      	lsls	r3, r3, #16
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
	HAL_Delay(1);
 80012e8:	2001      	movs	r0, #1
 80012ea:	f001 f925 	bl	8002538 <HAL_Delay>

	//// write RESET to BSRR
	GPIOx->BSRR = temp_bsrr << 16; // insert 1 into RESET position << 16
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	041a      	lsls	r2, r3, #16
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	619a      	str	r2, [r3, #24]
	//// Read Back #2 get Reset
	HAL_Delay(1);
 80012f6:	2001      	movs	r0, #1
 80012f8:	f001 f91e 	bl	8002538 <HAL_Delay>
	result |= GPIOx->IDR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]

	return result;
 8001306:	68fb      	ldr	r3, [r7, #12]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3724      	adds	r7, #36	; 0x24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b094      	sub	sp, #80	; 0x50
 8001314:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001316:	f001 f89e 	bl	8002456 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131a:	f000 fa5d 	bl	80017d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131e:	f000 fba5 	bl	8001a6c <MX_GPIO_Init>
  MX_DMA_Init();
 8001322:	f000 fb79 	bl	8001a18 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001326:	f000 fb2d 	bl	8001984 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800132a:	f000 faa1 	bl	8001870 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  char temp[]="\r\n----------------- G474_Verita_Client --------------------\r\n";
 800132e:	4b57      	ldr	r3, [pc, #348]	; (800148c <main+0x17c>)
 8001330:	463c      	mov	r4, r7
 8001332:	461d      	mov	r5, r3
 8001334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001340:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001344:	c407      	stmia	r4!, {r0, r1, r2}
 8001346:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)temp, strlen(temp),10);
 8001348:	463b      	mov	r3, r7
 800134a:	4618      	mov	r0, r3
 800134c:	f7fe ff68 	bl	8000220 <strlen>
 8001350:	4603      	mov	r3, r0
 8001352:	b29a      	uxth	r2, r3
 8001354:	4639      	mov	r1, r7
 8001356:	230a      	movs	r3, #10
 8001358:	484d      	ldr	r0, [pc, #308]	; (8001490 <main+0x180>)
 800135a:	f004 fcdb 	bl	8005d14 <HAL_UART_Transmit>

  sprintf(uartTXBf, "Firmware ver: %08X \r\n ", FIRMWARE_VER);
 800135e:	4a4d      	ldr	r2, [pc, #308]	; (8001494 <main+0x184>)
 8001360:	494d      	ldr	r1, [pc, #308]	; (8001498 <main+0x188>)
 8001362:	484e      	ldr	r0, [pc, #312]	; (800149c <main+0x18c>)
 8001364:	f005 ffbc 	bl	80072e0 <siprintf>
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 8001368:	484c      	ldr	r0, [pc, #304]	; (800149c <main+0x18c>)
 800136a:	f7fe ff59 	bl	8000220 <strlen>
 800136e:	4603      	mov	r3, r0
 8001370:	b29a      	uxth	r2, r3
 8001372:	230a      	movs	r3, #10
 8001374:	4949      	ldr	r1, [pc, #292]	; (800149c <main+0x18c>)
 8001376:	4846      	ldr	r0, [pc, #280]	; (8001490 <main+0x180>)
 8001378:	f004 fccc 	bl	8005d14 <HAL_UART_Transmit>


  //// ADC Start --------------------------
  //CPUTemprdINIT();

  HAL_ADC_Start_DMA(&hadc1, ADCRawread.u32, 6);
 800137c:	2206      	movs	r2, #6
 800137e:	4948      	ldr	r1, [pc, #288]	; (80014a0 <main+0x190>)
 8001380:	4848      	ldr	r0, [pc, #288]	; (80014a4 <main+0x194>)
 8001382:	f001 fd01 	bl	8002d88 <HAL_ADC_Start_DMA>
  //HAL_ADC_Start_DMA(&hadc1, ADCRawreadc, 6);

  //// ------------- UART Recieve : Circular DMA here--------------------------
  //HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], RxbufferSize_VRT);
  VR_Cli.Mark.FirmwareVer = FIRMWARE_VER;
 8001386:	4b48      	ldr	r3, [pc, #288]	; (80014a8 <main+0x198>)
 8001388:	4a42      	ldr	r2, [pc, #264]	; (8001494 <main+0x184>)
 800138a:	649a      	str	r2, [r3, #72]	; 0x48
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(HAL_GetTick() >= timestamp_one){
 800138c:	f001 f8c8 	bl	8002520 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	4b46      	ldr	r3, [pc, #280]	; (80014ac <main+0x19c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	f0c0 8126 	bcc.w	80015e8 <main+0x2d8>
	  		  timestamp_one += 1000;
 800139c:	4b43      	ldr	r3, [pc, #268]	; (80014ac <main+0x19c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80013a4:	4a41      	ldr	r2, [pc, #260]	; (80014ac <main+0x19c>)
 80013a6:	6013      	str	r3, [r2, #0]
	  		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80013a8:	2120      	movs	r1, #32
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ae:	f003 fbf9 	bl	8004ba4 <HAL_GPIO_TogglePin>

	  		  //cputmpraw = CPUTempread();

	  		  sprintf(uartTXBf, "\r\n - - - - - - - - VERITA - - - G474RE - - - - - BETA - - - - - -\r\n");
 80013b2:	493f      	ldr	r1, [pc, #252]	; (80014b0 <main+0x1a0>)
 80013b4:	4839      	ldr	r0, [pc, #228]	; (800149c <main+0x18c>)
 80013b6:	f005 ff93 	bl	80072e0 <siprintf>
	  		  HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 80013ba:	4838      	ldr	r0, [pc, #224]	; (800149c <main+0x18c>)
 80013bc:	f7fe ff30 	bl	8000220 <strlen>
 80013c0:	4603      	mov	r3, r0
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	230a      	movs	r3, #10
 80013c6:	4935      	ldr	r1, [pc, #212]	; (800149c <main+0x18c>)
 80013c8:	4831      	ldr	r0, [pc, #196]	; (8001490 <main+0x180>)
 80013ca:	f004 fca3 	bl	8005d14 <HAL_UART_Transmit>

	  		  sprintf(uartTXBf, "Vrefint : %4d = %.2f V \r\n", (uint16_t)ADCRawread.u16[1], ADCTVoltar(ADCRawread.u16[1], 3.32));
 80013ce:	4b34      	ldr	r3, [pc, #208]	; (80014a0 <main+0x190>)
 80013d0:	885b      	ldrh	r3, [r3, #2]
 80013d2:	461c      	mov	r4, r3
 80013d4:	4b32      	ldr	r3, [pc, #200]	; (80014a0 <main+0x190>)
 80013d6:	885b      	ldrh	r3, [r3, #2]
 80013d8:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80014b4 <main+0x1a4>
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 fbb3 	bl	8001b48 <ADCTVoltar>
 80013e2:	ee10 3a10 	vmov	r3, s0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f8d6 	bl	8000598 <__aeabi_f2d>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	e9cd 2300 	strd	r2, r3, [sp]
 80013f4:	4622      	mov	r2, r4
 80013f6:	4930      	ldr	r1, [pc, #192]	; (80014b8 <main+0x1a8>)
 80013f8:	4828      	ldr	r0, [pc, #160]	; (800149c <main+0x18c>)
 80013fa:	f005 ff71 	bl	80072e0 <siprintf>
	  		  HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 80013fe:	4827      	ldr	r0, [pc, #156]	; (800149c <main+0x18c>)
 8001400:	f7fe ff0e 	bl	8000220 <strlen>
 8001404:	4603      	mov	r3, r0
 8001406:	b29a      	uxth	r2, r3
 8001408:	230a      	movs	r3, #10
 800140a:	4924      	ldr	r1, [pc, #144]	; (800149c <main+0x18c>)
 800140c:	4820      	ldr	r0, [pc, #128]	; (8001490 <main+0x180>)
 800140e:	f004 fc81 	bl	8005d14 <HAL_UART_Transmit>
	  		  //// CPU temp reoprt // incomplete, odd value, formula
	  		  sprintf(uartTXBf, "TempMCU : %4d = %.2f C , (+ %d offset)  \r\n ", (uint16_t)ADCRawread.u16[0],
 8001412:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <main+0x190>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	461c      	mov	r4, r3
	  				Tempequat_G4(ADCRawread.u16[0], 3.3), fakeoffset);
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <main+0x190>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	b21b      	sxth	r3, r3
 800141e:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80014bc <main+0x1ac>
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fbbe 	bl	8001ba4 <Tempequat_G4>
 8001428:	ee10 3a10 	vmov	r3, s0
	  		  sprintf(uartTXBf, "TempMCU : %4d = %.2f C , (+ %d offset)  \r\n ", (uint16_t)ADCRawread.u16[0],
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f8b3 	bl	8000598 <__aeabi_f2d>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	2106      	movs	r1, #6
 8001438:	9102      	str	r1, [sp, #8]
 800143a:	e9cd 2300 	strd	r2, r3, [sp]
 800143e:	4622      	mov	r2, r4
 8001440:	491f      	ldr	r1, [pc, #124]	; (80014c0 <main+0x1b0>)
 8001442:	4816      	ldr	r0, [pc, #88]	; (800149c <main+0x18c>)
 8001444:	f005 ff4c 	bl	80072e0 <siprintf>
	  		  HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 8001448:	4814      	ldr	r0, [pc, #80]	; (800149c <main+0x18c>)
 800144a:	f7fe fee9 	bl	8000220 <strlen>
 800144e:	4603      	mov	r3, r0
 8001450:	b29a      	uxth	r2, r3
 8001452:	230a      	movs	r3, #10
 8001454:	4911      	ldr	r1, [pc, #68]	; (800149c <main+0x18c>)
 8001456:	480e      	ldr	r0, [pc, #56]	; (8001490 <main+0x180>)
 8001458:	f004 fc5c 	bl	8005d14 <HAL_UART_Transmit>
	  		  ////

	  		  //// ALL PASS report ////
			  //// Print GPIO Test Result
			  if(counter_flagger){
 800145c:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <main+0x1b4>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 80c1 	beq.w	80015e8 <main+0x2d8>
				  if(cnt_allpass >= 9){//// there're 9 pass
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <main+0x1b8>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b08      	cmp	r3, #8
 800146c:	d930      	bls.n	80014d0 <main+0x1c0>

					  sprintf(uartTXBf, "\r\n+++ GPIO ALL PASS +++\r\n"); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 800146e:	4917      	ldr	r1, [pc, #92]	; (80014cc <main+0x1bc>)
 8001470:	480a      	ldr	r0, [pc, #40]	; (800149c <main+0x18c>)
 8001472:	f005 ff35 	bl	80072e0 <siprintf>
 8001476:	4809      	ldr	r0, [pc, #36]	; (800149c <main+0x18c>)
 8001478:	f7fe fed2 	bl	8000220 <strlen>
 800147c:	4603      	mov	r3, r0
 800147e:	b29a      	uxth	r2, r3
 8001480:	230a      	movs	r3, #10
 8001482:	4906      	ldr	r1, [pc, #24]	; (800149c <main+0x18c>)
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <main+0x180>)
 8001486:	f004 fc45 	bl	8005d14 <HAL_UART_Transmit>
 800148a:	e02f      	b.n	80014ec <main+0x1dc>
 800148c:	080098ec 	.word	0x080098ec
 8001490:	2000048c 	.word	0x2000048c
 8001494:	bb261223 	.word	0xbb261223
 8001498:	08009810 	.word	0x08009810
 800149c:	200005c4 	.word	0x200005c4
 80014a0:	2000051c 	.word	0x2000051c
 80014a4:	200003c0 	.word	0x200003c0
 80014a8:	20000560 	.word	0x20000560
 80014ac:	2000053c 	.word	0x2000053c
 80014b0:	08009828 	.word	0x08009828
 80014b4:	40547ae1 	.word	0x40547ae1
 80014b8:	0800986c 	.word	0x0800986c
 80014bc:	40533333 	.word	0x40533333
 80014c0:	08009888 	.word	0x08009888
 80014c4:	20000539 	.word	0x20000539
 80014c8:	2000053a 	.word	0x2000053a
 80014cc:	080098b4 	.word	0x080098b4
				  }else{
					  sprintf(uartTXBf, "\r\n--- GPIO unhealthy ---\r\n"); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 80014d0:	49aa      	ldr	r1, [pc, #680]	; (800177c <main+0x46c>)
 80014d2:	48ab      	ldr	r0, [pc, #684]	; (8001780 <main+0x470>)
 80014d4:	f005 ff04 	bl	80072e0 <siprintf>
 80014d8:	48a9      	ldr	r0, [pc, #676]	; (8001780 <main+0x470>)
 80014da:	f7fe fea1 	bl	8000220 <strlen>
 80014de:	4603      	mov	r3, r0
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	230a      	movs	r3, #10
 80014e4:	49a6      	ldr	r1, [pc, #664]	; (8001780 <main+0x470>)
 80014e6:	48a7      	ldr	r0, [pc, #668]	; (8001784 <main+0x474>)
 80014e8:	f004 fc14 	bl	8005d14 <HAL_UART_Transmit>
				  }

				  sprintf(uartTXBf, WR_A_PUPDR); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 80014ec:	49a6      	ldr	r1, [pc, #664]	; (8001788 <main+0x478>)
 80014ee:	48a4      	ldr	r0, [pc, #656]	; (8001780 <main+0x470>)
 80014f0:	f005 fef6 	bl	80072e0 <siprintf>
 80014f4:	48a2      	ldr	r0, [pc, #648]	; (8001780 <main+0x470>)
 80014f6:	f7fe fe93 	bl	8000220 <strlen>
 80014fa:	4603      	mov	r3, r0
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	230a      	movs	r3, #10
 8001500:	499f      	ldr	r1, [pc, #636]	; (8001780 <main+0x470>)
 8001502:	48a0      	ldr	r0, [pc, #640]	; (8001784 <main+0x474>)
 8001504:	f004 fc06 	bl	8005d14 <HAL_UART_Transmit>

				  sprintf(uartTXBf, WR_A_OPP); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 8001508:	49a0      	ldr	r1, [pc, #640]	; (800178c <main+0x47c>)
 800150a:	489d      	ldr	r0, [pc, #628]	; (8001780 <main+0x470>)
 800150c:	f005 fee8 	bl	80072e0 <siprintf>
 8001510:	489b      	ldr	r0, [pc, #620]	; (8001780 <main+0x470>)
 8001512:	f7fe fe85 	bl	8000220 <strlen>
 8001516:	4603      	mov	r3, r0
 8001518:	b29a      	uxth	r2, r3
 800151a:	230a      	movs	r3, #10
 800151c:	4998      	ldr	r1, [pc, #608]	; (8001780 <main+0x470>)
 800151e:	4899      	ldr	r0, [pc, #612]	; (8001784 <main+0x474>)
 8001520:	f004 fbf8 	bl	8005d14 <HAL_UART_Transmit>

				  sprintf(uartTXBf, WR_A_OOD); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 8001524:	499a      	ldr	r1, [pc, #616]	; (8001790 <main+0x480>)
 8001526:	4896      	ldr	r0, [pc, #600]	; (8001780 <main+0x470>)
 8001528:	f005 feda 	bl	80072e0 <siprintf>
 800152c:	4894      	ldr	r0, [pc, #592]	; (8001780 <main+0x470>)
 800152e:	f7fe fe77 	bl	8000220 <strlen>
 8001532:	4603      	mov	r3, r0
 8001534:	b29a      	uxth	r2, r3
 8001536:	230a      	movs	r3, #10
 8001538:	4991      	ldr	r1, [pc, #580]	; (8001780 <main+0x470>)
 800153a:	4892      	ldr	r0, [pc, #584]	; (8001784 <main+0x474>)
 800153c:	f004 fbea 	bl	8005d14 <HAL_UART_Transmit>

				  sprintf(uartTXBf, WR_B_PUPDR); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 8001540:	4994      	ldr	r1, [pc, #592]	; (8001794 <main+0x484>)
 8001542:	488f      	ldr	r0, [pc, #572]	; (8001780 <main+0x470>)
 8001544:	f005 fecc 	bl	80072e0 <siprintf>
 8001548:	488d      	ldr	r0, [pc, #564]	; (8001780 <main+0x470>)
 800154a:	f7fe fe69 	bl	8000220 <strlen>
 800154e:	4603      	mov	r3, r0
 8001550:	b29a      	uxth	r2, r3
 8001552:	230a      	movs	r3, #10
 8001554:	498a      	ldr	r1, [pc, #552]	; (8001780 <main+0x470>)
 8001556:	488b      	ldr	r0, [pc, #556]	; (8001784 <main+0x474>)
 8001558:	f004 fbdc 	bl	8005d14 <HAL_UART_Transmit>

				  sprintf(uartTXBf, WR_B_OPP); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 800155c:	498e      	ldr	r1, [pc, #568]	; (8001798 <main+0x488>)
 800155e:	4888      	ldr	r0, [pc, #544]	; (8001780 <main+0x470>)
 8001560:	f005 febe 	bl	80072e0 <siprintf>
 8001564:	4886      	ldr	r0, [pc, #536]	; (8001780 <main+0x470>)
 8001566:	f7fe fe5b 	bl	8000220 <strlen>
 800156a:	4603      	mov	r3, r0
 800156c:	b29a      	uxth	r2, r3
 800156e:	230a      	movs	r3, #10
 8001570:	4983      	ldr	r1, [pc, #524]	; (8001780 <main+0x470>)
 8001572:	4884      	ldr	r0, [pc, #528]	; (8001784 <main+0x474>)
 8001574:	f004 fbce 	bl	8005d14 <HAL_UART_Transmit>

				  sprintf(uartTXBf, WR_B_OOD); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 8001578:	4988      	ldr	r1, [pc, #544]	; (800179c <main+0x48c>)
 800157a:	4881      	ldr	r0, [pc, #516]	; (8001780 <main+0x470>)
 800157c:	f005 feb0 	bl	80072e0 <siprintf>
 8001580:	487f      	ldr	r0, [pc, #508]	; (8001780 <main+0x470>)
 8001582:	f7fe fe4d 	bl	8000220 <strlen>
 8001586:	4603      	mov	r3, r0
 8001588:	b29a      	uxth	r2, r3
 800158a:	230a      	movs	r3, #10
 800158c:	497c      	ldr	r1, [pc, #496]	; (8001780 <main+0x470>)
 800158e:	487d      	ldr	r0, [pc, #500]	; (8001784 <main+0x474>)
 8001590:	f004 fbc0 	bl	8005d14 <HAL_UART_Transmit>

				  sprintf(uartTXBf, WR_C_PUPDR); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 8001594:	4982      	ldr	r1, [pc, #520]	; (80017a0 <main+0x490>)
 8001596:	487a      	ldr	r0, [pc, #488]	; (8001780 <main+0x470>)
 8001598:	f005 fea2 	bl	80072e0 <siprintf>
 800159c:	4878      	ldr	r0, [pc, #480]	; (8001780 <main+0x470>)
 800159e:	f7fe fe3f 	bl	8000220 <strlen>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	230a      	movs	r3, #10
 80015a8:	4975      	ldr	r1, [pc, #468]	; (8001780 <main+0x470>)
 80015aa:	4876      	ldr	r0, [pc, #472]	; (8001784 <main+0x474>)
 80015ac:	f004 fbb2 	bl	8005d14 <HAL_UART_Transmit>

				  sprintf(uartTXBf, WR_C_OPP); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 80015b0:	497c      	ldr	r1, [pc, #496]	; (80017a4 <main+0x494>)
 80015b2:	4873      	ldr	r0, [pc, #460]	; (8001780 <main+0x470>)
 80015b4:	f005 fe94 	bl	80072e0 <siprintf>
 80015b8:	4871      	ldr	r0, [pc, #452]	; (8001780 <main+0x470>)
 80015ba:	f7fe fe31 	bl	8000220 <strlen>
 80015be:	4603      	mov	r3, r0
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	230a      	movs	r3, #10
 80015c4:	496e      	ldr	r1, [pc, #440]	; (8001780 <main+0x470>)
 80015c6:	486f      	ldr	r0, [pc, #444]	; (8001784 <main+0x474>)
 80015c8:	f004 fba4 	bl	8005d14 <HAL_UART_Transmit>

				  sprintf(uartTXBf, WR_C_OOD); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 80015cc:	4976      	ldr	r1, [pc, #472]	; (80017a8 <main+0x498>)
 80015ce:	486c      	ldr	r0, [pc, #432]	; (8001780 <main+0x470>)
 80015d0:	f005 fe86 	bl	80072e0 <siprintf>
 80015d4:	486a      	ldr	r0, [pc, #424]	; (8001780 <main+0x470>)
 80015d6:	f7fe fe23 	bl	8000220 <strlen>
 80015da:	4603      	mov	r3, r0
 80015dc:	b29a      	uxth	r2, r3
 80015de:	230a      	movs	r3, #10
 80015e0:	4967      	ldr	r1, [pc, #412]	; (8001780 <main+0x470>)
 80015e2:	4868      	ldr	r0, [pc, #416]	; (8001784 <main+0x474>)
 80015e4:	f004 fb96 	bl	8005d14 <HAL_UART_Transmit>
			  }
	  		  ////

	  		 }// timestamp_one

	  	  if(flag_gpioselftest){
 80015e8:	4b70      	ldr	r3, [pc, #448]	; (80017ac <main+0x49c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00d      	beq.n	800160c <main+0x2fc>
	  		  //// delay wait for button release
	  		  if (HAL_GetTick() >= timestamp_selftestdelay){
 80015f0:	f000 ff96 	bl	8002520 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	4b6e      	ldr	r3, [pc, #440]	; (80017b0 <main+0x4a0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d306      	bcc.n	800160c <main+0x2fc>

	  			  VR_Cli.Mark.Flag_ger = VRF_GPIO_Runalltest;
 80015fe:	4b6d      	ldr	r3, [pc, #436]	; (80017b4 <main+0x4a4>)
 8001600:	2202      	movs	r2, #2
 8001602:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	  			  flag_gpioselftest = 0;
 8001606:	4b69      	ldr	r3, [pc, #420]	; (80017ac <main+0x49c>)
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
	  		  }
	  	  } //// flag_gpioselftest

	  	//// Flag run all test
	  if(VR_Cli.Mark.Flag_ger == VRF_GPIO_Runalltest){
 800160c:	4b69      	ldr	r3, [pc, #420]	; (80017b4 <main+0x4a4>)
 800160e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001612:	2b02      	cmp	r3, #2
 8001614:	f47f aeba 	bne.w	800138c <main+0x7c>
		  counter_flagger++;
 8001618:	4b67      	ldr	r3, [pc, #412]	; (80017b8 <main+0x4a8>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	3301      	adds	r3, #1
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b65      	ldr	r3, [pc, #404]	; (80017b8 <main+0x4a8>)
 8001622:	701a      	strb	r2, [r3, #0]

		  ////record default GPIO setup before modified in testscript
		  gpio_rec_mode[0] = GPIOA->MODER;
 8001624:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a64      	ldr	r2, [pc, #400]	; (80017bc <main+0x4ac>)
 800162c:	6013      	str	r3, [r2, #0]
		  gpio_rec_pupdr[0] = GPIOA->PUPDR;
 800162e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	4a62      	ldr	r2, [pc, #392]	; (80017c0 <main+0x4b0>)
 8001636:	6013      	str	r3, [r2, #0]

		  //// Run GPIO Testscript all here or run before While
		  VR_Cli.Mark.PA_PUPDR = gpio_selftest_input_pupdr_1(GPIOA, List_GPIOA);
 8001638:	4962      	ldr	r1, [pc, #392]	; (80017c4 <main+0x4b4>)
 800163a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163e:	f7ff fcad 	bl	8000f9c <gpio_selftest_input_pupdr_1>
 8001642:	4603      	mov	r3, r0
 8001644:	4a5b      	ldr	r2, [pc, #364]	; (80017b4 <main+0x4a4>)
 8001646:	6053      	str	r3, [r2, #4]
		  VR_Cli.Mark.PB_PUPDR = gpio_selftest_input_pupdr_1(GPIOB, List_GPIOB);
 8001648:	495f      	ldr	r1, [pc, #380]	; (80017c8 <main+0x4b8>)
 800164a:	4860      	ldr	r0, [pc, #384]	; (80017cc <main+0x4bc>)
 800164c:	f7ff fca6 	bl	8000f9c <gpio_selftest_input_pupdr_1>
 8001650:	4603      	mov	r3, r0
 8001652:	4a58      	ldr	r2, [pc, #352]	; (80017b4 <main+0x4a4>)
 8001654:	6113      	str	r3, [r2, #16]
		  VR_Cli.Mark.PC_PUPDR = gpio_selftest_input_pupdr_1(GPIOC, List_GPIOC);
 8001656:	495e      	ldr	r1, [pc, #376]	; (80017d0 <main+0x4c0>)
 8001658:	485e      	ldr	r0, [pc, #376]	; (80017d4 <main+0x4c4>)
 800165a:	f7ff fc9f 	bl	8000f9c <gpio_selftest_input_pupdr_1>
 800165e:	4603      	mov	r3, r0
 8001660:	4a54      	ldr	r2, [pc, #336]	; (80017b4 <main+0x4a4>)
 8001662:	61d3      	str	r3, [r2, #28]

		  HAL_Delay(5);
 8001664:	2005      	movs	r0, #5
 8001666:	f000 ff67 	bl	8002538 <HAL_Delay>

		  VR_Cli.Mark.PA_OUT_PP = gpio_selftest_output_pp_1(GPIOA, List_GPIOA);
 800166a:	4956      	ldr	r1, [pc, #344]	; (80017c4 <main+0x4b4>)
 800166c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001670:	f7ff fd27 	bl	80010c2 <gpio_selftest_output_pp_1>
 8001674:	4603      	mov	r3, r0
 8001676:	4a4f      	ldr	r2, [pc, #316]	; (80017b4 <main+0x4a4>)
 8001678:	6093      	str	r3, [r2, #8]
		  VR_Cli.Mark.PB_OUT_PP = gpio_selftest_output_pp_1(GPIOB, List_GPIOB);
 800167a:	4953      	ldr	r1, [pc, #332]	; (80017c8 <main+0x4b8>)
 800167c:	4853      	ldr	r0, [pc, #332]	; (80017cc <main+0x4bc>)
 800167e:	f7ff fd20 	bl	80010c2 <gpio_selftest_output_pp_1>
 8001682:	4603      	mov	r3, r0
 8001684:	4a4b      	ldr	r2, [pc, #300]	; (80017b4 <main+0x4a4>)
 8001686:	6153      	str	r3, [r2, #20]
		  VR_Cli.Mark.PC_OUT_PP = gpio_selftest_output_pp_1(GPIOC, List_GPIOC);
 8001688:	4951      	ldr	r1, [pc, #324]	; (80017d0 <main+0x4c0>)
 800168a:	4852      	ldr	r0, [pc, #328]	; (80017d4 <main+0x4c4>)
 800168c:	f7ff fd19 	bl	80010c2 <gpio_selftest_output_pp_1>
 8001690:	4603      	mov	r3, r0
 8001692:	4a48      	ldr	r2, [pc, #288]	; (80017b4 <main+0x4a4>)
 8001694:	6213      	str	r3, [r2, #32]

		  HAL_Delay(5);
 8001696:	2005      	movs	r0, #5
 8001698:	f000 ff4e 	bl	8002538 <HAL_Delay>

		  VR_Cli.Mark.PA_OUT_OD = gpio_selftest_output_od_1(GPIOA, List_GPIOA);
 800169c:	4949      	ldr	r1, [pc, #292]	; (80017c4 <main+0x4b4>)
 800169e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a2:	f7ff fd8f 	bl	80011c4 <gpio_selftest_output_od_1>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4a42      	ldr	r2, [pc, #264]	; (80017b4 <main+0x4a4>)
 80016aa:	60d3      	str	r3, [r2, #12]
		  VR_Cli.Mark.PB_OUT_OD = gpio_selftest_output_od_1(GPIOB, List_GPIOB);
 80016ac:	4946      	ldr	r1, [pc, #280]	; (80017c8 <main+0x4b8>)
 80016ae:	4847      	ldr	r0, [pc, #284]	; (80017cc <main+0x4bc>)
 80016b0:	f7ff fd88 	bl	80011c4 <gpio_selftest_output_od_1>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4a3f      	ldr	r2, [pc, #252]	; (80017b4 <main+0x4a4>)
 80016b8:	6193      	str	r3, [r2, #24]
		  VR_Cli.Mark.PC_OUT_OD = gpio_selftest_output_od_1(GPIOC, List_GPIOC);
 80016ba:	4945      	ldr	r1, [pc, #276]	; (80017d0 <main+0x4c0>)
 80016bc:	4845      	ldr	r0, [pc, #276]	; (80017d4 <main+0x4c4>)
 80016be:	f7ff fd81 	bl	80011c4 <gpio_selftest_output_od_1>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4a3b      	ldr	r2, [pc, #236]	; (80017b4 <main+0x4a4>)
 80016c6:	6253      	str	r3, [r2, #36]	; 0x24

		  //// revert back, enable to send UART again after crashed in testscript
		  GPIOA->MODER = gpio_rec_mode[0] ;
 80016c8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016cc:	4b3b      	ldr	r3, [pc, #236]	; (80017bc <main+0x4ac>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6013      	str	r3, [r2, #0]
		  GPIOA->PUPDR = gpio_rec_pupdr[0] ;
 80016d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016d6:	4b3a      	ldr	r3, [pc, #232]	; (80017c0 <main+0x4b0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	60d3      	str	r3, [r2, #12]

		  //// clear previous buffer
		  resetgpio_char();
 80016dc:	f000 fb96 	bl	8001e0c <resetgpio_char>
		  ////Compare_pin()
		  Compare_pin_32(VR_Cli.Mark.PA_PUPDR, List_GPIOA, 0, WR_A_PUPDR);
 80016e0:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <main+0x4a4>)
 80016e2:	6858      	ldr	r0, [r3, #4]
 80016e4:	4b28      	ldr	r3, [pc, #160]	; (8001788 <main+0x478>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	4936      	ldr	r1, [pc, #216]	; (80017c4 <main+0x4b4>)
 80016ea:	f000 fad5 	bl	8001c98 <Compare_pin_32>
		  Compare_pin_32(VR_Cli.Mark.PA_OUT_PP, List_GPIOA, 0, WR_A_OPP);
 80016ee:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <main+0x4a4>)
 80016f0:	6898      	ldr	r0, [r3, #8]
 80016f2:	4b26      	ldr	r3, [pc, #152]	; (800178c <main+0x47c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	4933      	ldr	r1, [pc, #204]	; (80017c4 <main+0x4b4>)
 80016f8:	f000 face 	bl	8001c98 <Compare_pin_32>
		  Compare_pin_32(VR_Cli.Mark.PA_OUT_OD, List_GPIOA, 0, WR_A_OOD);
 80016fc:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <main+0x4a4>)
 80016fe:	68d8      	ldr	r0, [r3, #12]
 8001700:	4b23      	ldr	r3, [pc, #140]	; (8001790 <main+0x480>)
 8001702:	2200      	movs	r2, #0
 8001704:	492f      	ldr	r1, [pc, #188]	; (80017c4 <main+0x4b4>)
 8001706:	f000 fac7 	bl	8001c98 <Compare_pin_32>

		  Compare_pin_32(VR_Cli.Mark.PB_PUPDR, List_GPIOB, 1,  WR_B_PUPDR);
 800170a:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <main+0x4a4>)
 800170c:	6918      	ldr	r0, [r3, #16]
 800170e:	4b21      	ldr	r3, [pc, #132]	; (8001794 <main+0x484>)
 8001710:	2201      	movs	r2, #1
 8001712:	492d      	ldr	r1, [pc, #180]	; (80017c8 <main+0x4b8>)
 8001714:	f000 fac0 	bl	8001c98 <Compare_pin_32>
		  Compare_pin_32(VR_Cli.Mark.PB_OUT_PP, List_GPIOB, 1, WR_B_OPP);
 8001718:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <main+0x4a4>)
 800171a:	6958      	ldr	r0, [r3, #20]
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <main+0x488>)
 800171e:	2201      	movs	r2, #1
 8001720:	4929      	ldr	r1, [pc, #164]	; (80017c8 <main+0x4b8>)
 8001722:	f000 fab9 	bl	8001c98 <Compare_pin_32>
		  Compare_pin_32(VR_Cli.Mark.PB_OUT_OD, List_GPIOB, 1, WR_B_OOD);
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <main+0x4a4>)
 8001728:	6998      	ldr	r0, [r3, #24]
 800172a:	4b1c      	ldr	r3, [pc, #112]	; (800179c <main+0x48c>)
 800172c:	2201      	movs	r2, #1
 800172e:	4926      	ldr	r1, [pc, #152]	; (80017c8 <main+0x4b8>)
 8001730:	f000 fab2 	bl	8001c98 <Compare_pin_32>

		  Compare_pin_32(VR_Cli.Mark.PC_PUPDR, List_GPIOC, 2, WR_C_PUPDR);
 8001734:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <main+0x4a4>)
 8001736:	69d8      	ldr	r0, [r3, #28]
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <main+0x490>)
 800173a:	2202      	movs	r2, #2
 800173c:	4924      	ldr	r1, [pc, #144]	; (80017d0 <main+0x4c0>)
 800173e:	f000 faab 	bl	8001c98 <Compare_pin_32>
		  Compare_pin_32(VR_Cli.Mark.PC_OUT_PP, List_GPIOC, 2, WR_C_OPP);
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <main+0x4a4>)
 8001744:	6a18      	ldr	r0, [r3, #32]
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <main+0x494>)
 8001748:	2202      	movs	r2, #2
 800174a:	4921      	ldr	r1, [pc, #132]	; (80017d0 <main+0x4c0>)
 800174c:	f000 faa4 	bl	8001c98 <Compare_pin_32>
		  Compare_pin_32(VR_Cli.Mark.PC_OUT_OD, List_GPIOC, 2, WR_C_OOD);
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <main+0x4a4>)
 8001752:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <main+0x498>)
 8001756:	2202      	movs	r2, #2
 8001758:	491d      	ldr	r1, [pc, #116]	; (80017d0 <main+0x4c0>)
 800175a:	f000 fa9d 	bl	8001c98 <Compare_pin_32>

		  HAL_Delay(10);
 800175e:	200a      	movs	r0, #10
 8001760:	f000 feea 	bl	8002538 <HAL_Delay>

		  CheckAllPass();
 8001764:	f000 fb9e 	bl	8001ea4 <CheckAllPass>


		  //Tx_UART_Verita_Command(&huart6, VRC_Next, 0x00);
		  VR_Cli.Mark.Flag_ger = VRF_SendALLTestData;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <main+0x4a4>)
 800176a:	2204      	movs	r2, #4
 800176c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		  VR_Cli.Mark.Flag_ger = 0;
 8001770:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <main+0x4a4>)
 8001772:	2200      	movs	r2, #0
 8001774:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	  if(HAL_GetTick() >= timestamp_one){
 8001778:	e608      	b.n	800138c <main+0x7c>
 800177a:	bf00      	nop
 800177c:	080098d0 	.word	0x080098d0
 8001780:	200005c4 	.word	0x200005c4
 8001784:	2000048c 	.word	0x2000048c
 8001788:	2000005c 	.word	0x2000005c
 800178c:	200000d4 	.word	0x200000d4
 8001790:	2000014c 	.word	0x2000014c
 8001794:	20000084 	.word	0x20000084
 8001798:	200000fc 	.word	0x200000fc
 800179c:	20000174 	.word	0x20000174
 80017a0:	200000ac 	.word	0x200000ac
 80017a4:	20000124 	.word	0x20000124
 80017a8:	2000019c 	.word	0x2000019c
 80017ac:	20000544 	.word	0x20000544
 80017b0:	20000540 	.word	0x20000540
 80017b4:	20000560 	.word	0x20000560
 80017b8:	20000539 	.word	0x20000539
 80017bc:	20000548 	.word	0x20000548
 80017c0:	20000554 	.word	0x20000554
 80017c4:	20000000 	.word	0x20000000
 80017c8:	2000001c 	.word	0x2000001c
 80017cc:	48000400 	.word	0x48000400
 80017d0:	2000003c 	.word	0x2000003c
 80017d4:	48000800 	.word	0x48000800

080017d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b094      	sub	sp, #80	; 0x50
 80017dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017de:	f107 0318 	add.w	r3, r7, #24
 80017e2:	2238      	movs	r2, #56	; 0x38
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f005 f908 	bl	80069fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
 80017f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f003 fa04 	bl	8004c08 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001800:	2302      	movs	r3, #2
 8001802:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800180a:	2340      	movs	r3, #64	; 0x40
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180e:	2302      	movs	r3, #2
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001812:	2302      	movs	r3, #2
 8001814:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001816:	2304      	movs	r3, #4
 8001818:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800181a:	2355      	movs	r3, #85	; 0x55
 800181c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800181e:	2302      	movs	r3, #2
 8001820:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001822:	2302      	movs	r3, #2
 8001824:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001826:	2302      	movs	r3, #2
 8001828:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182a:	f107 0318 	add.w	r3, r7, #24
 800182e:	4618      	mov	r0, r3
 8001830:	f003 fa9e 	bl	8004d70 <HAL_RCC_OscConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800183a:	f000 fbd9 	bl	8001ff0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183e:	230f      	movs	r3, #15
 8001840:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001842:	2303      	movs	r3, #3
 8001844:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2104      	movs	r1, #4
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fda2 	bl	80053a0 <HAL_RCC_ClockConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001862:	f000 fbc5 	bl	8001ff0 <Error_Handler>
  }
}
 8001866:	bf00      	nop
 8001868:	3750      	adds	r7, #80	; 0x50
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08c      	sub	sp, #48	; 0x30
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	2220      	movs	r2, #32
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f005 f8b7 	bl	80069fc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800188e:	4b3a      	ldr	r3, [pc, #232]	; (8001978 <MX_ADC1_Init+0x108>)
 8001890:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001894:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001896:	4b38      	ldr	r3, [pc, #224]	; (8001978 <MX_ADC1_Init+0x108>)
 8001898:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800189c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800189e:	4b36      	ldr	r3, [pc, #216]	; (8001978 <MX_ADC1_Init+0x108>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018a4:	4b34      	ldr	r3, [pc, #208]	; (8001978 <MX_ADC1_Init+0x108>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80018aa:	4b33      	ldr	r3, [pc, #204]	; (8001978 <MX_ADC1_Init+0x108>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80018b0:	4b31      	ldr	r3, [pc, #196]	; (8001978 <MX_ADC1_Init+0x108>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018b6:	4b30      	ldr	r3, [pc, #192]	; (8001978 <MX_ADC1_Init+0x108>)
 80018b8:	2204      	movs	r2, #4
 80018ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018bc:	4b2e      	ldr	r3, [pc, #184]	; (8001978 <MX_ADC1_Init+0x108>)
 80018be:	2200      	movs	r2, #0
 80018c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018c2:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <MX_ADC1_Init+0x108>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80018c8:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <MX_ADC1_Init+0x108>)
 80018ca:	2202      	movs	r2, #2
 80018cc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018ce:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <MX_ADC1_Init+0x108>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018d6:	4b28      	ldr	r3, [pc, #160]	; (8001978 <MX_ADC1_Init+0x108>)
 80018d8:	2200      	movs	r2, #0
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018dc:	4b26      	ldr	r3, [pc, #152]	; (8001978 <MX_ADC1_Init+0x108>)
 80018de:	2200      	movs	r2, #0
 80018e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80018e2:	4b25      	ldr	r3, [pc, #148]	; (8001978 <MX_ADC1_Init+0x108>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018ea:	4b23      	ldr	r3, [pc, #140]	; (8001978 <MX_ADC1_Init+0x108>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80018f0:	4b21      	ldr	r3, [pc, #132]	; (8001978 <MX_ADC1_Init+0x108>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018f8:	481f      	ldr	r0, [pc, #124]	; (8001978 <MX_ADC1_Init+0x108>)
 80018fa:	f001 f883 	bl	8002a04 <HAL_ADC_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001904:	f000 fb74 	bl	8001ff0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800190c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001910:	4619      	mov	r1, r3
 8001912:	4819      	ldr	r0, [pc, #100]	; (8001978 <MX_ADC1_Init+0x108>)
 8001914:	f002 fb22 	bl	8003f5c <HAL_ADCEx_MultiModeConfigChannel>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800191e:	f000 fb67 	bl	8001ff0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <MX_ADC1_Init+0x10c>)
 8001924:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001926:	2306      	movs	r3, #6
 8001928:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800192a:	2301      	movs	r3, #1
 800192c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800192e:	237f      	movs	r3, #127	; 0x7f
 8001930:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001932:	2304      	movs	r3, #4
 8001934:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	4619      	mov	r1, r3
 800193e:	480e      	ldr	r0, [pc, #56]	; (8001978 <MX_ADC1_Init+0x108>)
 8001940:	f001 fd7e 	bl	8003440 <HAL_ADC_ConfigChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800194a:	f000 fb51 	bl	8001ff0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_ADC1_Init+0x110>)
 8001950:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001952:	230c      	movs	r3, #12
 8001954:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001956:	2304      	movs	r3, #4
 8001958:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	4619      	mov	r1, r3
 800195e:	4806      	ldr	r0, [pc, #24]	; (8001978 <MX_ADC1_Init+0x108>)
 8001960:	f001 fd6e 	bl	8003440 <HAL_ADC_ConfigChannel>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800196a:	f000 fb41 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	3730      	adds	r7, #48	; 0x30
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200003c0 	.word	0x200003c0
 800197c:	c3210000 	.word	0xc3210000
 8001980:	cb840000 	.word	0xcb840000

08001984 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001988:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <MX_LPUART1_UART_Init+0x8c>)
 800198a:	4a22      	ldr	r2, [pc, #136]	; (8001a14 <MX_LPUART1_UART_Init+0x90>)
 800198c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <MX_LPUART1_UART_Init+0x8c>)
 8001990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001994:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <MX_LPUART1_UART_Init+0x8c>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800199c:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <MX_LPUART1_UART_Init+0x8c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <MX_LPUART1_UART_Init+0x8c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <MX_LPUART1_UART_Init+0x8c>)
 80019aa:	220c      	movs	r2, #12
 80019ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <MX_LPUART1_UART_Init+0x8c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <MX_LPUART1_UART_Init+0x8c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <MX_LPUART1_UART_Init+0x8c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <MX_LPUART1_UART_Init+0x8c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80019c6:	4812      	ldr	r0, [pc, #72]	; (8001a10 <MX_LPUART1_UART_Init+0x8c>)
 80019c8:	f004 f954 	bl	8005c74 <HAL_UART_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80019d2:	f000 fb0d 	bl	8001ff0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019d6:	2100      	movs	r1, #0
 80019d8:	480d      	ldr	r0, [pc, #52]	; (8001a10 <MX_LPUART1_UART_Init+0x8c>)
 80019da:	f004 ff1b 	bl	8006814 <HAL_UARTEx_SetTxFifoThreshold>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80019e4:	f000 fb04 	bl	8001ff0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e8:	2100      	movs	r1, #0
 80019ea:	4809      	ldr	r0, [pc, #36]	; (8001a10 <MX_LPUART1_UART_Init+0x8c>)
 80019ec:	f004 ff50 	bl	8006890 <HAL_UARTEx_SetRxFifoThreshold>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80019f6:	f000 fafb 	bl	8001ff0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_LPUART1_UART_Init+0x8c>)
 80019fc:	f004 fed1 	bl	80067a2 <HAL_UARTEx_DisableFifoMode>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001a06:	f000 faf3 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	2000048c 	.word	0x2000048c
 8001a14:	40008000 	.word	0x40008000

08001a18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <MX_DMA_Init+0x50>)
 8001a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a22:	4a11      	ldr	r2, [pc, #68]	; (8001a68 <MX_DMA_Init+0x50>)
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	6493      	str	r3, [r2, #72]	; 0x48
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_DMA_Init+0x50>)
 8001a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_DMA_Init+0x50>)
 8001a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <MX_DMA_Init+0x50>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6493      	str	r3, [r2, #72]	; 0x48
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_DMA_Init+0x50>)
 8001a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	200b      	movs	r0, #11
 8001a54:	f002 fc65 	bl	8004322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a58:	200b      	movs	r0, #11
 8001a5a:	f002 fc7c 	bl	8004356 <HAL_NVIC_EnableIRQ>

}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000

08001a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a82:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a86:	4a2e      	ldr	r2, [pc, #184]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001a88:	f043 0304 	orr.w	r3, r3, #4
 8001a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8e:	4b2c      	ldr	r3, [pc, #176]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a9a:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	4a28      	ldr	r2, [pc, #160]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001aa0:	f043 0320 	orr.w	r3, r3, #32
 8001aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa6:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	f003 0320 	and.w	r3, r3, #32
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	4a22      	ldr	r2, [pc, #136]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	4a1c      	ldr	r2, [pc, #112]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2120      	movs	r1, #32
 8001ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aea:	f003 f843 	bl	8004b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001af4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	480f      	ldr	r0, [pc, #60]	; (8001b44 <MX_GPIO_Init+0xd8>)
 8001b06:	f002 feb3 	bl	8004870 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b24:	f002 fea4 	bl	8004870 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	2028      	movs	r0, #40	; 0x28
 8001b2e:	f002 fbf8 	bl	8004322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b32:	2028      	movs	r0, #40	; 0x28
 8001b34:	f002 fc0f 	bl	8004356 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b38:	bf00      	nop
 8001b3a:	3728      	adds	r7, #40	; 0x28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000
 8001b44:	48000800 	.word	0x48000800

08001b48 <ADCTVoltar>:
//
//	return tmpbf;
//}


float ADCTVoltar(uint16_t btt, float vref){
 8001b48:	b5b0      	push	{r4, r5, r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	ed87 0a00 	vstr	s0, [r7]
 8001b54:	80fb      	strh	r3, [r7, #6]
	// convert 0-4096 ADC bit -> 0-Vref from device(3.3V, 3.25V)
	return (btt /4096.0) * vref;
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fd0b 	bl	8000574 <__aeabi_i2d>
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <ADCTVoltar+0x58>)
 8001b64:	f7fe fe9a 	bl	800089c <__aeabi_ddiv>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4614      	mov	r4, r2
 8001b6e:	461d      	mov	r5, r3
 8001b70:	6838      	ldr	r0, [r7, #0]
 8001b72:	f7fe fd11 	bl	8000598 <__aeabi_f2d>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	f7fe fd63 	bl	8000648 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f7ff f835 	bl	8000bf8 <__aeabi_d2f>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	ee07 3a90 	vmov	s15, r3
}
 8001b94:	eeb0 0a67 	vmov.f32	s0, s15
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40b00000 	.word	0x40b00000

08001ba4 <Tempequat_G4>:
//float TempEquat(float Vs){
//	//Vs = V tmp read , V25= 0.76V, Avg_slope = 2.5 mV
//	return ((Vs - 0.76)/(0.0025)) + 25.0; //2.5*0.001
//}

float Tempequat_G4(int16_t data, float vref){
 8001ba4:	b5b0      	push	{r4, r5, r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	ed87 0a00 	vstr	s0, [r7]
 8001bb0:	80fb      	strh	r3, [r7, #6]
	static int16_t TSCALT1 = TEMPSENSOR_CAL1_TEMP;
	static int16_t TSCALT2 = TEMPSENSOR_CAL2_TEMP;
	int16_t TCAL1 = (int32_t) *TEMPSENSOR_CAL1_ADDR; // 1037 read the ST factory calibrate value from the address
 8001bb2:	4b34      	ldr	r3, [pc, #208]	; (8001c84 <Tempequat_G4+0xe0>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	82fb      	strh	r3, [r7, #22]
	int16_t TCAL2 = (int32_t) *TEMPSENSOR_CAL2_ADDR; // 1378
 8001bb8:	4b33      	ldr	r3, [pc, #204]	; (8001c88 <Tempequat_G4+0xe4>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	82bb      	strh	r3, [r7, #20]

	float set1 = ((TSCALT2 - TSCALT1)*1.0) / ((TCAL2 - TCAL1)*1.0) ;
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <Tempequat_G4+0xe8>)
 8001bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b32      	ldr	r3, [pc, #200]	; (8001c90 <Tempequat_G4+0xec>)
 8001bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fcd0 	bl	8000574 <__aeabi_i2d>
 8001bd4:	4604      	mov	r4, r0
 8001bd6:	460d      	mov	r5, r1
 8001bd8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001bdc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fcc6 	bl	8000574 <__aeabi_i2d>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4620      	mov	r0, r4
 8001bee:	4629      	mov	r1, r5
 8001bf0:	f7fe fe54 	bl	800089c <__aeabi_ddiv>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f7fe fffc 	bl	8000bf8 <__aeabi_d2f>
 8001c00:	4603      	mov	r3, r0
 8001c02:	613b      	str	r3, [r7, #16]
	float set2 = ( data * (vref/3.0) )-TCAL1;
 8001c04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fcb3 	bl	8000574 <__aeabi_i2d>
 8001c0e:	4604      	mov	r4, r0
 8001c10:	460d      	mov	r5, r1
 8001c12:	6838      	ldr	r0, [r7, #0]
 8001c14:	f7fe fcc0 	bl	8000598 <__aeabi_f2d>
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <Tempequat_G4+0xf0>)
 8001c1e:	f7fe fe3d 	bl	800089c <__aeabi_ddiv>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4620      	mov	r0, r4
 8001c28:	4629      	mov	r1, r5
 8001c2a:	f7fe fd0d 	bl	8000648 <__aeabi_dmul>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4614      	mov	r4, r2
 8001c34:	461d      	mov	r5, r3
 8001c36:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc9a 	bl	8000574 <__aeabi_i2d>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4620      	mov	r0, r4
 8001c46:	4629      	mov	r1, r5
 8001c48:	f7fe fb46 	bl	80002d8 <__aeabi_dsub>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	f7fe ffd0 	bl	8000bf8 <__aeabi_d2f>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60fb      	str	r3, [r7, #12]

	return set1 * set2 + 30 + fakeoffset; //// + 12 is fake offset
 8001c5c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c60:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c68:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001c6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c70:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001c74:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001c78:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bdb0      	pop	{r4, r5, r7, pc}
 8001c82:	bf00      	nop
 8001c84:	1fff75a8 	.word	0x1fff75a8
 8001c88:	1fff75ca 	.word	0x1fff75ca
 8001c8c:	200001c4 	.word	0x200001c4
 8001c90:	200001c6 	.word	0x200001c6
 8001c94:	40080000 	.word	0x40080000

08001c98 <Compare_pin_32>:
//// GPIO Testscript
void Compare_pin_32(uint32_t raw32, uint16_t *Lista_GPIOx, uint8_t gpst,char *outchar){
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	71fb      	strb	r3, [r7, #7]
	 * 	@param raw32       rawuint32_t data given from gpio_testscript functions
	 * 	@param Lista_GPIOx List of GPIOs bank need to be checked
	 * 	@param gpst        select report type [0 - PA_] [1 - PB_] [2 - PC_]
	 * 	@param outchar     char for record the compare result report
	 * */
	uint16_t raw32_N = raw32 & 0xFFFF;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	83bb      	strh	r3, [r7, #28]
	uint16_t raw32_P = (raw32 >> 16) & 0xFFFF;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	0c1b      	lsrs	r3, r3, #16
 8001cb0:	837b      	strh	r3, [r7, #26]
	uint8_t iaa, iab, cntr_w = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	77fb      	strb	r3, [r7, #31]
	char aadd[6];

	for(register int i = 0;i < 16;i++){
 8001cb6:	2400      	movs	r4, #0
 8001cb8:	e081      	b.n	8001dbe <Compare_pin_32+0x126>
		if(Lista_GPIOx[i] >= 20){break;}
 8001cba:	4623      	mov	r3, r4
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	2b13      	cmp	r3, #19
 8001cc6:	d87e      	bhi.n	8001dc6 <Compare_pin_32+0x12e>

		iaa = (raw32_N >> Lista_GPIOx[i]) & 0x01;
 8001cc8:	8bbb      	ldrh	r3, [r7, #28]
 8001cca:	4622      	mov	r2, r4
 8001ccc:	0052      	lsls	r2, r2, #1
 8001cce:	68b9      	ldr	r1, [r7, #8]
 8001cd0:	440a      	add	r2, r1
 8001cd2:	8812      	ldrh	r2, [r2, #0]
 8001cd4:	4113      	asrs	r3, r2
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	767b      	strb	r3, [r7, #25]
		iab = (raw32_P >> Lista_GPIOx[i]) & 0x01;
 8001cde:	8b7b      	ldrh	r3, [r7, #26]
 8001ce0:	4622      	mov	r2, r4
 8001ce2:	0052      	lsls	r2, r2, #1
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	440a      	add	r2, r1
 8001ce8:	8812      	ldrh	r2, [r2, #0]
 8001cea:	4113      	asrs	r3, r2
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	763b      	strb	r3, [r7, #24]
		 if(iaa == iab){
 8001cf4:	7e7a      	ldrb	r2, [r7, #25]
 8001cf6:	7e3b      	ldrb	r3, [r7, #24]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d15f      	bne.n	8001dbc <Compare_pin_32+0x124>

			 cntr_w++; // count if match
 8001cfc:	7ffb      	ldrb	r3, [r7, #31]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	77fb      	strb	r3, [r7, #31]

			 //// add problem pin
			 switch(gpst){
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d00f      	beq.n	8001d28 <Compare_pin_32+0x90>
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d01b      	beq.n	8001d44 <Compare_pin_32+0xac>
			 default:
			 case 0: // A
				 sprintf(aadd, "PA%d", (uint8_t)Lista_GPIOx[i]); //
 8001d0c:	4623      	mov	r3, r4
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	4413      	add	r3, r2
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f107 0310 	add.w	r3, r7, #16
 8001d1e:	4934      	ldr	r1, [pc, #208]	; (8001df0 <Compare_pin_32+0x158>)
 8001d20:	4618      	mov	r0, r3
 8001d22:	f005 fadd 	bl	80072e0 <siprintf>
				 break;
 8001d26:	e01b      	b.n	8001d60 <Compare_pin_32+0xc8>
			 case 1: // B
			 	 sprintf(aadd, "PB%d", (uint8_t)Lista_GPIOx[i]); //
 8001d28:	4623      	mov	r3, r4
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	4413      	add	r3, r2
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	f107 0310 	add.w	r3, r7, #16
 8001d3a:	492e      	ldr	r1, [pc, #184]	; (8001df4 <Compare_pin_32+0x15c>)
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f005 facf 	bl	80072e0 <siprintf>
			 	 break;
 8001d42:	e00d      	b.n	8001d60 <Compare_pin_32+0xc8>
			 case 2: // C
			 	 sprintf(aadd, "PC%d", (uint8_t)Lista_GPIOx[i]); //
 8001d44:	4623      	mov	r3, r4
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	f107 0310 	add.w	r3, r7, #16
 8001d56:	4928      	ldr	r1, [pc, #160]	; (8001df8 <Compare_pin_32+0x160>)
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f005 fac1 	bl	80072e0 <siprintf>
			 	 break;
 8001d5e:	bf00      	nop

			 }
			 strncat(outchar, aadd, 4);
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	2204      	movs	r2, #4
 8001d66:	4619      	mov	r1, r3
 8001d68:	6838      	ldr	r0, [r7, #0]
 8001d6a:	f005 fad9 	bl	8007320 <strncat>

			 //// add High, Low
			 if(iaa == 1){
 8001d6e:	7e7b      	ldrb	r3, [r7, #25]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d106      	bne.n	8001d82 <Compare_pin_32+0xea>
				 sprintf(aadd, "_H");
 8001d74:	f107 0310 	add.w	r3, r7, #16
 8001d78:	4920      	ldr	r1, [pc, #128]	; (8001dfc <Compare_pin_32+0x164>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f005 fab0 	bl	80072e0 <siprintf>
 8001d80:	e008      	b.n	8001d94 <Compare_pin_32+0xfc>
			 }else if(iaa == 0){
 8001d82:	7e7b      	ldrb	r3, [r7, #25]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d105      	bne.n	8001d94 <Compare_pin_32+0xfc>
				 sprintf(aadd, "_L");
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	491c      	ldr	r1, [pc, #112]	; (8001e00 <Compare_pin_32+0x168>)
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f005 faa6 	bl	80072e0 <siprintf>
			 }
			 strncat(outchar, aadd, 2);
 8001d94:	f107 0310 	add.w	r3, r7, #16
 8001d98:	2202      	movs	r2, #2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	6838      	ldr	r0, [r7, #0]
 8001d9e:	f005 fabf 	bl	8007320 <strncat>

			 //// add blank
			 sprintf(aadd, " ");
 8001da2:	f107 0310 	add.w	r3, r7, #16
 8001da6:	4917      	ldr	r1, [pc, #92]	; (8001e04 <Compare_pin_32+0x16c>)
 8001da8:	4618      	mov	r0, r3
 8001daa:	f005 fa99 	bl	80072e0 <siprintf>
			 strncat(outchar, aadd, 1);
 8001dae:	f107 0310 	add.w	r3, r7, #16
 8001db2:	2201      	movs	r2, #1
 8001db4:	4619      	mov	r1, r3
 8001db6:	6838      	ldr	r0, [r7, #0]
 8001db8:	f005 fab2 	bl	8007320 <strncat>
	for(register int i = 0;i < 16;i++){
 8001dbc:	3401      	adds	r4, #1
 8001dbe:	2c0f      	cmp	r4, #15
 8001dc0:	f77f af7b 	ble.w	8001cba <Compare_pin_32+0x22>
 8001dc4:	e000      	b.n	8001dc8 <Compare_pin_32+0x130>
		if(Lista_GPIOx[i] >= 20){break;}
 8001dc6:	bf00      	nop
		 }
	}

	if(!cntr_w){
 8001dc8:	7ffb      	ldrb	r3, [r7, #31]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10c      	bne.n	8001de8 <Compare_pin_32+0x150>
		sprintf(aadd, "_PASS");
 8001dce:	f107 0310 	add.w	r3, r7, #16
 8001dd2:	490d      	ldr	r1, [pc, #52]	; (8001e08 <Compare_pin_32+0x170>)
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f005 fa83 	bl	80072e0 <siprintf>
		strncat(outchar, aadd, 7);
 8001dda:	f107 0310 	add.w	r3, r7, #16
 8001dde:	2207      	movs	r2, #7
 8001de0:	4619      	mov	r1, r3
 8001de2:	6838      	ldr	r0, [r7, #0]
 8001de4:	f005 fa9c 	bl	8007320 <strncat>
	}
}
 8001de8:	bf00      	nop
 8001dea:	3724      	adds	r7, #36	; 0x24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd90      	pop	{r4, r7, pc}
 8001df0:	0800992c 	.word	0x0800992c
 8001df4:	08009934 	.word	0x08009934
 8001df8:	0800993c 	.word	0x0800993c
 8001dfc:	08009944 	.word	0x08009944
 8001e00:	08009948 	.word	0x08009948
 8001e04:	0800994c 	.word	0x0800994c
 8001e08:	08009950 	.word	0x08009950

08001e0c <resetgpio_char>:

//// GPIO Testscript
void resetgpio_char(){
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0

	sprintf(WR_A_PUPDR, "\r\nA_PUR: ");
 8001e10:	4912      	ldr	r1, [pc, #72]	; (8001e5c <resetgpio_char+0x50>)
 8001e12:	4813      	ldr	r0, [pc, #76]	; (8001e60 <resetgpio_char+0x54>)
 8001e14:	f005 fa64 	bl	80072e0 <siprintf>
	sprintf(WR_B_PUPDR, "\r\nB_PUR: ");
 8001e18:	4912      	ldr	r1, [pc, #72]	; (8001e64 <resetgpio_char+0x58>)
 8001e1a:	4813      	ldr	r0, [pc, #76]	; (8001e68 <resetgpio_char+0x5c>)
 8001e1c:	f005 fa60 	bl	80072e0 <siprintf>
	sprintf(WR_C_PUPDR, "\r\nC_PUR: ");
 8001e20:	4912      	ldr	r1, [pc, #72]	; (8001e6c <resetgpio_char+0x60>)
 8001e22:	4813      	ldr	r0, [pc, #76]	; (8001e70 <resetgpio_char+0x64>)
 8001e24:	f005 fa5c 	bl	80072e0 <siprintf>

	sprintf(WR_A_OPP, "\r\nA_OPP: ");
 8001e28:	4912      	ldr	r1, [pc, #72]	; (8001e74 <resetgpio_char+0x68>)
 8001e2a:	4813      	ldr	r0, [pc, #76]	; (8001e78 <resetgpio_char+0x6c>)
 8001e2c:	f005 fa58 	bl	80072e0 <siprintf>
	sprintf(WR_B_OPP, "\r\nB_OPP: ");
 8001e30:	4912      	ldr	r1, [pc, #72]	; (8001e7c <resetgpio_char+0x70>)
 8001e32:	4813      	ldr	r0, [pc, #76]	; (8001e80 <resetgpio_char+0x74>)
 8001e34:	f005 fa54 	bl	80072e0 <siprintf>
	sprintf(WR_C_OPP, "\r\nC_OPP: ");
 8001e38:	4912      	ldr	r1, [pc, #72]	; (8001e84 <resetgpio_char+0x78>)
 8001e3a:	4813      	ldr	r0, [pc, #76]	; (8001e88 <resetgpio_char+0x7c>)
 8001e3c:	f005 fa50 	bl	80072e0 <siprintf>

	sprintf(WR_A_OOD, "\r\nA_OOD: ");
 8001e40:	4912      	ldr	r1, [pc, #72]	; (8001e8c <resetgpio_char+0x80>)
 8001e42:	4813      	ldr	r0, [pc, #76]	; (8001e90 <resetgpio_char+0x84>)
 8001e44:	f005 fa4c 	bl	80072e0 <siprintf>
	sprintf(WR_B_OOD, "\r\nB_OOD: ");
 8001e48:	4912      	ldr	r1, [pc, #72]	; (8001e94 <resetgpio_char+0x88>)
 8001e4a:	4813      	ldr	r0, [pc, #76]	; (8001e98 <resetgpio_char+0x8c>)
 8001e4c:	f005 fa48 	bl	80072e0 <siprintf>
	sprintf(WR_C_OOD, "\r\nC_OOD: ");
 8001e50:	4912      	ldr	r1, [pc, #72]	; (8001e9c <resetgpio_char+0x90>)
 8001e52:	4813      	ldr	r0, [pc, #76]	; (8001ea0 <resetgpio_char+0x94>)
 8001e54:	f005 fa44 	bl	80072e0 <siprintf>
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	08009958 	.word	0x08009958
 8001e60:	2000005c 	.word	0x2000005c
 8001e64:	08009964 	.word	0x08009964
 8001e68:	20000084 	.word	0x20000084
 8001e6c:	08009970 	.word	0x08009970
 8001e70:	200000ac 	.word	0x200000ac
 8001e74:	0800997c 	.word	0x0800997c
 8001e78:	200000d4 	.word	0x200000d4
 8001e7c:	08009988 	.word	0x08009988
 8001e80:	200000fc 	.word	0x200000fc
 8001e84:	08009994 	.word	0x08009994
 8001e88:	20000124 	.word	0x20000124
 8001e8c:	080099a0 	.word	0x080099a0
 8001e90:	2000014c 	.word	0x2000014c
 8001e94:	080099ac 	.word	0x080099ac
 8001e98:	20000174 	.word	0x20000174
 8001e9c:	080099b8 	.word	0x080099b8
 8001ea0:	2000019c 	.word	0x2000019c

08001ea4 <CheckAllPass>:

//// GPIO Testscript
void CheckAllPass(){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	cnt_allpass = 0; // init reset
 8001ea8:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <CheckAllPass+0xd0>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]

	//// lazy Cat cat chekallpass
	////  \r,\n count as 1
	if(WR_A_PUPDR[9] == 95){cnt_allpass++;} //// 95 = "_"
 8001eae:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <CheckAllPass+0xd4>)
 8001eb0:	7a5b      	ldrb	r3, [r3, #9]
 8001eb2:	2b5f      	cmp	r3, #95	; 0x5f
 8001eb4:	d105      	bne.n	8001ec2 <CheckAllPass+0x1e>
 8001eb6:	4b2f      	ldr	r3, [pc, #188]	; (8001f74 <CheckAllPass+0xd0>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <CheckAllPass+0xd0>)
 8001ec0:	701a      	strb	r2, [r3, #0]
	if(WR_B_PUPDR[9] == 95){cnt_allpass++;}
 8001ec2:	4b2e      	ldr	r3, [pc, #184]	; (8001f7c <CheckAllPass+0xd8>)
 8001ec4:	7a5b      	ldrb	r3, [r3, #9]
 8001ec6:	2b5f      	cmp	r3, #95	; 0x5f
 8001ec8:	d105      	bne.n	8001ed6 <CheckAllPass+0x32>
 8001eca:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <CheckAllPass+0xd0>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <CheckAllPass+0xd0>)
 8001ed4:	701a      	strb	r2, [r3, #0]
	if(strlen(WR_C_PUPDR) <= 16 && WR_C_PUPDR[10] == 67){cnt_allpass++;}// PC_13
 8001ed6:	482a      	ldr	r0, [pc, #168]	; (8001f80 <CheckAllPass+0xdc>)
 8001ed8:	f7fe f9a2 	bl	8000220 <strlen>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b10      	cmp	r3, #16
 8001ee0:	d809      	bhi.n	8001ef6 <CheckAllPass+0x52>
 8001ee2:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <CheckAllPass+0xdc>)
 8001ee4:	7a9b      	ldrb	r3, [r3, #10]
 8001ee6:	2b43      	cmp	r3, #67	; 0x43
 8001ee8:	d105      	bne.n	8001ef6 <CheckAllPass+0x52>
 8001eea:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <CheckAllPass+0xd0>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <CheckAllPass+0xd0>)
 8001ef4:	701a      	strb	r2, [r3, #0]

	if(WR_A_OPP[9] == 95){cnt_allpass++;}
 8001ef6:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <CheckAllPass+0xe0>)
 8001ef8:	7a5b      	ldrb	r3, [r3, #9]
 8001efa:	2b5f      	cmp	r3, #95	; 0x5f
 8001efc:	d105      	bne.n	8001f0a <CheckAllPass+0x66>
 8001efe:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <CheckAllPass+0xd0>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	3301      	adds	r3, #1
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <CheckAllPass+0xd0>)
 8001f08:	701a      	strb	r2, [r3, #0]
	if(WR_B_OPP[9] == 95){cnt_allpass++;}
 8001f0a:	4b1f      	ldr	r3, [pc, #124]	; (8001f88 <CheckAllPass+0xe4>)
 8001f0c:	7a5b      	ldrb	r3, [r3, #9]
 8001f0e:	2b5f      	cmp	r3, #95	; 0x5f
 8001f10:	d105      	bne.n	8001f1e <CheckAllPass+0x7a>
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <CheckAllPass+0xd0>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	3301      	adds	r3, #1
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <CheckAllPass+0xd0>)
 8001f1c:	701a      	strb	r2, [r3, #0]
	if(WR_C_OPP[9] == 95){cnt_allpass++;}
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <CheckAllPass+0xe8>)
 8001f20:	7a5b      	ldrb	r3, [r3, #9]
 8001f22:	2b5f      	cmp	r3, #95	; 0x5f
 8001f24:	d105      	bne.n	8001f32 <CheckAllPass+0x8e>
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <CheckAllPass+0xd0>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <CheckAllPass+0xd0>)
 8001f30:	701a      	strb	r2, [r3, #0]

	if(WR_A_OOD[9] == 95){cnt_allpass++;}
 8001f32:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <CheckAllPass+0xec>)
 8001f34:	7a5b      	ldrb	r3, [r3, #9]
 8001f36:	2b5f      	cmp	r3, #95	; 0x5f
 8001f38:	d105      	bne.n	8001f46 <CheckAllPass+0xa2>
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <CheckAllPass+0xd0>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <CheckAllPass+0xd0>)
 8001f44:	701a      	strb	r2, [r3, #0]
	if(WR_B_OOD[9] == 95){cnt_allpass++;}
 8001f46:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <CheckAllPass+0xf0>)
 8001f48:	7a5b      	ldrb	r3, [r3, #9]
 8001f4a:	2b5f      	cmp	r3, #95	; 0x5f
 8001f4c:	d105      	bne.n	8001f5a <CheckAllPass+0xb6>
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <CheckAllPass+0xd0>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	3301      	adds	r3, #1
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <CheckAllPass+0xd0>)
 8001f58:	701a      	strb	r2, [r3, #0]
	if(WR_C_OOD[9] == 95){cnt_allpass++;}
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <CheckAllPass+0xf4>)
 8001f5c:	7a5b      	ldrb	r3, [r3, #9]
 8001f5e:	2b5f      	cmp	r3, #95	; 0x5f
 8001f60:	d105      	bne.n	8001f6e <CheckAllPass+0xca>
 8001f62:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <CheckAllPass+0xd0>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	3301      	adds	r3, #1
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4b02      	ldr	r3, [pc, #8]	; (8001f74 <CheckAllPass+0xd0>)
 8001f6c:	701a      	strb	r2, [r3, #0]

}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2000053a 	.word	0x2000053a
 8001f78:	2000005c 	.word	0x2000005c
 8001f7c:	20000084 	.word	0x20000084
 8001f80:	200000ac 	.word	0x200000ac
 8001f84:	200000d4 	.word	0x200000d4
 8001f88:	200000fc 	.word	0x200000fc
 8001f8c:	20000124 	.word	0x20000124
 8001f90:	2000014c 	.word	0x2000014c
 8001f94:	20000174 	.word	0x20000174
 8001f98:	2000019c 	.word	0x2000019c

08001f9c <HAL_GPIO_EXTI_Callback>:

//// ----------------GPIO_EXTI_Callback-----------------------------------------

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fac:	d116      	bne.n	8001fdc <HAL_GPIO_EXTI_Callback+0x40>
		bluecounter++;
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_GPIO_EXTI_Callback+0x48>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_GPIO_EXTI_Callback+0x48>)
 8001fb8:	701a      	strb	r2, [r3, #0]
		bluecounter%=4;
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HAL_GPIO_EXTI_Callback+0x48>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <HAL_GPIO_EXTI_Callback+0x48>)
 8001fc6:	701a      	strb	r2, [r3, #0]

		flag_gpioselftest = 1;
 8001fc8:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
		timestamp_selftestdelay = HAL_GetTick() + 600;
 8001fce:	f000 faa7 	bl	8002520 <HAL_GetTick>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001fd8:	4a04      	ldr	r2, [pc, #16]	; (8001fec <HAL_GPIO_EXTI_Callback+0x50>)
 8001fda:	6013      	str	r3, [r2, #0]
		}
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000538 	.word	0x20000538
 8001fe8:	20000544 	.word	0x20000544
 8001fec:	20000540 	.word	0x20000540

08001ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff4:	b672      	cpsid	i
}
 8001ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <Error_Handler+0x8>
	...

08001ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_MspInit+0x44>)
 8002004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002006:	4a0e      	ldr	r2, [pc, #56]	; (8002040 <HAL_MspInit+0x44>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6613      	str	r3, [r2, #96]	; 0x60
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <HAL_MspInit+0x44>)
 8002010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_MspInit+0x44>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	4a08      	ldr	r2, [pc, #32]	; (8002040 <HAL_MspInit+0x44>)
 8002020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002024:	6593      	str	r3, [r2, #88]	; 0x58
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_MspInit+0x44>)
 8002028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002032:	f002 fe8d 	bl	8004d50 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000

08002044 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b098      	sub	sp, #96	; 0x60
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	2254      	movs	r2, #84	; 0x54
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f004 fcd1 	bl	80069fc <memset>
  if(hadc->Instance==ADC1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002062:	d14f      	bne.n	8002104 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002064:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002068:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800206a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800206e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	4618      	mov	r0, r3
 8002076:	f003 fbaf 	bl	80057d8 <HAL_RCCEx_PeriphCLKConfig>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8002080:	f7ff ffb6 	bl	8001ff0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002084:	4b21      	ldr	r3, [pc, #132]	; (800210c <HAL_ADC_MspInit+0xc8>)
 8002086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002088:	4a20      	ldr	r2, [pc, #128]	; (800210c <HAL_ADC_MspInit+0xc8>)
 800208a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800208e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002090:	4b1e      	ldr	r3, [pc, #120]	; (800210c <HAL_ADC_MspInit+0xc8>)
 8002092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800209c:	4b1c      	ldr	r3, [pc, #112]	; (8002110 <HAL_ADC_MspInit+0xcc>)
 800209e:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <HAL_ADC_MspInit+0xd0>)
 80020a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80020a2:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <HAL_ADC_MspInit+0xcc>)
 80020a4:	2205      	movs	r2, #5
 80020a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020a8:	4b19      	ldr	r3, [pc, #100]	; (8002110 <HAL_ADC_MspInit+0xcc>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ae:	4b18      	ldr	r3, [pc, #96]	; (8002110 <HAL_ADC_MspInit+0xcc>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020b4:	4b16      	ldr	r3, [pc, #88]	; (8002110 <HAL_ADC_MspInit+0xcc>)
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020ba:	4b15      	ldr	r3, [pc, #84]	; (8002110 <HAL_ADC_MspInit+0xcc>)
 80020bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <HAL_ADC_MspInit+0xcc>)
 80020c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <HAL_ADC_MspInit+0xcc>)
 80020cc:	2220      	movs	r2, #32
 80020ce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80020d0:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <HAL_ADC_MspInit+0xcc>)
 80020d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020d8:	480d      	ldr	r0, [pc, #52]	; (8002110 <HAL_ADC_MspInit+0xcc>)
 80020da:	f002 f957 	bl	800438c <HAL_DMA_Init>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_ADC_MspInit+0xa4>
    {
      Error_Handler();
 80020e4:	f7ff ff84 	bl	8001ff0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a09      	ldr	r2, [pc, #36]	; (8002110 <HAL_ADC_MspInit+0xcc>)
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54
 80020ee:	4a08      	ldr	r2, [pc, #32]	; (8002110 <HAL_ADC_MspInit+0xcc>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80020f4:	2200      	movs	r2, #0
 80020f6:	2100      	movs	r1, #0
 80020f8:	2012      	movs	r0, #18
 80020fa:	f002 f912 	bl	8004322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80020fe:	2012      	movs	r0, #18
 8002100:	f002 f929 	bl	8004356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002104:	bf00      	nop
 8002106:	3760      	adds	r7, #96	; 0x60
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40021000 	.word	0x40021000
 8002110:	2000042c 	.word	0x2000042c
 8002114:	40020008 	.word	0x40020008

08002118 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b09e      	sub	sp, #120	; 0x78
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002130:	f107 0310 	add.w	r3, r7, #16
 8002134:	2254      	movs	r2, #84	; 0x54
 8002136:	2100      	movs	r1, #0
 8002138:	4618      	mov	r0, r3
 800213a:	f004 fc5f 	bl	80069fc <memset>
  if(huart->Instance==LPUART1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a1f      	ldr	r2, [pc, #124]	; (80021c0 <HAL_UART_MspInit+0xa8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d136      	bne.n	80021b6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002148:	2320      	movs	r3, #32
 800214a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800214c:	2300      	movs	r3, #0
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	4618      	mov	r0, r3
 8002156:	f003 fb3f 	bl	80057d8 <HAL_RCCEx_PeriphCLKConfig>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002160:	f7ff ff46 	bl	8001ff0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002164:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <HAL_UART_MspInit+0xac>)
 8002166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002168:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <HAL_UART_MspInit+0xac>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <HAL_UART_MspInit+0xac>)
 8002172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <HAL_UART_MspInit+0xac>)
 800217e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002180:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <HAL_UART_MspInit+0xac>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002188:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <HAL_UART_MspInit+0xac>)
 800218a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002194:	230c      	movs	r3, #12
 8002196:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a0:	2300      	movs	r3, #0
 80021a2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80021a4:	230c      	movs	r3, #12
 80021a6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021ac:	4619      	mov	r1, r3
 80021ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b2:	f002 fb5d 	bl	8004870 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80021b6:	bf00      	nop
 80021b8:	3778      	adds	r7, #120	; 0x78
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40008000 	.word	0x40008000
 80021c4:	40021000 	.word	0x40021000

080021c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <NMI_Handler+0x4>

080021ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d2:	e7fe      	b.n	80021d2 <HardFault_Handler+0x4>

080021d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <MemManage_Handler+0x4>

080021da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <BusFault_Handler+0x4>

080021e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <UsageFault_Handler+0x4>

080021e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002214:	f000 f972 	bl	80024fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}

0800221c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002220:	4802      	ldr	r0, [pc, #8]	; (800222c <DMA1_Channel1_IRQHandler+0x10>)
 8002222:	f002 f9d6 	bl	80045d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	2000042c 	.word	0x2000042c

08002230 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <ADC1_2_IRQHandler+0x10>)
 8002236:	f000 fe7b 	bl	8002f30 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200003c0 	.word	0x200003c0

08002244 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002248:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800224c:	f002 fcc4 	bl	8004bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}

08002254 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return 1;
 8002258:	2301      	movs	r3, #1
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <_kill>:

int _kill(int pid, int sig)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800226e:	f004 fb9b 	bl	80069a8 <__errno>
 8002272:	4603      	mov	r3, r0
 8002274:	2216      	movs	r2, #22
 8002276:	601a      	str	r2, [r3, #0]
  return -1;
 8002278:	f04f 33ff 	mov.w	r3, #4294967295
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <_exit>:

void _exit (int status)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800228c:	f04f 31ff 	mov.w	r1, #4294967295
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ffe7 	bl	8002264 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002296:	e7fe      	b.n	8002296 <_exit+0x12>

08002298 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	e00a      	b.n	80022c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022aa:	f3af 8000 	nop.w
 80022ae:	4601      	mov	r1, r0
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	60ba      	str	r2, [r7, #8]
 80022b6:	b2ca      	uxtb	r2, r1
 80022b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	3301      	adds	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	dbf0      	blt.n	80022aa <_read+0x12>
  }

  return len;
 80022c8:	687b      	ldr	r3, [r7, #4]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	e009      	b.n	80022f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	60ba      	str	r2, [r7, #8]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	3301      	adds	r3, #1
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	dbf1      	blt.n	80022e4 <_write+0x12>
  }
  return len;
 8002300:	687b      	ldr	r3, [r7, #4]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <_close>:

int _close(int file)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002332:	605a      	str	r2, [r3, #4]
  return 0;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <_isatty>:

int _isatty(int file)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800234a:	2301      	movs	r3, #1
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800237c:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <_sbrk+0x5c>)
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <_sbrk+0x60>)
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <_sbrk+0x64>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d102      	bne.n	8002396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <_sbrk+0x64>)
 8002392:	4a12      	ldr	r2, [pc, #72]	; (80023dc <_sbrk+0x68>)
 8002394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <_sbrk+0x64>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d207      	bcs.n	80023b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023a4:	f004 fb00 	bl	80069a8 <__errno>
 80023a8:	4603      	mov	r3, r0
 80023aa:	220c      	movs	r2, #12
 80023ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295
 80023b2:	e009      	b.n	80023c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023b4:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <_sbrk+0x64>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ba:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <_sbrk+0x64>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	4a05      	ldr	r2, [pc, #20]	; (80023d8 <_sbrk+0x64>)
 80023c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023c6:	68fb      	ldr	r3, [r7, #12]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20020000 	.word	0x20020000
 80023d4:	00000400 	.word	0x00000400
 80023d8:	20000628 	.word	0x20000628
 80023dc:	20000640 	.word	0x20000640

080023e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <SystemInit+0x20>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	4a05      	ldr	r2, [pc, #20]	; (8002400 <SystemInit+0x20>)
 80023ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002404:	480d      	ldr	r0, [pc, #52]	; (800243c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002406:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002408:	480d      	ldr	r0, [pc, #52]	; (8002440 <LoopForever+0x6>)
  ldr r1, =_edata
 800240a:	490e      	ldr	r1, [pc, #56]	; (8002444 <LoopForever+0xa>)
  ldr r2, =_sidata
 800240c:	4a0e      	ldr	r2, [pc, #56]	; (8002448 <LoopForever+0xe>)
  movs r3, #0
 800240e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002410:	e002      	b.n	8002418 <LoopCopyDataInit>

08002412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002416:	3304      	adds	r3, #4

08002418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800241a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800241c:	d3f9      	bcc.n	8002412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800241e:	4a0b      	ldr	r2, [pc, #44]	; (800244c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002420:	4c0b      	ldr	r4, [pc, #44]	; (8002450 <LoopForever+0x16>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002424:	e001      	b.n	800242a <LoopFillZerobss>

08002426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002428:	3204      	adds	r2, #4

0800242a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800242a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800242c:	d3fb      	bcc.n	8002426 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800242e:	f7ff ffd7 	bl	80023e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002432:	f004 fabf 	bl	80069b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002436:	f7fe ff6b 	bl	8001310 <main>

0800243a <LoopForever>:

LoopForever:
    b LoopForever
 800243a:	e7fe      	b.n	800243a <LoopForever>
  ldr   r0, =_estack
 800243c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002444:	200003a4 	.word	0x200003a4
  ldr r2, =_sidata
 8002448:	08009dec 	.word	0x08009dec
  ldr r2, =_sbss
 800244c:	200003a4 	.word	0x200003a4
  ldr r4, =_ebss
 8002450:	20000640 	.word	0x20000640

08002454 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002454:	e7fe      	b.n	8002454 <ADC3_IRQHandler>

08002456 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002460:	2003      	movs	r0, #3
 8002462:	f001 ff53 	bl	800430c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002466:	2000      	movs	r0, #0
 8002468:	f000 f80e 	bl	8002488 <HAL_InitTick>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	71fb      	strb	r3, [r7, #7]
 8002476:	e001      	b.n	800247c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002478:	f7ff fdc0 	bl	8001ffc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800247c:	79fb      	ldrb	r3, [r7, #7]

}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002494:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <HAL_InitTick+0x68>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d022      	beq.n	80024e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800249c:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <HAL_InitTick+0x6c>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <HAL_InitTick+0x68>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b0:	4618      	mov	r0, r3
 80024b2:	f001 ff5e 	bl	8004372 <HAL_SYSTICK_Config>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10f      	bne.n	80024dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b0f      	cmp	r3, #15
 80024c0:	d809      	bhi.n	80024d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c2:	2200      	movs	r2, #0
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	f04f 30ff 	mov.w	r0, #4294967295
 80024ca:	f001 ff2a 	bl	8004322 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024ce:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <HAL_InitTick+0x70>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	e007      	b.n	80024e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
 80024da:	e004      	b.n	80024e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
 80024e0:	e001      	b.n	80024e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	200001d0 	.word	0x200001d0
 80024f4:	200001c8 	.word	0x200001c8
 80024f8:	200001cc 	.word	0x200001cc

080024fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <HAL_IncTick+0x1c>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_IncTick+0x20>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4413      	add	r3, r2
 800250a:	4a03      	ldr	r2, [pc, #12]	; (8002518 <HAL_IncTick+0x1c>)
 800250c:	6013      	str	r3, [r2, #0]
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	2000062c 	.word	0x2000062c
 800251c:	200001d0 	.word	0x200001d0

08002520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return uwTick;
 8002524:	4b03      	ldr	r3, [pc, #12]	; (8002534 <HAL_GetTick+0x14>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	2000062c 	.word	0x2000062c

08002538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002540:	f7ff ffee 	bl	8002520 <HAL_GetTick>
 8002544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d004      	beq.n	800255c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_Delay+0x40>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4413      	add	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800255c:	bf00      	nop
 800255e:	f7ff ffdf 	bl	8002520 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	429a      	cmp	r2, r3
 800256c:	d8f7      	bhi.n	800255e <HAL_Delay+0x26>
  {
  }
}
 800256e:	bf00      	nop
 8002570:	bf00      	nop
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	200001d0 	.word	0x200001d0

0800257c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	609a      	str	r2, [r3, #8]
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	609a      	str	r2, [r3, #8]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	3360      	adds	r3, #96	; 0x60
 80025f6:	461a      	mov	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <LL_ADC_SetOffset+0x44>)
 8002606:	4013      	ands	r3, r2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	4313      	orrs	r3, r2
 8002614:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800261c:	bf00      	nop
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	03fff000 	.word	0x03fff000

0800262c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3360      	adds	r3, #96	; 0x60
 800263a:	461a      	mov	r2, r3
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800264c:	4618      	mov	r0, r3
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	3360      	adds	r3, #96	; 0x60
 8002668:	461a      	mov	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	431a      	orrs	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002682:	bf00      	nop
 8002684:	371c      	adds	r7, #28
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800268e:	b480      	push	{r7}
 8002690:	b087      	sub	sp, #28
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3360      	adds	r3, #96	; 0x60
 800269e:	461a      	mov	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80026b8:	bf00      	nop
 80026ba:	371c      	adds	r7, #28
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	3360      	adds	r3, #96	; 0x60
 80026d4:	461a      	mov	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80026ee:	bf00      	nop
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	615a      	str	r2, [r3, #20]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002746:	b480      	push	{r7}
 8002748:	b087      	sub	sp, #28
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	3330      	adds	r3, #48	; 0x30
 8002756:	461a      	mov	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	0a1b      	lsrs	r3, r3, #8
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	4413      	add	r3, r2
 8002764:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	211f      	movs	r1, #31
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	401a      	ands	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	0e9b      	lsrs	r3, r3, #26
 800277e:	f003 011f 	and.w	r1, r3, #31
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	f003 031f 	and.w	r3, r3, #31
 8002788:	fa01 f303 	lsl.w	r3, r1, r3
 800278c:	431a      	orrs	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002792:	bf00      	nop
 8002794:	371c      	adds	r7, #28
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027aa:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3314      	adds	r3, #20
 80027d4:	461a      	mov	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	0e5b      	lsrs	r3, r3, #25
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	4413      	add	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	0d1b      	lsrs	r3, r3, #20
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	2107      	movs	r1, #7
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	401a      	ands	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	0d1b      	lsrs	r3, r3, #20
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	431a      	orrs	r2, r3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800280e:	bf00      	nop
 8002810:	371c      	adds	r7, #28
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a0f      	ldr	r2, [pc, #60]	; (8002868 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d10a      	bne.n	8002846 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283c:	431a      	orrs	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002844:	e00a      	b.n	800285c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002852:	43db      	mvns	r3, r3
 8002854:	401a      	ands	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800285c:	bf00      	nop
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	407f0000 	.word	0x407f0000

0800286c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 031f 	and.w	r3, r3, #31
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80028b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6093      	str	r3, [r2, #8]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028dc:	d101      	bne.n	80028e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002900:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002904:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800292c:	d101      	bne.n	8002932 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002950:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002954:	f043 0201 	orr.w	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <LL_ADC_IsEnabled+0x18>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <LL_ADC_IsEnabled+0x1a>
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800299e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029a2:	f043 0204 	orr.w	r2, r3, #4
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d101      	bne.n	80029ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d101      	bne.n	80029f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b089      	sub	sp, #36	; 0x24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e1af      	b.n	8002d7e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d109      	bne.n	8002a40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff fb09 	bl	8002044 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ff3f 	bl	80028c8 <LL_ADC_IsDeepPowerDownEnabled>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d004      	beq.n	8002a5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff25 	bl	80028a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff ff5a 	bl	8002918 <LL_ADC_IsInternalRegulatorEnabled>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d115      	bne.n	8002a96 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff ff3e 	bl	80028f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a74:	4b9f      	ldr	r3, [pc, #636]	; (8002cf4 <HAL_ADC_Init+0x2f0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	099b      	lsrs	r3, r3, #6
 8002a7a:	4a9f      	ldr	r2, [pc, #636]	; (8002cf8 <HAL_ADC_Init+0x2f4>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	099b      	lsrs	r3, r3, #6
 8002a82:	3301      	adds	r3, #1
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a88:	e002      	b.n	8002a90 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f9      	bne.n	8002a8a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff ff3c 	bl	8002918 <LL_ADC_IsInternalRegulatorEnabled>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10d      	bne.n	8002ac2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aaa:	f043 0210 	orr.w	r2, r3, #16
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab6:	f043 0201 	orr.w	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff ff75 	bl	80029b6 <LL_ADC_REG_IsConversionOngoing>
 8002acc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f040 8148 	bne.w	8002d6c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f040 8144 	bne.w	8002d6c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002aec:	f043 0202 	orr.w	r2, r3, #2
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff35 	bl	8002968 <LL_ADC_IsEnabled>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d141      	bne.n	8002b88 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b0c:	d004      	beq.n	8002b18 <HAL_ADC_Init+0x114>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a7a      	ldr	r2, [pc, #488]	; (8002cfc <HAL_ADC_Init+0x2f8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d10f      	bne.n	8002b38 <HAL_ADC_Init+0x134>
 8002b18:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b1c:	f7ff ff24 	bl	8002968 <LL_ADC_IsEnabled>
 8002b20:	4604      	mov	r4, r0
 8002b22:	4876      	ldr	r0, [pc, #472]	; (8002cfc <HAL_ADC_Init+0x2f8>)
 8002b24:	f7ff ff20 	bl	8002968 <LL_ADC_IsEnabled>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4323      	orrs	r3, r4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	bf0c      	ite	eq
 8002b30:	2301      	moveq	r3, #1
 8002b32:	2300      	movne	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	e012      	b.n	8002b5e <HAL_ADC_Init+0x15a>
 8002b38:	4871      	ldr	r0, [pc, #452]	; (8002d00 <HAL_ADC_Init+0x2fc>)
 8002b3a:	f7ff ff15 	bl	8002968 <LL_ADC_IsEnabled>
 8002b3e:	4604      	mov	r4, r0
 8002b40:	4870      	ldr	r0, [pc, #448]	; (8002d04 <HAL_ADC_Init+0x300>)
 8002b42:	f7ff ff11 	bl	8002968 <LL_ADC_IsEnabled>
 8002b46:	4603      	mov	r3, r0
 8002b48:	431c      	orrs	r4, r3
 8002b4a:	486f      	ldr	r0, [pc, #444]	; (8002d08 <HAL_ADC_Init+0x304>)
 8002b4c:	f7ff ff0c 	bl	8002968 <LL_ADC_IsEnabled>
 8002b50:	4603      	mov	r3, r0
 8002b52:	4323      	orrs	r3, r4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d012      	beq.n	8002b88 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b6a:	d004      	beq.n	8002b76 <HAL_ADC_Init+0x172>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a62      	ldr	r2, [pc, #392]	; (8002cfc <HAL_ADC_Init+0x2f8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d101      	bne.n	8002b7a <HAL_ADC_Init+0x176>
 8002b76:	4a65      	ldr	r2, [pc, #404]	; (8002d0c <HAL_ADC_Init+0x308>)
 8002b78:	e000      	b.n	8002b7c <HAL_ADC_Init+0x178>
 8002b7a:	4a65      	ldr	r2, [pc, #404]	; (8002d10 <HAL_ADC_Init+0x30c>)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	4619      	mov	r1, r3
 8002b82:	4610      	mov	r0, r2
 8002b84:	f7ff fcfa 	bl	800257c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	7f5b      	ldrb	r3, [r3, #29]
 8002b8c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b92:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002b98:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002b9e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ba6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d106      	bne.n	8002bc4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	045b      	lsls	r3, r3, #17
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d009      	beq.n	8002be0 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	4b4b      	ldr	r3, [pc, #300]	; (8002d14 <HAL_ADC_Init+0x310>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	69b9      	ldr	r1, [r7, #24]
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff fed1 	bl	80029b6 <LL_ADC_REG_IsConversionOngoing>
 8002c14:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fede 	bl	80029dc <LL_ADC_INJ_IsConversionOngoing>
 8002c20:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d17f      	bne.n	8002d28 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d17c      	bne.n	8002d28 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c32:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c3a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c4a:	f023 0302 	bic.w	r3, r3, #2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6812      	ldr	r2, [r2, #0]
 8002c52:	69b9      	ldr	r1, [r7, #24]
 8002c54:	430b      	orrs	r3, r1
 8002c56:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d017      	beq.n	8002c90 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c6e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002c78:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6911      	ldr	r1, [r2, #16]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002c8e:	e013      	b.n	8002cb8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691a      	ldr	r2, [r3, #16]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c9e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cb4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d12a      	bne.n	8002d18 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002ccc:	f023 0304 	bic.w	r3, r3, #4
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002cd8:	4311      	orrs	r1, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002cde:	4311      	orrs	r1, r2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0201 	orr.w	r2, r2, #1
 8002cf0:	611a      	str	r2, [r3, #16]
 8002cf2:	e019      	b.n	8002d28 <HAL_ADC_Init+0x324>
 8002cf4:	200001c8 	.word	0x200001c8
 8002cf8:	053e2d63 	.word	0x053e2d63
 8002cfc:	50000100 	.word	0x50000100
 8002d00:	50000400 	.word	0x50000400
 8002d04:	50000500 	.word	0x50000500
 8002d08:	50000600 	.word	0x50000600
 8002d0c:	50000300 	.word	0x50000300
 8002d10:	50000700 	.word	0x50000700
 8002d14:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691a      	ldr	r2, [r3, #16]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0201 	bic.w	r2, r2, #1
 8002d26:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d10c      	bne.n	8002d4a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	f023 010f 	bic.w	r1, r3, #15
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	1e5a      	subs	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
 8002d48:	e007      	b.n	8002d5a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 020f 	bic.w	r2, r2, #15
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5e:	f023 0303 	bic.w	r3, r3, #3
 8002d62:	f043 0201 	orr.w	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d6a:	e007      	b.n	8002d7c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d70:	f043 0210 	orr.w	r2, r3, #16
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3724      	adds	r7, #36	; 0x24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd90      	pop	{r4, r7, pc}
 8002d86:	bf00      	nop

08002d88 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d9c:	d004      	beq.n	8002da8 <HAL_ADC_Start_DMA+0x20>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a5a      	ldr	r2, [pc, #360]	; (8002f0c <HAL_ADC_Start_DMA+0x184>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d101      	bne.n	8002dac <HAL_ADC_Start_DMA+0x24>
 8002da8:	4b59      	ldr	r3, [pc, #356]	; (8002f10 <HAL_ADC_Start_DMA+0x188>)
 8002daa:	e000      	b.n	8002dae <HAL_ADC_Start_DMA+0x26>
 8002dac:	4b59      	ldr	r3, [pc, #356]	; (8002f14 <HAL_ADC_Start_DMA+0x18c>)
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fd5c 	bl	800286c <LL_ADC_GetMultimode>
 8002db4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fdfb 	bl	80029b6 <LL_ADC_REG_IsConversionOngoing>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f040 809b 	bne.w	8002efe <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_ADC_Start_DMA+0x4e>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e096      	b.n	8002f04 <HAL_ADC_Start_DMA+0x17c>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a4d      	ldr	r2, [pc, #308]	; (8002f18 <HAL_ADC_Start_DMA+0x190>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d008      	beq.n	8002dfa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2b05      	cmp	r3, #5
 8002df2:	d002      	beq.n	8002dfa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b09      	cmp	r3, #9
 8002df8:	d17a      	bne.n	8002ef0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 ff60 	bl	8003cc0 <ADC_Enable>
 8002e00:	4603      	mov	r3, r0
 8002e02:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d16d      	bne.n	8002ee6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e12:	f023 0301 	bic.w	r3, r3, #1
 8002e16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a3a      	ldr	r2, [pc, #232]	; (8002f0c <HAL_ADC_Start_DMA+0x184>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d009      	beq.n	8002e3c <HAL_ADC_Start_DMA+0xb4>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a3b      	ldr	r2, [pc, #236]	; (8002f1c <HAL_ADC_Start_DMA+0x194>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d002      	beq.n	8002e38 <HAL_ADC_Start_DMA+0xb0>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	e003      	b.n	8002e40 <HAL_ADC_Start_DMA+0xb8>
 8002e38:	4b39      	ldr	r3, [pc, #228]	; (8002f20 <HAL_ADC_Start_DMA+0x198>)
 8002e3a:	e001      	b.n	8002e40 <HAL_ADC_Start_DMA+0xb8>
 8002e3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d002      	beq.n	8002e4e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d105      	bne.n	8002e5a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d006      	beq.n	8002e74 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e6a:	f023 0206 	bic.w	r2, r3, #6
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	661a      	str	r2, [r3, #96]	; 0x60
 8002e72:	e002      	b.n	8002e7a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7e:	4a29      	ldr	r2, [pc, #164]	; (8002f24 <HAL_ADC_Start_DMA+0x19c>)
 8002e80:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	4a28      	ldr	r2, [pc, #160]	; (8002f28 <HAL_ADC_Start_DMA+0x1a0>)
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8e:	4a27      	ldr	r2, [pc, #156]	; (8002f2c <HAL_ADC_Start_DMA+0x1a4>)
 8002e90:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	221c      	movs	r2, #28
 8002e98:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 0210 	orr.w	r2, r2, #16
 8002eb0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f042 0201 	orr.w	r2, r2, #1
 8002ec0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	3340      	adds	r3, #64	; 0x40
 8002ecc:	4619      	mov	r1, r3
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f001 fb03 	bl	80044dc <HAL_DMA_Start_IT>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fd55 	bl	800298e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002ee4:	e00d      	b.n	8002f02 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002eee:	e008      	b.n	8002f02 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002efc:	e001      	b.n	8002f02 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
 8002f00:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	50000100 	.word	0x50000100
 8002f10:	50000300 	.word	0x50000300
 8002f14:	50000700 	.word	0x50000700
 8002f18:	50000600 	.word	0x50000600
 8002f1c:	50000500 	.word	0x50000500
 8002f20:	50000400 	.word	0x50000400
 8002f24:	08003d85 	.word	0x08003d85
 8002f28:	08003e5d 	.word	0x08003e5d
 8002f2c:	08003e79 	.word	0x08003e79

08002f30 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08a      	sub	sp, #40	; 0x28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002f38:	2300      	movs	r3, #0
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f54:	d004      	beq.n	8002f60 <HAL_ADC_IRQHandler+0x30>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a8e      	ldr	r2, [pc, #568]	; (8003194 <HAL_ADC_IRQHandler+0x264>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_IRQHandler+0x34>
 8002f60:	4b8d      	ldr	r3, [pc, #564]	; (8003198 <HAL_ADC_IRQHandler+0x268>)
 8002f62:	e000      	b.n	8002f66 <HAL_ADC_IRQHandler+0x36>
 8002f64:	4b8d      	ldr	r3, [pc, #564]	; (800319c <HAL_ADC_IRQHandler+0x26c>)
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff fc80 	bl	800286c <LL_ADC_GetMultimode>
 8002f6c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d017      	beq.n	8002fa8 <HAL_ADC_IRQHandler+0x78>
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d012      	beq.n	8002fa8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d105      	bne.n	8002f9a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f92:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 ffd4 	bl	8003f48 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d004      	beq.n	8002fbc <HAL_ADC_IRQHandler+0x8c>
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10b      	bne.n	8002fd4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 8094 	beq.w	80030f0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 808e 	beq.w	80030f0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff fb95 	bl	8002720 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d072      	beq.n	80030e2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a64      	ldr	r2, [pc, #400]	; (8003194 <HAL_ADC_IRQHandler+0x264>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d009      	beq.n	800301a <HAL_ADC_IRQHandler+0xea>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a65      	ldr	r2, [pc, #404]	; (80031a0 <HAL_ADC_IRQHandler+0x270>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d002      	beq.n	8003016 <HAL_ADC_IRQHandler+0xe6>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	e003      	b.n	800301e <HAL_ADC_IRQHandler+0xee>
 8003016:	4b63      	ldr	r3, [pc, #396]	; (80031a4 <HAL_ADC_IRQHandler+0x274>)
 8003018:	e001      	b.n	800301e <HAL_ADC_IRQHandler+0xee>
 800301a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	4293      	cmp	r3, r2
 8003024:	d008      	beq.n	8003038 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b05      	cmp	r3, #5
 8003030:	d002      	beq.n	8003038 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b09      	cmp	r3, #9
 8003036:	d104      	bne.n	8003042 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	623b      	str	r3, [r7, #32]
 8003040:	e014      	b.n	800306c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a53      	ldr	r2, [pc, #332]	; (8003194 <HAL_ADC_IRQHandler+0x264>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d009      	beq.n	8003060 <HAL_ADC_IRQHandler+0x130>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a53      	ldr	r2, [pc, #332]	; (80031a0 <HAL_ADC_IRQHandler+0x270>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d002      	beq.n	800305c <HAL_ADC_IRQHandler+0x12c>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	e003      	b.n	8003064 <HAL_ADC_IRQHandler+0x134>
 800305c:	4b51      	ldr	r3, [pc, #324]	; (80031a4 <HAL_ADC_IRQHandler+0x274>)
 800305e:	e001      	b.n	8003064 <HAL_ADC_IRQHandler+0x134>
 8003060:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003064:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d135      	bne.n	80030e2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b08      	cmp	r3, #8
 8003082:	d12e      	bne.n	80030e2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fc94 	bl	80029b6 <LL_ADC_REG_IsConversionOngoing>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d11a      	bne.n	80030ca <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 020c 	bic.w	r2, r2, #12
 80030a2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d112      	bne.n	80030e2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c0:	f043 0201 	orr.w	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80030c8:	e00b      	b.n	80030e2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ce:	f043 0210 	orr.w	r2, r3, #16
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030da:	f043 0201 	orr.w	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f984 	bl	80033f0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	220c      	movs	r2, #12
 80030ee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d004      	beq.n	8003104 <HAL_ADC_IRQHandler+0x1d4>
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10b      	bne.n	800311c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 80b3 	beq.w	8003276 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 80ad 	beq.w	8003276 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fb30 	bl	800279e <LL_ADC_INJ_IsTriggerSourceSWStart>
 800313e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff faeb 	bl	8002720 <LL_ADC_REG_IsTriggerSourceSWStart>
 800314a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a10      	ldr	r2, [pc, #64]	; (8003194 <HAL_ADC_IRQHandler+0x264>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d009      	beq.n	800316a <HAL_ADC_IRQHandler+0x23a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a11      	ldr	r2, [pc, #68]	; (80031a0 <HAL_ADC_IRQHandler+0x270>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d002      	beq.n	8003166 <HAL_ADC_IRQHandler+0x236>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	e003      	b.n	800316e <HAL_ADC_IRQHandler+0x23e>
 8003166:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <HAL_ADC_IRQHandler+0x274>)
 8003168:	e001      	b.n	800316e <HAL_ADC_IRQHandler+0x23e>
 800316a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6812      	ldr	r2, [r2, #0]
 8003172:	4293      	cmp	r3, r2
 8003174:	d008      	beq.n	8003188 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2b06      	cmp	r3, #6
 8003180:	d002      	beq.n	8003188 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b07      	cmp	r3, #7
 8003186:	d10f      	bne.n	80031a8 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	623b      	str	r3, [r7, #32]
 8003190:	e01f      	b.n	80031d2 <HAL_ADC_IRQHandler+0x2a2>
 8003192:	bf00      	nop
 8003194:	50000100 	.word	0x50000100
 8003198:	50000300 	.word	0x50000300
 800319c:	50000700 	.word	0x50000700
 80031a0:	50000500 	.word	0x50000500
 80031a4:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a8b      	ldr	r2, [pc, #556]	; (80033dc <HAL_ADC_IRQHandler+0x4ac>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d009      	beq.n	80031c6 <HAL_ADC_IRQHandler+0x296>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a8a      	ldr	r2, [pc, #552]	; (80033e0 <HAL_ADC_IRQHandler+0x4b0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d002      	beq.n	80031c2 <HAL_ADC_IRQHandler+0x292>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	e003      	b.n	80031ca <HAL_ADC_IRQHandler+0x29a>
 80031c2:	4b88      	ldr	r3, [pc, #544]	; (80033e4 <HAL_ADC_IRQHandler+0x4b4>)
 80031c4:	e001      	b.n	80031ca <HAL_ADC_IRQHandler+0x29a>
 80031c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031ca:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d047      	beq.n	8003268 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d007      	beq.n	80031f2 <HAL_ADC_IRQHandler+0x2c2>
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d03f      	beq.n	8003268 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d13a      	bne.n	8003268 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fc:	2b40      	cmp	r3, #64	; 0x40
 80031fe:	d133      	bne.n	8003268 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d12e      	bne.n	8003268 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fbe4 	bl	80029dc <LL_ADC_INJ_IsConversionOngoing>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d11a      	bne.n	8003250 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003228:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d112      	bne.n	8003268 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003246:	f043 0201 	orr.w	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	65da      	str	r2, [r3, #92]	; 0x5c
 800324e:	e00b      	b.n	8003268 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	f043 0210 	orr.w	r2, r3, #16
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003260:	f043 0201 	orr.w	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 fe45 	bl	8003ef8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2260      	movs	r2, #96	; 0x60
 8003274:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327c:	2b00      	cmp	r3, #0
 800327e:	d011      	beq.n	80032a4 <HAL_ADC_IRQHandler+0x374>
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00c      	beq.n	80032a4 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f8be 	bl	8003418 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2280      	movs	r2, #128	; 0x80
 80032a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d012      	beq.n	80032d4 <HAL_ADC_IRQHandler+0x3a4>
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00d      	beq.n	80032d4 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032bc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fe2b 	bl	8003f20 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d012      	beq.n	8003304 <HAL_ADC_IRQHandler+0x3d4>
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00d      	beq.n	8003304 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fe1d 	bl	8003f34 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003302:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0310 	and.w	r3, r3, #16
 800330a:	2b00      	cmp	r3, #0
 800330c:	d043      	beq.n	8003396 <HAL_ADC_IRQHandler+0x466>
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	f003 0310 	and.w	r3, r3, #16
 8003314:	2b00      	cmp	r3, #0
 8003316:	d03e      	beq.n	8003396 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003320:	2301      	movs	r3, #1
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
 8003324:	e021      	b.n	800336a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d015      	beq.n	8003358 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003334:	d004      	beq.n	8003340 <HAL_ADC_IRQHandler+0x410>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a28      	ldr	r2, [pc, #160]	; (80033dc <HAL_ADC_IRQHandler+0x4ac>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d101      	bne.n	8003344 <HAL_ADC_IRQHandler+0x414>
 8003340:	4b29      	ldr	r3, [pc, #164]	; (80033e8 <HAL_ADC_IRQHandler+0x4b8>)
 8003342:	e000      	b.n	8003346 <HAL_ADC_IRQHandler+0x416>
 8003344:	4b29      	ldr	r3, [pc, #164]	; (80033ec <HAL_ADC_IRQHandler+0x4bc>)
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff fa9e 	bl	8002888 <LL_ADC_GetMultiDMATransfer>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00b      	beq.n	800336a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003352:	2301      	movs	r3, #1
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
 8003356:	e008      	b.n	800336a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003366:	2301      	movs	r3, #1
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	2b01      	cmp	r3, #1
 800336e:	d10e      	bne.n	800338e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003374:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003380:	f043 0202 	orr.w	r2, r3, #2
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f84f 	bl	800342c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2210      	movs	r2, #16
 8003394:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339c:	2b00      	cmp	r3, #0
 800339e:	d018      	beq.n	80033d2 <HAL_ADC_IRQHandler+0x4a2>
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d013      	beq.n	80033d2 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ae:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ba:	f043 0208 	orr.w	r2, r3, #8
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033ca:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fd9d 	bl	8003f0c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80033d2:	bf00      	nop
 80033d4:	3728      	adds	r7, #40	; 0x28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	50000100 	.word	0x50000100
 80033e0:	50000500 	.word	0x50000500
 80033e4:	50000400 	.word	0x50000400
 80033e8:	50000300 	.word	0x50000300
 80033ec:	50000700 	.word	0x50000700

080033f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b0b6      	sub	sp, #216	; 0xd8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003450:	2300      	movs	r3, #0
 8003452:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800345a:	2b01      	cmp	r3, #1
 800345c:	d102      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x24>
 800345e:	2302      	movs	r3, #2
 8003460:	f000 bc13 	b.w	8003c8a <HAL_ADC_ConfigChannel+0x84a>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff faa0 	bl	80029b6 <LL_ADC_REG_IsConversionOngoing>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	f040 83f3 	bne.w	8003c64 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	6859      	ldr	r1, [r3, #4]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	f7ff f95b 	bl	8002746 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fa8e 	bl	80029b6 <LL_ADC_REG_IsConversionOngoing>
 800349a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fa9a 	bl	80029dc <LL_ADC_INJ_IsConversionOngoing>
 80034a8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f040 81d9 	bne.w	8003868 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f040 81d4 	bne.w	8003868 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034c8:	d10f      	bne.n	80034ea <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2200      	movs	r2, #0
 80034d4:	4619      	mov	r1, r3
 80034d6:	f7ff f975 	bl	80027c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff f909 	bl	80026fa <LL_ADC_SetSamplingTimeCommonConfig>
 80034e8:	e00e      	b.n	8003508 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6819      	ldr	r1, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	461a      	mov	r2, r3
 80034f8:	f7ff f964 	bl	80027c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2100      	movs	r1, #0
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff f8f9 	bl	80026fa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	695a      	ldr	r2, [r3, #20]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	08db      	lsrs	r3, r3, #3
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b04      	cmp	r3, #4
 8003528:	d022      	beq.n	8003570 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6919      	ldr	r1, [r3, #16]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800353a:	f7ff f853 	bl	80025e4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6919      	ldr	r1, [r3, #16]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	461a      	mov	r2, r3
 800354c:	f7ff f89f 	bl	800268e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	6919      	ldr	r1, [r3, #16]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	7f1b      	ldrb	r3, [r3, #28]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d102      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x126>
 8003560:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003564:	e000      	b.n	8003568 <HAL_ADC_ConfigChannel+0x128>
 8003566:	2300      	movs	r3, #0
 8003568:	461a      	mov	r2, r3
 800356a:	f7ff f8ab 	bl	80026c4 <LL_ADC_SetOffsetSaturation>
 800356e:	e17b      	b.n	8003868 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff f858 	bl	800262c <LL_ADC_GetOffsetChannel>
 800357c:	4603      	mov	r3, r0
 800357e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10a      	bne.n	800359c <HAL_ADC_ConfigChannel+0x15c>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff f84d 	bl	800262c <LL_ADC_GetOffsetChannel>
 8003592:	4603      	mov	r3, r0
 8003594:	0e9b      	lsrs	r3, r3, #26
 8003596:	f003 021f 	and.w	r2, r3, #31
 800359a:	e01e      	b.n	80035da <HAL_ADC_ConfigChannel+0x19a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2100      	movs	r1, #0
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff f842 	bl	800262c <LL_ADC_GetOffsetChannel>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035b2:	fa93 f3a3 	rbit	r3, r3
 80035b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80035be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80035ca:	2320      	movs	r3, #32
 80035cc:	e004      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80035ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035d2:	fab3 f383 	clz	r3, r3
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d105      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x1b2>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	0e9b      	lsrs	r3, r3, #26
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	e018      	b.n	8003624 <HAL_ADC_ConfigChannel+0x1e4>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800360a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800360e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003616:	2320      	movs	r3, #32
 8003618:	e004      	b.n	8003624 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800361a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800361e:	fab3 f383 	clz	r3, r3
 8003622:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003624:	429a      	cmp	r2, r3
 8003626:	d106      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2200      	movs	r2, #0
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff f811 	bl	8002658 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2101      	movs	r1, #1
 800363c:	4618      	mov	r0, r3
 800363e:	f7fe fff5 	bl	800262c <LL_ADC_GetOffsetChannel>
 8003642:	4603      	mov	r3, r0
 8003644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10a      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x222>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2101      	movs	r1, #1
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe ffea 	bl	800262c <LL_ADC_GetOffsetChannel>
 8003658:	4603      	mov	r3, r0
 800365a:	0e9b      	lsrs	r3, r3, #26
 800365c:	f003 021f 	and.w	r2, r3, #31
 8003660:	e01e      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x260>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2101      	movs	r1, #1
 8003668:	4618      	mov	r0, r3
 800366a:	f7fe ffdf 	bl	800262c <LL_ADC_GetOffsetChannel>
 800366e:	4603      	mov	r3, r0
 8003670:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003678:	fa93 f3a3 	rbit	r3, r3
 800367c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003680:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003684:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003688:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003690:	2320      	movs	r3, #32
 8003692:	e004      	b.n	800369e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003694:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003698:	fab3 f383 	clz	r3, r3
 800369c:	b2db      	uxtb	r3, r3
 800369e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d105      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x278>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	0e9b      	lsrs	r3, r3, #26
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	e018      	b.n	80036ea <HAL_ADC_ConfigChannel+0x2aa>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036c4:	fa93 f3a3 	rbit	r3, r3
 80036c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80036cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80036d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80036d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80036dc:	2320      	movs	r3, #32
 80036de:	e004      	b.n	80036ea <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80036e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036e4:	fab3 f383 	clz	r3, r3
 80036e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d106      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2200      	movs	r2, #0
 80036f4:	2101      	movs	r1, #1
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fe ffae 	bl	8002658 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2102      	movs	r1, #2
 8003702:	4618      	mov	r0, r3
 8003704:	f7fe ff92 	bl	800262c <LL_ADC_GetOffsetChannel>
 8003708:	4603      	mov	r3, r0
 800370a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x2e8>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2102      	movs	r1, #2
 8003718:	4618      	mov	r0, r3
 800371a:	f7fe ff87 	bl	800262c <LL_ADC_GetOffsetChannel>
 800371e:	4603      	mov	r3, r0
 8003720:	0e9b      	lsrs	r3, r3, #26
 8003722:	f003 021f 	and.w	r2, r3, #31
 8003726:	e01e      	b.n	8003766 <HAL_ADC_ConfigChannel+0x326>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2102      	movs	r1, #2
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe ff7c 	bl	800262c <LL_ADC_GetOffsetChannel>
 8003734:	4603      	mov	r3, r0
 8003736:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003746:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800374a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800374e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003756:	2320      	movs	r3, #32
 8003758:	e004      	b.n	8003764 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800375a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800375e:	fab3 f383 	clz	r3, r3
 8003762:	b2db      	uxtb	r3, r3
 8003764:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376e:	2b00      	cmp	r3, #0
 8003770:	d105      	bne.n	800377e <HAL_ADC_ConfigChannel+0x33e>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	0e9b      	lsrs	r3, r3, #26
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	e016      	b.n	80037ac <HAL_ADC_ConfigChannel+0x36c>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003790:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003792:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003796:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800379e:	2320      	movs	r3, #32
 80037a0:	e004      	b.n	80037ac <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80037a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037a6:	fab3 f383 	clz	r3, r3
 80037aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d106      	bne.n	80037be <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2200      	movs	r2, #0
 80037b6:	2102      	movs	r1, #2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fe ff4d 	bl	8002658 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2103      	movs	r1, #3
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fe ff31 	bl	800262c <LL_ADC_GetOffsetChannel>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10a      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x3aa>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2103      	movs	r1, #3
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe ff26 	bl	800262c <LL_ADC_GetOffsetChannel>
 80037e0:	4603      	mov	r3, r0
 80037e2:	0e9b      	lsrs	r3, r3, #26
 80037e4:	f003 021f 	and.w	r2, r3, #31
 80037e8:	e017      	b.n	800381a <HAL_ADC_ConfigChannel+0x3da>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2103      	movs	r1, #3
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fe ff1b 	bl	800262c <LL_ADC_GetOffsetChannel>
 80037f6:	4603      	mov	r3, r0
 80037f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037fc:	fa93 f3a3 	rbit	r3, r3
 8003800:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003804:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003806:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800380c:	2320      	movs	r3, #32
 800380e:	e003      	b.n	8003818 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003812:	fab3 f383 	clz	r3, r3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003822:	2b00      	cmp	r3, #0
 8003824:	d105      	bne.n	8003832 <HAL_ADC_ConfigChannel+0x3f2>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	0e9b      	lsrs	r3, r3, #26
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	e011      	b.n	8003856 <HAL_ADC_ConfigChannel+0x416>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003838:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003842:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800384a:	2320      	movs	r3, #32
 800384c:	e003      	b.n	8003856 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800384e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003850:	fab3 f383 	clz	r3, r3
 8003854:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003856:	429a      	cmp	r2, r3
 8003858:	d106      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2200      	movs	r2, #0
 8003860:	2103      	movs	r1, #3
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe fef8 	bl	8002658 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff f87b 	bl	8002968 <LL_ADC_IsEnabled>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	f040 813d 	bne.w	8003af4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6819      	ldr	r1, [r3, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	461a      	mov	r2, r3
 8003888:	f7fe ffc8 	bl	800281c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	4aa2      	ldr	r2, [pc, #648]	; (8003b1c <HAL_ADC_ConfigChannel+0x6dc>)
 8003892:	4293      	cmp	r3, r2
 8003894:	f040 812e 	bne.w	8003af4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x480>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	0e9b      	lsrs	r3, r3, #26
 80038ae:	3301      	adds	r3, #1
 80038b0:	f003 031f 	and.w	r3, r3, #31
 80038b4:	2b09      	cmp	r3, #9
 80038b6:	bf94      	ite	ls
 80038b8:	2301      	movls	r3, #1
 80038ba:	2300      	movhi	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	e019      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x4b4>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038c8:	fa93 f3a3 	rbit	r3, r3
 80038cc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80038ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038d0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80038d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80038d8:	2320      	movs	r3, #32
 80038da:	e003      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80038dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	3301      	adds	r3, #1
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	2b09      	cmp	r3, #9
 80038ec:	bf94      	ite	ls
 80038ee:	2301      	movls	r3, #1
 80038f0:	2300      	movhi	r3, #0
 80038f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d079      	beq.n	80039ec <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003900:	2b00      	cmp	r3, #0
 8003902:	d107      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x4d4>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	0e9b      	lsrs	r3, r3, #26
 800390a:	3301      	adds	r3, #1
 800390c:	069b      	lsls	r3, r3, #26
 800390e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003912:	e015      	b.n	8003940 <HAL_ADC_ConfigChannel+0x500>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800391c:	fa93 f3a3 	rbit	r3, r3
 8003920:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003924:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800392c:	2320      	movs	r3, #32
 800392e:	e003      	b.n	8003938 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	3301      	adds	r3, #1
 800393a:	069b      	lsls	r3, r3, #26
 800393c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003948:	2b00      	cmp	r3, #0
 800394a:	d109      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x520>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	0e9b      	lsrs	r3, r3, #26
 8003952:	3301      	adds	r3, #1
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	2101      	movs	r1, #1
 800395a:	fa01 f303 	lsl.w	r3, r1, r3
 800395e:	e017      	b.n	8003990 <HAL_ADC_ConfigChannel+0x550>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003968:	fa93 f3a3 	rbit	r3, r3
 800396c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800396e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003970:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003978:	2320      	movs	r3, #32
 800397a:	e003      	b.n	8003984 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800397c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
 8003984:	3301      	adds	r3, #1
 8003986:	f003 031f 	and.w	r3, r3, #31
 800398a:	2101      	movs	r1, #1
 800398c:	fa01 f303 	lsl.w	r3, r1, r3
 8003990:	ea42 0103 	orr.w	r1, r2, r3
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x576>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	0e9b      	lsrs	r3, r3, #26
 80039a6:	3301      	adds	r3, #1
 80039a8:	f003 021f 	and.w	r2, r3, #31
 80039ac:	4613      	mov	r3, r2
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	4413      	add	r3, r2
 80039b2:	051b      	lsls	r3, r3, #20
 80039b4:	e018      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x5a8>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80039c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80039c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80039ce:	2320      	movs	r3, #32
 80039d0:	e003      	b.n	80039da <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80039d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d4:	fab3 f383 	clz	r3, r3
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	3301      	adds	r3, #1
 80039dc:	f003 021f 	and.w	r2, r3, #31
 80039e0:	4613      	mov	r3, r2
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	4413      	add	r3, r2
 80039e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039e8:	430b      	orrs	r3, r1
 80039ea:	e07e      	b.n	8003aea <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d107      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x5c8>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	0e9b      	lsrs	r3, r3, #26
 80039fe:	3301      	adds	r3, #1
 8003a00:	069b      	lsls	r3, r3, #26
 8003a02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a06:	e015      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x5f4>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	fa93 f3a3 	rbit	r3, r3
 8003a14:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a18:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003a20:	2320      	movs	r3, #32
 8003a22:	e003      	b.n	8003a2c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	fab3 f383 	clz	r3, r3
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	069b      	lsls	r3, r3, #26
 8003a30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d109      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x614>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	0e9b      	lsrs	r3, r3, #26
 8003a46:	3301      	adds	r3, #1
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a52:	e017      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x644>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	fa93 f3a3 	rbit	r3, r3
 8003a60:	61fb      	str	r3, [r7, #28]
  return result;
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003a6c:	2320      	movs	r3, #32
 8003a6e:	e003      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	fab3 f383 	clz	r3, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	3301      	adds	r3, #1
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	2101      	movs	r1, #1
 8003a80:	fa01 f303 	lsl.w	r3, r1, r3
 8003a84:	ea42 0103 	orr.w	r1, r2, r3
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10d      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x670>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	0e9b      	lsrs	r3, r3, #26
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	f003 021f 	and.w	r2, r3, #31
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3b1e      	subs	r3, #30
 8003aa8:	051b      	lsls	r3, r3, #20
 8003aaa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003aae:	e01b      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x6a8>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	fa93 f3a3 	rbit	r3, r3
 8003abc:	613b      	str	r3, [r7, #16]
  return result;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003ac8:	2320      	movs	r3, #32
 8003aca:	e003      	b.n	8003ad4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	f003 021f 	and.w	r2, r3, #31
 8003ada:	4613      	mov	r3, r2
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	4413      	add	r3, r2
 8003ae0:	3b1e      	subs	r3, #30
 8003ae2:	051b      	lsls	r3, r3, #20
 8003ae4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	6892      	ldr	r2, [r2, #8]
 8003aee:	4619      	mov	r1, r3
 8003af0:	f7fe fe68 	bl	80027c4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <HAL_ADC_ConfigChannel+0x6e0>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80be 	beq.w	8003c7e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b0a:	d004      	beq.n	8003b16 <HAL_ADC_ConfigChannel+0x6d6>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <HAL_ADC_ConfigChannel+0x6e4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d10a      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x6ec>
 8003b16:	4b04      	ldr	r3, [pc, #16]	; (8003b28 <HAL_ADC_ConfigChannel+0x6e8>)
 8003b18:	e009      	b.n	8003b2e <HAL_ADC_ConfigChannel+0x6ee>
 8003b1a:	bf00      	nop
 8003b1c:	407f0000 	.word	0x407f0000
 8003b20:	80080000 	.word	0x80080000
 8003b24:	50000100 	.word	0x50000100
 8003b28:	50000300 	.word	0x50000300
 8003b2c:	4b59      	ldr	r3, [pc, #356]	; (8003c94 <HAL_ADC_ConfigChannel+0x854>)
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe fd4a 	bl	80025c8 <LL_ADC_GetCommonPathInternalCh>
 8003b34:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a56      	ldr	r2, [pc, #344]	; (8003c98 <HAL_ADC_ConfigChannel+0x858>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d004      	beq.n	8003b4c <HAL_ADC_ConfigChannel+0x70c>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a55      	ldr	r2, [pc, #340]	; (8003c9c <HAL_ADC_ConfigChannel+0x85c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d13a      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d134      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b60:	d005      	beq.n	8003b6e <HAL_ADC_ConfigChannel+0x72e>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a4e      	ldr	r2, [pc, #312]	; (8003ca0 <HAL_ADC_ConfigChannel+0x860>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	f040 8085 	bne.w	8003c78 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b76:	d004      	beq.n	8003b82 <HAL_ADC_ConfigChannel+0x742>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a49      	ldr	r2, [pc, #292]	; (8003ca4 <HAL_ADC_ConfigChannel+0x864>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d101      	bne.n	8003b86 <HAL_ADC_ConfigChannel+0x746>
 8003b82:	4a49      	ldr	r2, [pc, #292]	; (8003ca8 <HAL_ADC_ConfigChannel+0x868>)
 8003b84:	e000      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x748>
 8003b86:	4a43      	ldr	r2, [pc, #268]	; (8003c94 <HAL_ADC_ConfigChannel+0x854>)
 8003b88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b90:	4619      	mov	r1, r3
 8003b92:	4610      	mov	r0, r2
 8003b94:	f7fe fd05 	bl	80025a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b98:	4b44      	ldr	r3, [pc, #272]	; (8003cac <HAL_ADC_ConfigChannel+0x86c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	099b      	lsrs	r3, r3, #6
 8003b9e:	4a44      	ldr	r2, [pc, #272]	; (8003cb0 <HAL_ADC_ConfigChannel+0x870>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	099b      	lsrs	r3, r3, #6
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	4613      	mov	r3, r2
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	4413      	add	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003bb2:	e002      	b.n	8003bba <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1f9      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bc0:	e05a      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a3b      	ldr	r2, [pc, #236]	; (8003cb4 <HAL_ADC_ConfigChannel+0x874>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d125      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x7d8>
 8003bcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d11f      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a31      	ldr	r2, [pc, #196]	; (8003ca4 <HAL_ADC_ConfigChannel+0x864>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d104      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x7ac>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a34      	ldr	r2, [pc, #208]	; (8003cb8 <HAL_ADC_ConfigChannel+0x878>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d047      	beq.n	8003c7c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bf4:	d004      	beq.n	8003c00 <HAL_ADC_ConfigChannel+0x7c0>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a2a      	ldr	r2, [pc, #168]	; (8003ca4 <HAL_ADC_ConfigChannel+0x864>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d101      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x7c4>
 8003c00:	4a29      	ldr	r2, [pc, #164]	; (8003ca8 <HAL_ADC_ConfigChannel+0x868>)
 8003c02:	e000      	b.n	8003c06 <HAL_ADC_ConfigChannel+0x7c6>
 8003c04:	4a23      	ldr	r2, [pc, #140]	; (8003c94 <HAL_ADC_ConfigChannel+0x854>)
 8003c06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4610      	mov	r0, r2
 8003c12:	f7fe fcc6 	bl	80025a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c16:	e031      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a27      	ldr	r2, [pc, #156]	; (8003cbc <HAL_ADC_ConfigChannel+0x87c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d12d      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d127      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a1c      	ldr	r2, [pc, #112]	; (8003ca4 <HAL_ADC_ConfigChannel+0x864>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d022      	beq.n	8003c7e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c40:	d004      	beq.n	8003c4c <HAL_ADC_ConfigChannel+0x80c>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a17      	ldr	r2, [pc, #92]	; (8003ca4 <HAL_ADC_ConfigChannel+0x864>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d101      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x810>
 8003c4c:	4a16      	ldr	r2, [pc, #88]	; (8003ca8 <HAL_ADC_ConfigChannel+0x868>)
 8003c4e:	e000      	b.n	8003c52 <HAL_ADC_ConfigChannel+0x812>
 8003c50:	4a10      	ldr	r2, [pc, #64]	; (8003c94 <HAL_ADC_ConfigChannel+0x854>)
 8003c52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	f7fe fca0 	bl	80025a2 <LL_ADC_SetCommonPathInternalCh>
 8003c62:	e00c      	b.n	8003c7e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c68:	f043 0220 	orr.w	r2, r3, #32
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003c76:	e002      	b.n	8003c7e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c78:	bf00      	nop
 8003c7a:	e000      	b.n	8003c7e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c7c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c86:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	37d8      	adds	r7, #216	; 0xd8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	50000700 	.word	0x50000700
 8003c98:	c3210000 	.word	0xc3210000
 8003c9c:	90c00010 	.word	0x90c00010
 8003ca0:	50000600 	.word	0x50000600
 8003ca4:	50000100 	.word	0x50000100
 8003ca8:	50000300 	.word	0x50000300
 8003cac:	200001c8 	.word	0x200001c8
 8003cb0:	053e2d63 	.word	0x053e2d63
 8003cb4:	c7520000 	.word	0xc7520000
 8003cb8:	50000500 	.word	0x50000500
 8003cbc:	cb840000 	.word	0xcb840000

08003cc0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fe fe4b 	bl	8002968 <LL_ADC_IsEnabled>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d14d      	bne.n	8003d74 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	4b28      	ldr	r3, [pc, #160]	; (8003d80 <ADC_Enable+0xc0>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00d      	beq.n	8003d02 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cea:	f043 0210 	orr.w	r2, r3, #16
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf6:	f043 0201 	orr.w	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e039      	b.n	8003d76 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe fe1a 	bl	8002940 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d0c:	f7fe fc08 	bl	8002520 <HAL_GetTick>
 8003d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d12:	e028      	b.n	8003d66 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fe fe25 	bl	8002968 <LL_ADC_IsEnabled>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d104      	bne.n	8003d2e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe fe09 	bl	8002940 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d2e:	f7fe fbf7 	bl	8002520 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d914      	bls.n	8003d66 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d00d      	beq.n	8003d66 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4e:	f043 0210 	orr.w	r2, r3, #16
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5a:	f043 0201 	orr.w	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e007      	b.n	8003d76 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d1cf      	bne.n	8003d14 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	8000003f 	.word	0x8000003f

08003d84 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d14b      	bne.n	8003e36 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d021      	beq.n	8003dfc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fe fcaf 	bl	8002720 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d032      	beq.n	8003e2e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d12b      	bne.n	8003e2e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d11f      	bne.n	8003e2e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	f043 0201 	orr.w	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dfa:	e018      	b.n	8003e2e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d111      	bne.n	8003e2e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d105      	bne.n	8003e2e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e26:	f043 0201 	orr.w	r2, r3, #1
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f7ff fade 	bl	80033f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e34:	e00e      	b.n	8003e54 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f7ff faf2 	bl	800342c <HAL_ADC_ErrorCallback>
}
 8003e48:	e004      	b.n	8003e54 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	4798      	blx	r3
}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f7ff faca 	bl	8003404 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e70:	bf00      	nop
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e96:	f043 0204 	orr.w	r2, r3, #4
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f7ff fac4 	bl	800342c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ea4:	bf00      	nop
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <LL_ADC_IsEnabled>:
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <LL_ADC_IsEnabled+0x18>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <LL_ADC_IsEnabled+0x1a>
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d101      	bne.n	8003eea <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f5c:	b590      	push	{r4, r7, lr}
 8003f5e:	b0a1      	sub	sp, #132	; 0x84
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e0e7      	b.n	800414a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003f82:	2300      	movs	r3, #0
 8003f84:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003f86:	2300      	movs	r3, #0
 8003f88:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f92:	d102      	bne.n	8003f9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f94:	4b6f      	ldr	r3, [pc, #444]	; (8004154 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	e009      	b.n	8003fae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a6e      	ldr	r2, [pc, #440]	; (8004158 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d102      	bne.n	8003faa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003fa4:	4b6d      	ldr	r3, [pc, #436]	; (800415c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003fa6:	60bb      	str	r3, [r7, #8]
 8003fa8:	e001      	b.n	8003fae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003faa:	2300      	movs	r3, #0
 8003fac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10b      	bne.n	8003fcc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb8:	f043 0220 	orr.w	r2, r3, #32
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0be      	b.n	800414a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff ff7f 	bl	8003ed2 <LL_ADC_REG_IsConversionOngoing>
 8003fd4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff ff79 	bl	8003ed2 <LL_ADC_REG_IsConversionOngoing>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f040 80a0 	bne.w	8004128 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f040 809c 	bne.w	8004128 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ff8:	d004      	beq.n	8004004 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a55      	ldr	r2, [pc, #340]	; (8004154 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d101      	bne.n	8004008 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004004:	4b56      	ldr	r3, [pc, #344]	; (8004160 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004006:	e000      	b.n	800400a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004008:	4b56      	ldr	r3, [pc, #344]	; (8004164 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800400a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d04b      	beq.n	80040ac <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	6859      	ldr	r1, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004026:	035b      	lsls	r3, r3, #13
 8004028:	430b      	orrs	r3, r1
 800402a:	431a      	orrs	r2, r3
 800402c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800402e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004038:	d004      	beq.n	8004044 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a45      	ldr	r2, [pc, #276]	; (8004154 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d10f      	bne.n	8004064 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004044:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004048:	f7ff ff30 	bl	8003eac <LL_ADC_IsEnabled>
 800404c:	4604      	mov	r4, r0
 800404e:	4841      	ldr	r0, [pc, #260]	; (8004154 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004050:	f7ff ff2c 	bl	8003eac <LL_ADC_IsEnabled>
 8004054:	4603      	mov	r3, r0
 8004056:	4323      	orrs	r3, r4
 8004058:	2b00      	cmp	r3, #0
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	e012      	b.n	800408a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004064:	483c      	ldr	r0, [pc, #240]	; (8004158 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004066:	f7ff ff21 	bl	8003eac <LL_ADC_IsEnabled>
 800406a:	4604      	mov	r4, r0
 800406c:	483b      	ldr	r0, [pc, #236]	; (800415c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800406e:	f7ff ff1d 	bl	8003eac <LL_ADC_IsEnabled>
 8004072:	4603      	mov	r3, r0
 8004074:	431c      	orrs	r4, r3
 8004076:	483c      	ldr	r0, [pc, #240]	; (8004168 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004078:	f7ff ff18 	bl	8003eac <LL_ADC_IsEnabled>
 800407c:	4603      	mov	r3, r0
 800407e:	4323      	orrs	r3, r4
 8004080:	2b00      	cmp	r3, #0
 8004082:	bf0c      	ite	eq
 8004084:	2301      	moveq	r3, #1
 8004086:	2300      	movne	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d056      	beq.n	800413c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800408e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004096:	f023 030f 	bic.w	r3, r3, #15
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	6811      	ldr	r1, [r2, #0]
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	6892      	ldr	r2, [r2, #8]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	431a      	orrs	r2, r3
 80040a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040a8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040aa:	e047      	b.n	800413c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80040ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040b6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040c0:	d004      	beq.n	80040cc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a23      	ldr	r2, [pc, #140]	; (8004154 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d10f      	bne.n	80040ec <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80040cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80040d0:	f7ff feec 	bl	8003eac <LL_ADC_IsEnabled>
 80040d4:	4604      	mov	r4, r0
 80040d6:	481f      	ldr	r0, [pc, #124]	; (8004154 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040d8:	f7ff fee8 	bl	8003eac <LL_ADC_IsEnabled>
 80040dc:	4603      	mov	r3, r0
 80040de:	4323      	orrs	r3, r4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	bf0c      	ite	eq
 80040e4:	2301      	moveq	r3, #1
 80040e6:	2300      	movne	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	e012      	b.n	8004112 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80040ec:	481a      	ldr	r0, [pc, #104]	; (8004158 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80040ee:	f7ff fedd 	bl	8003eac <LL_ADC_IsEnabled>
 80040f2:	4604      	mov	r4, r0
 80040f4:	4819      	ldr	r0, [pc, #100]	; (800415c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80040f6:	f7ff fed9 	bl	8003eac <LL_ADC_IsEnabled>
 80040fa:	4603      	mov	r3, r0
 80040fc:	431c      	orrs	r4, r3
 80040fe:	481a      	ldr	r0, [pc, #104]	; (8004168 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004100:	f7ff fed4 	bl	8003eac <LL_ADC_IsEnabled>
 8004104:	4603      	mov	r3, r0
 8004106:	4323      	orrs	r3, r4
 8004108:	2b00      	cmp	r3, #0
 800410a:	bf0c      	ite	eq
 800410c:	2301      	moveq	r3, #1
 800410e:	2300      	movne	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d012      	beq.n	800413c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004116:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800411e:	f023 030f 	bic.w	r3, r3, #15
 8004122:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004124:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004126:	e009      	b.n	800413c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412c:	f043 0220 	orr.w	r2, r3, #32
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800413a:	e000      	b.n	800413e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800413c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004146:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800414a:	4618      	mov	r0, r3
 800414c:	3784      	adds	r7, #132	; 0x84
 800414e:	46bd      	mov	sp, r7
 8004150:	bd90      	pop	{r4, r7, pc}
 8004152:	bf00      	nop
 8004154:	50000100 	.word	0x50000100
 8004158:	50000400 	.word	0x50000400
 800415c:	50000500 	.word	0x50000500
 8004160:	50000300 	.word	0x50000300
 8004164:	50000700 	.word	0x50000700
 8004168:	50000600 	.word	0x50000600

0800416c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800417c:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <__NVIC_SetPriorityGrouping+0x44>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004188:	4013      	ands	r3, r2
 800418a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800419c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800419e:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <__NVIC_SetPriorityGrouping+0x44>)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	60d3      	str	r3, [r2, #12]
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	e000ed00 	.word	0xe000ed00

080041b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041b8:	4b04      	ldr	r3, [pc, #16]	; (80041cc <__NVIC_GetPriorityGrouping+0x18>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	0a1b      	lsrs	r3, r3, #8
 80041be:	f003 0307 	and.w	r3, r3, #7
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	e000ed00 	.word	0xe000ed00

080041d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	db0b      	blt.n	80041fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041e2:	79fb      	ldrb	r3, [r7, #7]
 80041e4:	f003 021f 	and.w	r2, r3, #31
 80041e8:	4907      	ldr	r1, [pc, #28]	; (8004208 <__NVIC_EnableIRQ+0x38>)
 80041ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	2001      	movs	r0, #1
 80041f2:	fa00 f202 	lsl.w	r2, r0, r2
 80041f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	e000e100 	.word	0xe000e100

0800420c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	6039      	str	r1, [r7, #0]
 8004216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421c:	2b00      	cmp	r3, #0
 800421e:	db0a      	blt.n	8004236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	b2da      	uxtb	r2, r3
 8004224:	490c      	ldr	r1, [pc, #48]	; (8004258 <__NVIC_SetPriority+0x4c>)
 8004226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422a:	0112      	lsls	r2, r2, #4
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	440b      	add	r3, r1
 8004230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004234:	e00a      	b.n	800424c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	b2da      	uxtb	r2, r3
 800423a:	4908      	ldr	r1, [pc, #32]	; (800425c <__NVIC_SetPriority+0x50>)
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	3b04      	subs	r3, #4
 8004244:	0112      	lsls	r2, r2, #4
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	440b      	add	r3, r1
 800424a:	761a      	strb	r2, [r3, #24]
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	e000e100 	.word	0xe000e100
 800425c:	e000ed00 	.word	0xe000ed00

08004260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004260:	b480      	push	{r7}
 8004262:	b089      	sub	sp, #36	; 0x24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f1c3 0307 	rsb	r3, r3, #7
 800427a:	2b04      	cmp	r3, #4
 800427c:	bf28      	it	cs
 800427e:	2304      	movcs	r3, #4
 8004280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	3304      	adds	r3, #4
 8004286:	2b06      	cmp	r3, #6
 8004288:	d902      	bls.n	8004290 <NVIC_EncodePriority+0x30>
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	3b03      	subs	r3, #3
 800428e:	e000      	b.n	8004292 <NVIC_EncodePriority+0x32>
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004294:	f04f 32ff 	mov.w	r2, #4294967295
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	43da      	mvns	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	401a      	ands	r2, r3
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042a8:	f04f 31ff 	mov.w	r1, #4294967295
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	fa01 f303 	lsl.w	r3, r1, r3
 80042b2:	43d9      	mvns	r1, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b8:	4313      	orrs	r3, r2
         );
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3724      	adds	r7, #36	; 0x24
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042d8:	d301      	bcc.n	80042de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042da:	2301      	movs	r3, #1
 80042dc:	e00f      	b.n	80042fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042de:	4a0a      	ldr	r2, [pc, #40]	; (8004308 <SysTick_Config+0x40>)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042e6:	210f      	movs	r1, #15
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	f7ff ff8e 	bl	800420c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042f0:	4b05      	ldr	r3, [pc, #20]	; (8004308 <SysTick_Config+0x40>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042f6:	4b04      	ldr	r3, [pc, #16]	; (8004308 <SysTick_Config+0x40>)
 80042f8:	2207      	movs	r2, #7
 80042fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	e000e010 	.word	0xe000e010

0800430c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff ff29 	bl	800416c <__NVIC_SetPriorityGrouping>
}
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b086      	sub	sp, #24
 8004326:	af00      	add	r7, sp, #0
 8004328:	4603      	mov	r3, r0
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
 800432e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004330:	f7ff ff40 	bl	80041b4 <__NVIC_GetPriorityGrouping>
 8004334:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	68b9      	ldr	r1, [r7, #8]
 800433a:	6978      	ldr	r0, [r7, #20]
 800433c:	f7ff ff90 	bl	8004260 <NVIC_EncodePriority>
 8004340:	4602      	mov	r2, r0
 8004342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004346:	4611      	mov	r1, r2
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff ff5f 	bl	800420c <__NVIC_SetPriority>
}
 800434e:	bf00      	nop
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b082      	sub	sp, #8
 800435a:	af00      	add	r7, sp, #0
 800435c:	4603      	mov	r3, r0
 800435e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff ff33 	bl	80041d0 <__NVIC_EnableIRQ>
}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff ffa4 	bl	80042c8 <SysTick_Config>
 8004380:	4603      	mov	r3, r0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e08d      	b.n	80044ba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	4b47      	ldr	r3, [pc, #284]	; (80044c4 <HAL_DMA_Init+0x138>)
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d80f      	bhi.n	80043ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	4b45      	ldr	r3, [pc, #276]	; (80044c8 <HAL_DMA_Init+0x13c>)
 80043b2:	4413      	add	r3, r2
 80043b4:	4a45      	ldr	r2, [pc, #276]	; (80044cc <HAL_DMA_Init+0x140>)
 80043b6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ba:	091b      	lsrs	r3, r3, #4
 80043bc:	009a      	lsls	r2, r3, #2
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a42      	ldr	r2, [pc, #264]	; (80044d0 <HAL_DMA_Init+0x144>)
 80043c6:	641a      	str	r2, [r3, #64]	; 0x40
 80043c8:	e00e      	b.n	80043e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	4b40      	ldr	r3, [pc, #256]	; (80044d4 <HAL_DMA_Init+0x148>)
 80043d2:	4413      	add	r3, r2
 80043d4:	4a3d      	ldr	r2, [pc, #244]	; (80044cc <HAL_DMA_Init+0x140>)
 80043d6:	fba2 2303 	umull	r2, r3, r2, r3
 80043da:	091b      	lsrs	r3, r3, #4
 80043dc:	009a      	lsls	r2, r3, #2
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a3c      	ldr	r2, [pc, #240]	; (80044d8 <HAL_DMA_Init+0x14c>)
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80043fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004402:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800440c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004418:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004424:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f9b6 	bl	80047ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004448:	d102      	bne.n	8004450 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004464:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d010      	beq.n	8004490 <HAL_DMA_Init+0x104>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b04      	cmp	r3, #4
 8004474:	d80c      	bhi.n	8004490 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f9d6 	bl	8004828 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800448c:	605a      	str	r2, [r3, #4]
 800448e:	e008      	b.n	80044a2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40020407 	.word	0x40020407
 80044c8:	bffdfff8 	.word	0xbffdfff8
 80044cc:	cccccccd 	.word	0xcccccccd
 80044d0:	40020000 	.word	0x40020000
 80044d4:	bffdfbf8 	.word	0xbffdfbf8
 80044d8:	40020400 	.word	0x40020400

080044dc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_DMA_Start_IT+0x20>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e066      	b.n	80045ca <HAL_DMA_Start_IT+0xee>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	d155      	bne.n	80045bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0201 	bic.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	68b9      	ldr	r1, [r7, #8]
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 f8fb 	bl	8004730 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 020e 	orr.w	r2, r2, #14
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	e00f      	b.n	8004574 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0204 	bic.w	r2, r2, #4
 8004562:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 020a 	orr.w	r2, r2, #10
 8004572:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d007      	beq.n	8004592 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800458c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004590:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004596:	2b00      	cmp	r3, #0
 8004598:	d007      	beq.n	80045aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0201 	orr.w	r2, r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	e005      	b.n	80045c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80045c4:	2302      	movs	r3, #2
 80045c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80045c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b084      	sub	sp, #16
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ee:	f003 031f 	and.w	r3, r3, #31
 80045f2:	2204      	movs	r2, #4
 80045f4:	409a      	lsls	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d026      	beq.n	800464c <HAL_DMA_IRQHandler+0x7a>
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d021      	beq.n	800464c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b00      	cmp	r3, #0
 8004614:	d107      	bne.n	8004626 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0204 	bic.w	r2, r2, #4
 8004624:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462a:	f003 021f 	and.w	r2, r3, #31
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	2104      	movs	r1, #4
 8004634:	fa01 f202 	lsl.w	r2, r1, r2
 8004638:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	2b00      	cmp	r3, #0
 8004640:	d071      	beq.n	8004726 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800464a:	e06c      	b.n	8004726 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004650:	f003 031f 	and.w	r3, r3, #31
 8004654:	2202      	movs	r2, #2
 8004656:	409a      	lsls	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4013      	ands	r3, r2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d02e      	beq.n	80046be <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d029      	beq.n	80046be <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10b      	bne.n	8004690 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 020a 	bic.w	r2, r2, #10
 8004686:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004694:	f003 021f 	and.w	r2, r3, #31
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	2102      	movs	r1, #2
 800469e:	fa01 f202 	lsl.w	r2, r1, r2
 80046a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d038      	beq.n	8004726 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80046bc:	e033      	b.n	8004726 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	2208      	movs	r2, #8
 80046c8:	409a      	lsls	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d02a      	beq.n	8004728 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d025      	beq.n	8004728 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 020e 	bic.w	r2, r2, #14
 80046ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f0:	f003 021f 	and.w	r2, r3, #31
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	2101      	movs	r1, #1
 80046fa:	fa01 f202 	lsl.w	r2, r1, r2
 80046fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471a:	2b00      	cmp	r3, #0
 800471c:	d004      	beq.n	8004728 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004726:	bf00      	nop
 8004728:	bf00      	nop
}
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
 800473c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004746:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474c:	2b00      	cmp	r3, #0
 800474e:	d004      	beq.n	800475a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004758:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475e:	f003 021f 	and.w	r2, r3, #31
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	2101      	movs	r1, #1
 8004768:	fa01 f202 	lsl.w	r2, r1, r2
 800476c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b10      	cmp	r3, #16
 800477c:	d108      	bne.n	8004790 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800478e:	e007      	b.n	80047a0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	60da      	str	r2, [r3, #12]
}
 80047a0:	bf00      	nop
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	4b16      	ldr	r3, [pc, #88]	; (8004814 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80047bc:	429a      	cmp	r2, r3
 80047be:	d802      	bhi.n	80047c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80047c0:	4b15      	ldr	r3, [pc, #84]	; (8004818 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	e001      	b.n	80047ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80047c6:	4b15      	ldr	r3, [pc, #84]	; (800481c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80047c8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	3b08      	subs	r3, #8
 80047d6:	4a12      	ldr	r2, [pc, #72]	; (8004820 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80047d8:	fba2 2303 	umull	r2, r3, r2, r3
 80047dc:	091b      	lsrs	r3, r3, #4
 80047de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e4:	089b      	lsrs	r3, r3, #2
 80047e6:	009a      	lsls	r2, r3, #2
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	4413      	add	r3, r2
 80047ec:	461a      	mov	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a0b      	ldr	r2, [pc, #44]	; (8004824 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80047f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	2201      	movs	r2, #1
 8004800:	409a      	lsls	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004806:	bf00      	nop
 8004808:	371c      	adds	r7, #28
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40020407 	.word	0x40020407
 8004818:	40020800 	.word	0x40020800
 800481c:	40020820 	.word	0x40020820
 8004820:	cccccccd 	.word	0xcccccccd
 8004824:	40020880 	.word	0x40020880

08004828 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	b2db      	uxtb	r3, r3
 8004836:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	461a      	mov	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a08      	ldr	r2, [pc, #32]	; (800486c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800484a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	3b01      	subs	r3, #1
 8004850:	f003 031f 	and.w	r3, r3, #31
 8004854:	2201      	movs	r2, #1
 8004856:	409a      	lsls	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800485c:	bf00      	nop
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	1000823f 	.word	0x1000823f
 800486c:	40020940 	.word	0x40020940

08004870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800487e:	e15a      	b.n	8004b36 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	2101      	movs	r1, #1
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	fa01 f303 	lsl.w	r3, r1, r3
 800488c:	4013      	ands	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 814c 	beq.w	8004b30 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d005      	beq.n	80048b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d130      	bne.n	8004912 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	2203      	movs	r2, #3
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	43db      	mvns	r3, r3
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	4013      	ands	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048e6:	2201      	movs	r2, #1
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	43db      	mvns	r3, r3
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4013      	ands	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	091b      	lsrs	r3, r3, #4
 80048fc:	f003 0201 	and.w	r2, r3, #1
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	2b03      	cmp	r3, #3
 800491c:	d017      	beq.n	800494e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	2203      	movs	r2, #3
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43db      	mvns	r3, r3
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	4013      	ands	r3, r2
 8004934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d123      	bne.n	80049a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	08da      	lsrs	r2, r3, #3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3208      	adds	r2, #8
 8004962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004966:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	220f      	movs	r2, #15
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	43db      	mvns	r3, r3
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	4013      	ands	r3, r2
 800497c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	08da      	lsrs	r2, r3, #3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3208      	adds	r2, #8
 800499c:	6939      	ldr	r1, [r7, #16]
 800499e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	2203      	movs	r2, #3
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43db      	mvns	r3, r3
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4013      	ands	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f003 0203 	and.w	r2, r3, #3
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 80a6 	beq.w	8004b30 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049e4:	4b5b      	ldr	r3, [pc, #364]	; (8004b54 <HAL_GPIO_Init+0x2e4>)
 80049e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e8:	4a5a      	ldr	r2, [pc, #360]	; (8004b54 <HAL_GPIO_Init+0x2e4>)
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	6613      	str	r3, [r2, #96]	; 0x60
 80049f0:	4b58      	ldr	r3, [pc, #352]	; (8004b54 <HAL_GPIO_Init+0x2e4>)
 80049f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	60bb      	str	r3, [r7, #8]
 80049fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049fc:	4a56      	ldr	r2, [pc, #344]	; (8004b58 <HAL_GPIO_Init+0x2e8>)
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	089b      	lsrs	r3, r3, #2
 8004a02:	3302      	adds	r3, #2
 8004a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	220f      	movs	r2, #15
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a26:	d01f      	beq.n	8004a68 <HAL_GPIO_Init+0x1f8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a4c      	ldr	r2, [pc, #304]	; (8004b5c <HAL_GPIO_Init+0x2ec>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d019      	beq.n	8004a64 <HAL_GPIO_Init+0x1f4>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a4b      	ldr	r2, [pc, #300]	; (8004b60 <HAL_GPIO_Init+0x2f0>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d013      	beq.n	8004a60 <HAL_GPIO_Init+0x1f0>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a4a      	ldr	r2, [pc, #296]	; (8004b64 <HAL_GPIO_Init+0x2f4>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00d      	beq.n	8004a5c <HAL_GPIO_Init+0x1ec>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a49      	ldr	r2, [pc, #292]	; (8004b68 <HAL_GPIO_Init+0x2f8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d007      	beq.n	8004a58 <HAL_GPIO_Init+0x1e8>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a48      	ldr	r2, [pc, #288]	; (8004b6c <HAL_GPIO_Init+0x2fc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d101      	bne.n	8004a54 <HAL_GPIO_Init+0x1e4>
 8004a50:	2305      	movs	r3, #5
 8004a52:	e00a      	b.n	8004a6a <HAL_GPIO_Init+0x1fa>
 8004a54:	2306      	movs	r3, #6
 8004a56:	e008      	b.n	8004a6a <HAL_GPIO_Init+0x1fa>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	e006      	b.n	8004a6a <HAL_GPIO_Init+0x1fa>
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e004      	b.n	8004a6a <HAL_GPIO_Init+0x1fa>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e002      	b.n	8004a6a <HAL_GPIO_Init+0x1fa>
 8004a64:	2301      	movs	r3, #1
 8004a66:	e000      	b.n	8004a6a <HAL_GPIO_Init+0x1fa>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	f002 0203 	and.w	r2, r2, #3
 8004a70:	0092      	lsls	r2, r2, #2
 8004a72:	4093      	lsls	r3, r2
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a7a:	4937      	ldr	r1, [pc, #220]	; (8004b58 <HAL_GPIO_Init+0x2e8>)
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	089b      	lsrs	r3, r3, #2
 8004a80:	3302      	adds	r3, #2
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a88:	4b39      	ldr	r3, [pc, #228]	; (8004b70 <HAL_GPIO_Init+0x300>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	43db      	mvns	r3, r3
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4013      	ands	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004aac:	4a30      	ldr	r2, [pc, #192]	; (8004b70 <HAL_GPIO_Init+0x300>)
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ab2:	4b2f      	ldr	r3, [pc, #188]	; (8004b70 <HAL_GPIO_Init+0x300>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	43db      	mvns	r3, r3
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ad6:	4a26      	ldr	r2, [pc, #152]	; (8004b70 <HAL_GPIO_Init+0x300>)
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004adc:	4b24      	ldr	r3, [pc, #144]	; (8004b70 <HAL_GPIO_Init+0x300>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b00:	4a1b      	ldr	r2, [pc, #108]	; (8004b70 <HAL_GPIO_Init+0x300>)
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b06:	4b1a      	ldr	r3, [pc, #104]	; (8004b70 <HAL_GPIO_Init+0x300>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4013      	ands	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b2a:	4a11      	ldr	r2, [pc, #68]	; (8004b70 <HAL_GPIO_Init+0x300>)
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	3301      	adds	r3, #1
 8004b34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f47f ae9d 	bne.w	8004880 <HAL_GPIO_Init+0x10>
  }
}
 8004b46:	bf00      	nop
 8004b48:	bf00      	nop
 8004b4a:	371c      	adds	r7, #28
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	40021000 	.word	0x40021000
 8004b58:	40010000 	.word	0x40010000
 8004b5c:	48000400 	.word	0x48000400
 8004b60:	48000800 	.word	0x48000800
 8004b64:	48000c00 	.word	0x48000c00
 8004b68:	48001000 	.word	0x48001000
 8004b6c:	48001400 	.word	0x48001400
 8004b70:	40010400 	.word	0x40010400

08004b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	807b      	strh	r3, [r7, #2]
 8004b80:	4613      	mov	r3, r2
 8004b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b84:	787b      	ldrb	r3, [r7, #1]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b8a:	887a      	ldrh	r2, [r7, #2]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b90:	e002      	b.n	8004b98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b92:	887a      	ldrh	r2, [r7, #2]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bb6:	887a      	ldrh	r2, [r7, #2]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	041a      	lsls	r2, r3, #16
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	43d9      	mvns	r1, r3
 8004bc2:	887b      	ldrh	r3, [r7, #2]
 8004bc4:	400b      	ands	r3, r1
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	619a      	str	r2, [r3, #24]
}
 8004bcc:	bf00      	nop
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004be2:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004be4:	695a      	ldr	r2, [r3, #20]
 8004be6:	88fb      	ldrh	r3, [r7, #6]
 8004be8:	4013      	ands	r3, r2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d006      	beq.n	8004bfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bee:	4a05      	ldr	r2, [pc, #20]	; (8004c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bf0:	88fb      	ldrh	r3, [r7, #6]
 8004bf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bf4:	88fb      	ldrh	r3, [r7, #6]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fd f9d0 	bl	8001f9c <HAL_GPIO_EXTI_Callback>
  }
}
 8004bfc:	bf00      	nop
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40010400 	.word	0x40010400

08004c08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d141      	bne.n	8004c9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c16:	4b4b      	ldr	r3, [pc, #300]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c22:	d131      	bne.n	8004c88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c24:	4b47      	ldr	r3, [pc, #284]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c2a:	4a46      	ldr	r2, [pc, #280]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c34:	4b43      	ldr	r3, [pc, #268]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c3c:	4a41      	ldr	r2, [pc, #260]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c44:	4b40      	ldr	r3, [pc, #256]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2232      	movs	r2, #50	; 0x32
 8004c4a:	fb02 f303 	mul.w	r3, r2, r3
 8004c4e:	4a3f      	ldr	r2, [pc, #252]	; (8004d4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c50:	fba2 2303 	umull	r2, r3, r2, r3
 8004c54:	0c9b      	lsrs	r3, r3, #18
 8004c56:	3301      	adds	r3, #1
 8004c58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c5a:	e002      	b.n	8004c62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c62:	4b38      	ldr	r3, [pc, #224]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c6e:	d102      	bne.n	8004c76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f2      	bne.n	8004c5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c76:	4b33      	ldr	r3, [pc, #204]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c82:	d158      	bne.n	8004d36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e057      	b.n	8004d38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c88:	4b2e      	ldr	r3, [pc, #184]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c8e:	4a2d      	ldr	r2, [pc, #180]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c98:	e04d      	b.n	8004d36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca0:	d141      	bne.n	8004d26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ca2:	4b28      	ldr	r3, [pc, #160]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cae:	d131      	bne.n	8004d14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cb0:	4b24      	ldr	r3, [pc, #144]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cb6:	4a23      	ldr	r2, [pc, #140]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cc0:	4b20      	ldr	r3, [pc, #128]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cc8:	4a1e      	ldr	r2, [pc, #120]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cd0:	4b1d      	ldr	r3, [pc, #116]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2232      	movs	r2, #50	; 0x32
 8004cd6:	fb02 f303 	mul.w	r3, r2, r3
 8004cda:	4a1c      	ldr	r2, [pc, #112]	; (8004d4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce0:	0c9b      	lsrs	r3, r3, #18
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ce6:	e002      	b.n	8004cee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cee:	4b15      	ldr	r3, [pc, #84]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cfa:	d102      	bne.n	8004d02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f2      	bne.n	8004ce8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d02:	4b10      	ldr	r3, [pc, #64]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d0e:	d112      	bne.n	8004d36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e011      	b.n	8004d38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d14:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d1a:	4a0a      	ldr	r2, [pc, #40]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d24:	e007      	b.n	8004d36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d26:	4b07      	ldr	r3, [pc, #28]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d2e:	4a05      	ldr	r2, [pc, #20]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d34:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	40007000 	.word	0x40007000
 8004d48:	200001c8 	.word	0x200001c8
 8004d4c:	431bde83 	.word	0x431bde83

08004d50 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004d54:	4b05      	ldr	r3, [pc, #20]	; (8004d6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	4a04      	ldr	r2, [pc, #16]	; (8004d6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d5e:	6093      	str	r3, [r2, #8]
}
 8004d60:	bf00      	nop
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40007000 	.word	0x40007000

08004d70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e306      	b.n	8005390 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d075      	beq.n	8004e7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d8e:	4b97      	ldr	r3, [pc, #604]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 030c 	and.w	r3, r3, #12
 8004d96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d98:	4b94      	ldr	r3, [pc, #592]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	2b0c      	cmp	r3, #12
 8004da6:	d102      	bne.n	8004dae <HAL_RCC_OscConfig+0x3e>
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d002      	beq.n	8004db4 <HAL_RCC_OscConfig+0x44>
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d10b      	bne.n	8004dcc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db4:	4b8d      	ldr	r3, [pc, #564]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d05b      	beq.n	8004e78 <HAL_RCC_OscConfig+0x108>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d157      	bne.n	8004e78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e2e1      	b.n	8005390 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd4:	d106      	bne.n	8004de4 <HAL_RCC_OscConfig+0x74>
 8004dd6:	4b85      	ldr	r3, [pc, #532]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a84      	ldr	r2, [pc, #528]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	e01d      	b.n	8004e20 <HAL_RCC_OscConfig+0xb0>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dec:	d10c      	bne.n	8004e08 <HAL_RCC_OscConfig+0x98>
 8004dee:	4b7f      	ldr	r3, [pc, #508]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a7e      	ldr	r2, [pc, #504]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	4b7c      	ldr	r3, [pc, #496]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a7b      	ldr	r2, [pc, #492]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	e00b      	b.n	8004e20 <HAL_RCC_OscConfig+0xb0>
 8004e08:	4b78      	ldr	r3, [pc, #480]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a77      	ldr	r2, [pc, #476]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	4b75      	ldr	r3, [pc, #468]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a74      	ldr	r2, [pc, #464]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d013      	beq.n	8004e50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e28:	f7fd fb7a 	bl	8002520 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e30:	f7fd fb76 	bl	8002520 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b64      	cmp	r3, #100	; 0x64
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e2a6      	b.n	8005390 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e42:	4b6a      	ldr	r3, [pc, #424]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0f0      	beq.n	8004e30 <HAL_RCC_OscConfig+0xc0>
 8004e4e:	e014      	b.n	8004e7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e50:	f7fd fb66 	bl	8002520 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e58:	f7fd fb62 	bl	8002520 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b64      	cmp	r3, #100	; 0x64
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e292      	b.n	8005390 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e6a:	4b60      	ldr	r3, [pc, #384]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f0      	bne.n	8004e58 <HAL_RCC_OscConfig+0xe8>
 8004e76:	e000      	b.n	8004e7a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d075      	beq.n	8004f72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e86:	4b59      	ldr	r3, [pc, #356]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 030c 	and.w	r3, r3, #12
 8004e8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e90:	4b56      	ldr	r3, [pc, #344]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	2b0c      	cmp	r3, #12
 8004e9e:	d102      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x136>
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d002      	beq.n	8004eac <HAL_RCC_OscConfig+0x13c>
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d11f      	bne.n	8004eec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004eac:	4b4f      	ldr	r3, [pc, #316]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x154>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e265      	b.n	8005390 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec4:	4b49      	ldr	r3, [pc, #292]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	061b      	lsls	r3, r3, #24
 8004ed2:	4946      	ldr	r1, [pc, #280]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ed8:	4b45      	ldr	r3, [pc, #276]	; (8004ff0 <HAL_RCC_OscConfig+0x280>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fd fad3 	bl	8002488 <HAL_InitTick>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d043      	beq.n	8004f70 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e251      	b.n	8005390 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d023      	beq.n	8004f3c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ef4:	4b3d      	ldr	r3, [pc, #244]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a3c      	ldr	r2, [pc, #240]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f00:	f7fd fb0e 	bl	8002520 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f08:	f7fd fb0a 	bl	8002520 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e23a      	b.n	8005390 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f1a:	4b34      	ldr	r3, [pc, #208]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f0      	beq.n	8004f08 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f26:	4b31      	ldr	r3, [pc, #196]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	061b      	lsls	r3, r3, #24
 8004f34:	492d      	ldr	r1, [pc, #180]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	604b      	str	r3, [r1, #4]
 8004f3a:	e01a      	b.n	8004f72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f3c:	4b2b      	ldr	r3, [pc, #172]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a2a      	ldr	r2, [pc, #168]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004f42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f48:	f7fd faea 	bl	8002520 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f50:	f7fd fae6 	bl	8002520 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e216      	b.n	8005390 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f62:	4b22      	ldr	r3, [pc, #136]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f0      	bne.n	8004f50 <HAL_RCC_OscConfig+0x1e0>
 8004f6e:	e000      	b.n	8004f72 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0308 	and.w	r3, r3, #8
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d041      	beq.n	8005002 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d01c      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f86:	4b19      	ldr	r3, [pc, #100]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f8c:	4a17      	ldr	r2, [pc, #92]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f96:	f7fd fac3 	bl	8002520 <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f9e:	f7fd fabf 	bl	8002520 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e1ef      	b.n	8005390 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fb0:	4b0e      	ldr	r3, [pc, #56]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0ef      	beq.n	8004f9e <HAL_RCC_OscConfig+0x22e>
 8004fbe:	e020      	b.n	8005002 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fc0:	4b0a      	ldr	r3, [pc, #40]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fc6:	4a09      	ldr	r2, [pc, #36]	; (8004fec <HAL_RCC_OscConfig+0x27c>)
 8004fc8:	f023 0301 	bic.w	r3, r3, #1
 8004fcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd0:	f7fd faa6 	bl	8002520 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fd6:	e00d      	b.n	8004ff4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fd8:	f7fd faa2 	bl	8002520 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d906      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e1d2      	b.n	8005390 <HAL_RCC_OscConfig+0x620>
 8004fea:	bf00      	nop
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	200001cc 	.word	0x200001cc
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ff4:	4b8c      	ldr	r3, [pc, #560]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 8004ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1ea      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 80a6 	beq.w	800515c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005010:	2300      	movs	r3, #0
 8005012:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005014:	4b84      	ldr	r3, [pc, #528]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 8005016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <HAL_RCC_OscConfig+0x2b4>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <HAL_RCC_OscConfig+0x2b6>
 8005024:	2300      	movs	r3, #0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00d      	beq.n	8005046 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800502a:	4b7f      	ldr	r3, [pc, #508]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 800502c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502e:	4a7e      	ldr	r2, [pc, #504]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 8005030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005034:	6593      	str	r3, [r2, #88]	; 0x58
 8005036:	4b7c      	ldr	r3, [pc, #496]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 8005038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005042:	2301      	movs	r3, #1
 8005044:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005046:	4b79      	ldr	r3, [pc, #484]	; (800522c <HAL_RCC_OscConfig+0x4bc>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504e:	2b00      	cmp	r3, #0
 8005050:	d118      	bne.n	8005084 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005052:	4b76      	ldr	r3, [pc, #472]	; (800522c <HAL_RCC_OscConfig+0x4bc>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a75      	ldr	r2, [pc, #468]	; (800522c <HAL_RCC_OscConfig+0x4bc>)
 8005058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800505c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800505e:	f7fd fa5f 	bl	8002520 <HAL_GetTick>
 8005062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005064:	e008      	b.n	8005078 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005066:	f7fd fa5b 	bl	8002520 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e18b      	b.n	8005390 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005078:	4b6c      	ldr	r3, [pc, #432]	; (800522c <HAL_RCC_OscConfig+0x4bc>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0f0      	beq.n	8005066 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d108      	bne.n	800509e <HAL_RCC_OscConfig+0x32e>
 800508c:	4b66      	ldr	r3, [pc, #408]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 800508e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005092:	4a65      	ldr	r2, [pc, #404]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 8005094:	f043 0301 	orr.w	r3, r3, #1
 8005098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800509c:	e024      	b.n	80050e8 <HAL_RCC_OscConfig+0x378>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	2b05      	cmp	r3, #5
 80050a4:	d110      	bne.n	80050c8 <HAL_RCC_OscConfig+0x358>
 80050a6:	4b60      	ldr	r3, [pc, #384]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 80050a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ac:	4a5e      	ldr	r2, [pc, #376]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 80050ae:	f043 0304 	orr.w	r3, r3, #4
 80050b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050b6:	4b5c      	ldr	r3, [pc, #368]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 80050b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050bc:	4a5a      	ldr	r2, [pc, #360]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 80050be:	f043 0301 	orr.w	r3, r3, #1
 80050c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050c6:	e00f      	b.n	80050e8 <HAL_RCC_OscConfig+0x378>
 80050c8:	4b57      	ldr	r3, [pc, #348]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ce:	4a56      	ldr	r2, [pc, #344]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 80050d0:	f023 0301 	bic.w	r3, r3, #1
 80050d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050d8:	4b53      	ldr	r3, [pc, #332]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 80050da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050de:	4a52      	ldr	r2, [pc, #328]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 80050e0:	f023 0304 	bic.w	r3, r3, #4
 80050e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d016      	beq.n	800511e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f0:	f7fd fa16 	bl	8002520 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050f6:	e00a      	b.n	800510e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f8:	f7fd fa12 	bl	8002520 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	f241 3288 	movw	r2, #5000	; 0x1388
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e140      	b.n	8005390 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800510e:	4b46      	ldr	r3, [pc, #280]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 8005110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0ed      	beq.n	80050f8 <HAL_RCC_OscConfig+0x388>
 800511c:	e015      	b.n	800514a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511e:	f7fd f9ff 	bl	8002520 <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005124:	e00a      	b.n	800513c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005126:	f7fd f9fb 	bl	8002520 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	f241 3288 	movw	r2, #5000	; 0x1388
 8005134:	4293      	cmp	r3, r2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e129      	b.n	8005390 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800513c:	4b3a      	ldr	r3, [pc, #232]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 800513e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1ed      	bne.n	8005126 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800514a:	7ffb      	ldrb	r3, [r7, #31]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d105      	bne.n	800515c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005150:	4b35      	ldr	r3, [pc, #212]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 8005152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005154:	4a34      	ldr	r2, [pc, #208]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 8005156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800515a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0320 	and.w	r3, r3, #32
 8005164:	2b00      	cmp	r3, #0
 8005166:	d03c      	beq.n	80051e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01c      	beq.n	80051aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005170:	4b2d      	ldr	r3, [pc, #180]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 8005172:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005176:	4a2c      	ldr	r2, [pc, #176]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 8005178:	f043 0301 	orr.w	r3, r3, #1
 800517c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005180:	f7fd f9ce 	bl	8002520 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005188:	f7fd f9ca 	bl	8002520 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e0fa      	b.n	8005390 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800519a:	4b23      	ldr	r3, [pc, #140]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 800519c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0ef      	beq.n	8005188 <HAL_RCC_OscConfig+0x418>
 80051a8:	e01b      	b.n	80051e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051aa:	4b1f      	ldr	r3, [pc, #124]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 80051ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051b0:	4a1d      	ldr	r2, [pc, #116]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 80051b2:	f023 0301 	bic.w	r3, r3, #1
 80051b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ba:	f7fd f9b1 	bl	8002520 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051c2:	f7fd f9ad 	bl	8002520 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e0dd      	b.n	8005390 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051d4:	4b14      	ldr	r3, [pc, #80]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 80051d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1ef      	bne.n	80051c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 80d1 	beq.w	800538e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051ec:	4b0e      	ldr	r3, [pc, #56]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 030c 	and.w	r3, r3, #12
 80051f4:	2b0c      	cmp	r3, #12
 80051f6:	f000 808b 	beq.w	8005310 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d15e      	bne.n	80052c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005202:	4b09      	ldr	r3, [pc, #36]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a08      	ldr	r2, [pc, #32]	; (8005228 <HAL_RCC_OscConfig+0x4b8>)
 8005208:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800520c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520e:	f7fd f987 	bl	8002520 <HAL_GetTick>
 8005212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005214:	e00c      	b.n	8005230 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005216:	f7fd f983 	bl	8002520 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d905      	bls.n	8005230 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e0b3      	b.n	8005390 <HAL_RCC_OscConfig+0x620>
 8005228:	40021000 	.word	0x40021000
 800522c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005230:	4b59      	ldr	r3, [pc, #356]	; (8005398 <HAL_RCC_OscConfig+0x628>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1ec      	bne.n	8005216 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800523c:	4b56      	ldr	r3, [pc, #344]	; (8005398 <HAL_RCC_OscConfig+0x628>)
 800523e:	68da      	ldr	r2, [r3, #12]
 8005240:	4b56      	ldr	r3, [pc, #344]	; (800539c <HAL_RCC_OscConfig+0x62c>)
 8005242:	4013      	ands	r3, r2
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6a11      	ldr	r1, [r2, #32]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800524c:	3a01      	subs	r2, #1
 800524e:	0112      	lsls	r2, r2, #4
 8005250:	4311      	orrs	r1, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005256:	0212      	lsls	r2, r2, #8
 8005258:	4311      	orrs	r1, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800525e:	0852      	lsrs	r2, r2, #1
 8005260:	3a01      	subs	r2, #1
 8005262:	0552      	lsls	r2, r2, #21
 8005264:	4311      	orrs	r1, r2
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800526a:	0852      	lsrs	r2, r2, #1
 800526c:	3a01      	subs	r2, #1
 800526e:	0652      	lsls	r2, r2, #25
 8005270:	4311      	orrs	r1, r2
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005276:	06d2      	lsls	r2, r2, #27
 8005278:	430a      	orrs	r2, r1
 800527a:	4947      	ldr	r1, [pc, #284]	; (8005398 <HAL_RCC_OscConfig+0x628>)
 800527c:	4313      	orrs	r3, r2
 800527e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005280:	4b45      	ldr	r3, [pc, #276]	; (8005398 <HAL_RCC_OscConfig+0x628>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a44      	ldr	r2, [pc, #272]	; (8005398 <HAL_RCC_OscConfig+0x628>)
 8005286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800528a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800528c:	4b42      	ldr	r3, [pc, #264]	; (8005398 <HAL_RCC_OscConfig+0x628>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	4a41      	ldr	r2, [pc, #260]	; (8005398 <HAL_RCC_OscConfig+0x628>)
 8005292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005296:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005298:	f7fd f942 	bl	8002520 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052a0:	f7fd f93e 	bl	8002520 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e06e      	b.n	8005390 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052b2:	4b39      	ldr	r3, [pc, #228]	; (8005398 <HAL_RCC_OscConfig+0x628>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0f0      	beq.n	80052a0 <HAL_RCC_OscConfig+0x530>
 80052be:	e066      	b.n	800538e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c0:	4b35      	ldr	r3, [pc, #212]	; (8005398 <HAL_RCC_OscConfig+0x628>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a34      	ldr	r2, [pc, #208]	; (8005398 <HAL_RCC_OscConfig+0x628>)
 80052c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052ca:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80052cc:	4b32      	ldr	r3, [pc, #200]	; (8005398 <HAL_RCC_OscConfig+0x628>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	4a31      	ldr	r2, [pc, #196]	; (8005398 <HAL_RCC_OscConfig+0x628>)
 80052d2:	f023 0303 	bic.w	r3, r3, #3
 80052d6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80052d8:	4b2f      	ldr	r3, [pc, #188]	; (8005398 <HAL_RCC_OscConfig+0x628>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4a2e      	ldr	r2, [pc, #184]	; (8005398 <HAL_RCC_OscConfig+0x628>)
 80052de:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80052e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e8:	f7fd f91a 	bl	8002520 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f0:	f7fd f916 	bl	8002520 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e046      	b.n	8005390 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005302:	4b25      	ldr	r3, [pc, #148]	; (8005398 <HAL_RCC_OscConfig+0x628>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1f0      	bne.n	80052f0 <HAL_RCC_OscConfig+0x580>
 800530e:	e03e      	b.n	800538e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e039      	b.n	8005390 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800531c:	4b1e      	ldr	r3, [pc, #120]	; (8005398 <HAL_RCC_OscConfig+0x628>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f003 0203 	and.w	r2, r3, #3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	429a      	cmp	r2, r3
 800532e:	d12c      	bne.n	800538a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	3b01      	subs	r3, #1
 800533c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800533e:	429a      	cmp	r2, r3
 8005340:	d123      	bne.n	800538a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800534e:	429a      	cmp	r2, r3
 8005350:	d11b      	bne.n	800538a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800535e:	429a      	cmp	r2, r3
 8005360:	d113      	bne.n	800538a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	085b      	lsrs	r3, r3, #1
 800536e:	3b01      	subs	r3, #1
 8005370:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005372:	429a      	cmp	r2, r3
 8005374:	d109      	bne.n	800538a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005380:	085b      	lsrs	r3, r3, #1
 8005382:	3b01      	subs	r3, #1
 8005384:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005386:	429a      	cmp	r2, r3
 8005388:	d001      	beq.n	800538e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3720      	adds	r7, #32
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40021000 	.word	0x40021000
 800539c:	019f800c 	.word	0x019f800c

080053a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80053aa:	2300      	movs	r3, #0
 80053ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e11e      	b.n	80055f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053b8:	4b91      	ldr	r3, [pc, #580]	; (8005600 <HAL_RCC_ClockConfig+0x260>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 030f 	and.w	r3, r3, #15
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d910      	bls.n	80053e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053c6:	4b8e      	ldr	r3, [pc, #568]	; (8005600 <HAL_RCC_ClockConfig+0x260>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f023 020f 	bic.w	r2, r3, #15
 80053ce:	498c      	ldr	r1, [pc, #560]	; (8005600 <HAL_RCC_ClockConfig+0x260>)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053d6:	4b8a      	ldr	r3, [pc, #552]	; (8005600 <HAL_RCC_ClockConfig+0x260>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 030f 	and.w	r3, r3, #15
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d001      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e106      	b.n	80055f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d073      	beq.n	80054dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d129      	bne.n	8005450 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053fc:	4b81      	ldr	r3, [pc, #516]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e0f4      	b.n	80055f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800540c:	f000 f99e 	bl	800574c <RCC_GetSysClockFreqFromPLLSource>
 8005410:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	4a7c      	ldr	r2, [pc, #496]	; (8005608 <HAL_RCC_ClockConfig+0x268>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d93f      	bls.n	800549a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800541a:	4b7a      	ldr	r3, [pc, #488]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d009      	beq.n	800543a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800542e:	2b00      	cmp	r3, #0
 8005430:	d033      	beq.n	800549a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005436:	2b00      	cmp	r3, #0
 8005438:	d12f      	bne.n	800549a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800543a:	4b72      	ldr	r3, [pc, #456]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005442:	4a70      	ldr	r2, [pc, #448]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 8005444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005448:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800544a:	2380      	movs	r3, #128	; 0x80
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	e024      	b.n	800549a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b02      	cmp	r3, #2
 8005456:	d107      	bne.n	8005468 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005458:	4b6a      	ldr	r3, [pc, #424]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d109      	bne.n	8005478 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e0c6      	b.n	80055f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005468:	4b66      	ldr	r3, [pc, #408]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e0be      	b.n	80055f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005478:	f000 f8ce 	bl	8005618 <HAL_RCC_GetSysClockFreq>
 800547c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	4a61      	ldr	r2, [pc, #388]	; (8005608 <HAL_RCC_ClockConfig+0x268>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d909      	bls.n	800549a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005486:	4b5f      	ldr	r3, [pc, #380]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800548e:	4a5d      	ldr	r2, [pc, #372]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 8005490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005494:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005496:	2380      	movs	r3, #128	; 0x80
 8005498:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800549a:	4b5a      	ldr	r3, [pc, #360]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f023 0203 	bic.w	r2, r3, #3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	4957      	ldr	r1, [pc, #348]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ac:	f7fd f838 	bl	8002520 <HAL_GetTick>
 80054b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054b2:	e00a      	b.n	80054ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054b4:	f7fd f834 	bl	8002520 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e095      	b.n	80055f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ca:	4b4e      	ldr	r3, [pc, #312]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 020c 	and.w	r2, r3, #12
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	429a      	cmp	r2, r3
 80054da:	d1eb      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d023      	beq.n	8005530 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d005      	beq.n	8005500 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054f4:	4b43      	ldr	r3, [pc, #268]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	4a42      	ldr	r2, [pc, #264]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 80054fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0308 	and.w	r3, r3, #8
 8005508:	2b00      	cmp	r3, #0
 800550a:	d007      	beq.n	800551c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800550c:	4b3d      	ldr	r3, [pc, #244]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005514:	4a3b      	ldr	r2, [pc, #236]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 8005516:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800551a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800551c:	4b39      	ldr	r3, [pc, #228]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	4936      	ldr	r1, [pc, #216]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 800552a:	4313      	orrs	r3, r2
 800552c:	608b      	str	r3, [r1, #8]
 800552e:	e008      	b.n	8005542 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2b80      	cmp	r3, #128	; 0x80
 8005534:	d105      	bne.n	8005542 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005536:	4b33      	ldr	r3, [pc, #204]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	4a32      	ldr	r2, [pc, #200]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 800553c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005540:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005542:	4b2f      	ldr	r3, [pc, #188]	; (8005600 <HAL_RCC_ClockConfig+0x260>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d21d      	bcs.n	800558c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005550:	4b2b      	ldr	r3, [pc, #172]	; (8005600 <HAL_RCC_ClockConfig+0x260>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f023 020f 	bic.w	r2, r3, #15
 8005558:	4929      	ldr	r1, [pc, #164]	; (8005600 <HAL_RCC_ClockConfig+0x260>)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	4313      	orrs	r3, r2
 800555e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005560:	f7fc ffde 	bl	8002520 <HAL_GetTick>
 8005564:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005566:	e00a      	b.n	800557e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005568:	f7fc ffda 	bl	8002520 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	f241 3288 	movw	r2, #5000	; 0x1388
 8005576:	4293      	cmp	r3, r2
 8005578:	d901      	bls.n	800557e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e03b      	b.n	80055f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800557e:	4b20      	ldr	r3, [pc, #128]	; (8005600 <HAL_RCC_ClockConfig+0x260>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	429a      	cmp	r2, r3
 800558a:	d1ed      	bne.n	8005568 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d008      	beq.n	80055aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005598:	4b1a      	ldr	r3, [pc, #104]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	4917      	ldr	r1, [pc, #92]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d009      	beq.n	80055ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055b6:	4b13      	ldr	r3, [pc, #76]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	490f      	ldr	r1, [pc, #60]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055ca:	f000 f825 	bl	8005618 <HAL_RCC_GetSysClockFreq>
 80055ce:	4602      	mov	r2, r0
 80055d0:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <HAL_RCC_ClockConfig+0x264>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	091b      	lsrs	r3, r3, #4
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	490c      	ldr	r1, [pc, #48]	; (800560c <HAL_RCC_ClockConfig+0x26c>)
 80055dc:	5ccb      	ldrb	r3, [r1, r3]
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	fa22 f303 	lsr.w	r3, r2, r3
 80055e6:	4a0a      	ldr	r2, [pc, #40]	; (8005610 <HAL_RCC_ClockConfig+0x270>)
 80055e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80055ea:	4b0a      	ldr	r3, [pc, #40]	; (8005614 <HAL_RCC_ClockConfig+0x274>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fc ff4a 	bl	8002488 <HAL_InitTick>
 80055f4:	4603      	mov	r3, r0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3718      	adds	r7, #24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	40022000 	.word	0x40022000
 8005604:	40021000 	.word	0x40021000
 8005608:	04c4b400 	.word	0x04c4b400
 800560c:	080099c4 	.word	0x080099c4
 8005610:	200001c8 	.word	0x200001c8
 8005614:	200001cc 	.word	0x200001cc

08005618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800561e:	4b2c      	ldr	r3, [pc, #176]	; (80056d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 030c 	and.w	r3, r3, #12
 8005626:	2b04      	cmp	r3, #4
 8005628:	d102      	bne.n	8005630 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800562a:	4b2a      	ldr	r3, [pc, #168]	; (80056d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800562c:	613b      	str	r3, [r7, #16]
 800562e:	e047      	b.n	80056c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005630:	4b27      	ldr	r3, [pc, #156]	; (80056d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f003 030c 	and.w	r3, r3, #12
 8005638:	2b08      	cmp	r3, #8
 800563a:	d102      	bne.n	8005642 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800563c:	4b26      	ldr	r3, [pc, #152]	; (80056d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	e03e      	b.n	80056c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005642:	4b23      	ldr	r3, [pc, #140]	; (80056d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 030c 	and.w	r3, r3, #12
 800564a:	2b0c      	cmp	r3, #12
 800564c:	d136      	bne.n	80056bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800564e:	4b20      	ldr	r3, [pc, #128]	; (80056d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005658:	4b1d      	ldr	r3, [pc, #116]	; (80056d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	091b      	lsrs	r3, r3, #4
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	3301      	adds	r3, #1
 8005664:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b03      	cmp	r3, #3
 800566a:	d10c      	bne.n	8005686 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800566c:	4a1a      	ldr	r2, [pc, #104]	; (80056d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	fbb2 f3f3 	udiv	r3, r2, r3
 8005674:	4a16      	ldr	r2, [pc, #88]	; (80056d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005676:	68d2      	ldr	r2, [r2, #12]
 8005678:	0a12      	lsrs	r2, r2, #8
 800567a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800567e:	fb02 f303 	mul.w	r3, r2, r3
 8005682:	617b      	str	r3, [r7, #20]
      break;
 8005684:	e00c      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005686:	4a13      	ldr	r2, [pc, #76]	; (80056d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	fbb2 f3f3 	udiv	r3, r2, r3
 800568e:	4a10      	ldr	r2, [pc, #64]	; (80056d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005690:	68d2      	ldr	r2, [r2, #12]
 8005692:	0a12      	lsrs	r2, r2, #8
 8005694:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005698:	fb02 f303 	mul.w	r3, r2, r3
 800569c:	617b      	str	r3, [r7, #20]
      break;
 800569e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056a0:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	0e5b      	lsrs	r3, r3, #25
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	3301      	adds	r3, #1
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	e001      	b.n	80056c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80056c0:	693b      	ldr	r3, [r7, #16]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	40021000 	.word	0x40021000
 80056d4:	00f42400 	.word	0x00f42400
 80056d8:	016e3600 	.word	0x016e3600

080056dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056e0:	4b03      	ldr	r3, [pc, #12]	; (80056f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80056e2:	681b      	ldr	r3, [r3, #0]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	200001c8 	.word	0x200001c8

080056f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80056f8:	f7ff fff0 	bl	80056dc <HAL_RCC_GetHCLKFreq>
 80056fc:	4602      	mov	r2, r0
 80056fe:	4b06      	ldr	r3, [pc, #24]	; (8005718 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	0a1b      	lsrs	r3, r3, #8
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	4904      	ldr	r1, [pc, #16]	; (800571c <HAL_RCC_GetPCLK1Freq+0x28>)
 800570a:	5ccb      	ldrb	r3, [r1, r3]
 800570c:	f003 031f 	and.w	r3, r3, #31
 8005710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005714:	4618      	mov	r0, r3
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40021000 	.word	0x40021000
 800571c:	080099d4 	.word	0x080099d4

08005720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005724:	f7ff ffda 	bl	80056dc <HAL_RCC_GetHCLKFreq>
 8005728:	4602      	mov	r2, r0
 800572a:	4b06      	ldr	r3, [pc, #24]	; (8005744 <HAL_RCC_GetPCLK2Freq+0x24>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	0adb      	lsrs	r3, r3, #11
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	4904      	ldr	r1, [pc, #16]	; (8005748 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005736:	5ccb      	ldrb	r3, [r1, r3]
 8005738:	f003 031f 	and.w	r3, r3, #31
 800573c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005740:	4618      	mov	r0, r3
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40021000 	.word	0x40021000
 8005748:	080099d4 	.word	0x080099d4

0800574c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005752:	4b1e      	ldr	r3, [pc, #120]	; (80057cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800575c:	4b1b      	ldr	r3, [pc, #108]	; (80057cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	091b      	lsrs	r3, r3, #4
 8005762:	f003 030f 	and.w	r3, r3, #15
 8005766:	3301      	adds	r3, #1
 8005768:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2b03      	cmp	r3, #3
 800576e:	d10c      	bne.n	800578a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005770:	4a17      	ldr	r2, [pc, #92]	; (80057d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	fbb2 f3f3 	udiv	r3, r2, r3
 8005778:	4a14      	ldr	r2, [pc, #80]	; (80057cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800577a:	68d2      	ldr	r2, [r2, #12]
 800577c:	0a12      	lsrs	r2, r2, #8
 800577e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005782:	fb02 f303 	mul.w	r3, r2, r3
 8005786:	617b      	str	r3, [r7, #20]
    break;
 8005788:	e00c      	b.n	80057a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800578a:	4a12      	ldr	r2, [pc, #72]	; (80057d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005792:	4a0e      	ldr	r2, [pc, #56]	; (80057cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005794:	68d2      	ldr	r2, [r2, #12]
 8005796:	0a12      	lsrs	r2, r2, #8
 8005798:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800579c:	fb02 f303 	mul.w	r3, r2, r3
 80057a0:	617b      	str	r3, [r7, #20]
    break;
 80057a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057a4:	4b09      	ldr	r3, [pc, #36]	; (80057cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	0e5b      	lsrs	r3, r3, #25
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	3301      	adds	r3, #1
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80057be:	687b      	ldr	r3, [r7, #4]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	371c      	adds	r7, #28
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	40021000 	.word	0x40021000
 80057d0:	016e3600 	.word	0x016e3600
 80057d4:	00f42400 	.word	0x00f42400

080057d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057e0:	2300      	movs	r3, #0
 80057e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057e4:	2300      	movs	r3, #0
 80057e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 8098 	beq.w	8005926 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057f6:	2300      	movs	r3, #0
 80057f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057fa:	4b43      	ldr	r3, [pc, #268]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10d      	bne.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005806:	4b40      	ldr	r3, [pc, #256]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580a:	4a3f      	ldr	r2, [pc, #252]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800580c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005810:	6593      	str	r3, [r2, #88]	; 0x58
 8005812:	4b3d      	ldr	r3, [pc, #244]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800581a:	60bb      	str	r3, [r7, #8]
 800581c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800581e:	2301      	movs	r3, #1
 8005820:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005822:	4b3a      	ldr	r3, [pc, #232]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a39      	ldr	r2, [pc, #228]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800582c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800582e:	f7fc fe77 	bl	8002520 <HAL_GetTick>
 8005832:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005834:	e009      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005836:	f7fc fe73 	bl	8002520 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d902      	bls.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	74fb      	strb	r3, [r7, #19]
        break;
 8005848:	e005      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800584a:	4b30      	ldr	r3, [pc, #192]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0ef      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005856:	7cfb      	ldrb	r3, [r7, #19]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d159      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800585c:	4b2a      	ldr	r3, [pc, #168]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800585e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005866:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d01e      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	429a      	cmp	r2, r3
 8005876:	d019      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005878:	4b23      	ldr	r3, [pc, #140]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800587a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005882:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005884:	4b20      	ldr	r3, [pc, #128]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588a:	4a1f      	ldr	r2, [pc, #124]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800588c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005894:	4b1c      	ldr	r3, [pc, #112]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589a:	4a1b      	ldr	r2, [pc, #108]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800589c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058a4:	4a18      	ldr	r2, [pc, #96]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d016      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b6:	f7fc fe33 	bl	8002520 <HAL_GetTick>
 80058ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058bc:	e00b      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058be:	f7fc fe2f 	bl	8002520 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d902      	bls.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	74fb      	strb	r3, [r7, #19]
            break;
 80058d4:	e006      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058d6:	4b0c      	ldr	r3, [pc, #48]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0ec      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80058e4:	7cfb      	ldrb	r3, [r7, #19]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10b      	bne.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058ea:	4b07      	ldr	r3, [pc, #28]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f8:	4903      	ldr	r1, [pc, #12]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005900:	e008      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005902:	7cfb      	ldrb	r3, [r7, #19]
 8005904:	74bb      	strb	r3, [r7, #18]
 8005906:	e005      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005908:	40021000 	.word	0x40021000
 800590c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005910:	7cfb      	ldrb	r3, [r7, #19]
 8005912:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005914:	7c7b      	ldrb	r3, [r7, #17]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d105      	bne.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800591a:	4ba7      	ldr	r3, [pc, #668]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800591c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591e:	4aa6      	ldr	r2, [pc, #664]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005924:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005932:	4ba1      	ldr	r3, [pc, #644]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005938:	f023 0203 	bic.w	r2, r3, #3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	499d      	ldr	r1, [pc, #628]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005942:	4313      	orrs	r3, r2
 8005944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00a      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005954:	4b98      	ldr	r3, [pc, #608]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595a:	f023 020c 	bic.w	r2, r3, #12
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	4995      	ldr	r1, [pc, #596]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005964:	4313      	orrs	r3, r2
 8005966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0304 	and.w	r3, r3, #4
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005976:	4b90      	ldr	r3, [pc, #576]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	498c      	ldr	r1, [pc, #560]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005986:	4313      	orrs	r3, r2
 8005988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00a      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005998:	4b87      	ldr	r3, [pc, #540]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800599a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	4984      	ldr	r1, [pc, #528]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0310 	and.w	r3, r3, #16
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059ba:	4b7f      	ldr	r3, [pc, #508]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	497b      	ldr	r1, [pc, #492]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0320 	and.w	r3, r3, #32
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00a      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059dc:	4b76      	ldr	r3, [pc, #472]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	4973      	ldr	r1, [pc, #460]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059fe:	4b6e      	ldr	r3, [pc, #440]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	496a      	ldr	r1, [pc, #424]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a20:	4b65      	ldr	r3, [pc, #404]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	4962      	ldr	r1, [pc, #392]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a42:	4b5d      	ldr	r3, [pc, #372]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	4959      	ldr	r1, [pc, #356]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00a      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a64:	4b54      	ldr	r3, [pc, #336]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a6a:	f023 0203 	bic.w	r2, r3, #3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a72:	4951      	ldr	r1, [pc, #324]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a86:	4b4c      	ldr	r3, [pc, #304]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	4948      	ldr	r1, [pc, #288]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d015      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005aa8:	4b43      	ldr	r3, [pc, #268]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab6:	4940      	ldr	r1, [pc, #256]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ac6:	d105      	bne.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ac8:	4b3b      	ldr	r3, [pc, #236]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	4a3a      	ldr	r2, [pc, #232]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ace:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ad2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d015      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ae0:	4b35      	ldr	r3, [pc, #212]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aee:	4932      	ldr	r1, [pc, #200]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005afe:	d105      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b00:	4b2d      	ldr	r3, [pc, #180]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	4a2c      	ldr	r2, [pc, #176]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b0a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d015      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b18:	4b27      	ldr	r3, [pc, #156]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	4924      	ldr	r1, [pc, #144]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b36:	d105      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b38:	4b1f      	ldr	r3, [pc, #124]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	4a1e      	ldr	r2, [pc, #120]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d015      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b50:	4b19      	ldr	r3, [pc, #100]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5e:	4916      	ldr	r1, [pc, #88]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b6e:	d105      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b70:	4b11      	ldr	r3, [pc, #68]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	4a10      	ldr	r2, [pc, #64]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d019      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b88:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	4908      	ldr	r1, [pc, #32]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ba6:	d109      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ba8:	4b03      	ldr	r3, [pc, #12]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	4a02      	ldr	r2, [pc, #8]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bb2:	60d3      	str	r3, [r2, #12]
 8005bb4:	e002      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005bb6:	bf00      	nop
 8005bb8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d015      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005bc8:	4b29      	ldr	r3, [pc, #164]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd6:	4926      	ldr	r1, [pc, #152]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005be6:	d105      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005be8:	4b21      	ldr	r3, [pc, #132]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	4a20      	ldr	r2, [pc, #128]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bf2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d015      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005c00:	4b1b      	ldr	r3, [pc, #108]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c06:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c0e:	4918      	ldr	r1, [pc, #96]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c1e:	d105      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c20:	4b13      	ldr	r3, [pc, #76]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	4a12      	ldr	r2, [pc, #72]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c2a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d015      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c38:	4b0d      	ldr	r3, [pc, #52]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c46:	490a      	ldr	r1, [pc, #40]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c56:	d105      	bne.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	4a04      	ldr	r2, [pc, #16]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c62:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005c64:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	40021000 	.word	0x40021000

08005c74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e042      	b.n	8005d0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d106      	bne.n	8005c9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7fc fa3d 	bl	8002118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2224      	movs	r2, #36	; 0x24
 8005ca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0201 	bic.w	r2, r2, #1
 8005cb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f8c2 	bl	8005e40 <UART_SetConfig>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d101      	bne.n	8005cc6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e022      	b.n	8005d0c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fbb2 	bl	8006438 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ce2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fc39 	bl	800657c <UART_CheckIdleState>
 8005d0a:	4603      	mov	r3, r0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08a      	sub	sp, #40	; 0x28
 8005d18:	af02      	add	r7, sp, #8
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	603b      	str	r3, [r7, #0]
 8005d20:	4613      	mov	r3, r2
 8005d22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d2a:	2b20      	cmp	r3, #32
 8005d2c:	f040 8083 	bne.w	8005e36 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <HAL_UART_Transmit+0x28>
 8005d36:	88fb      	ldrh	r3, [r7, #6]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e07b      	b.n	8005e38 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d101      	bne.n	8005d4e <HAL_UART_Transmit+0x3a>
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	e074      	b.n	8005e38 <HAL_UART_Transmit+0x124>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2221      	movs	r2, #33	; 0x21
 8005d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d66:	f7fc fbdb 	bl	8002520 <HAL_GetTick>
 8005d6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	88fa      	ldrh	r2, [r7, #6]
 8005d70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	88fa      	ldrh	r2, [r7, #6]
 8005d78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d84:	d108      	bne.n	8005d98 <HAL_UART_Transmit+0x84>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d104      	bne.n	8005d98 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	61bb      	str	r3, [r7, #24]
 8005d96:	e003      	b.n	8005da0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005da8:	e02c      	b.n	8005e04 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2200      	movs	r2, #0
 8005db2:	2180      	movs	r1, #128	; 0x80
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 fc2c 	bl	8006612 <UART_WaitOnFlagUntilTimeout>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e039      	b.n	8005e38 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10b      	bne.n	8005de2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dd8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	3302      	adds	r3, #2
 8005dde:	61bb      	str	r3, [r7, #24]
 8005de0:	e007      	b.n	8005df2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	781a      	ldrb	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	3301      	adds	r3, #1
 8005df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1cc      	bne.n	8005daa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2200      	movs	r2, #0
 8005e18:	2140      	movs	r1, #64	; 0x40
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 fbf9 	bl	8006612 <UART_WaitOnFlagUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e006      	b.n	8005e38 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	e000      	b.n	8005e38 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005e36:	2302      	movs	r3, #2
  }
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3720      	adds	r7, #32
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e44:	b08c      	sub	sp, #48	; 0x30
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	689a      	ldr	r2, [r3, #8]
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	4baa      	ldr	r3, [pc, #680]	; (8006118 <UART_SetConfig+0x2d8>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	6812      	ldr	r2, [r2, #0]
 8005e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e78:	430b      	orrs	r3, r1
 8005e7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a9f      	ldr	r2, [pc, #636]	; (800611c <UART_SetConfig+0x2dc>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d004      	beq.n	8005eac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005eb6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	6812      	ldr	r2, [r2, #0]
 8005ebe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ec0:	430b      	orrs	r3, r1
 8005ec2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eca:	f023 010f 	bic.w	r1, r3, #15
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a90      	ldr	r2, [pc, #576]	; (8006120 <UART_SetConfig+0x2e0>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d125      	bne.n	8005f30 <UART_SetConfig+0xf0>
 8005ee4:	4b8f      	ldr	r3, [pc, #572]	; (8006124 <UART_SetConfig+0x2e4>)
 8005ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d81a      	bhi.n	8005f28 <UART_SetConfig+0xe8>
 8005ef2:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <UART_SetConfig+0xb8>)
 8005ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef8:	08005f09 	.word	0x08005f09
 8005efc:	08005f19 	.word	0x08005f19
 8005f00:	08005f11 	.word	0x08005f11
 8005f04:	08005f21 	.word	0x08005f21
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f0e:	e116      	b.n	800613e <UART_SetConfig+0x2fe>
 8005f10:	2302      	movs	r3, #2
 8005f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f16:	e112      	b.n	800613e <UART_SetConfig+0x2fe>
 8005f18:	2304      	movs	r3, #4
 8005f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f1e:	e10e      	b.n	800613e <UART_SetConfig+0x2fe>
 8005f20:	2308      	movs	r3, #8
 8005f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f26:	e10a      	b.n	800613e <UART_SetConfig+0x2fe>
 8005f28:	2310      	movs	r3, #16
 8005f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f2e:	e106      	b.n	800613e <UART_SetConfig+0x2fe>
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a7c      	ldr	r2, [pc, #496]	; (8006128 <UART_SetConfig+0x2e8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d138      	bne.n	8005fac <UART_SetConfig+0x16c>
 8005f3a:	4b7a      	ldr	r3, [pc, #488]	; (8006124 <UART_SetConfig+0x2e4>)
 8005f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f40:	f003 030c 	and.w	r3, r3, #12
 8005f44:	2b0c      	cmp	r3, #12
 8005f46:	d82d      	bhi.n	8005fa4 <UART_SetConfig+0x164>
 8005f48:	a201      	add	r2, pc, #4	; (adr r2, 8005f50 <UART_SetConfig+0x110>)
 8005f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4e:	bf00      	nop
 8005f50:	08005f85 	.word	0x08005f85
 8005f54:	08005fa5 	.word	0x08005fa5
 8005f58:	08005fa5 	.word	0x08005fa5
 8005f5c:	08005fa5 	.word	0x08005fa5
 8005f60:	08005f95 	.word	0x08005f95
 8005f64:	08005fa5 	.word	0x08005fa5
 8005f68:	08005fa5 	.word	0x08005fa5
 8005f6c:	08005fa5 	.word	0x08005fa5
 8005f70:	08005f8d 	.word	0x08005f8d
 8005f74:	08005fa5 	.word	0x08005fa5
 8005f78:	08005fa5 	.word	0x08005fa5
 8005f7c:	08005fa5 	.word	0x08005fa5
 8005f80:	08005f9d 	.word	0x08005f9d
 8005f84:	2300      	movs	r3, #0
 8005f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f8a:	e0d8      	b.n	800613e <UART_SetConfig+0x2fe>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f92:	e0d4      	b.n	800613e <UART_SetConfig+0x2fe>
 8005f94:	2304      	movs	r3, #4
 8005f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f9a:	e0d0      	b.n	800613e <UART_SetConfig+0x2fe>
 8005f9c:	2308      	movs	r3, #8
 8005f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fa2:	e0cc      	b.n	800613e <UART_SetConfig+0x2fe>
 8005fa4:	2310      	movs	r3, #16
 8005fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005faa:	e0c8      	b.n	800613e <UART_SetConfig+0x2fe>
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a5e      	ldr	r2, [pc, #376]	; (800612c <UART_SetConfig+0x2ec>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d125      	bne.n	8006002 <UART_SetConfig+0x1c2>
 8005fb6:	4b5b      	ldr	r3, [pc, #364]	; (8006124 <UART_SetConfig+0x2e4>)
 8005fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fc0:	2b30      	cmp	r3, #48	; 0x30
 8005fc2:	d016      	beq.n	8005ff2 <UART_SetConfig+0x1b2>
 8005fc4:	2b30      	cmp	r3, #48	; 0x30
 8005fc6:	d818      	bhi.n	8005ffa <UART_SetConfig+0x1ba>
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	d00a      	beq.n	8005fe2 <UART_SetConfig+0x1a2>
 8005fcc:	2b20      	cmp	r3, #32
 8005fce:	d814      	bhi.n	8005ffa <UART_SetConfig+0x1ba>
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <UART_SetConfig+0x19a>
 8005fd4:	2b10      	cmp	r3, #16
 8005fd6:	d008      	beq.n	8005fea <UART_SetConfig+0x1aa>
 8005fd8:	e00f      	b.n	8005ffa <UART_SetConfig+0x1ba>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fe0:	e0ad      	b.n	800613e <UART_SetConfig+0x2fe>
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fe8:	e0a9      	b.n	800613e <UART_SetConfig+0x2fe>
 8005fea:	2304      	movs	r3, #4
 8005fec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ff0:	e0a5      	b.n	800613e <UART_SetConfig+0x2fe>
 8005ff2:	2308      	movs	r3, #8
 8005ff4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ff8:	e0a1      	b.n	800613e <UART_SetConfig+0x2fe>
 8005ffa:	2310      	movs	r3, #16
 8005ffc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006000:	e09d      	b.n	800613e <UART_SetConfig+0x2fe>
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a4a      	ldr	r2, [pc, #296]	; (8006130 <UART_SetConfig+0x2f0>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d125      	bne.n	8006058 <UART_SetConfig+0x218>
 800600c:	4b45      	ldr	r3, [pc, #276]	; (8006124 <UART_SetConfig+0x2e4>)
 800600e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006012:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006016:	2bc0      	cmp	r3, #192	; 0xc0
 8006018:	d016      	beq.n	8006048 <UART_SetConfig+0x208>
 800601a:	2bc0      	cmp	r3, #192	; 0xc0
 800601c:	d818      	bhi.n	8006050 <UART_SetConfig+0x210>
 800601e:	2b80      	cmp	r3, #128	; 0x80
 8006020:	d00a      	beq.n	8006038 <UART_SetConfig+0x1f8>
 8006022:	2b80      	cmp	r3, #128	; 0x80
 8006024:	d814      	bhi.n	8006050 <UART_SetConfig+0x210>
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <UART_SetConfig+0x1f0>
 800602a:	2b40      	cmp	r3, #64	; 0x40
 800602c:	d008      	beq.n	8006040 <UART_SetConfig+0x200>
 800602e:	e00f      	b.n	8006050 <UART_SetConfig+0x210>
 8006030:	2300      	movs	r3, #0
 8006032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006036:	e082      	b.n	800613e <UART_SetConfig+0x2fe>
 8006038:	2302      	movs	r3, #2
 800603a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800603e:	e07e      	b.n	800613e <UART_SetConfig+0x2fe>
 8006040:	2304      	movs	r3, #4
 8006042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006046:	e07a      	b.n	800613e <UART_SetConfig+0x2fe>
 8006048:	2308      	movs	r3, #8
 800604a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800604e:	e076      	b.n	800613e <UART_SetConfig+0x2fe>
 8006050:	2310      	movs	r3, #16
 8006052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006056:	e072      	b.n	800613e <UART_SetConfig+0x2fe>
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a35      	ldr	r2, [pc, #212]	; (8006134 <UART_SetConfig+0x2f4>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d12a      	bne.n	80060b8 <UART_SetConfig+0x278>
 8006062:	4b30      	ldr	r3, [pc, #192]	; (8006124 <UART_SetConfig+0x2e4>)
 8006064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800606c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006070:	d01a      	beq.n	80060a8 <UART_SetConfig+0x268>
 8006072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006076:	d81b      	bhi.n	80060b0 <UART_SetConfig+0x270>
 8006078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800607c:	d00c      	beq.n	8006098 <UART_SetConfig+0x258>
 800607e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006082:	d815      	bhi.n	80060b0 <UART_SetConfig+0x270>
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <UART_SetConfig+0x250>
 8006088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800608c:	d008      	beq.n	80060a0 <UART_SetConfig+0x260>
 800608e:	e00f      	b.n	80060b0 <UART_SetConfig+0x270>
 8006090:	2300      	movs	r3, #0
 8006092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006096:	e052      	b.n	800613e <UART_SetConfig+0x2fe>
 8006098:	2302      	movs	r3, #2
 800609a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800609e:	e04e      	b.n	800613e <UART_SetConfig+0x2fe>
 80060a0:	2304      	movs	r3, #4
 80060a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060a6:	e04a      	b.n	800613e <UART_SetConfig+0x2fe>
 80060a8:	2308      	movs	r3, #8
 80060aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ae:	e046      	b.n	800613e <UART_SetConfig+0x2fe>
 80060b0:	2310      	movs	r3, #16
 80060b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060b6:	e042      	b.n	800613e <UART_SetConfig+0x2fe>
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a17      	ldr	r2, [pc, #92]	; (800611c <UART_SetConfig+0x2dc>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d13a      	bne.n	8006138 <UART_SetConfig+0x2f8>
 80060c2:	4b18      	ldr	r3, [pc, #96]	; (8006124 <UART_SetConfig+0x2e4>)
 80060c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060d0:	d01a      	beq.n	8006108 <UART_SetConfig+0x2c8>
 80060d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060d6:	d81b      	bhi.n	8006110 <UART_SetConfig+0x2d0>
 80060d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060dc:	d00c      	beq.n	80060f8 <UART_SetConfig+0x2b8>
 80060de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060e2:	d815      	bhi.n	8006110 <UART_SetConfig+0x2d0>
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <UART_SetConfig+0x2b0>
 80060e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ec:	d008      	beq.n	8006100 <UART_SetConfig+0x2c0>
 80060ee:	e00f      	b.n	8006110 <UART_SetConfig+0x2d0>
 80060f0:	2300      	movs	r3, #0
 80060f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060f6:	e022      	b.n	800613e <UART_SetConfig+0x2fe>
 80060f8:	2302      	movs	r3, #2
 80060fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060fe:	e01e      	b.n	800613e <UART_SetConfig+0x2fe>
 8006100:	2304      	movs	r3, #4
 8006102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006106:	e01a      	b.n	800613e <UART_SetConfig+0x2fe>
 8006108:	2308      	movs	r3, #8
 800610a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800610e:	e016      	b.n	800613e <UART_SetConfig+0x2fe>
 8006110:	2310      	movs	r3, #16
 8006112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006116:	e012      	b.n	800613e <UART_SetConfig+0x2fe>
 8006118:	cfff69f3 	.word	0xcfff69f3
 800611c:	40008000 	.word	0x40008000
 8006120:	40013800 	.word	0x40013800
 8006124:	40021000 	.word	0x40021000
 8006128:	40004400 	.word	0x40004400
 800612c:	40004800 	.word	0x40004800
 8006130:	40004c00 	.word	0x40004c00
 8006134:	40005000 	.word	0x40005000
 8006138:	2310      	movs	r3, #16
 800613a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4aae      	ldr	r2, [pc, #696]	; (80063fc <UART_SetConfig+0x5bc>)
 8006144:	4293      	cmp	r3, r2
 8006146:	f040 8097 	bne.w	8006278 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800614a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800614e:	2b08      	cmp	r3, #8
 8006150:	d823      	bhi.n	800619a <UART_SetConfig+0x35a>
 8006152:	a201      	add	r2, pc, #4	; (adr r2, 8006158 <UART_SetConfig+0x318>)
 8006154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006158:	0800617d 	.word	0x0800617d
 800615c:	0800619b 	.word	0x0800619b
 8006160:	08006185 	.word	0x08006185
 8006164:	0800619b 	.word	0x0800619b
 8006168:	0800618b 	.word	0x0800618b
 800616c:	0800619b 	.word	0x0800619b
 8006170:	0800619b 	.word	0x0800619b
 8006174:	0800619b 	.word	0x0800619b
 8006178:	08006193 	.word	0x08006193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800617c:	f7ff faba 	bl	80056f4 <HAL_RCC_GetPCLK1Freq>
 8006180:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006182:	e010      	b.n	80061a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006184:	4b9e      	ldr	r3, [pc, #632]	; (8006400 <UART_SetConfig+0x5c0>)
 8006186:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006188:	e00d      	b.n	80061a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800618a:	f7ff fa45 	bl	8005618 <HAL_RCC_GetSysClockFreq>
 800618e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006190:	e009      	b.n	80061a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006198:	e005      	b.n	80061a6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80061a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 8130 	beq.w	800640e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	4a94      	ldr	r2, [pc, #592]	; (8006404 <UART_SetConfig+0x5c4>)
 80061b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061b8:	461a      	mov	r2, r3
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	4613      	mov	r3, r2
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	4413      	add	r3, r2
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d305      	bcc.n	80061de <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d903      	bls.n	80061e6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80061e4:	e113      	b.n	800640e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	2200      	movs	r2, #0
 80061ea:	60bb      	str	r3, [r7, #8]
 80061ec:	60fa      	str	r2, [r7, #12]
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	4a84      	ldr	r2, [pc, #528]	; (8006404 <UART_SetConfig+0x5c4>)
 80061f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2200      	movs	r2, #0
 80061fc:	603b      	str	r3, [r7, #0]
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006204:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006208:	f7fa fd46 	bl	8000c98 <__aeabi_uldivmod>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4610      	mov	r0, r2
 8006212:	4619      	mov	r1, r3
 8006214:	f04f 0200 	mov.w	r2, #0
 8006218:	f04f 0300 	mov.w	r3, #0
 800621c:	020b      	lsls	r3, r1, #8
 800621e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006222:	0202      	lsls	r2, r0, #8
 8006224:	6979      	ldr	r1, [r7, #20]
 8006226:	6849      	ldr	r1, [r1, #4]
 8006228:	0849      	lsrs	r1, r1, #1
 800622a:	2000      	movs	r0, #0
 800622c:	460c      	mov	r4, r1
 800622e:	4605      	mov	r5, r0
 8006230:	eb12 0804 	adds.w	r8, r2, r4
 8006234:	eb43 0905 	adc.w	r9, r3, r5
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	469a      	mov	sl, r3
 8006240:	4693      	mov	fp, r2
 8006242:	4652      	mov	r2, sl
 8006244:	465b      	mov	r3, fp
 8006246:	4640      	mov	r0, r8
 8006248:	4649      	mov	r1, r9
 800624a:	f7fa fd25 	bl	8000c98 <__aeabi_uldivmod>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4613      	mov	r3, r2
 8006254:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800625c:	d308      	bcc.n	8006270 <UART_SetConfig+0x430>
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006264:	d204      	bcs.n	8006270 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6a3a      	ldr	r2, [r7, #32]
 800626c:	60da      	str	r2, [r3, #12]
 800626e:	e0ce      	b.n	800640e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006276:	e0ca      	b.n	800640e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	69db      	ldr	r3, [r3, #28]
 800627c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006280:	d166      	bne.n	8006350 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006282:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006286:	2b08      	cmp	r3, #8
 8006288:	d827      	bhi.n	80062da <UART_SetConfig+0x49a>
 800628a:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <UART_SetConfig+0x450>)
 800628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006290:	080062b5 	.word	0x080062b5
 8006294:	080062bd 	.word	0x080062bd
 8006298:	080062c5 	.word	0x080062c5
 800629c:	080062db 	.word	0x080062db
 80062a0:	080062cb 	.word	0x080062cb
 80062a4:	080062db 	.word	0x080062db
 80062a8:	080062db 	.word	0x080062db
 80062ac:	080062db 	.word	0x080062db
 80062b0:	080062d3 	.word	0x080062d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062b4:	f7ff fa1e 	bl	80056f4 <HAL_RCC_GetPCLK1Freq>
 80062b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062ba:	e014      	b.n	80062e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062bc:	f7ff fa30 	bl	8005720 <HAL_RCC_GetPCLK2Freq>
 80062c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062c2:	e010      	b.n	80062e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062c4:	4b4e      	ldr	r3, [pc, #312]	; (8006400 <UART_SetConfig+0x5c0>)
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062c8:	e00d      	b.n	80062e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ca:	f7ff f9a5 	bl	8005618 <HAL_RCC_GetSysClockFreq>
 80062ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062d0:	e009      	b.n	80062e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062d8:	e005      	b.n	80062e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80062e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 8090 	beq.w	800640e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	4a44      	ldr	r2, [pc, #272]	; (8006404 <UART_SetConfig+0x5c4>)
 80062f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062f8:	461a      	mov	r2, r3
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006300:	005a      	lsls	r2, r3, #1
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	085b      	lsrs	r3, r3, #1
 8006308:	441a      	add	r2, r3
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006312:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	2b0f      	cmp	r3, #15
 8006318:	d916      	bls.n	8006348 <UART_SetConfig+0x508>
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006320:	d212      	bcs.n	8006348 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	b29b      	uxth	r3, r3
 8006326:	f023 030f 	bic.w	r3, r3, #15
 800632a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	085b      	lsrs	r3, r3, #1
 8006330:	b29b      	uxth	r3, r3
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	b29a      	uxth	r2, r3
 8006338:	8bfb      	ldrh	r3, [r7, #30]
 800633a:	4313      	orrs	r3, r2
 800633c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	8bfa      	ldrh	r2, [r7, #30]
 8006344:	60da      	str	r2, [r3, #12]
 8006346:	e062      	b.n	800640e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800634e:	e05e      	b.n	800640e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006350:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006354:	2b08      	cmp	r3, #8
 8006356:	d828      	bhi.n	80063aa <UART_SetConfig+0x56a>
 8006358:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <UART_SetConfig+0x520>)
 800635a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635e:	bf00      	nop
 8006360:	08006385 	.word	0x08006385
 8006364:	0800638d 	.word	0x0800638d
 8006368:	08006395 	.word	0x08006395
 800636c:	080063ab 	.word	0x080063ab
 8006370:	0800639b 	.word	0x0800639b
 8006374:	080063ab 	.word	0x080063ab
 8006378:	080063ab 	.word	0x080063ab
 800637c:	080063ab 	.word	0x080063ab
 8006380:	080063a3 	.word	0x080063a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006384:	f7ff f9b6 	bl	80056f4 <HAL_RCC_GetPCLK1Freq>
 8006388:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800638a:	e014      	b.n	80063b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800638c:	f7ff f9c8 	bl	8005720 <HAL_RCC_GetPCLK2Freq>
 8006390:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006392:	e010      	b.n	80063b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006394:	4b1a      	ldr	r3, [pc, #104]	; (8006400 <UART_SetConfig+0x5c0>)
 8006396:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006398:	e00d      	b.n	80063b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800639a:	f7ff f93d 	bl	8005618 <HAL_RCC_GetSysClockFreq>
 800639e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063a0:	e009      	b.n	80063b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063a8:	e005      	b.n	80063b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80063b4:	bf00      	nop
    }

    if (pclk != 0U)
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d028      	beq.n	800640e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	4a10      	ldr	r2, [pc, #64]	; (8006404 <UART_SetConfig+0x5c4>)
 80063c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063c6:	461a      	mov	r2, r3
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	085b      	lsrs	r3, r3, #1
 80063d4:	441a      	add	r2, r3
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	fbb2 f3f3 	udiv	r3, r2, r3
 80063de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	2b0f      	cmp	r3, #15
 80063e4:	d910      	bls.n	8006408 <UART_SetConfig+0x5c8>
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ec:	d20c      	bcs.n	8006408 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60da      	str	r2, [r3, #12]
 80063f8:	e009      	b.n	800640e <UART_SetConfig+0x5ce>
 80063fa:	bf00      	nop
 80063fc:	40008000 	.word	0x40008000
 8006400:	00f42400 	.word	0x00f42400
 8006404:	080099dc 	.word	0x080099dc
      }
      else
      {
        ret = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	2201      	movs	r2, #1
 8006412:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2201      	movs	r2, #1
 800641a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2200      	movs	r2, #0
 8006422:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	2200      	movs	r2, #0
 8006428:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800642a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800642e:	4618      	mov	r0, r3
 8006430:	3730      	adds	r7, #48	; 0x30
 8006432:	46bd      	mov	sp, r7
 8006434:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064aa:	f003 0308 	and.w	r3, r3, #8
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064cc:	f003 0310 	and.w	r3, r3, #16
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00a      	beq.n	80064ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ee:	f003 0320 	and.w	r3, r3, #32
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01a      	beq.n	800654e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006536:	d10a      	bne.n	800654e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	605a      	str	r2, [r3, #4]
  }
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af02      	add	r7, sp, #8
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800658c:	f7fb ffc8 	bl	8002520 <HAL_GetTick>
 8006590:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0308 	and.w	r3, r3, #8
 800659c:	2b08      	cmp	r3, #8
 800659e:	d10e      	bne.n	80065be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f82f 	bl	8006612 <UART_WaitOnFlagUntilTimeout>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e025      	b.n	800660a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d10e      	bne.n	80065ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f819 	bl	8006612 <UART_WaitOnFlagUntilTimeout>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e00f      	b.n	800660a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b09c      	sub	sp, #112	; 0x70
 8006616:	af00      	add	r7, sp, #0
 8006618:	60f8      	str	r0, [r7, #12]
 800661a:	60b9      	str	r1, [r7, #8]
 800661c:	603b      	str	r3, [r7, #0]
 800661e:	4613      	mov	r3, r2
 8006620:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006622:	e0a9      	b.n	8006778 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662a:	f000 80a5 	beq.w	8006778 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800662e:	f7fb ff77 	bl	8002520 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800663a:	429a      	cmp	r2, r3
 800663c:	d302      	bcc.n	8006644 <UART_WaitOnFlagUntilTimeout+0x32>
 800663e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006640:	2b00      	cmp	r3, #0
 8006642:	d140      	bne.n	80066c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006654:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006658:	667b      	str	r3, [r7, #100]	; 0x64
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006662:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006664:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006666:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006668:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800666a:	e841 2300 	strex	r3, r2, [r1]
 800666e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1e6      	bne.n	8006644 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3308      	adds	r3, #8
 800667c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006688:	f023 0301 	bic.w	r3, r3, #1
 800668c:	663b      	str	r3, [r7, #96]	; 0x60
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3308      	adds	r3, #8
 8006694:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006696:	64ba      	str	r2, [r7, #72]	; 0x48
 8006698:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800669c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1e5      	bne.n	8006676 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e069      	b.n	800679a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d051      	beq.n	8006778 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e2:	d149      	bne.n	8006778 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006702:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670c:	637b      	str	r3, [r7, #52]	; 0x34
 800670e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e6      	bne.n	80066ee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	3308      	adds	r3, #8
 8006726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	e853 3f00 	ldrex	r3, [r3]
 800672e:	613b      	str	r3, [r7, #16]
   return(result);
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	f023 0301 	bic.w	r3, r3, #1
 8006736:	66bb      	str	r3, [r7, #104]	; 0x68
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3308      	adds	r3, #8
 800673e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006740:	623a      	str	r2, [r7, #32]
 8006742:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006744:	69f9      	ldr	r1, [r7, #28]
 8006746:	6a3a      	ldr	r2, [r7, #32]
 8006748:	e841 2300 	strex	r3, r2, [r1]
 800674c:	61bb      	str	r3, [r7, #24]
   return(result);
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1e5      	bne.n	8006720 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2220      	movs	r2, #32
 8006758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2220      	movs	r2, #32
 8006760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2220      	movs	r2, #32
 8006768:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e010      	b.n	800679a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69da      	ldr	r2, [r3, #28]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	4013      	ands	r3, r2
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	429a      	cmp	r2, r3
 8006786:	bf0c      	ite	eq
 8006788:	2301      	moveq	r3, #1
 800678a:	2300      	movne	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	461a      	mov	r2, r3
 8006790:	79fb      	ldrb	r3, [r7, #7]
 8006792:	429a      	cmp	r2, r3
 8006794:	f43f af46 	beq.w	8006624 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3770      	adds	r7, #112	; 0x70
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b085      	sub	sp, #20
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d101      	bne.n	80067b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80067b4:	2302      	movs	r3, #2
 80067b6:	e027      	b.n	8006808 <HAL_UARTEx_DisableFifoMode+0x66>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2224      	movs	r2, #36	; 0x24
 80067c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0201 	bic.w	r2, r2, #1
 80067de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80067e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006824:	2b01      	cmp	r3, #1
 8006826:	d101      	bne.n	800682c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006828:	2302      	movs	r3, #2
 800682a:	e02d      	b.n	8006888 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2224      	movs	r2, #36	; 0x24
 8006838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 0201 	bic.w	r2, r2, #1
 8006852:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 f84f 	bl	800690c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d101      	bne.n	80068a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80068a4:	2302      	movs	r3, #2
 80068a6:	e02d      	b.n	8006904 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2224      	movs	r2, #36	; 0x24
 80068b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 0201 	bic.w	r2, r2, #1
 80068ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f811 	bl	800690c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2220      	movs	r2, #32
 80068f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006918:	2b00      	cmp	r3, #0
 800691a:	d108      	bne.n	800692e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800692c:	e031      	b.n	8006992 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800692e:	2308      	movs	r3, #8
 8006930:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006932:	2308      	movs	r3, #8
 8006934:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	0e5b      	lsrs	r3, r3, #25
 800693e:	b2db      	uxtb	r3, r3
 8006940:	f003 0307 	and.w	r3, r3, #7
 8006944:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	0f5b      	lsrs	r3, r3, #29
 800694e:	b2db      	uxtb	r3, r3
 8006950:	f003 0307 	and.w	r3, r3, #7
 8006954:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006956:	7bbb      	ldrb	r3, [r7, #14]
 8006958:	7b3a      	ldrb	r2, [r7, #12]
 800695a:	4911      	ldr	r1, [pc, #68]	; (80069a0 <UARTEx_SetNbDataToProcess+0x94>)
 800695c:	5c8a      	ldrb	r2, [r1, r2]
 800695e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006962:	7b3a      	ldrb	r2, [r7, #12]
 8006964:	490f      	ldr	r1, [pc, #60]	; (80069a4 <UARTEx_SetNbDataToProcess+0x98>)
 8006966:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006968:	fb93 f3f2 	sdiv	r3, r3, r2
 800696c:	b29a      	uxth	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	7b7a      	ldrb	r2, [r7, #13]
 8006978:	4909      	ldr	r1, [pc, #36]	; (80069a0 <UARTEx_SetNbDataToProcess+0x94>)
 800697a:	5c8a      	ldrb	r2, [r1, r2]
 800697c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006980:	7b7a      	ldrb	r2, [r7, #13]
 8006982:	4908      	ldr	r1, [pc, #32]	; (80069a4 <UARTEx_SetNbDataToProcess+0x98>)
 8006984:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006986:	fb93 f3f2 	sdiv	r3, r3, r2
 800698a:	b29a      	uxth	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006992:	bf00      	nop
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	080099f4 	.word	0x080099f4
 80069a4:	080099fc 	.word	0x080099fc

080069a8 <__errno>:
 80069a8:	4b01      	ldr	r3, [pc, #4]	; (80069b0 <__errno+0x8>)
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	200001d4 	.word	0x200001d4

080069b4 <__libc_init_array>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	4d0d      	ldr	r5, [pc, #52]	; (80069ec <__libc_init_array+0x38>)
 80069b8:	4c0d      	ldr	r4, [pc, #52]	; (80069f0 <__libc_init_array+0x3c>)
 80069ba:	1b64      	subs	r4, r4, r5
 80069bc:	10a4      	asrs	r4, r4, #2
 80069be:	2600      	movs	r6, #0
 80069c0:	42a6      	cmp	r6, r4
 80069c2:	d109      	bne.n	80069d8 <__libc_init_array+0x24>
 80069c4:	4d0b      	ldr	r5, [pc, #44]	; (80069f4 <__libc_init_array+0x40>)
 80069c6:	4c0c      	ldr	r4, [pc, #48]	; (80069f8 <__libc_init_array+0x44>)
 80069c8:	f002 ff16 	bl	80097f8 <_init>
 80069cc:	1b64      	subs	r4, r4, r5
 80069ce:	10a4      	asrs	r4, r4, #2
 80069d0:	2600      	movs	r6, #0
 80069d2:	42a6      	cmp	r6, r4
 80069d4:	d105      	bne.n	80069e2 <__libc_init_array+0x2e>
 80069d6:	bd70      	pop	{r4, r5, r6, pc}
 80069d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069dc:	4798      	blx	r3
 80069de:	3601      	adds	r6, #1
 80069e0:	e7ee      	b.n	80069c0 <__libc_init_array+0xc>
 80069e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e6:	4798      	blx	r3
 80069e8:	3601      	adds	r6, #1
 80069ea:	e7f2      	b.n	80069d2 <__libc_init_array+0x1e>
 80069ec:	08009de4 	.word	0x08009de4
 80069f0:	08009de4 	.word	0x08009de4
 80069f4:	08009de4 	.word	0x08009de4
 80069f8:	08009de8 	.word	0x08009de8

080069fc <memset>:
 80069fc:	4402      	add	r2, r0
 80069fe:	4603      	mov	r3, r0
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d100      	bne.n	8006a06 <memset+0xa>
 8006a04:	4770      	bx	lr
 8006a06:	f803 1b01 	strb.w	r1, [r3], #1
 8006a0a:	e7f9      	b.n	8006a00 <memset+0x4>

08006a0c <__cvt>:
 8006a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a10:	ec55 4b10 	vmov	r4, r5, d0
 8006a14:	2d00      	cmp	r5, #0
 8006a16:	460e      	mov	r6, r1
 8006a18:	4619      	mov	r1, r3
 8006a1a:	462b      	mov	r3, r5
 8006a1c:	bfbb      	ittet	lt
 8006a1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a22:	461d      	movlt	r5, r3
 8006a24:	2300      	movge	r3, #0
 8006a26:	232d      	movlt	r3, #45	; 0x2d
 8006a28:	700b      	strb	r3, [r1, #0]
 8006a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a30:	4691      	mov	r9, r2
 8006a32:	f023 0820 	bic.w	r8, r3, #32
 8006a36:	bfbc      	itt	lt
 8006a38:	4622      	movlt	r2, r4
 8006a3a:	4614      	movlt	r4, r2
 8006a3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a40:	d005      	beq.n	8006a4e <__cvt+0x42>
 8006a42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a46:	d100      	bne.n	8006a4a <__cvt+0x3e>
 8006a48:	3601      	adds	r6, #1
 8006a4a:	2102      	movs	r1, #2
 8006a4c:	e000      	b.n	8006a50 <__cvt+0x44>
 8006a4e:	2103      	movs	r1, #3
 8006a50:	ab03      	add	r3, sp, #12
 8006a52:	9301      	str	r3, [sp, #4]
 8006a54:	ab02      	add	r3, sp, #8
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	ec45 4b10 	vmov	d0, r4, r5
 8006a5c:	4653      	mov	r3, sl
 8006a5e:	4632      	mov	r2, r6
 8006a60:	f000 fcfe 	bl	8007460 <_dtoa_r>
 8006a64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a68:	4607      	mov	r7, r0
 8006a6a:	d102      	bne.n	8006a72 <__cvt+0x66>
 8006a6c:	f019 0f01 	tst.w	r9, #1
 8006a70:	d022      	beq.n	8006ab8 <__cvt+0xac>
 8006a72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a76:	eb07 0906 	add.w	r9, r7, r6
 8006a7a:	d110      	bne.n	8006a9e <__cvt+0x92>
 8006a7c:	783b      	ldrb	r3, [r7, #0]
 8006a7e:	2b30      	cmp	r3, #48	; 0x30
 8006a80:	d10a      	bne.n	8006a98 <__cvt+0x8c>
 8006a82:	2200      	movs	r2, #0
 8006a84:	2300      	movs	r3, #0
 8006a86:	4620      	mov	r0, r4
 8006a88:	4629      	mov	r1, r5
 8006a8a:	f7fa f845 	bl	8000b18 <__aeabi_dcmpeq>
 8006a8e:	b918      	cbnz	r0, 8006a98 <__cvt+0x8c>
 8006a90:	f1c6 0601 	rsb	r6, r6, #1
 8006a94:	f8ca 6000 	str.w	r6, [sl]
 8006a98:	f8da 3000 	ldr.w	r3, [sl]
 8006a9c:	4499      	add	r9, r3
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	f7fa f837 	bl	8000b18 <__aeabi_dcmpeq>
 8006aaa:	b108      	cbz	r0, 8006ab0 <__cvt+0xa4>
 8006aac:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ab0:	2230      	movs	r2, #48	; 0x30
 8006ab2:	9b03      	ldr	r3, [sp, #12]
 8006ab4:	454b      	cmp	r3, r9
 8006ab6:	d307      	bcc.n	8006ac8 <__cvt+0xbc>
 8006ab8:	9b03      	ldr	r3, [sp, #12]
 8006aba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006abc:	1bdb      	subs	r3, r3, r7
 8006abe:	4638      	mov	r0, r7
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	b004      	add	sp, #16
 8006ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac8:	1c59      	adds	r1, r3, #1
 8006aca:	9103      	str	r1, [sp, #12]
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	e7f0      	b.n	8006ab2 <__cvt+0xa6>

08006ad0 <__exponent>:
 8006ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2900      	cmp	r1, #0
 8006ad6:	bfb8      	it	lt
 8006ad8:	4249      	neglt	r1, r1
 8006ada:	f803 2b02 	strb.w	r2, [r3], #2
 8006ade:	bfb4      	ite	lt
 8006ae0:	222d      	movlt	r2, #45	; 0x2d
 8006ae2:	222b      	movge	r2, #43	; 0x2b
 8006ae4:	2909      	cmp	r1, #9
 8006ae6:	7042      	strb	r2, [r0, #1]
 8006ae8:	dd2a      	ble.n	8006b40 <__exponent+0x70>
 8006aea:	f10d 0407 	add.w	r4, sp, #7
 8006aee:	46a4      	mov	ip, r4
 8006af0:	270a      	movs	r7, #10
 8006af2:	46a6      	mov	lr, r4
 8006af4:	460a      	mov	r2, r1
 8006af6:	fb91 f6f7 	sdiv	r6, r1, r7
 8006afa:	fb07 1516 	mls	r5, r7, r6, r1
 8006afe:	3530      	adds	r5, #48	; 0x30
 8006b00:	2a63      	cmp	r2, #99	; 0x63
 8006b02:	f104 34ff 	add.w	r4, r4, #4294967295
 8006b06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b0a:	4631      	mov	r1, r6
 8006b0c:	dcf1      	bgt.n	8006af2 <__exponent+0x22>
 8006b0e:	3130      	adds	r1, #48	; 0x30
 8006b10:	f1ae 0502 	sub.w	r5, lr, #2
 8006b14:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b18:	1c44      	adds	r4, r0, #1
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	4561      	cmp	r1, ip
 8006b1e:	d30a      	bcc.n	8006b36 <__exponent+0x66>
 8006b20:	f10d 0209 	add.w	r2, sp, #9
 8006b24:	eba2 020e 	sub.w	r2, r2, lr
 8006b28:	4565      	cmp	r5, ip
 8006b2a:	bf88      	it	hi
 8006b2c:	2200      	movhi	r2, #0
 8006b2e:	4413      	add	r3, r2
 8006b30:	1a18      	subs	r0, r3, r0
 8006b32:	b003      	add	sp, #12
 8006b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b3e:	e7ed      	b.n	8006b1c <__exponent+0x4c>
 8006b40:	2330      	movs	r3, #48	; 0x30
 8006b42:	3130      	adds	r1, #48	; 0x30
 8006b44:	7083      	strb	r3, [r0, #2]
 8006b46:	70c1      	strb	r1, [r0, #3]
 8006b48:	1d03      	adds	r3, r0, #4
 8006b4a:	e7f1      	b.n	8006b30 <__exponent+0x60>

08006b4c <_printf_float>:
 8006b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b50:	ed2d 8b02 	vpush	{d8}
 8006b54:	b08d      	sub	sp, #52	; 0x34
 8006b56:	460c      	mov	r4, r1
 8006b58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b5c:	4616      	mov	r6, r2
 8006b5e:	461f      	mov	r7, r3
 8006b60:	4605      	mov	r5, r0
 8006b62:	f001 fa6b 	bl	800803c <_localeconv_r>
 8006b66:	f8d0 a000 	ldr.w	sl, [r0]
 8006b6a:	4650      	mov	r0, sl
 8006b6c:	f7f9 fb58 	bl	8000220 <strlen>
 8006b70:	2300      	movs	r3, #0
 8006b72:	930a      	str	r3, [sp, #40]	; 0x28
 8006b74:	6823      	ldr	r3, [r4, #0]
 8006b76:	9305      	str	r3, [sp, #20]
 8006b78:	f8d8 3000 	ldr.w	r3, [r8]
 8006b7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b80:	3307      	adds	r3, #7
 8006b82:	f023 0307 	bic.w	r3, r3, #7
 8006b86:	f103 0208 	add.w	r2, r3, #8
 8006b8a:	f8c8 2000 	str.w	r2, [r8]
 8006b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b96:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006b9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b9e:	9307      	str	r3, [sp, #28]
 8006ba0:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ba4:	ee08 0a10 	vmov	s16, r0
 8006ba8:	4b9f      	ldr	r3, [pc, #636]	; (8006e28 <_printf_float+0x2dc>)
 8006baa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bae:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb2:	f7f9 ffe3 	bl	8000b7c <__aeabi_dcmpun>
 8006bb6:	bb88      	cbnz	r0, 8006c1c <_printf_float+0xd0>
 8006bb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bbc:	4b9a      	ldr	r3, [pc, #616]	; (8006e28 <_printf_float+0x2dc>)
 8006bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc2:	f7f9 ffbd 	bl	8000b40 <__aeabi_dcmple>
 8006bc6:	bb48      	cbnz	r0, 8006c1c <_printf_float+0xd0>
 8006bc8:	2200      	movs	r2, #0
 8006bca:	2300      	movs	r3, #0
 8006bcc:	4640      	mov	r0, r8
 8006bce:	4649      	mov	r1, r9
 8006bd0:	f7f9 ffac 	bl	8000b2c <__aeabi_dcmplt>
 8006bd4:	b110      	cbz	r0, 8006bdc <_printf_float+0x90>
 8006bd6:	232d      	movs	r3, #45	; 0x2d
 8006bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bdc:	4b93      	ldr	r3, [pc, #588]	; (8006e2c <_printf_float+0x2e0>)
 8006bde:	4894      	ldr	r0, [pc, #592]	; (8006e30 <_printf_float+0x2e4>)
 8006be0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006be4:	bf94      	ite	ls
 8006be6:	4698      	movls	r8, r3
 8006be8:	4680      	movhi	r8, r0
 8006bea:	2303      	movs	r3, #3
 8006bec:	6123      	str	r3, [r4, #16]
 8006bee:	9b05      	ldr	r3, [sp, #20]
 8006bf0:	f023 0204 	bic.w	r2, r3, #4
 8006bf4:	6022      	str	r2, [r4, #0]
 8006bf6:	f04f 0900 	mov.w	r9, #0
 8006bfa:	9700      	str	r7, [sp, #0]
 8006bfc:	4633      	mov	r3, r6
 8006bfe:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c00:	4621      	mov	r1, r4
 8006c02:	4628      	mov	r0, r5
 8006c04:	f000 f9d8 	bl	8006fb8 <_printf_common>
 8006c08:	3001      	adds	r0, #1
 8006c0a:	f040 8090 	bne.w	8006d2e <_printf_float+0x1e2>
 8006c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c12:	b00d      	add	sp, #52	; 0x34
 8006c14:	ecbd 8b02 	vpop	{d8}
 8006c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c1c:	4642      	mov	r2, r8
 8006c1e:	464b      	mov	r3, r9
 8006c20:	4640      	mov	r0, r8
 8006c22:	4649      	mov	r1, r9
 8006c24:	f7f9 ffaa 	bl	8000b7c <__aeabi_dcmpun>
 8006c28:	b140      	cbz	r0, 8006c3c <_printf_float+0xf0>
 8006c2a:	464b      	mov	r3, r9
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	bfbc      	itt	lt
 8006c30:	232d      	movlt	r3, #45	; 0x2d
 8006c32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c36:	487f      	ldr	r0, [pc, #508]	; (8006e34 <_printf_float+0x2e8>)
 8006c38:	4b7f      	ldr	r3, [pc, #508]	; (8006e38 <_printf_float+0x2ec>)
 8006c3a:	e7d1      	b.n	8006be0 <_printf_float+0x94>
 8006c3c:	6863      	ldr	r3, [r4, #4]
 8006c3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c42:	9206      	str	r2, [sp, #24]
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	d13f      	bne.n	8006cc8 <_printf_float+0x17c>
 8006c48:	2306      	movs	r3, #6
 8006c4a:	6063      	str	r3, [r4, #4]
 8006c4c:	9b05      	ldr	r3, [sp, #20]
 8006c4e:	6861      	ldr	r1, [r4, #4]
 8006c50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c54:	2300      	movs	r3, #0
 8006c56:	9303      	str	r3, [sp, #12]
 8006c58:	ab0a      	add	r3, sp, #40	; 0x28
 8006c5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c5e:	ab09      	add	r3, sp, #36	; 0x24
 8006c60:	ec49 8b10 	vmov	d0, r8, r9
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	6022      	str	r2, [r4, #0]
 8006c68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f7ff fecd 	bl	8006a0c <__cvt>
 8006c72:	9b06      	ldr	r3, [sp, #24]
 8006c74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c76:	2b47      	cmp	r3, #71	; 0x47
 8006c78:	4680      	mov	r8, r0
 8006c7a:	d108      	bne.n	8006c8e <_printf_float+0x142>
 8006c7c:	1cc8      	adds	r0, r1, #3
 8006c7e:	db02      	blt.n	8006c86 <_printf_float+0x13a>
 8006c80:	6863      	ldr	r3, [r4, #4]
 8006c82:	4299      	cmp	r1, r3
 8006c84:	dd41      	ble.n	8006d0a <_printf_float+0x1be>
 8006c86:	f1ab 0b02 	sub.w	fp, fp, #2
 8006c8a:	fa5f fb8b 	uxtb.w	fp, fp
 8006c8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c92:	d820      	bhi.n	8006cd6 <_printf_float+0x18a>
 8006c94:	3901      	subs	r1, #1
 8006c96:	465a      	mov	r2, fp
 8006c98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c9c:	9109      	str	r1, [sp, #36]	; 0x24
 8006c9e:	f7ff ff17 	bl	8006ad0 <__exponent>
 8006ca2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ca4:	1813      	adds	r3, r2, r0
 8006ca6:	2a01      	cmp	r2, #1
 8006ca8:	4681      	mov	r9, r0
 8006caa:	6123      	str	r3, [r4, #16]
 8006cac:	dc02      	bgt.n	8006cb4 <_printf_float+0x168>
 8006cae:	6822      	ldr	r2, [r4, #0]
 8006cb0:	07d2      	lsls	r2, r2, #31
 8006cb2:	d501      	bpl.n	8006cb8 <_printf_float+0x16c>
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	6123      	str	r3, [r4, #16]
 8006cb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d09c      	beq.n	8006bfa <_printf_float+0xae>
 8006cc0:	232d      	movs	r3, #45	; 0x2d
 8006cc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cc6:	e798      	b.n	8006bfa <_printf_float+0xae>
 8006cc8:	9a06      	ldr	r2, [sp, #24]
 8006cca:	2a47      	cmp	r2, #71	; 0x47
 8006ccc:	d1be      	bne.n	8006c4c <_printf_float+0x100>
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1bc      	bne.n	8006c4c <_printf_float+0x100>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e7b9      	b.n	8006c4a <_printf_float+0xfe>
 8006cd6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006cda:	d118      	bne.n	8006d0e <_printf_float+0x1c2>
 8006cdc:	2900      	cmp	r1, #0
 8006cde:	6863      	ldr	r3, [r4, #4]
 8006ce0:	dd0b      	ble.n	8006cfa <_printf_float+0x1ae>
 8006ce2:	6121      	str	r1, [r4, #16]
 8006ce4:	b913      	cbnz	r3, 8006cec <_printf_float+0x1a0>
 8006ce6:	6822      	ldr	r2, [r4, #0]
 8006ce8:	07d0      	lsls	r0, r2, #31
 8006cea:	d502      	bpl.n	8006cf2 <_printf_float+0x1a6>
 8006cec:	3301      	adds	r3, #1
 8006cee:	440b      	add	r3, r1
 8006cf0:	6123      	str	r3, [r4, #16]
 8006cf2:	65a1      	str	r1, [r4, #88]	; 0x58
 8006cf4:	f04f 0900 	mov.w	r9, #0
 8006cf8:	e7de      	b.n	8006cb8 <_printf_float+0x16c>
 8006cfa:	b913      	cbnz	r3, 8006d02 <_printf_float+0x1b6>
 8006cfc:	6822      	ldr	r2, [r4, #0]
 8006cfe:	07d2      	lsls	r2, r2, #31
 8006d00:	d501      	bpl.n	8006d06 <_printf_float+0x1ba>
 8006d02:	3302      	adds	r3, #2
 8006d04:	e7f4      	b.n	8006cf0 <_printf_float+0x1a4>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e7f2      	b.n	8006cf0 <_printf_float+0x1a4>
 8006d0a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d10:	4299      	cmp	r1, r3
 8006d12:	db05      	blt.n	8006d20 <_printf_float+0x1d4>
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	6121      	str	r1, [r4, #16]
 8006d18:	07d8      	lsls	r0, r3, #31
 8006d1a:	d5ea      	bpl.n	8006cf2 <_printf_float+0x1a6>
 8006d1c:	1c4b      	adds	r3, r1, #1
 8006d1e:	e7e7      	b.n	8006cf0 <_printf_float+0x1a4>
 8006d20:	2900      	cmp	r1, #0
 8006d22:	bfd4      	ite	le
 8006d24:	f1c1 0202 	rsble	r2, r1, #2
 8006d28:	2201      	movgt	r2, #1
 8006d2a:	4413      	add	r3, r2
 8006d2c:	e7e0      	b.n	8006cf0 <_printf_float+0x1a4>
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	055a      	lsls	r2, r3, #21
 8006d32:	d407      	bmi.n	8006d44 <_printf_float+0x1f8>
 8006d34:	6923      	ldr	r3, [r4, #16]
 8006d36:	4642      	mov	r2, r8
 8006d38:	4631      	mov	r1, r6
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	47b8      	blx	r7
 8006d3e:	3001      	adds	r0, #1
 8006d40:	d12c      	bne.n	8006d9c <_printf_float+0x250>
 8006d42:	e764      	b.n	8006c0e <_printf_float+0xc2>
 8006d44:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d48:	f240 80e0 	bls.w	8006f0c <_printf_float+0x3c0>
 8006d4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d50:	2200      	movs	r2, #0
 8006d52:	2300      	movs	r3, #0
 8006d54:	f7f9 fee0 	bl	8000b18 <__aeabi_dcmpeq>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	d034      	beq.n	8006dc6 <_printf_float+0x27a>
 8006d5c:	4a37      	ldr	r2, [pc, #220]	; (8006e3c <_printf_float+0x2f0>)
 8006d5e:	2301      	movs	r3, #1
 8006d60:	4631      	mov	r1, r6
 8006d62:	4628      	mov	r0, r5
 8006d64:	47b8      	blx	r7
 8006d66:	3001      	adds	r0, #1
 8006d68:	f43f af51 	beq.w	8006c0e <_printf_float+0xc2>
 8006d6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d70:	429a      	cmp	r2, r3
 8006d72:	db02      	blt.n	8006d7a <_printf_float+0x22e>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	07d8      	lsls	r0, r3, #31
 8006d78:	d510      	bpl.n	8006d9c <_printf_float+0x250>
 8006d7a:	ee18 3a10 	vmov	r3, s16
 8006d7e:	4652      	mov	r2, sl
 8006d80:	4631      	mov	r1, r6
 8006d82:	4628      	mov	r0, r5
 8006d84:	47b8      	blx	r7
 8006d86:	3001      	adds	r0, #1
 8006d88:	f43f af41 	beq.w	8006c0e <_printf_float+0xc2>
 8006d8c:	f04f 0800 	mov.w	r8, #0
 8006d90:	f104 091a 	add.w	r9, r4, #26
 8006d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d96:	3b01      	subs	r3, #1
 8006d98:	4543      	cmp	r3, r8
 8006d9a:	dc09      	bgt.n	8006db0 <_printf_float+0x264>
 8006d9c:	6823      	ldr	r3, [r4, #0]
 8006d9e:	079b      	lsls	r3, r3, #30
 8006da0:	f100 8105 	bmi.w	8006fae <_printf_float+0x462>
 8006da4:	68e0      	ldr	r0, [r4, #12]
 8006da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006da8:	4298      	cmp	r0, r3
 8006daa:	bfb8      	it	lt
 8006dac:	4618      	movlt	r0, r3
 8006dae:	e730      	b.n	8006c12 <_printf_float+0xc6>
 8006db0:	2301      	movs	r3, #1
 8006db2:	464a      	mov	r2, r9
 8006db4:	4631      	mov	r1, r6
 8006db6:	4628      	mov	r0, r5
 8006db8:	47b8      	blx	r7
 8006dba:	3001      	adds	r0, #1
 8006dbc:	f43f af27 	beq.w	8006c0e <_printf_float+0xc2>
 8006dc0:	f108 0801 	add.w	r8, r8, #1
 8006dc4:	e7e6      	b.n	8006d94 <_printf_float+0x248>
 8006dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	dc39      	bgt.n	8006e40 <_printf_float+0x2f4>
 8006dcc:	4a1b      	ldr	r2, [pc, #108]	; (8006e3c <_printf_float+0x2f0>)
 8006dce:	2301      	movs	r3, #1
 8006dd0:	4631      	mov	r1, r6
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	47b8      	blx	r7
 8006dd6:	3001      	adds	r0, #1
 8006dd8:	f43f af19 	beq.w	8006c0e <_printf_float+0xc2>
 8006ddc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006de0:	4313      	orrs	r3, r2
 8006de2:	d102      	bne.n	8006dea <_printf_float+0x29e>
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	07d9      	lsls	r1, r3, #31
 8006de8:	d5d8      	bpl.n	8006d9c <_printf_float+0x250>
 8006dea:	ee18 3a10 	vmov	r3, s16
 8006dee:	4652      	mov	r2, sl
 8006df0:	4631      	mov	r1, r6
 8006df2:	4628      	mov	r0, r5
 8006df4:	47b8      	blx	r7
 8006df6:	3001      	adds	r0, #1
 8006df8:	f43f af09 	beq.w	8006c0e <_printf_float+0xc2>
 8006dfc:	f04f 0900 	mov.w	r9, #0
 8006e00:	f104 0a1a 	add.w	sl, r4, #26
 8006e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e06:	425b      	negs	r3, r3
 8006e08:	454b      	cmp	r3, r9
 8006e0a:	dc01      	bgt.n	8006e10 <_printf_float+0x2c4>
 8006e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e0e:	e792      	b.n	8006d36 <_printf_float+0x1ea>
 8006e10:	2301      	movs	r3, #1
 8006e12:	4652      	mov	r2, sl
 8006e14:	4631      	mov	r1, r6
 8006e16:	4628      	mov	r0, r5
 8006e18:	47b8      	blx	r7
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	f43f aef7 	beq.w	8006c0e <_printf_float+0xc2>
 8006e20:	f109 0901 	add.w	r9, r9, #1
 8006e24:	e7ee      	b.n	8006e04 <_printf_float+0x2b8>
 8006e26:	bf00      	nop
 8006e28:	7fefffff 	.word	0x7fefffff
 8006e2c:	08009a08 	.word	0x08009a08
 8006e30:	08009a0c 	.word	0x08009a0c
 8006e34:	08009a14 	.word	0x08009a14
 8006e38:	08009a10 	.word	0x08009a10
 8006e3c:	08009a18 	.word	0x08009a18
 8006e40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e44:	429a      	cmp	r2, r3
 8006e46:	bfa8      	it	ge
 8006e48:	461a      	movge	r2, r3
 8006e4a:	2a00      	cmp	r2, #0
 8006e4c:	4691      	mov	r9, r2
 8006e4e:	dc37      	bgt.n	8006ec0 <_printf_float+0x374>
 8006e50:	f04f 0b00 	mov.w	fp, #0
 8006e54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e58:	f104 021a 	add.w	r2, r4, #26
 8006e5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e5e:	9305      	str	r3, [sp, #20]
 8006e60:	eba3 0309 	sub.w	r3, r3, r9
 8006e64:	455b      	cmp	r3, fp
 8006e66:	dc33      	bgt.n	8006ed0 <_printf_float+0x384>
 8006e68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	db3b      	blt.n	8006ee8 <_printf_float+0x39c>
 8006e70:	6823      	ldr	r3, [r4, #0]
 8006e72:	07da      	lsls	r2, r3, #31
 8006e74:	d438      	bmi.n	8006ee8 <_printf_float+0x39c>
 8006e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e78:	9a05      	ldr	r2, [sp, #20]
 8006e7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e7c:	1a9a      	subs	r2, r3, r2
 8006e7e:	eba3 0901 	sub.w	r9, r3, r1
 8006e82:	4591      	cmp	r9, r2
 8006e84:	bfa8      	it	ge
 8006e86:	4691      	movge	r9, r2
 8006e88:	f1b9 0f00 	cmp.w	r9, #0
 8006e8c:	dc35      	bgt.n	8006efa <_printf_float+0x3ae>
 8006e8e:	f04f 0800 	mov.w	r8, #0
 8006e92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e96:	f104 0a1a 	add.w	sl, r4, #26
 8006e9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e9e:	1a9b      	subs	r3, r3, r2
 8006ea0:	eba3 0309 	sub.w	r3, r3, r9
 8006ea4:	4543      	cmp	r3, r8
 8006ea6:	f77f af79 	ble.w	8006d9c <_printf_float+0x250>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	4652      	mov	r2, sl
 8006eae:	4631      	mov	r1, r6
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	47b8      	blx	r7
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	f43f aeaa 	beq.w	8006c0e <_printf_float+0xc2>
 8006eba:	f108 0801 	add.w	r8, r8, #1
 8006ebe:	e7ec      	b.n	8006e9a <_printf_float+0x34e>
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	4631      	mov	r1, r6
 8006ec4:	4642      	mov	r2, r8
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	47b8      	blx	r7
 8006eca:	3001      	adds	r0, #1
 8006ecc:	d1c0      	bne.n	8006e50 <_printf_float+0x304>
 8006ece:	e69e      	b.n	8006c0e <_printf_float+0xc2>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	4631      	mov	r1, r6
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	9205      	str	r2, [sp, #20]
 8006ed8:	47b8      	blx	r7
 8006eda:	3001      	adds	r0, #1
 8006edc:	f43f ae97 	beq.w	8006c0e <_printf_float+0xc2>
 8006ee0:	9a05      	ldr	r2, [sp, #20]
 8006ee2:	f10b 0b01 	add.w	fp, fp, #1
 8006ee6:	e7b9      	b.n	8006e5c <_printf_float+0x310>
 8006ee8:	ee18 3a10 	vmov	r3, s16
 8006eec:	4652      	mov	r2, sl
 8006eee:	4631      	mov	r1, r6
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	47b8      	blx	r7
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d1be      	bne.n	8006e76 <_printf_float+0x32a>
 8006ef8:	e689      	b.n	8006c0e <_printf_float+0xc2>
 8006efa:	9a05      	ldr	r2, [sp, #20]
 8006efc:	464b      	mov	r3, r9
 8006efe:	4442      	add	r2, r8
 8006f00:	4631      	mov	r1, r6
 8006f02:	4628      	mov	r0, r5
 8006f04:	47b8      	blx	r7
 8006f06:	3001      	adds	r0, #1
 8006f08:	d1c1      	bne.n	8006e8e <_printf_float+0x342>
 8006f0a:	e680      	b.n	8006c0e <_printf_float+0xc2>
 8006f0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f0e:	2a01      	cmp	r2, #1
 8006f10:	dc01      	bgt.n	8006f16 <_printf_float+0x3ca>
 8006f12:	07db      	lsls	r3, r3, #31
 8006f14:	d538      	bpl.n	8006f88 <_printf_float+0x43c>
 8006f16:	2301      	movs	r3, #1
 8006f18:	4642      	mov	r2, r8
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	47b8      	blx	r7
 8006f20:	3001      	adds	r0, #1
 8006f22:	f43f ae74 	beq.w	8006c0e <_printf_float+0xc2>
 8006f26:	ee18 3a10 	vmov	r3, s16
 8006f2a:	4652      	mov	r2, sl
 8006f2c:	4631      	mov	r1, r6
 8006f2e:	4628      	mov	r0, r5
 8006f30:	47b8      	blx	r7
 8006f32:	3001      	adds	r0, #1
 8006f34:	f43f ae6b 	beq.w	8006c0e <_printf_float+0xc2>
 8006f38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f7f9 fdea 	bl	8000b18 <__aeabi_dcmpeq>
 8006f44:	b9d8      	cbnz	r0, 8006f7e <_printf_float+0x432>
 8006f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f48:	f108 0201 	add.w	r2, r8, #1
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	4631      	mov	r1, r6
 8006f50:	4628      	mov	r0, r5
 8006f52:	47b8      	blx	r7
 8006f54:	3001      	adds	r0, #1
 8006f56:	d10e      	bne.n	8006f76 <_printf_float+0x42a>
 8006f58:	e659      	b.n	8006c0e <_printf_float+0xc2>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	4652      	mov	r2, sl
 8006f5e:	4631      	mov	r1, r6
 8006f60:	4628      	mov	r0, r5
 8006f62:	47b8      	blx	r7
 8006f64:	3001      	adds	r0, #1
 8006f66:	f43f ae52 	beq.w	8006c0e <_printf_float+0xc2>
 8006f6a:	f108 0801 	add.w	r8, r8, #1
 8006f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f70:	3b01      	subs	r3, #1
 8006f72:	4543      	cmp	r3, r8
 8006f74:	dcf1      	bgt.n	8006f5a <_printf_float+0x40e>
 8006f76:	464b      	mov	r3, r9
 8006f78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f7c:	e6dc      	b.n	8006d38 <_printf_float+0x1ec>
 8006f7e:	f04f 0800 	mov.w	r8, #0
 8006f82:	f104 0a1a 	add.w	sl, r4, #26
 8006f86:	e7f2      	b.n	8006f6e <_printf_float+0x422>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	4642      	mov	r2, r8
 8006f8c:	e7df      	b.n	8006f4e <_printf_float+0x402>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	464a      	mov	r2, r9
 8006f92:	4631      	mov	r1, r6
 8006f94:	4628      	mov	r0, r5
 8006f96:	47b8      	blx	r7
 8006f98:	3001      	adds	r0, #1
 8006f9a:	f43f ae38 	beq.w	8006c0e <_printf_float+0xc2>
 8006f9e:	f108 0801 	add.w	r8, r8, #1
 8006fa2:	68e3      	ldr	r3, [r4, #12]
 8006fa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fa6:	1a5b      	subs	r3, r3, r1
 8006fa8:	4543      	cmp	r3, r8
 8006faa:	dcf0      	bgt.n	8006f8e <_printf_float+0x442>
 8006fac:	e6fa      	b.n	8006da4 <_printf_float+0x258>
 8006fae:	f04f 0800 	mov.w	r8, #0
 8006fb2:	f104 0919 	add.w	r9, r4, #25
 8006fb6:	e7f4      	b.n	8006fa2 <_printf_float+0x456>

08006fb8 <_printf_common>:
 8006fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fbc:	4616      	mov	r6, r2
 8006fbe:	4699      	mov	r9, r3
 8006fc0:	688a      	ldr	r2, [r1, #8]
 8006fc2:	690b      	ldr	r3, [r1, #16]
 8006fc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	bfb8      	it	lt
 8006fcc:	4613      	movlt	r3, r2
 8006fce:	6033      	str	r3, [r6, #0]
 8006fd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fd4:	4607      	mov	r7, r0
 8006fd6:	460c      	mov	r4, r1
 8006fd8:	b10a      	cbz	r2, 8006fde <_printf_common+0x26>
 8006fda:	3301      	adds	r3, #1
 8006fdc:	6033      	str	r3, [r6, #0]
 8006fde:	6823      	ldr	r3, [r4, #0]
 8006fe0:	0699      	lsls	r1, r3, #26
 8006fe2:	bf42      	ittt	mi
 8006fe4:	6833      	ldrmi	r3, [r6, #0]
 8006fe6:	3302      	addmi	r3, #2
 8006fe8:	6033      	strmi	r3, [r6, #0]
 8006fea:	6825      	ldr	r5, [r4, #0]
 8006fec:	f015 0506 	ands.w	r5, r5, #6
 8006ff0:	d106      	bne.n	8007000 <_printf_common+0x48>
 8006ff2:	f104 0a19 	add.w	sl, r4, #25
 8006ff6:	68e3      	ldr	r3, [r4, #12]
 8006ff8:	6832      	ldr	r2, [r6, #0]
 8006ffa:	1a9b      	subs	r3, r3, r2
 8006ffc:	42ab      	cmp	r3, r5
 8006ffe:	dc26      	bgt.n	800704e <_printf_common+0x96>
 8007000:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007004:	1e13      	subs	r3, r2, #0
 8007006:	6822      	ldr	r2, [r4, #0]
 8007008:	bf18      	it	ne
 800700a:	2301      	movne	r3, #1
 800700c:	0692      	lsls	r2, r2, #26
 800700e:	d42b      	bmi.n	8007068 <_printf_common+0xb0>
 8007010:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007014:	4649      	mov	r1, r9
 8007016:	4638      	mov	r0, r7
 8007018:	47c0      	blx	r8
 800701a:	3001      	adds	r0, #1
 800701c:	d01e      	beq.n	800705c <_printf_common+0xa4>
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	68e5      	ldr	r5, [r4, #12]
 8007022:	6832      	ldr	r2, [r6, #0]
 8007024:	f003 0306 	and.w	r3, r3, #6
 8007028:	2b04      	cmp	r3, #4
 800702a:	bf08      	it	eq
 800702c:	1aad      	subeq	r5, r5, r2
 800702e:	68a3      	ldr	r3, [r4, #8]
 8007030:	6922      	ldr	r2, [r4, #16]
 8007032:	bf0c      	ite	eq
 8007034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007038:	2500      	movne	r5, #0
 800703a:	4293      	cmp	r3, r2
 800703c:	bfc4      	itt	gt
 800703e:	1a9b      	subgt	r3, r3, r2
 8007040:	18ed      	addgt	r5, r5, r3
 8007042:	2600      	movs	r6, #0
 8007044:	341a      	adds	r4, #26
 8007046:	42b5      	cmp	r5, r6
 8007048:	d11a      	bne.n	8007080 <_printf_common+0xc8>
 800704a:	2000      	movs	r0, #0
 800704c:	e008      	b.n	8007060 <_printf_common+0xa8>
 800704e:	2301      	movs	r3, #1
 8007050:	4652      	mov	r2, sl
 8007052:	4649      	mov	r1, r9
 8007054:	4638      	mov	r0, r7
 8007056:	47c0      	blx	r8
 8007058:	3001      	adds	r0, #1
 800705a:	d103      	bne.n	8007064 <_printf_common+0xac>
 800705c:	f04f 30ff 	mov.w	r0, #4294967295
 8007060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007064:	3501      	adds	r5, #1
 8007066:	e7c6      	b.n	8006ff6 <_printf_common+0x3e>
 8007068:	18e1      	adds	r1, r4, r3
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	2030      	movs	r0, #48	; 0x30
 800706e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007072:	4422      	add	r2, r4
 8007074:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007078:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800707c:	3302      	adds	r3, #2
 800707e:	e7c7      	b.n	8007010 <_printf_common+0x58>
 8007080:	2301      	movs	r3, #1
 8007082:	4622      	mov	r2, r4
 8007084:	4649      	mov	r1, r9
 8007086:	4638      	mov	r0, r7
 8007088:	47c0      	blx	r8
 800708a:	3001      	adds	r0, #1
 800708c:	d0e6      	beq.n	800705c <_printf_common+0xa4>
 800708e:	3601      	adds	r6, #1
 8007090:	e7d9      	b.n	8007046 <_printf_common+0x8e>
	...

08007094 <_printf_i>:
 8007094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007098:	7e0f      	ldrb	r7, [r1, #24]
 800709a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800709c:	2f78      	cmp	r7, #120	; 0x78
 800709e:	4691      	mov	r9, r2
 80070a0:	4680      	mov	r8, r0
 80070a2:	460c      	mov	r4, r1
 80070a4:	469a      	mov	sl, r3
 80070a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070aa:	d807      	bhi.n	80070bc <_printf_i+0x28>
 80070ac:	2f62      	cmp	r7, #98	; 0x62
 80070ae:	d80a      	bhi.n	80070c6 <_printf_i+0x32>
 80070b0:	2f00      	cmp	r7, #0
 80070b2:	f000 80d8 	beq.w	8007266 <_printf_i+0x1d2>
 80070b6:	2f58      	cmp	r7, #88	; 0x58
 80070b8:	f000 80a3 	beq.w	8007202 <_printf_i+0x16e>
 80070bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070c4:	e03a      	b.n	800713c <_printf_i+0xa8>
 80070c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070ca:	2b15      	cmp	r3, #21
 80070cc:	d8f6      	bhi.n	80070bc <_printf_i+0x28>
 80070ce:	a101      	add	r1, pc, #4	; (adr r1, 80070d4 <_printf_i+0x40>)
 80070d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070d4:	0800712d 	.word	0x0800712d
 80070d8:	08007141 	.word	0x08007141
 80070dc:	080070bd 	.word	0x080070bd
 80070e0:	080070bd 	.word	0x080070bd
 80070e4:	080070bd 	.word	0x080070bd
 80070e8:	080070bd 	.word	0x080070bd
 80070ec:	08007141 	.word	0x08007141
 80070f0:	080070bd 	.word	0x080070bd
 80070f4:	080070bd 	.word	0x080070bd
 80070f8:	080070bd 	.word	0x080070bd
 80070fc:	080070bd 	.word	0x080070bd
 8007100:	0800724d 	.word	0x0800724d
 8007104:	08007171 	.word	0x08007171
 8007108:	0800722f 	.word	0x0800722f
 800710c:	080070bd 	.word	0x080070bd
 8007110:	080070bd 	.word	0x080070bd
 8007114:	0800726f 	.word	0x0800726f
 8007118:	080070bd 	.word	0x080070bd
 800711c:	08007171 	.word	0x08007171
 8007120:	080070bd 	.word	0x080070bd
 8007124:	080070bd 	.word	0x080070bd
 8007128:	08007237 	.word	0x08007237
 800712c:	682b      	ldr	r3, [r5, #0]
 800712e:	1d1a      	adds	r2, r3, #4
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	602a      	str	r2, [r5, #0]
 8007134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007138:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800713c:	2301      	movs	r3, #1
 800713e:	e0a3      	b.n	8007288 <_printf_i+0x1f4>
 8007140:	6820      	ldr	r0, [r4, #0]
 8007142:	6829      	ldr	r1, [r5, #0]
 8007144:	0606      	lsls	r6, r0, #24
 8007146:	f101 0304 	add.w	r3, r1, #4
 800714a:	d50a      	bpl.n	8007162 <_printf_i+0xce>
 800714c:	680e      	ldr	r6, [r1, #0]
 800714e:	602b      	str	r3, [r5, #0]
 8007150:	2e00      	cmp	r6, #0
 8007152:	da03      	bge.n	800715c <_printf_i+0xc8>
 8007154:	232d      	movs	r3, #45	; 0x2d
 8007156:	4276      	negs	r6, r6
 8007158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800715c:	485e      	ldr	r0, [pc, #376]	; (80072d8 <_printf_i+0x244>)
 800715e:	230a      	movs	r3, #10
 8007160:	e019      	b.n	8007196 <_printf_i+0x102>
 8007162:	680e      	ldr	r6, [r1, #0]
 8007164:	602b      	str	r3, [r5, #0]
 8007166:	f010 0f40 	tst.w	r0, #64	; 0x40
 800716a:	bf18      	it	ne
 800716c:	b236      	sxthne	r6, r6
 800716e:	e7ef      	b.n	8007150 <_printf_i+0xbc>
 8007170:	682b      	ldr	r3, [r5, #0]
 8007172:	6820      	ldr	r0, [r4, #0]
 8007174:	1d19      	adds	r1, r3, #4
 8007176:	6029      	str	r1, [r5, #0]
 8007178:	0601      	lsls	r1, r0, #24
 800717a:	d501      	bpl.n	8007180 <_printf_i+0xec>
 800717c:	681e      	ldr	r6, [r3, #0]
 800717e:	e002      	b.n	8007186 <_printf_i+0xf2>
 8007180:	0646      	lsls	r6, r0, #25
 8007182:	d5fb      	bpl.n	800717c <_printf_i+0xe8>
 8007184:	881e      	ldrh	r6, [r3, #0]
 8007186:	4854      	ldr	r0, [pc, #336]	; (80072d8 <_printf_i+0x244>)
 8007188:	2f6f      	cmp	r7, #111	; 0x6f
 800718a:	bf0c      	ite	eq
 800718c:	2308      	moveq	r3, #8
 800718e:	230a      	movne	r3, #10
 8007190:	2100      	movs	r1, #0
 8007192:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007196:	6865      	ldr	r5, [r4, #4]
 8007198:	60a5      	str	r5, [r4, #8]
 800719a:	2d00      	cmp	r5, #0
 800719c:	bfa2      	ittt	ge
 800719e:	6821      	ldrge	r1, [r4, #0]
 80071a0:	f021 0104 	bicge.w	r1, r1, #4
 80071a4:	6021      	strge	r1, [r4, #0]
 80071a6:	b90e      	cbnz	r6, 80071ac <_printf_i+0x118>
 80071a8:	2d00      	cmp	r5, #0
 80071aa:	d04d      	beq.n	8007248 <_printf_i+0x1b4>
 80071ac:	4615      	mov	r5, r2
 80071ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80071b2:	fb03 6711 	mls	r7, r3, r1, r6
 80071b6:	5dc7      	ldrb	r7, [r0, r7]
 80071b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071bc:	4637      	mov	r7, r6
 80071be:	42bb      	cmp	r3, r7
 80071c0:	460e      	mov	r6, r1
 80071c2:	d9f4      	bls.n	80071ae <_printf_i+0x11a>
 80071c4:	2b08      	cmp	r3, #8
 80071c6:	d10b      	bne.n	80071e0 <_printf_i+0x14c>
 80071c8:	6823      	ldr	r3, [r4, #0]
 80071ca:	07de      	lsls	r6, r3, #31
 80071cc:	d508      	bpl.n	80071e0 <_printf_i+0x14c>
 80071ce:	6923      	ldr	r3, [r4, #16]
 80071d0:	6861      	ldr	r1, [r4, #4]
 80071d2:	4299      	cmp	r1, r3
 80071d4:	bfde      	ittt	le
 80071d6:	2330      	movle	r3, #48	; 0x30
 80071d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071e0:	1b52      	subs	r2, r2, r5
 80071e2:	6122      	str	r2, [r4, #16]
 80071e4:	f8cd a000 	str.w	sl, [sp]
 80071e8:	464b      	mov	r3, r9
 80071ea:	aa03      	add	r2, sp, #12
 80071ec:	4621      	mov	r1, r4
 80071ee:	4640      	mov	r0, r8
 80071f0:	f7ff fee2 	bl	8006fb8 <_printf_common>
 80071f4:	3001      	adds	r0, #1
 80071f6:	d14c      	bne.n	8007292 <_printf_i+0x1fe>
 80071f8:	f04f 30ff 	mov.w	r0, #4294967295
 80071fc:	b004      	add	sp, #16
 80071fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007202:	4835      	ldr	r0, [pc, #212]	; (80072d8 <_printf_i+0x244>)
 8007204:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007208:	6829      	ldr	r1, [r5, #0]
 800720a:	6823      	ldr	r3, [r4, #0]
 800720c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007210:	6029      	str	r1, [r5, #0]
 8007212:	061d      	lsls	r5, r3, #24
 8007214:	d514      	bpl.n	8007240 <_printf_i+0x1ac>
 8007216:	07df      	lsls	r7, r3, #31
 8007218:	bf44      	itt	mi
 800721a:	f043 0320 	orrmi.w	r3, r3, #32
 800721e:	6023      	strmi	r3, [r4, #0]
 8007220:	b91e      	cbnz	r6, 800722a <_printf_i+0x196>
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	f023 0320 	bic.w	r3, r3, #32
 8007228:	6023      	str	r3, [r4, #0]
 800722a:	2310      	movs	r3, #16
 800722c:	e7b0      	b.n	8007190 <_printf_i+0xfc>
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	f043 0320 	orr.w	r3, r3, #32
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	2378      	movs	r3, #120	; 0x78
 8007238:	4828      	ldr	r0, [pc, #160]	; (80072dc <_printf_i+0x248>)
 800723a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800723e:	e7e3      	b.n	8007208 <_printf_i+0x174>
 8007240:	0659      	lsls	r1, r3, #25
 8007242:	bf48      	it	mi
 8007244:	b2b6      	uxthmi	r6, r6
 8007246:	e7e6      	b.n	8007216 <_printf_i+0x182>
 8007248:	4615      	mov	r5, r2
 800724a:	e7bb      	b.n	80071c4 <_printf_i+0x130>
 800724c:	682b      	ldr	r3, [r5, #0]
 800724e:	6826      	ldr	r6, [r4, #0]
 8007250:	6961      	ldr	r1, [r4, #20]
 8007252:	1d18      	adds	r0, r3, #4
 8007254:	6028      	str	r0, [r5, #0]
 8007256:	0635      	lsls	r5, r6, #24
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	d501      	bpl.n	8007260 <_printf_i+0x1cc>
 800725c:	6019      	str	r1, [r3, #0]
 800725e:	e002      	b.n	8007266 <_printf_i+0x1d2>
 8007260:	0670      	lsls	r0, r6, #25
 8007262:	d5fb      	bpl.n	800725c <_printf_i+0x1c8>
 8007264:	8019      	strh	r1, [r3, #0]
 8007266:	2300      	movs	r3, #0
 8007268:	6123      	str	r3, [r4, #16]
 800726a:	4615      	mov	r5, r2
 800726c:	e7ba      	b.n	80071e4 <_printf_i+0x150>
 800726e:	682b      	ldr	r3, [r5, #0]
 8007270:	1d1a      	adds	r2, r3, #4
 8007272:	602a      	str	r2, [r5, #0]
 8007274:	681d      	ldr	r5, [r3, #0]
 8007276:	6862      	ldr	r2, [r4, #4]
 8007278:	2100      	movs	r1, #0
 800727a:	4628      	mov	r0, r5
 800727c:	f7f8 ffd8 	bl	8000230 <memchr>
 8007280:	b108      	cbz	r0, 8007286 <_printf_i+0x1f2>
 8007282:	1b40      	subs	r0, r0, r5
 8007284:	6060      	str	r0, [r4, #4]
 8007286:	6863      	ldr	r3, [r4, #4]
 8007288:	6123      	str	r3, [r4, #16]
 800728a:	2300      	movs	r3, #0
 800728c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007290:	e7a8      	b.n	80071e4 <_printf_i+0x150>
 8007292:	6923      	ldr	r3, [r4, #16]
 8007294:	462a      	mov	r2, r5
 8007296:	4649      	mov	r1, r9
 8007298:	4640      	mov	r0, r8
 800729a:	47d0      	blx	sl
 800729c:	3001      	adds	r0, #1
 800729e:	d0ab      	beq.n	80071f8 <_printf_i+0x164>
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	079b      	lsls	r3, r3, #30
 80072a4:	d413      	bmi.n	80072ce <_printf_i+0x23a>
 80072a6:	68e0      	ldr	r0, [r4, #12]
 80072a8:	9b03      	ldr	r3, [sp, #12]
 80072aa:	4298      	cmp	r0, r3
 80072ac:	bfb8      	it	lt
 80072ae:	4618      	movlt	r0, r3
 80072b0:	e7a4      	b.n	80071fc <_printf_i+0x168>
 80072b2:	2301      	movs	r3, #1
 80072b4:	4632      	mov	r2, r6
 80072b6:	4649      	mov	r1, r9
 80072b8:	4640      	mov	r0, r8
 80072ba:	47d0      	blx	sl
 80072bc:	3001      	adds	r0, #1
 80072be:	d09b      	beq.n	80071f8 <_printf_i+0x164>
 80072c0:	3501      	adds	r5, #1
 80072c2:	68e3      	ldr	r3, [r4, #12]
 80072c4:	9903      	ldr	r1, [sp, #12]
 80072c6:	1a5b      	subs	r3, r3, r1
 80072c8:	42ab      	cmp	r3, r5
 80072ca:	dcf2      	bgt.n	80072b2 <_printf_i+0x21e>
 80072cc:	e7eb      	b.n	80072a6 <_printf_i+0x212>
 80072ce:	2500      	movs	r5, #0
 80072d0:	f104 0619 	add.w	r6, r4, #25
 80072d4:	e7f5      	b.n	80072c2 <_printf_i+0x22e>
 80072d6:	bf00      	nop
 80072d8:	08009a1a 	.word	0x08009a1a
 80072dc:	08009a2b 	.word	0x08009a2b

080072e0 <siprintf>:
 80072e0:	b40e      	push	{r1, r2, r3}
 80072e2:	b500      	push	{lr}
 80072e4:	b09c      	sub	sp, #112	; 0x70
 80072e6:	ab1d      	add	r3, sp, #116	; 0x74
 80072e8:	9002      	str	r0, [sp, #8]
 80072ea:	9006      	str	r0, [sp, #24]
 80072ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072f0:	4809      	ldr	r0, [pc, #36]	; (8007318 <siprintf+0x38>)
 80072f2:	9107      	str	r1, [sp, #28]
 80072f4:	9104      	str	r1, [sp, #16]
 80072f6:	4909      	ldr	r1, [pc, #36]	; (800731c <siprintf+0x3c>)
 80072f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072fc:	9105      	str	r1, [sp, #20]
 80072fe:	6800      	ldr	r0, [r0, #0]
 8007300:	9301      	str	r3, [sp, #4]
 8007302:	a902      	add	r1, sp, #8
 8007304:	f001 fb8a 	bl	8008a1c <_svfiprintf_r>
 8007308:	9b02      	ldr	r3, [sp, #8]
 800730a:	2200      	movs	r2, #0
 800730c:	701a      	strb	r2, [r3, #0]
 800730e:	b01c      	add	sp, #112	; 0x70
 8007310:	f85d eb04 	ldr.w	lr, [sp], #4
 8007314:	b003      	add	sp, #12
 8007316:	4770      	bx	lr
 8007318:	200001d4 	.word	0x200001d4
 800731c:	ffff0208 	.word	0xffff0208

08007320 <strncat>:
 8007320:	b530      	push	{r4, r5, lr}
 8007322:	4604      	mov	r4, r0
 8007324:	7825      	ldrb	r5, [r4, #0]
 8007326:	4623      	mov	r3, r4
 8007328:	3401      	adds	r4, #1
 800732a:	2d00      	cmp	r5, #0
 800732c:	d1fa      	bne.n	8007324 <strncat+0x4>
 800732e:	3a01      	subs	r2, #1
 8007330:	d304      	bcc.n	800733c <strncat+0x1c>
 8007332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007336:	f803 4b01 	strb.w	r4, [r3], #1
 800733a:	b904      	cbnz	r4, 800733e <strncat+0x1e>
 800733c:	bd30      	pop	{r4, r5, pc}
 800733e:	2a00      	cmp	r2, #0
 8007340:	d1f5      	bne.n	800732e <strncat+0xe>
 8007342:	701a      	strb	r2, [r3, #0]
 8007344:	e7f3      	b.n	800732e <strncat+0xe>

08007346 <quorem>:
 8007346:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734a:	6903      	ldr	r3, [r0, #16]
 800734c:	690c      	ldr	r4, [r1, #16]
 800734e:	42a3      	cmp	r3, r4
 8007350:	4607      	mov	r7, r0
 8007352:	f2c0 8081 	blt.w	8007458 <quorem+0x112>
 8007356:	3c01      	subs	r4, #1
 8007358:	f101 0814 	add.w	r8, r1, #20
 800735c:	f100 0514 	add.w	r5, r0, #20
 8007360:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007364:	9301      	str	r3, [sp, #4]
 8007366:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800736a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800736e:	3301      	adds	r3, #1
 8007370:	429a      	cmp	r2, r3
 8007372:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007376:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800737a:	fbb2 f6f3 	udiv	r6, r2, r3
 800737e:	d331      	bcc.n	80073e4 <quorem+0x9e>
 8007380:	f04f 0e00 	mov.w	lr, #0
 8007384:	4640      	mov	r0, r8
 8007386:	46ac      	mov	ip, r5
 8007388:	46f2      	mov	sl, lr
 800738a:	f850 2b04 	ldr.w	r2, [r0], #4
 800738e:	b293      	uxth	r3, r2
 8007390:	fb06 e303 	mla	r3, r6, r3, lr
 8007394:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007398:	b29b      	uxth	r3, r3
 800739a:	ebaa 0303 	sub.w	r3, sl, r3
 800739e:	f8dc a000 	ldr.w	sl, [ip]
 80073a2:	0c12      	lsrs	r2, r2, #16
 80073a4:	fa13 f38a 	uxtah	r3, r3, sl
 80073a8:	fb06 e202 	mla	r2, r6, r2, lr
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	9b00      	ldr	r3, [sp, #0]
 80073b0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073b4:	b292      	uxth	r2, r2
 80073b6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80073ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073be:	f8bd 3000 	ldrh.w	r3, [sp]
 80073c2:	4581      	cmp	r9, r0
 80073c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073c8:	f84c 3b04 	str.w	r3, [ip], #4
 80073cc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80073d0:	d2db      	bcs.n	800738a <quorem+0x44>
 80073d2:	f855 300b 	ldr.w	r3, [r5, fp]
 80073d6:	b92b      	cbnz	r3, 80073e4 <quorem+0x9e>
 80073d8:	9b01      	ldr	r3, [sp, #4]
 80073da:	3b04      	subs	r3, #4
 80073dc:	429d      	cmp	r5, r3
 80073de:	461a      	mov	r2, r3
 80073e0:	d32e      	bcc.n	8007440 <quorem+0xfa>
 80073e2:	613c      	str	r4, [r7, #16]
 80073e4:	4638      	mov	r0, r7
 80073e6:	f001 f8c5 	bl	8008574 <__mcmp>
 80073ea:	2800      	cmp	r0, #0
 80073ec:	db24      	blt.n	8007438 <quorem+0xf2>
 80073ee:	3601      	adds	r6, #1
 80073f0:	4628      	mov	r0, r5
 80073f2:	f04f 0c00 	mov.w	ip, #0
 80073f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80073fa:	f8d0 e000 	ldr.w	lr, [r0]
 80073fe:	b293      	uxth	r3, r2
 8007400:	ebac 0303 	sub.w	r3, ip, r3
 8007404:	0c12      	lsrs	r2, r2, #16
 8007406:	fa13 f38e 	uxtah	r3, r3, lr
 800740a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800740e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007412:	b29b      	uxth	r3, r3
 8007414:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007418:	45c1      	cmp	r9, r8
 800741a:	f840 3b04 	str.w	r3, [r0], #4
 800741e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007422:	d2e8      	bcs.n	80073f6 <quorem+0xb0>
 8007424:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007428:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800742c:	b922      	cbnz	r2, 8007438 <quorem+0xf2>
 800742e:	3b04      	subs	r3, #4
 8007430:	429d      	cmp	r5, r3
 8007432:	461a      	mov	r2, r3
 8007434:	d30a      	bcc.n	800744c <quorem+0x106>
 8007436:	613c      	str	r4, [r7, #16]
 8007438:	4630      	mov	r0, r6
 800743a:	b003      	add	sp, #12
 800743c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007440:	6812      	ldr	r2, [r2, #0]
 8007442:	3b04      	subs	r3, #4
 8007444:	2a00      	cmp	r2, #0
 8007446:	d1cc      	bne.n	80073e2 <quorem+0x9c>
 8007448:	3c01      	subs	r4, #1
 800744a:	e7c7      	b.n	80073dc <quorem+0x96>
 800744c:	6812      	ldr	r2, [r2, #0]
 800744e:	3b04      	subs	r3, #4
 8007450:	2a00      	cmp	r2, #0
 8007452:	d1f0      	bne.n	8007436 <quorem+0xf0>
 8007454:	3c01      	subs	r4, #1
 8007456:	e7eb      	b.n	8007430 <quorem+0xea>
 8007458:	2000      	movs	r0, #0
 800745a:	e7ee      	b.n	800743a <quorem+0xf4>
 800745c:	0000      	movs	r0, r0
	...

08007460 <_dtoa_r>:
 8007460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007464:	ed2d 8b04 	vpush	{d8-d9}
 8007468:	ec57 6b10 	vmov	r6, r7, d0
 800746c:	b093      	sub	sp, #76	; 0x4c
 800746e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007470:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007474:	9106      	str	r1, [sp, #24]
 8007476:	ee10 aa10 	vmov	sl, s0
 800747a:	4604      	mov	r4, r0
 800747c:	9209      	str	r2, [sp, #36]	; 0x24
 800747e:	930c      	str	r3, [sp, #48]	; 0x30
 8007480:	46bb      	mov	fp, r7
 8007482:	b975      	cbnz	r5, 80074a2 <_dtoa_r+0x42>
 8007484:	2010      	movs	r0, #16
 8007486:	f000 fddd 	bl	8008044 <malloc>
 800748a:	4602      	mov	r2, r0
 800748c:	6260      	str	r0, [r4, #36]	; 0x24
 800748e:	b920      	cbnz	r0, 800749a <_dtoa_r+0x3a>
 8007490:	4ba7      	ldr	r3, [pc, #668]	; (8007730 <_dtoa_r+0x2d0>)
 8007492:	21ea      	movs	r1, #234	; 0xea
 8007494:	48a7      	ldr	r0, [pc, #668]	; (8007734 <_dtoa_r+0x2d4>)
 8007496:	f001 fbd1 	bl	8008c3c <__assert_func>
 800749a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800749e:	6005      	str	r5, [r0, #0]
 80074a0:	60c5      	str	r5, [r0, #12]
 80074a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074a4:	6819      	ldr	r1, [r3, #0]
 80074a6:	b151      	cbz	r1, 80074be <_dtoa_r+0x5e>
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	604a      	str	r2, [r1, #4]
 80074ac:	2301      	movs	r3, #1
 80074ae:	4093      	lsls	r3, r2
 80074b0:	608b      	str	r3, [r1, #8]
 80074b2:	4620      	mov	r0, r4
 80074b4:	f000 fe1c 	bl	80080f0 <_Bfree>
 80074b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074ba:	2200      	movs	r2, #0
 80074bc:	601a      	str	r2, [r3, #0]
 80074be:	1e3b      	subs	r3, r7, #0
 80074c0:	bfaa      	itet	ge
 80074c2:	2300      	movge	r3, #0
 80074c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80074c8:	f8c8 3000 	strge.w	r3, [r8]
 80074cc:	4b9a      	ldr	r3, [pc, #616]	; (8007738 <_dtoa_r+0x2d8>)
 80074ce:	bfbc      	itt	lt
 80074d0:	2201      	movlt	r2, #1
 80074d2:	f8c8 2000 	strlt.w	r2, [r8]
 80074d6:	ea33 030b 	bics.w	r3, r3, fp
 80074da:	d11b      	bne.n	8007514 <_dtoa_r+0xb4>
 80074dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074de:	f242 730f 	movw	r3, #9999	; 0x270f
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074e8:	4333      	orrs	r3, r6
 80074ea:	f000 8592 	beq.w	8008012 <_dtoa_r+0xbb2>
 80074ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074f0:	b963      	cbnz	r3, 800750c <_dtoa_r+0xac>
 80074f2:	4b92      	ldr	r3, [pc, #584]	; (800773c <_dtoa_r+0x2dc>)
 80074f4:	e022      	b.n	800753c <_dtoa_r+0xdc>
 80074f6:	4b92      	ldr	r3, [pc, #584]	; (8007740 <_dtoa_r+0x2e0>)
 80074f8:	9301      	str	r3, [sp, #4]
 80074fa:	3308      	adds	r3, #8
 80074fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	9801      	ldr	r0, [sp, #4]
 8007502:	b013      	add	sp, #76	; 0x4c
 8007504:	ecbd 8b04 	vpop	{d8-d9}
 8007508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750c:	4b8b      	ldr	r3, [pc, #556]	; (800773c <_dtoa_r+0x2dc>)
 800750e:	9301      	str	r3, [sp, #4]
 8007510:	3303      	adds	r3, #3
 8007512:	e7f3      	b.n	80074fc <_dtoa_r+0x9c>
 8007514:	2200      	movs	r2, #0
 8007516:	2300      	movs	r3, #0
 8007518:	4650      	mov	r0, sl
 800751a:	4659      	mov	r1, fp
 800751c:	f7f9 fafc 	bl	8000b18 <__aeabi_dcmpeq>
 8007520:	ec4b ab19 	vmov	d9, sl, fp
 8007524:	4680      	mov	r8, r0
 8007526:	b158      	cbz	r0, 8007540 <_dtoa_r+0xe0>
 8007528:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800752a:	2301      	movs	r3, #1
 800752c:	6013      	str	r3, [r2, #0]
 800752e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 856b 	beq.w	800800c <_dtoa_r+0xbac>
 8007536:	4883      	ldr	r0, [pc, #524]	; (8007744 <_dtoa_r+0x2e4>)
 8007538:	6018      	str	r0, [r3, #0]
 800753a:	1e43      	subs	r3, r0, #1
 800753c:	9301      	str	r3, [sp, #4]
 800753e:	e7df      	b.n	8007500 <_dtoa_r+0xa0>
 8007540:	ec4b ab10 	vmov	d0, sl, fp
 8007544:	aa10      	add	r2, sp, #64	; 0x40
 8007546:	a911      	add	r1, sp, #68	; 0x44
 8007548:	4620      	mov	r0, r4
 800754a:	f001 f8b9 	bl	80086c0 <__d2b>
 800754e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007552:	ee08 0a10 	vmov	s16, r0
 8007556:	2d00      	cmp	r5, #0
 8007558:	f000 8084 	beq.w	8007664 <_dtoa_r+0x204>
 800755c:	ee19 3a90 	vmov	r3, s19
 8007560:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007564:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007568:	4656      	mov	r6, sl
 800756a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800756e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007572:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007576:	4b74      	ldr	r3, [pc, #464]	; (8007748 <_dtoa_r+0x2e8>)
 8007578:	2200      	movs	r2, #0
 800757a:	4630      	mov	r0, r6
 800757c:	4639      	mov	r1, r7
 800757e:	f7f8 feab 	bl	80002d8 <__aeabi_dsub>
 8007582:	a365      	add	r3, pc, #404	; (adr r3, 8007718 <_dtoa_r+0x2b8>)
 8007584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007588:	f7f9 f85e 	bl	8000648 <__aeabi_dmul>
 800758c:	a364      	add	r3, pc, #400	; (adr r3, 8007720 <_dtoa_r+0x2c0>)
 800758e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007592:	f7f8 fea3 	bl	80002dc <__adddf3>
 8007596:	4606      	mov	r6, r0
 8007598:	4628      	mov	r0, r5
 800759a:	460f      	mov	r7, r1
 800759c:	f7f8 ffea 	bl	8000574 <__aeabi_i2d>
 80075a0:	a361      	add	r3, pc, #388	; (adr r3, 8007728 <_dtoa_r+0x2c8>)
 80075a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a6:	f7f9 f84f 	bl	8000648 <__aeabi_dmul>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	4630      	mov	r0, r6
 80075b0:	4639      	mov	r1, r7
 80075b2:	f7f8 fe93 	bl	80002dc <__adddf3>
 80075b6:	4606      	mov	r6, r0
 80075b8:	460f      	mov	r7, r1
 80075ba:	f7f9 faf5 	bl	8000ba8 <__aeabi_d2iz>
 80075be:	2200      	movs	r2, #0
 80075c0:	9000      	str	r0, [sp, #0]
 80075c2:	2300      	movs	r3, #0
 80075c4:	4630      	mov	r0, r6
 80075c6:	4639      	mov	r1, r7
 80075c8:	f7f9 fab0 	bl	8000b2c <__aeabi_dcmplt>
 80075cc:	b150      	cbz	r0, 80075e4 <_dtoa_r+0x184>
 80075ce:	9800      	ldr	r0, [sp, #0]
 80075d0:	f7f8 ffd0 	bl	8000574 <__aeabi_i2d>
 80075d4:	4632      	mov	r2, r6
 80075d6:	463b      	mov	r3, r7
 80075d8:	f7f9 fa9e 	bl	8000b18 <__aeabi_dcmpeq>
 80075dc:	b910      	cbnz	r0, 80075e4 <_dtoa_r+0x184>
 80075de:	9b00      	ldr	r3, [sp, #0]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	9b00      	ldr	r3, [sp, #0]
 80075e6:	2b16      	cmp	r3, #22
 80075e8:	d85a      	bhi.n	80076a0 <_dtoa_r+0x240>
 80075ea:	9a00      	ldr	r2, [sp, #0]
 80075ec:	4b57      	ldr	r3, [pc, #348]	; (800774c <_dtoa_r+0x2ec>)
 80075ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f6:	ec51 0b19 	vmov	r0, r1, d9
 80075fa:	f7f9 fa97 	bl	8000b2c <__aeabi_dcmplt>
 80075fe:	2800      	cmp	r0, #0
 8007600:	d050      	beq.n	80076a4 <_dtoa_r+0x244>
 8007602:	9b00      	ldr	r3, [sp, #0]
 8007604:	3b01      	subs	r3, #1
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	2300      	movs	r3, #0
 800760a:	930b      	str	r3, [sp, #44]	; 0x2c
 800760c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800760e:	1b5d      	subs	r5, r3, r5
 8007610:	1e6b      	subs	r3, r5, #1
 8007612:	9305      	str	r3, [sp, #20]
 8007614:	bf45      	ittet	mi
 8007616:	f1c5 0301 	rsbmi	r3, r5, #1
 800761a:	9304      	strmi	r3, [sp, #16]
 800761c:	2300      	movpl	r3, #0
 800761e:	2300      	movmi	r3, #0
 8007620:	bf4c      	ite	mi
 8007622:	9305      	strmi	r3, [sp, #20]
 8007624:	9304      	strpl	r3, [sp, #16]
 8007626:	9b00      	ldr	r3, [sp, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	db3d      	blt.n	80076a8 <_dtoa_r+0x248>
 800762c:	9b05      	ldr	r3, [sp, #20]
 800762e:	9a00      	ldr	r2, [sp, #0]
 8007630:	920a      	str	r2, [sp, #40]	; 0x28
 8007632:	4413      	add	r3, r2
 8007634:	9305      	str	r3, [sp, #20]
 8007636:	2300      	movs	r3, #0
 8007638:	9307      	str	r3, [sp, #28]
 800763a:	9b06      	ldr	r3, [sp, #24]
 800763c:	2b09      	cmp	r3, #9
 800763e:	f200 8089 	bhi.w	8007754 <_dtoa_r+0x2f4>
 8007642:	2b05      	cmp	r3, #5
 8007644:	bfc4      	itt	gt
 8007646:	3b04      	subgt	r3, #4
 8007648:	9306      	strgt	r3, [sp, #24]
 800764a:	9b06      	ldr	r3, [sp, #24]
 800764c:	f1a3 0302 	sub.w	r3, r3, #2
 8007650:	bfcc      	ite	gt
 8007652:	2500      	movgt	r5, #0
 8007654:	2501      	movle	r5, #1
 8007656:	2b03      	cmp	r3, #3
 8007658:	f200 8087 	bhi.w	800776a <_dtoa_r+0x30a>
 800765c:	e8df f003 	tbb	[pc, r3]
 8007660:	59383a2d 	.word	0x59383a2d
 8007664:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007668:	441d      	add	r5, r3
 800766a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800766e:	2b20      	cmp	r3, #32
 8007670:	bfc1      	itttt	gt
 8007672:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007676:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800767a:	fa0b f303 	lslgt.w	r3, fp, r3
 800767e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007682:	bfda      	itte	le
 8007684:	f1c3 0320 	rsble	r3, r3, #32
 8007688:	fa06 f003 	lslle.w	r0, r6, r3
 800768c:	4318      	orrgt	r0, r3
 800768e:	f7f8 ff61 	bl	8000554 <__aeabi_ui2d>
 8007692:	2301      	movs	r3, #1
 8007694:	4606      	mov	r6, r0
 8007696:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800769a:	3d01      	subs	r5, #1
 800769c:	930e      	str	r3, [sp, #56]	; 0x38
 800769e:	e76a      	b.n	8007576 <_dtoa_r+0x116>
 80076a0:	2301      	movs	r3, #1
 80076a2:	e7b2      	b.n	800760a <_dtoa_r+0x1aa>
 80076a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80076a6:	e7b1      	b.n	800760c <_dtoa_r+0x1ac>
 80076a8:	9b04      	ldr	r3, [sp, #16]
 80076aa:	9a00      	ldr	r2, [sp, #0]
 80076ac:	1a9b      	subs	r3, r3, r2
 80076ae:	9304      	str	r3, [sp, #16]
 80076b0:	4253      	negs	r3, r2
 80076b2:	9307      	str	r3, [sp, #28]
 80076b4:	2300      	movs	r3, #0
 80076b6:	930a      	str	r3, [sp, #40]	; 0x28
 80076b8:	e7bf      	b.n	800763a <_dtoa_r+0x1da>
 80076ba:	2300      	movs	r3, #0
 80076bc:	9308      	str	r3, [sp, #32]
 80076be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	dc55      	bgt.n	8007770 <_dtoa_r+0x310>
 80076c4:	2301      	movs	r3, #1
 80076c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076ca:	461a      	mov	r2, r3
 80076cc:	9209      	str	r2, [sp, #36]	; 0x24
 80076ce:	e00c      	b.n	80076ea <_dtoa_r+0x28a>
 80076d0:	2301      	movs	r3, #1
 80076d2:	e7f3      	b.n	80076bc <_dtoa_r+0x25c>
 80076d4:	2300      	movs	r3, #0
 80076d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076d8:	9308      	str	r3, [sp, #32]
 80076da:	9b00      	ldr	r3, [sp, #0]
 80076dc:	4413      	add	r3, r2
 80076de:	9302      	str	r3, [sp, #8]
 80076e0:	3301      	adds	r3, #1
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	9303      	str	r3, [sp, #12]
 80076e6:	bfb8      	it	lt
 80076e8:	2301      	movlt	r3, #1
 80076ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80076ec:	2200      	movs	r2, #0
 80076ee:	6042      	str	r2, [r0, #4]
 80076f0:	2204      	movs	r2, #4
 80076f2:	f102 0614 	add.w	r6, r2, #20
 80076f6:	429e      	cmp	r6, r3
 80076f8:	6841      	ldr	r1, [r0, #4]
 80076fa:	d93d      	bls.n	8007778 <_dtoa_r+0x318>
 80076fc:	4620      	mov	r0, r4
 80076fe:	f000 fcb7 	bl	8008070 <_Balloc>
 8007702:	9001      	str	r0, [sp, #4]
 8007704:	2800      	cmp	r0, #0
 8007706:	d13b      	bne.n	8007780 <_dtoa_r+0x320>
 8007708:	4b11      	ldr	r3, [pc, #68]	; (8007750 <_dtoa_r+0x2f0>)
 800770a:	4602      	mov	r2, r0
 800770c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007710:	e6c0      	b.n	8007494 <_dtoa_r+0x34>
 8007712:	2301      	movs	r3, #1
 8007714:	e7df      	b.n	80076d6 <_dtoa_r+0x276>
 8007716:	bf00      	nop
 8007718:	636f4361 	.word	0x636f4361
 800771c:	3fd287a7 	.word	0x3fd287a7
 8007720:	8b60c8b3 	.word	0x8b60c8b3
 8007724:	3fc68a28 	.word	0x3fc68a28
 8007728:	509f79fb 	.word	0x509f79fb
 800772c:	3fd34413 	.word	0x3fd34413
 8007730:	08009a49 	.word	0x08009a49
 8007734:	08009a60 	.word	0x08009a60
 8007738:	7ff00000 	.word	0x7ff00000
 800773c:	08009a45 	.word	0x08009a45
 8007740:	08009a3c 	.word	0x08009a3c
 8007744:	08009a19 	.word	0x08009a19
 8007748:	3ff80000 	.word	0x3ff80000
 800774c:	08009b50 	.word	0x08009b50
 8007750:	08009abb 	.word	0x08009abb
 8007754:	2501      	movs	r5, #1
 8007756:	2300      	movs	r3, #0
 8007758:	9306      	str	r3, [sp, #24]
 800775a:	9508      	str	r5, [sp, #32]
 800775c:	f04f 33ff 	mov.w	r3, #4294967295
 8007760:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007764:	2200      	movs	r2, #0
 8007766:	2312      	movs	r3, #18
 8007768:	e7b0      	b.n	80076cc <_dtoa_r+0x26c>
 800776a:	2301      	movs	r3, #1
 800776c:	9308      	str	r3, [sp, #32]
 800776e:	e7f5      	b.n	800775c <_dtoa_r+0x2fc>
 8007770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007772:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007776:	e7b8      	b.n	80076ea <_dtoa_r+0x28a>
 8007778:	3101      	adds	r1, #1
 800777a:	6041      	str	r1, [r0, #4]
 800777c:	0052      	lsls	r2, r2, #1
 800777e:	e7b8      	b.n	80076f2 <_dtoa_r+0x292>
 8007780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007782:	9a01      	ldr	r2, [sp, #4]
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	9b03      	ldr	r3, [sp, #12]
 8007788:	2b0e      	cmp	r3, #14
 800778a:	f200 809d 	bhi.w	80078c8 <_dtoa_r+0x468>
 800778e:	2d00      	cmp	r5, #0
 8007790:	f000 809a 	beq.w	80078c8 <_dtoa_r+0x468>
 8007794:	9b00      	ldr	r3, [sp, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	dd32      	ble.n	8007800 <_dtoa_r+0x3a0>
 800779a:	4ab7      	ldr	r2, [pc, #732]	; (8007a78 <_dtoa_r+0x618>)
 800779c:	f003 030f 	and.w	r3, r3, #15
 80077a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80077a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077a8:	9b00      	ldr	r3, [sp, #0]
 80077aa:	05d8      	lsls	r0, r3, #23
 80077ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80077b0:	d516      	bpl.n	80077e0 <_dtoa_r+0x380>
 80077b2:	4bb2      	ldr	r3, [pc, #712]	; (8007a7c <_dtoa_r+0x61c>)
 80077b4:	ec51 0b19 	vmov	r0, r1, d9
 80077b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077bc:	f7f9 f86e 	bl	800089c <__aeabi_ddiv>
 80077c0:	f007 070f 	and.w	r7, r7, #15
 80077c4:	4682      	mov	sl, r0
 80077c6:	468b      	mov	fp, r1
 80077c8:	2503      	movs	r5, #3
 80077ca:	4eac      	ldr	r6, [pc, #688]	; (8007a7c <_dtoa_r+0x61c>)
 80077cc:	b957      	cbnz	r7, 80077e4 <_dtoa_r+0x384>
 80077ce:	4642      	mov	r2, r8
 80077d0:	464b      	mov	r3, r9
 80077d2:	4650      	mov	r0, sl
 80077d4:	4659      	mov	r1, fp
 80077d6:	f7f9 f861 	bl	800089c <__aeabi_ddiv>
 80077da:	4682      	mov	sl, r0
 80077dc:	468b      	mov	fp, r1
 80077de:	e028      	b.n	8007832 <_dtoa_r+0x3d2>
 80077e0:	2502      	movs	r5, #2
 80077e2:	e7f2      	b.n	80077ca <_dtoa_r+0x36a>
 80077e4:	07f9      	lsls	r1, r7, #31
 80077e6:	d508      	bpl.n	80077fa <_dtoa_r+0x39a>
 80077e8:	4640      	mov	r0, r8
 80077ea:	4649      	mov	r1, r9
 80077ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077f0:	f7f8 ff2a 	bl	8000648 <__aeabi_dmul>
 80077f4:	3501      	adds	r5, #1
 80077f6:	4680      	mov	r8, r0
 80077f8:	4689      	mov	r9, r1
 80077fa:	107f      	asrs	r7, r7, #1
 80077fc:	3608      	adds	r6, #8
 80077fe:	e7e5      	b.n	80077cc <_dtoa_r+0x36c>
 8007800:	f000 809b 	beq.w	800793a <_dtoa_r+0x4da>
 8007804:	9b00      	ldr	r3, [sp, #0]
 8007806:	4f9d      	ldr	r7, [pc, #628]	; (8007a7c <_dtoa_r+0x61c>)
 8007808:	425e      	negs	r6, r3
 800780a:	4b9b      	ldr	r3, [pc, #620]	; (8007a78 <_dtoa_r+0x618>)
 800780c:	f006 020f 	and.w	r2, r6, #15
 8007810:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	ec51 0b19 	vmov	r0, r1, d9
 800781c:	f7f8 ff14 	bl	8000648 <__aeabi_dmul>
 8007820:	1136      	asrs	r6, r6, #4
 8007822:	4682      	mov	sl, r0
 8007824:	468b      	mov	fp, r1
 8007826:	2300      	movs	r3, #0
 8007828:	2502      	movs	r5, #2
 800782a:	2e00      	cmp	r6, #0
 800782c:	d17a      	bne.n	8007924 <_dtoa_r+0x4c4>
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1d3      	bne.n	80077da <_dtoa_r+0x37a>
 8007832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 8082 	beq.w	800793e <_dtoa_r+0x4de>
 800783a:	4b91      	ldr	r3, [pc, #580]	; (8007a80 <_dtoa_r+0x620>)
 800783c:	2200      	movs	r2, #0
 800783e:	4650      	mov	r0, sl
 8007840:	4659      	mov	r1, fp
 8007842:	f7f9 f973 	bl	8000b2c <__aeabi_dcmplt>
 8007846:	2800      	cmp	r0, #0
 8007848:	d079      	beq.n	800793e <_dtoa_r+0x4de>
 800784a:	9b03      	ldr	r3, [sp, #12]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d076      	beq.n	800793e <_dtoa_r+0x4de>
 8007850:	9b02      	ldr	r3, [sp, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	dd36      	ble.n	80078c4 <_dtoa_r+0x464>
 8007856:	9b00      	ldr	r3, [sp, #0]
 8007858:	4650      	mov	r0, sl
 800785a:	4659      	mov	r1, fp
 800785c:	1e5f      	subs	r7, r3, #1
 800785e:	2200      	movs	r2, #0
 8007860:	4b88      	ldr	r3, [pc, #544]	; (8007a84 <_dtoa_r+0x624>)
 8007862:	f7f8 fef1 	bl	8000648 <__aeabi_dmul>
 8007866:	9e02      	ldr	r6, [sp, #8]
 8007868:	4682      	mov	sl, r0
 800786a:	468b      	mov	fp, r1
 800786c:	3501      	adds	r5, #1
 800786e:	4628      	mov	r0, r5
 8007870:	f7f8 fe80 	bl	8000574 <__aeabi_i2d>
 8007874:	4652      	mov	r2, sl
 8007876:	465b      	mov	r3, fp
 8007878:	f7f8 fee6 	bl	8000648 <__aeabi_dmul>
 800787c:	4b82      	ldr	r3, [pc, #520]	; (8007a88 <_dtoa_r+0x628>)
 800787e:	2200      	movs	r2, #0
 8007880:	f7f8 fd2c 	bl	80002dc <__adddf3>
 8007884:	46d0      	mov	r8, sl
 8007886:	46d9      	mov	r9, fp
 8007888:	4682      	mov	sl, r0
 800788a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800788e:	2e00      	cmp	r6, #0
 8007890:	d158      	bne.n	8007944 <_dtoa_r+0x4e4>
 8007892:	4b7e      	ldr	r3, [pc, #504]	; (8007a8c <_dtoa_r+0x62c>)
 8007894:	2200      	movs	r2, #0
 8007896:	4640      	mov	r0, r8
 8007898:	4649      	mov	r1, r9
 800789a:	f7f8 fd1d 	bl	80002d8 <__aeabi_dsub>
 800789e:	4652      	mov	r2, sl
 80078a0:	465b      	mov	r3, fp
 80078a2:	4680      	mov	r8, r0
 80078a4:	4689      	mov	r9, r1
 80078a6:	f7f9 f95f 	bl	8000b68 <__aeabi_dcmpgt>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	f040 8295 	bne.w	8007dda <_dtoa_r+0x97a>
 80078b0:	4652      	mov	r2, sl
 80078b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80078b6:	4640      	mov	r0, r8
 80078b8:	4649      	mov	r1, r9
 80078ba:	f7f9 f937 	bl	8000b2c <__aeabi_dcmplt>
 80078be:	2800      	cmp	r0, #0
 80078c0:	f040 8289 	bne.w	8007dd6 <_dtoa_r+0x976>
 80078c4:	ec5b ab19 	vmov	sl, fp, d9
 80078c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f2c0 8148 	blt.w	8007b60 <_dtoa_r+0x700>
 80078d0:	9a00      	ldr	r2, [sp, #0]
 80078d2:	2a0e      	cmp	r2, #14
 80078d4:	f300 8144 	bgt.w	8007b60 <_dtoa_r+0x700>
 80078d8:	4b67      	ldr	r3, [pc, #412]	; (8007a78 <_dtoa_r+0x618>)
 80078da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f280 80d5 	bge.w	8007a94 <_dtoa_r+0x634>
 80078ea:	9b03      	ldr	r3, [sp, #12]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f300 80d1 	bgt.w	8007a94 <_dtoa_r+0x634>
 80078f2:	f040 826f 	bne.w	8007dd4 <_dtoa_r+0x974>
 80078f6:	4b65      	ldr	r3, [pc, #404]	; (8007a8c <_dtoa_r+0x62c>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	4640      	mov	r0, r8
 80078fc:	4649      	mov	r1, r9
 80078fe:	f7f8 fea3 	bl	8000648 <__aeabi_dmul>
 8007902:	4652      	mov	r2, sl
 8007904:	465b      	mov	r3, fp
 8007906:	f7f9 f925 	bl	8000b54 <__aeabi_dcmpge>
 800790a:	9e03      	ldr	r6, [sp, #12]
 800790c:	4637      	mov	r7, r6
 800790e:	2800      	cmp	r0, #0
 8007910:	f040 8245 	bne.w	8007d9e <_dtoa_r+0x93e>
 8007914:	9d01      	ldr	r5, [sp, #4]
 8007916:	2331      	movs	r3, #49	; 0x31
 8007918:	f805 3b01 	strb.w	r3, [r5], #1
 800791c:	9b00      	ldr	r3, [sp, #0]
 800791e:	3301      	adds	r3, #1
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	e240      	b.n	8007da6 <_dtoa_r+0x946>
 8007924:	07f2      	lsls	r2, r6, #31
 8007926:	d505      	bpl.n	8007934 <_dtoa_r+0x4d4>
 8007928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800792c:	f7f8 fe8c 	bl	8000648 <__aeabi_dmul>
 8007930:	3501      	adds	r5, #1
 8007932:	2301      	movs	r3, #1
 8007934:	1076      	asrs	r6, r6, #1
 8007936:	3708      	adds	r7, #8
 8007938:	e777      	b.n	800782a <_dtoa_r+0x3ca>
 800793a:	2502      	movs	r5, #2
 800793c:	e779      	b.n	8007832 <_dtoa_r+0x3d2>
 800793e:	9f00      	ldr	r7, [sp, #0]
 8007940:	9e03      	ldr	r6, [sp, #12]
 8007942:	e794      	b.n	800786e <_dtoa_r+0x40e>
 8007944:	9901      	ldr	r1, [sp, #4]
 8007946:	4b4c      	ldr	r3, [pc, #304]	; (8007a78 <_dtoa_r+0x618>)
 8007948:	4431      	add	r1, r6
 800794a:	910d      	str	r1, [sp, #52]	; 0x34
 800794c:	9908      	ldr	r1, [sp, #32]
 800794e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007952:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007956:	2900      	cmp	r1, #0
 8007958:	d043      	beq.n	80079e2 <_dtoa_r+0x582>
 800795a:	494d      	ldr	r1, [pc, #308]	; (8007a90 <_dtoa_r+0x630>)
 800795c:	2000      	movs	r0, #0
 800795e:	f7f8 ff9d 	bl	800089c <__aeabi_ddiv>
 8007962:	4652      	mov	r2, sl
 8007964:	465b      	mov	r3, fp
 8007966:	f7f8 fcb7 	bl	80002d8 <__aeabi_dsub>
 800796a:	9d01      	ldr	r5, [sp, #4]
 800796c:	4682      	mov	sl, r0
 800796e:	468b      	mov	fp, r1
 8007970:	4649      	mov	r1, r9
 8007972:	4640      	mov	r0, r8
 8007974:	f7f9 f918 	bl	8000ba8 <__aeabi_d2iz>
 8007978:	4606      	mov	r6, r0
 800797a:	f7f8 fdfb 	bl	8000574 <__aeabi_i2d>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4640      	mov	r0, r8
 8007984:	4649      	mov	r1, r9
 8007986:	f7f8 fca7 	bl	80002d8 <__aeabi_dsub>
 800798a:	3630      	adds	r6, #48	; 0x30
 800798c:	f805 6b01 	strb.w	r6, [r5], #1
 8007990:	4652      	mov	r2, sl
 8007992:	465b      	mov	r3, fp
 8007994:	4680      	mov	r8, r0
 8007996:	4689      	mov	r9, r1
 8007998:	f7f9 f8c8 	bl	8000b2c <__aeabi_dcmplt>
 800799c:	2800      	cmp	r0, #0
 800799e:	d163      	bne.n	8007a68 <_dtoa_r+0x608>
 80079a0:	4642      	mov	r2, r8
 80079a2:	464b      	mov	r3, r9
 80079a4:	4936      	ldr	r1, [pc, #216]	; (8007a80 <_dtoa_r+0x620>)
 80079a6:	2000      	movs	r0, #0
 80079a8:	f7f8 fc96 	bl	80002d8 <__aeabi_dsub>
 80079ac:	4652      	mov	r2, sl
 80079ae:	465b      	mov	r3, fp
 80079b0:	f7f9 f8bc 	bl	8000b2c <__aeabi_dcmplt>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	f040 80b5 	bne.w	8007b24 <_dtoa_r+0x6c4>
 80079ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079bc:	429d      	cmp	r5, r3
 80079be:	d081      	beq.n	80078c4 <_dtoa_r+0x464>
 80079c0:	4b30      	ldr	r3, [pc, #192]	; (8007a84 <_dtoa_r+0x624>)
 80079c2:	2200      	movs	r2, #0
 80079c4:	4650      	mov	r0, sl
 80079c6:	4659      	mov	r1, fp
 80079c8:	f7f8 fe3e 	bl	8000648 <__aeabi_dmul>
 80079cc:	4b2d      	ldr	r3, [pc, #180]	; (8007a84 <_dtoa_r+0x624>)
 80079ce:	4682      	mov	sl, r0
 80079d0:	468b      	mov	fp, r1
 80079d2:	4640      	mov	r0, r8
 80079d4:	4649      	mov	r1, r9
 80079d6:	2200      	movs	r2, #0
 80079d8:	f7f8 fe36 	bl	8000648 <__aeabi_dmul>
 80079dc:	4680      	mov	r8, r0
 80079de:	4689      	mov	r9, r1
 80079e0:	e7c6      	b.n	8007970 <_dtoa_r+0x510>
 80079e2:	4650      	mov	r0, sl
 80079e4:	4659      	mov	r1, fp
 80079e6:	f7f8 fe2f 	bl	8000648 <__aeabi_dmul>
 80079ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079ec:	9d01      	ldr	r5, [sp, #4]
 80079ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80079f0:	4682      	mov	sl, r0
 80079f2:	468b      	mov	fp, r1
 80079f4:	4649      	mov	r1, r9
 80079f6:	4640      	mov	r0, r8
 80079f8:	f7f9 f8d6 	bl	8000ba8 <__aeabi_d2iz>
 80079fc:	4606      	mov	r6, r0
 80079fe:	f7f8 fdb9 	bl	8000574 <__aeabi_i2d>
 8007a02:	3630      	adds	r6, #48	; 0x30
 8007a04:	4602      	mov	r2, r0
 8007a06:	460b      	mov	r3, r1
 8007a08:	4640      	mov	r0, r8
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	f7f8 fc64 	bl	80002d8 <__aeabi_dsub>
 8007a10:	f805 6b01 	strb.w	r6, [r5], #1
 8007a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a16:	429d      	cmp	r5, r3
 8007a18:	4680      	mov	r8, r0
 8007a1a:	4689      	mov	r9, r1
 8007a1c:	f04f 0200 	mov.w	r2, #0
 8007a20:	d124      	bne.n	8007a6c <_dtoa_r+0x60c>
 8007a22:	4b1b      	ldr	r3, [pc, #108]	; (8007a90 <_dtoa_r+0x630>)
 8007a24:	4650      	mov	r0, sl
 8007a26:	4659      	mov	r1, fp
 8007a28:	f7f8 fc58 	bl	80002dc <__adddf3>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4640      	mov	r0, r8
 8007a32:	4649      	mov	r1, r9
 8007a34:	f7f9 f898 	bl	8000b68 <__aeabi_dcmpgt>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d173      	bne.n	8007b24 <_dtoa_r+0x6c4>
 8007a3c:	4652      	mov	r2, sl
 8007a3e:	465b      	mov	r3, fp
 8007a40:	4913      	ldr	r1, [pc, #76]	; (8007a90 <_dtoa_r+0x630>)
 8007a42:	2000      	movs	r0, #0
 8007a44:	f7f8 fc48 	bl	80002d8 <__aeabi_dsub>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	4640      	mov	r0, r8
 8007a4e:	4649      	mov	r1, r9
 8007a50:	f7f9 f86c 	bl	8000b2c <__aeabi_dcmplt>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	f43f af35 	beq.w	80078c4 <_dtoa_r+0x464>
 8007a5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007a5c:	1e6b      	subs	r3, r5, #1
 8007a5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a64:	2b30      	cmp	r3, #48	; 0x30
 8007a66:	d0f8      	beq.n	8007a5a <_dtoa_r+0x5fa>
 8007a68:	9700      	str	r7, [sp, #0]
 8007a6a:	e049      	b.n	8007b00 <_dtoa_r+0x6a0>
 8007a6c:	4b05      	ldr	r3, [pc, #20]	; (8007a84 <_dtoa_r+0x624>)
 8007a6e:	f7f8 fdeb 	bl	8000648 <__aeabi_dmul>
 8007a72:	4680      	mov	r8, r0
 8007a74:	4689      	mov	r9, r1
 8007a76:	e7bd      	b.n	80079f4 <_dtoa_r+0x594>
 8007a78:	08009b50 	.word	0x08009b50
 8007a7c:	08009b28 	.word	0x08009b28
 8007a80:	3ff00000 	.word	0x3ff00000
 8007a84:	40240000 	.word	0x40240000
 8007a88:	401c0000 	.word	0x401c0000
 8007a8c:	40140000 	.word	0x40140000
 8007a90:	3fe00000 	.word	0x3fe00000
 8007a94:	9d01      	ldr	r5, [sp, #4]
 8007a96:	4656      	mov	r6, sl
 8007a98:	465f      	mov	r7, fp
 8007a9a:	4642      	mov	r2, r8
 8007a9c:	464b      	mov	r3, r9
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	4639      	mov	r1, r7
 8007aa2:	f7f8 fefb 	bl	800089c <__aeabi_ddiv>
 8007aa6:	f7f9 f87f 	bl	8000ba8 <__aeabi_d2iz>
 8007aaa:	4682      	mov	sl, r0
 8007aac:	f7f8 fd62 	bl	8000574 <__aeabi_i2d>
 8007ab0:	4642      	mov	r2, r8
 8007ab2:	464b      	mov	r3, r9
 8007ab4:	f7f8 fdc8 	bl	8000648 <__aeabi_dmul>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4630      	mov	r0, r6
 8007abe:	4639      	mov	r1, r7
 8007ac0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007ac4:	f7f8 fc08 	bl	80002d8 <__aeabi_dsub>
 8007ac8:	f805 6b01 	strb.w	r6, [r5], #1
 8007acc:	9e01      	ldr	r6, [sp, #4]
 8007ace:	9f03      	ldr	r7, [sp, #12]
 8007ad0:	1bae      	subs	r6, r5, r6
 8007ad2:	42b7      	cmp	r7, r6
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	d135      	bne.n	8007b46 <_dtoa_r+0x6e6>
 8007ada:	f7f8 fbff 	bl	80002dc <__adddf3>
 8007ade:	4642      	mov	r2, r8
 8007ae0:	464b      	mov	r3, r9
 8007ae2:	4606      	mov	r6, r0
 8007ae4:	460f      	mov	r7, r1
 8007ae6:	f7f9 f83f 	bl	8000b68 <__aeabi_dcmpgt>
 8007aea:	b9d0      	cbnz	r0, 8007b22 <_dtoa_r+0x6c2>
 8007aec:	4642      	mov	r2, r8
 8007aee:	464b      	mov	r3, r9
 8007af0:	4630      	mov	r0, r6
 8007af2:	4639      	mov	r1, r7
 8007af4:	f7f9 f810 	bl	8000b18 <__aeabi_dcmpeq>
 8007af8:	b110      	cbz	r0, 8007b00 <_dtoa_r+0x6a0>
 8007afa:	f01a 0f01 	tst.w	sl, #1
 8007afe:	d110      	bne.n	8007b22 <_dtoa_r+0x6c2>
 8007b00:	4620      	mov	r0, r4
 8007b02:	ee18 1a10 	vmov	r1, s16
 8007b06:	f000 faf3 	bl	80080f0 <_Bfree>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	9800      	ldr	r0, [sp, #0]
 8007b0e:	702b      	strb	r3, [r5, #0]
 8007b10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b12:	3001      	adds	r0, #1
 8007b14:	6018      	str	r0, [r3, #0]
 8007b16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f43f acf1 	beq.w	8007500 <_dtoa_r+0xa0>
 8007b1e:	601d      	str	r5, [r3, #0]
 8007b20:	e4ee      	b.n	8007500 <_dtoa_r+0xa0>
 8007b22:	9f00      	ldr	r7, [sp, #0]
 8007b24:	462b      	mov	r3, r5
 8007b26:	461d      	mov	r5, r3
 8007b28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b2c:	2a39      	cmp	r2, #57	; 0x39
 8007b2e:	d106      	bne.n	8007b3e <_dtoa_r+0x6de>
 8007b30:	9a01      	ldr	r2, [sp, #4]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d1f7      	bne.n	8007b26 <_dtoa_r+0x6c6>
 8007b36:	9901      	ldr	r1, [sp, #4]
 8007b38:	2230      	movs	r2, #48	; 0x30
 8007b3a:	3701      	adds	r7, #1
 8007b3c:	700a      	strb	r2, [r1, #0]
 8007b3e:	781a      	ldrb	r2, [r3, #0]
 8007b40:	3201      	adds	r2, #1
 8007b42:	701a      	strb	r2, [r3, #0]
 8007b44:	e790      	b.n	8007a68 <_dtoa_r+0x608>
 8007b46:	4ba6      	ldr	r3, [pc, #664]	; (8007de0 <_dtoa_r+0x980>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f7f8 fd7d 	bl	8000648 <__aeabi_dmul>
 8007b4e:	2200      	movs	r2, #0
 8007b50:	2300      	movs	r3, #0
 8007b52:	4606      	mov	r6, r0
 8007b54:	460f      	mov	r7, r1
 8007b56:	f7f8 ffdf 	bl	8000b18 <__aeabi_dcmpeq>
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	d09d      	beq.n	8007a9a <_dtoa_r+0x63a>
 8007b5e:	e7cf      	b.n	8007b00 <_dtoa_r+0x6a0>
 8007b60:	9a08      	ldr	r2, [sp, #32]
 8007b62:	2a00      	cmp	r2, #0
 8007b64:	f000 80d7 	beq.w	8007d16 <_dtoa_r+0x8b6>
 8007b68:	9a06      	ldr	r2, [sp, #24]
 8007b6a:	2a01      	cmp	r2, #1
 8007b6c:	f300 80ba 	bgt.w	8007ce4 <_dtoa_r+0x884>
 8007b70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b72:	2a00      	cmp	r2, #0
 8007b74:	f000 80b2 	beq.w	8007cdc <_dtoa_r+0x87c>
 8007b78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b7c:	9e07      	ldr	r6, [sp, #28]
 8007b7e:	9d04      	ldr	r5, [sp, #16]
 8007b80:	9a04      	ldr	r2, [sp, #16]
 8007b82:	441a      	add	r2, r3
 8007b84:	9204      	str	r2, [sp, #16]
 8007b86:	9a05      	ldr	r2, [sp, #20]
 8007b88:	2101      	movs	r1, #1
 8007b8a:	441a      	add	r2, r3
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	9205      	str	r2, [sp, #20]
 8007b90:	f000 fb66 	bl	8008260 <__i2b>
 8007b94:	4607      	mov	r7, r0
 8007b96:	2d00      	cmp	r5, #0
 8007b98:	dd0c      	ble.n	8007bb4 <_dtoa_r+0x754>
 8007b9a:	9b05      	ldr	r3, [sp, #20]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	dd09      	ble.n	8007bb4 <_dtoa_r+0x754>
 8007ba0:	42ab      	cmp	r3, r5
 8007ba2:	9a04      	ldr	r2, [sp, #16]
 8007ba4:	bfa8      	it	ge
 8007ba6:	462b      	movge	r3, r5
 8007ba8:	1ad2      	subs	r2, r2, r3
 8007baa:	9204      	str	r2, [sp, #16]
 8007bac:	9a05      	ldr	r2, [sp, #20]
 8007bae:	1aed      	subs	r5, r5, r3
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	9305      	str	r3, [sp, #20]
 8007bb4:	9b07      	ldr	r3, [sp, #28]
 8007bb6:	b31b      	cbz	r3, 8007c00 <_dtoa_r+0x7a0>
 8007bb8:	9b08      	ldr	r3, [sp, #32]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 80af 	beq.w	8007d1e <_dtoa_r+0x8be>
 8007bc0:	2e00      	cmp	r6, #0
 8007bc2:	dd13      	ble.n	8007bec <_dtoa_r+0x78c>
 8007bc4:	4639      	mov	r1, r7
 8007bc6:	4632      	mov	r2, r6
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f000 fc09 	bl	80083e0 <__pow5mult>
 8007bce:	ee18 2a10 	vmov	r2, s16
 8007bd2:	4601      	mov	r1, r0
 8007bd4:	4607      	mov	r7, r0
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f000 fb58 	bl	800828c <__multiply>
 8007bdc:	ee18 1a10 	vmov	r1, s16
 8007be0:	4680      	mov	r8, r0
 8007be2:	4620      	mov	r0, r4
 8007be4:	f000 fa84 	bl	80080f0 <_Bfree>
 8007be8:	ee08 8a10 	vmov	s16, r8
 8007bec:	9b07      	ldr	r3, [sp, #28]
 8007bee:	1b9a      	subs	r2, r3, r6
 8007bf0:	d006      	beq.n	8007c00 <_dtoa_r+0x7a0>
 8007bf2:	ee18 1a10 	vmov	r1, s16
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f000 fbf2 	bl	80083e0 <__pow5mult>
 8007bfc:	ee08 0a10 	vmov	s16, r0
 8007c00:	2101      	movs	r1, #1
 8007c02:	4620      	mov	r0, r4
 8007c04:	f000 fb2c 	bl	8008260 <__i2b>
 8007c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	4606      	mov	r6, r0
 8007c0e:	f340 8088 	ble.w	8007d22 <_dtoa_r+0x8c2>
 8007c12:	461a      	mov	r2, r3
 8007c14:	4601      	mov	r1, r0
 8007c16:	4620      	mov	r0, r4
 8007c18:	f000 fbe2 	bl	80083e0 <__pow5mult>
 8007c1c:	9b06      	ldr	r3, [sp, #24]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	4606      	mov	r6, r0
 8007c22:	f340 8081 	ble.w	8007d28 <_dtoa_r+0x8c8>
 8007c26:	f04f 0800 	mov.w	r8, #0
 8007c2a:	6933      	ldr	r3, [r6, #16]
 8007c2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007c30:	6918      	ldr	r0, [r3, #16]
 8007c32:	f000 fac5 	bl	80081c0 <__hi0bits>
 8007c36:	f1c0 0020 	rsb	r0, r0, #32
 8007c3a:	9b05      	ldr	r3, [sp, #20]
 8007c3c:	4418      	add	r0, r3
 8007c3e:	f010 001f 	ands.w	r0, r0, #31
 8007c42:	f000 8092 	beq.w	8007d6a <_dtoa_r+0x90a>
 8007c46:	f1c0 0320 	rsb	r3, r0, #32
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	f340 808a 	ble.w	8007d64 <_dtoa_r+0x904>
 8007c50:	f1c0 001c 	rsb	r0, r0, #28
 8007c54:	9b04      	ldr	r3, [sp, #16]
 8007c56:	4403      	add	r3, r0
 8007c58:	9304      	str	r3, [sp, #16]
 8007c5a:	9b05      	ldr	r3, [sp, #20]
 8007c5c:	4403      	add	r3, r0
 8007c5e:	4405      	add	r5, r0
 8007c60:	9305      	str	r3, [sp, #20]
 8007c62:	9b04      	ldr	r3, [sp, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	dd07      	ble.n	8007c78 <_dtoa_r+0x818>
 8007c68:	ee18 1a10 	vmov	r1, s16
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f000 fc10 	bl	8008494 <__lshift>
 8007c74:	ee08 0a10 	vmov	s16, r0
 8007c78:	9b05      	ldr	r3, [sp, #20]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	dd05      	ble.n	8007c8a <_dtoa_r+0x82a>
 8007c7e:	4631      	mov	r1, r6
 8007c80:	461a      	mov	r2, r3
 8007c82:	4620      	mov	r0, r4
 8007c84:	f000 fc06 	bl	8008494 <__lshift>
 8007c88:	4606      	mov	r6, r0
 8007c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d06e      	beq.n	8007d6e <_dtoa_r+0x90e>
 8007c90:	ee18 0a10 	vmov	r0, s16
 8007c94:	4631      	mov	r1, r6
 8007c96:	f000 fc6d 	bl	8008574 <__mcmp>
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	da67      	bge.n	8007d6e <_dtoa_r+0x90e>
 8007c9e:	9b00      	ldr	r3, [sp, #0]
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	ee18 1a10 	vmov	r1, s16
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	220a      	movs	r2, #10
 8007caa:	2300      	movs	r3, #0
 8007cac:	4620      	mov	r0, r4
 8007cae:	f000 fa41 	bl	8008134 <__multadd>
 8007cb2:	9b08      	ldr	r3, [sp, #32]
 8007cb4:	ee08 0a10 	vmov	s16, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 81b1 	beq.w	8008020 <_dtoa_r+0xbc0>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	4639      	mov	r1, r7
 8007cc2:	220a      	movs	r2, #10
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	f000 fa35 	bl	8008134 <__multadd>
 8007cca:	9b02      	ldr	r3, [sp, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	4607      	mov	r7, r0
 8007cd0:	f300 808e 	bgt.w	8007df0 <_dtoa_r+0x990>
 8007cd4:	9b06      	ldr	r3, [sp, #24]
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	dc51      	bgt.n	8007d7e <_dtoa_r+0x91e>
 8007cda:	e089      	b.n	8007df0 <_dtoa_r+0x990>
 8007cdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ce2:	e74b      	b.n	8007b7c <_dtoa_r+0x71c>
 8007ce4:	9b03      	ldr	r3, [sp, #12]
 8007ce6:	1e5e      	subs	r6, r3, #1
 8007ce8:	9b07      	ldr	r3, [sp, #28]
 8007cea:	42b3      	cmp	r3, r6
 8007cec:	bfbf      	itttt	lt
 8007cee:	9b07      	ldrlt	r3, [sp, #28]
 8007cf0:	9607      	strlt	r6, [sp, #28]
 8007cf2:	1af2      	sublt	r2, r6, r3
 8007cf4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007cf6:	bfb6      	itet	lt
 8007cf8:	189b      	addlt	r3, r3, r2
 8007cfa:	1b9e      	subge	r6, r3, r6
 8007cfc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007cfe:	9b03      	ldr	r3, [sp, #12]
 8007d00:	bfb8      	it	lt
 8007d02:	2600      	movlt	r6, #0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	bfb7      	itett	lt
 8007d08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007d0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007d10:	1a9d      	sublt	r5, r3, r2
 8007d12:	2300      	movlt	r3, #0
 8007d14:	e734      	b.n	8007b80 <_dtoa_r+0x720>
 8007d16:	9e07      	ldr	r6, [sp, #28]
 8007d18:	9d04      	ldr	r5, [sp, #16]
 8007d1a:	9f08      	ldr	r7, [sp, #32]
 8007d1c:	e73b      	b.n	8007b96 <_dtoa_r+0x736>
 8007d1e:	9a07      	ldr	r2, [sp, #28]
 8007d20:	e767      	b.n	8007bf2 <_dtoa_r+0x792>
 8007d22:	9b06      	ldr	r3, [sp, #24]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	dc18      	bgt.n	8007d5a <_dtoa_r+0x8fa>
 8007d28:	f1ba 0f00 	cmp.w	sl, #0
 8007d2c:	d115      	bne.n	8007d5a <_dtoa_r+0x8fa>
 8007d2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d32:	b993      	cbnz	r3, 8007d5a <_dtoa_r+0x8fa>
 8007d34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007d38:	0d1b      	lsrs	r3, r3, #20
 8007d3a:	051b      	lsls	r3, r3, #20
 8007d3c:	b183      	cbz	r3, 8007d60 <_dtoa_r+0x900>
 8007d3e:	9b04      	ldr	r3, [sp, #16]
 8007d40:	3301      	adds	r3, #1
 8007d42:	9304      	str	r3, [sp, #16]
 8007d44:	9b05      	ldr	r3, [sp, #20]
 8007d46:	3301      	adds	r3, #1
 8007d48:	9305      	str	r3, [sp, #20]
 8007d4a:	f04f 0801 	mov.w	r8, #1
 8007d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f47f af6a 	bne.w	8007c2a <_dtoa_r+0x7ca>
 8007d56:	2001      	movs	r0, #1
 8007d58:	e76f      	b.n	8007c3a <_dtoa_r+0x7da>
 8007d5a:	f04f 0800 	mov.w	r8, #0
 8007d5e:	e7f6      	b.n	8007d4e <_dtoa_r+0x8ee>
 8007d60:	4698      	mov	r8, r3
 8007d62:	e7f4      	b.n	8007d4e <_dtoa_r+0x8ee>
 8007d64:	f43f af7d 	beq.w	8007c62 <_dtoa_r+0x802>
 8007d68:	4618      	mov	r0, r3
 8007d6a:	301c      	adds	r0, #28
 8007d6c:	e772      	b.n	8007c54 <_dtoa_r+0x7f4>
 8007d6e:	9b03      	ldr	r3, [sp, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	dc37      	bgt.n	8007de4 <_dtoa_r+0x984>
 8007d74:	9b06      	ldr	r3, [sp, #24]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	dd34      	ble.n	8007de4 <_dtoa_r+0x984>
 8007d7a:	9b03      	ldr	r3, [sp, #12]
 8007d7c:	9302      	str	r3, [sp, #8]
 8007d7e:	9b02      	ldr	r3, [sp, #8]
 8007d80:	b96b      	cbnz	r3, 8007d9e <_dtoa_r+0x93e>
 8007d82:	4631      	mov	r1, r6
 8007d84:	2205      	movs	r2, #5
 8007d86:	4620      	mov	r0, r4
 8007d88:	f000 f9d4 	bl	8008134 <__multadd>
 8007d8c:	4601      	mov	r1, r0
 8007d8e:	4606      	mov	r6, r0
 8007d90:	ee18 0a10 	vmov	r0, s16
 8007d94:	f000 fbee 	bl	8008574 <__mcmp>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	f73f adbb 	bgt.w	8007914 <_dtoa_r+0x4b4>
 8007d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da0:	9d01      	ldr	r5, [sp, #4]
 8007da2:	43db      	mvns	r3, r3
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	f04f 0800 	mov.w	r8, #0
 8007daa:	4631      	mov	r1, r6
 8007dac:	4620      	mov	r0, r4
 8007dae:	f000 f99f 	bl	80080f0 <_Bfree>
 8007db2:	2f00      	cmp	r7, #0
 8007db4:	f43f aea4 	beq.w	8007b00 <_dtoa_r+0x6a0>
 8007db8:	f1b8 0f00 	cmp.w	r8, #0
 8007dbc:	d005      	beq.n	8007dca <_dtoa_r+0x96a>
 8007dbe:	45b8      	cmp	r8, r7
 8007dc0:	d003      	beq.n	8007dca <_dtoa_r+0x96a>
 8007dc2:	4641      	mov	r1, r8
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f000 f993 	bl	80080f0 <_Bfree>
 8007dca:	4639      	mov	r1, r7
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f000 f98f 	bl	80080f0 <_Bfree>
 8007dd2:	e695      	b.n	8007b00 <_dtoa_r+0x6a0>
 8007dd4:	2600      	movs	r6, #0
 8007dd6:	4637      	mov	r7, r6
 8007dd8:	e7e1      	b.n	8007d9e <_dtoa_r+0x93e>
 8007dda:	9700      	str	r7, [sp, #0]
 8007ddc:	4637      	mov	r7, r6
 8007dde:	e599      	b.n	8007914 <_dtoa_r+0x4b4>
 8007de0:	40240000 	.word	0x40240000
 8007de4:	9b08      	ldr	r3, [sp, #32]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f000 80ca 	beq.w	8007f80 <_dtoa_r+0xb20>
 8007dec:	9b03      	ldr	r3, [sp, #12]
 8007dee:	9302      	str	r3, [sp, #8]
 8007df0:	2d00      	cmp	r5, #0
 8007df2:	dd05      	ble.n	8007e00 <_dtoa_r+0x9a0>
 8007df4:	4639      	mov	r1, r7
 8007df6:	462a      	mov	r2, r5
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f000 fb4b 	bl	8008494 <__lshift>
 8007dfe:	4607      	mov	r7, r0
 8007e00:	f1b8 0f00 	cmp.w	r8, #0
 8007e04:	d05b      	beq.n	8007ebe <_dtoa_r+0xa5e>
 8007e06:	6879      	ldr	r1, [r7, #4]
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f000 f931 	bl	8008070 <_Balloc>
 8007e0e:	4605      	mov	r5, r0
 8007e10:	b928      	cbnz	r0, 8007e1e <_dtoa_r+0x9be>
 8007e12:	4b87      	ldr	r3, [pc, #540]	; (8008030 <_dtoa_r+0xbd0>)
 8007e14:	4602      	mov	r2, r0
 8007e16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007e1a:	f7ff bb3b 	b.w	8007494 <_dtoa_r+0x34>
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	3202      	adds	r2, #2
 8007e22:	0092      	lsls	r2, r2, #2
 8007e24:	f107 010c 	add.w	r1, r7, #12
 8007e28:	300c      	adds	r0, #12
 8007e2a:	f000 f913 	bl	8008054 <memcpy>
 8007e2e:	2201      	movs	r2, #1
 8007e30:	4629      	mov	r1, r5
 8007e32:	4620      	mov	r0, r4
 8007e34:	f000 fb2e 	bl	8008494 <__lshift>
 8007e38:	9b01      	ldr	r3, [sp, #4]
 8007e3a:	f103 0901 	add.w	r9, r3, #1
 8007e3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007e42:	4413      	add	r3, r2
 8007e44:	9305      	str	r3, [sp, #20]
 8007e46:	f00a 0301 	and.w	r3, sl, #1
 8007e4a:	46b8      	mov	r8, r7
 8007e4c:	9304      	str	r3, [sp, #16]
 8007e4e:	4607      	mov	r7, r0
 8007e50:	4631      	mov	r1, r6
 8007e52:	ee18 0a10 	vmov	r0, s16
 8007e56:	f7ff fa76 	bl	8007346 <quorem>
 8007e5a:	4641      	mov	r1, r8
 8007e5c:	9002      	str	r0, [sp, #8]
 8007e5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007e62:	ee18 0a10 	vmov	r0, s16
 8007e66:	f000 fb85 	bl	8008574 <__mcmp>
 8007e6a:	463a      	mov	r2, r7
 8007e6c:	9003      	str	r0, [sp, #12]
 8007e6e:	4631      	mov	r1, r6
 8007e70:	4620      	mov	r0, r4
 8007e72:	f000 fb9b 	bl	80085ac <__mdiff>
 8007e76:	68c2      	ldr	r2, [r0, #12]
 8007e78:	f109 3bff 	add.w	fp, r9, #4294967295
 8007e7c:	4605      	mov	r5, r0
 8007e7e:	bb02      	cbnz	r2, 8007ec2 <_dtoa_r+0xa62>
 8007e80:	4601      	mov	r1, r0
 8007e82:	ee18 0a10 	vmov	r0, s16
 8007e86:	f000 fb75 	bl	8008574 <__mcmp>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	4620      	mov	r0, r4
 8007e90:	9207      	str	r2, [sp, #28]
 8007e92:	f000 f92d 	bl	80080f0 <_Bfree>
 8007e96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007e9a:	ea43 0102 	orr.w	r1, r3, r2
 8007e9e:	9b04      	ldr	r3, [sp, #16]
 8007ea0:	430b      	orrs	r3, r1
 8007ea2:	464d      	mov	r5, r9
 8007ea4:	d10f      	bne.n	8007ec6 <_dtoa_r+0xa66>
 8007ea6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007eaa:	d02a      	beq.n	8007f02 <_dtoa_r+0xaa2>
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	dd02      	ble.n	8007eb8 <_dtoa_r+0xa58>
 8007eb2:	9b02      	ldr	r3, [sp, #8]
 8007eb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007eb8:	f88b a000 	strb.w	sl, [fp]
 8007ebc:	e775      	b.n	8007daa <_dtoa_r+0x94a>
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	e7ba      	b.n	8007e38 <_dtoa_r+0x9d8>
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	e7e2      	b.n	8007e8c <_dtoa_r+0xa2c>
 8007ec6:	9b03      	ldr	r3, [sp, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	db04      	blt.n	8007ed6 <_dtoa_r+0xa76>
 8007ecc:	9906      	ldr	r1, [sp, #24]
 8007ece:	430b      	orrs	r3, r1
 8007ed0:	9904      	ldr	r1, [sp, #16]
 8007ed2:	430b      	orrs	r3, r1
 8007ed4:	d122      	bne.n	8007f1c <_dtoa_r+0xabc>
 8007ed6:	2a00      	cmp	r2, #0
 8007ed8:	ddee      	ble.n	8007eb8 <_dtoa_r+0xa58>
 8007eda:	ee18 1a10 	vmov	r1, s16
 8007ede:	2201      	movs	r2, #1
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	f000 fad7 	bl	8008494 <__lshift>
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	ee08 0a10 	vmov	s16, r0
 8007eec:	f000 fb42 	bl	8008574 <__mcmp>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	dc03      	bgt.n	8007efc <_dtoa_r+0xa9c>
 8007ef4:	d1e0      	bne.n	8007eb8 <_dtoa_r+0xa58>
 8007ef6:	f01a 0f01 	tst.w	sl, #1
 8007efa:	d0dd      	beq.n	8007eb8 <_dtoa_r+0xa58>
 8007efc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f00:	d1d7      	bne.n	8007eb2 <_dtoa_r+0xa52>
 8007f02:	2339      	movs	r3, #57	; 0x39
 8007f04:	f88b 3000 	strb.w	r3, [fp]
 8007f08:	462b      	mov	r3, r5
 8007f0a:	461d      	mov	r5, r3
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f12:	2a39      	cmp	r2, #57	; 0x39
 8007f14:	d071      	beq.n	8007ffa <_dtoa_r+0xb9a>
 8007f16:	3201      	adds	r2, #1
 8007f18:	701a      	strb	r2, [r3, #0]
 8007f1a:	e746      	b.n	8007daa <_dtoa_r+0x94a>
 8007f1c:	2a00      	cmp	r2, #0
 8007f1e:	dd07      	ble.n	8007f30 <_dtoa_r+0xad0>
 8007f20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f24:	d0ed      	beq.n	8007f02 <_dtoa_r+0xaa2>
 8007f26:	f10a 0301 	add.w	r3, sl, #1
 8007f2a:	f88b 3000 	strb.w	r3, [fp]
 8007f2e:	e73c      	b.n	8007daa <_dtoa_r+0x94a>
 8007f30:	9b05      	ldr	r3, [sp, #20]
 8007f32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007f36:	4599      	cmp	r9, r3
 8007f38:	d047      	beq.n	8007fca <_dtoa_r+0xb6a>
 8007f3a:	ee18 1a10 	vmov	r1, s16
 8007f3e:	2300      	movs	r3, #0
 8007f40:	220a      	movs	r2, #10
 8007f42:	4620      	mov	r0, r4
 8007f44:	f000 f8f6 	bl	8008134 <__multadd>
 8007f48:	45b8      	cmp	r8, r7
 8007f4a:	ee08 0a10 	vmov	s16, r0
 8007f4e:	f04f 0300 	mov.w	r3, #0
 8007f52:	f04f 020a 	mov.w	r2, #10
 8007f56:	4641      	mov	r1, r8
 8007f58:	4620      	mov	r0, r4
 8007f5a:	d106      	bne.n	8007f6a <_dtoa_r+0xb0a>
 8007f5c:	f000 f8ea 	bl	8008134 <__multadd>
 8007f60:	4680      	mov	r8, r0
 8007f62:	4607      	mov	r7, r0
 8007f64:	f109 0901 	add.w	r9, r9, #1
 8007f68:	e772      	b.n	8007e50 <_dtoa_r+0x9f0>
 8007f6a:	f000 f8e3 	bl	8008134 <__multadd>
 8007f6e:	4639      	mov	r1, r7
 8007f70:	4680      	mov	r8, r0
 8007f72:	2300      	movs	r3, #0
 8007f74:	220a      	movs	r2, #10
 8007f76:	4620      	mov	r0, r4
 8007f78:	f000 f8dc 	bl	8008134 <__multadd>
 8007f7c:	4607      	mov	r7, r0
 8007f7e:	e7f1      	b.n	8007f64 <_dtoa_r+0xb04>
 8007f80:	9b03      	ldr	r3, [sp, #12]
 8007f82:	9302      	str	r3, [sp, #8]
 8007f84:	9d01      	ldr	r5, [sp, #4]
 8007f86:	ee18 0a10 	vmov	r0, s16
 8007f8a:	4631      	mov	r1, r6
 8007f8c:	f7ff f9db 	bl	8007346 <quorem>
 8007f90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007f94:	9b01      	ldr	r3, [sp, #4]
 8007f96:	f805 ab01 	strb.w	sl, [r5], #1
 8007f9a:	1aea      	subs	r2, r5, r3
 8007f9c:	9b02      	ldr	r3, [sp, #8]
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	dd09      	ble.n	8007fb6 <_dtoa_r+0xb56>
 8007fa2:	ee18 1a10 	vmov	r1, s16
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	220a      	movs	r2, #10
 8007faa:	4620      	mov	r0, r4
 8007fac:	f000 f8c2 	bl	8008134 <__multadd>
 8007fb0:	ee08 0a10 	vmov	s16, r0
 8007fb4:	e7e7      	b.n	8007f86 <_dtoa_r+0xb26>
 8007fb6:	9b02      	ldr	r3, [sp, #8]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	bfc8      	it	gt
 8007fbc:	461d      	movgt	r5, r3
 8007fbe:	9b01      	ldr	r3, [sp, #4]
 8007fc0:	bfd8      	it	le
 8007fc2:	2501      	movle	r5, #1
 8007fc4:	441d      	add	r5, r3
 8007fc6:	f04f 0800 	mov.w	r8, #0
 8007fca:	ee18 1a10 	vmov	r1, s16
 8007fce:	2201      	movs	r2, #1
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f000 fa5f 	bl	8008494 <__lshift>
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	ee08 0a10 	vmov	s16, r0
 8007fdc:	f000 faca 	bl	8008574 <__mcmp>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	dc91      	bgt.n	8007f08 <_dtoa_r+0xaa8>
 8007fe4:	d102      	bne.n	8007fec <_dtoa_r+0xb8c>
 8007fe6:	f01a 0f01 	tst.w	sl, #1
 8007fea:	d18d      	bne.n	8007f08 <_dtoa_r+0xaa8>
 8007fec:	462b      	mov	r3, r5
 8007fee:	461d      	mov	r5, r3
 8007ff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ff4:	2a30      	cmp	r2, #48	; 0x30
 8007ff6:	d0fa      	beq.n	8007fee <_dtoa_r+0xb8e>
 8007ff8:	e6d7      	b.n	8007daa <_dtoa_r+0x94a>
 8007ffa:	9a01      	ldr	r2, [sp, #4]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d184      	bne.n	8007f0a <_dtoa_r+0xaaa>
 8008000:	9b00      	ldr	r3, [sp, #0]
 8008002:	3301      	adds	r3, #1
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	2331      	movs	r3, #49	; 0x31
 8008008:	7013      	strb	r3, [r2, #0]
 800800a:	e6ce      	b.n	8007daa <_dtoa_r+0x94a>
 800800c:	4b09      	ldr	r3, [pc, #36]	; (8008034 <_dtoa_r+0xbd4>)
 800800e:	f7ff ba95 	b.w	800753c <_dtoa_r+0xdc>
 8008012:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008014:	2b00      	cmp	r3, #0
 8008016:	f47f aa6e 	bne.w	80074f6 <_dtoa_r+0x96>
 800801a:	4b07      	ldr	r3, [pc, #28]	; (8008038 <_dtoa_r+0xbd8>)
 800801c:	f7ff ba8e 	b.w	800753c <_dtoa_r+0xdc>
 8008020:	9b02      	ldr	r3, [sp, #8]
 8008022:	2b00      	cmp	r3, #0
 8008024:	dcae      	bgt.n	8007f84 <_dtoa_r+0xb24>
 8008026:	9b06      	ldr	r3, [sp, #24]
 8008028:	2b02      	cmp	r3, #2
 800802a:	f73f aea8 	bgt.w	8007d7e <_dtoa_r+0x91e>
 800802e:	e7a9      	b.n	8007f84 <_dtoa_r+0xb24>
 8008030:	08009abb 	.word	0x08009abb
 8008034:	08009a18 	.word	0x08009a18
 8008038:	08009a3c 	.word	0x08009a3c

0800803c <_localeconv_r>:
 800803c:	4800      	ldr	r0, [pc, #0]	; (8008040 <_localeconv_r+0x4>)
 800803e:	4770      	bx	lr
 8008040:	20000328 	.word	0x20000328

08008044 <malloc>:
 8008044:	4b02      	ldr	r3, [pc, #8]	; (8008050 <malloc+0xc>)
 8008046:	4601      	mov	r1, r0
 8008048:	6818      	ldr	r0, [r3, #0]
 800804a:	f000 bc17 	b.w	800887c <_malloc_r>
 800804e:	bf00      	nop
 8008050:	200001d4 	.word	0x200001d4

08008054 <memcpy>:
 8008054:	440a      	add	r2, r1
 8008056:	4291      	cmp	r1, r2
 8008058:	f100 33ff 	add.w	r3, r0, #4294967295
 800805c:	d100      	bne.n	8008060 <memcpy+0xc>
 800805e:	4770      	bx	lr
 8008060:	b510      	push	{r4, lr}
 8008062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800806a:	4291      	cmp	r1, r2
 800806c:	d1f9      	bne.n	8008062 <memcpy+0xe>
 800806e:	bd10      	pop	{r4, pc}

08008070 <_Balloc>:
 8008070:	b570      	push	{r4, r5, r6, lr}
 8008072:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008074:	4604      	mov	r4, r0
 8008076:	460d      	mov	r5, r1
 8008078:	b976      	cbnz	r6, 8008098 <_Balloc+0x28>
 800807a:	2010      	movs	r0, #16
 800807c:	f7ff ffe2 	bl	8008044 <malloc>
 8008080:	4602      	mov	r2, r0
 8008082:	6260      	str	r0, [r4, #36]	; 0x24
 8008084:	b920      	cbnz	r0, 8008090 <_Balloc+0x20>
 8008086:	4b18      	ldr	r3, [pc, #96]	; (80080e8 <_Balloc+0x78>)
 8008088:	4818      	ldr	r0, [pc, #96]	; (80080ec <_Balloc+0x7c>)
 800808a:	2166      	movs	r1, #102	; 0x66
 800808c:	f000 fdd6 	bl	8008c3c <__assert_func>
 8008090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008094:	6006      	str	r6, [r0, #0]
 8008096:	60c6      	str	r6, [r0, #12]
 8008098:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800809a:	68f3      	ldr	r3, [r6, #12]
 800809c:	b183      	cbz	r3, 80080c0 <_Balloc+0x50>
 800809e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080a6:	b9b8      	cbnz	r0, 80080d8 <_Balloc+0x68>
 80080a8:	2101      	movs	r1, #1
 80080aa:	fa01 f605 	lsl.w	r6, r1, r5
 80080ae:	1d72      	adds	r2, r6, #5
 80080b0:	0092      	lsls	r2, r2, #2
 80080b2:	4620      	mov	r0, r4
 80080b4:	f000 fb60 	bl	8008778 <_calloc_r>
 80080b8:	b160      	cbz	r0, 80080d4 <_Balloc+0x64>
 80080ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080be:	e00e      	b.n	80080de <_Balloc+0x6e>
 80080c0:	2221      	movs	r2, #33	; 0x21
 80080c2:	2104      	movs	r1, #4
 80080c4:	4620      	mov	r0, r4
 80080c6:	f000 fb57 	bl	8008778 <_calloc_r>
 80080ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080cc:	60f0      	str	r0, [r6, #12]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e4      	bne.n	800809e <_Balloc+0x2e>
 80080d4:	2000      	movs	r0, #0
 80080d6:	bd70      	pop	{r4, r5, r6, pc}
 80080d8:	6802      	ldr	r2, [r0, #0]
 80080da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080de:	2300      	movs	r3, #0
 80080e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080e4:	e7f7      	b.n	80080d6 <_Balloc+0x66>
 80080e6:	bf00      	nop
 80080e8:	08009a49 	.word	0x08009a49
 80080ec:	08009acc 	.word	0x08009acc

080080f0 <_Bfree>:
 80080f0:	b570      	push	{r4, r5, r6, lr}
 80080f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080f4:	4605      	mov	r5, r0
 80080f6:	460c      	mov	r4, r1
 80080f8:	b976      	cbnz	r6, 8008118 <_Bfree+0x28>
 80080fa:	2010      	movs	r0, #16
 80080fc:	f7ff ffa2 	bl	8008044 <malloc>
 8008100:	4602      	mov	r2, r0
 8008102:	6268      	str	r0, [r5, #36]	; 0x24
 8008104:	b920      	cbnz	r0, 8008110 <_Bfree+0x20>
 8008106:	4b09      	ldr	r3, [pc, #36]	; (800812c <_Bfree+0x3c>)
 8008108:	4809      	ldr	r0, [pc, #36]	; (8008130 <_Bfree+0x40>)
 800810a:	218a      	movs	r1, #138	; 0x8a
 800810c:	f000 fd96 	bl	8008c3c <__assert_func>
 8008110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008114:	6006      	str	r6, [r0, #0]
 8008116:	60c6      	str	r6, [r0, #12]
 8008118:	b13c      	cbz	r4, 800812a <_Bfree+0x3a>
 800811a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800811c:	6862      	ldr	r2, [r4, #4]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008124:	6021      	str	r1, [r4, #0]
 8008126:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800812a:	bd70      	pop	{r4, r5, r6, pc}
 800812c:	08009a49 	.word	0x08009a49
 8008130:	08009acc 	.word	0x08009acc

08008134 <__multadd>:
 8008134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008138:	690d      	ldr	r5, [r1, #16]
 800813a:	4607      	mov	r7, r0
 800813c:	460c      	mov	r4, r1
 800813e:	461e      	mov	r6, r3
 8008140:	f101 0c14 	add.w	ip, r1, #20
 8008144:	2000      	movs	r0, #0
 8008146:	f8dc 3000 	ldr.w	r3, [ip]
 800814a:	b299      	uxth	r1, r3
 800814c:	fb02 6101 	mla	r1, r2, r1, r6
 8008150:	0c1e      	lsrs	r6, r3, #16
 8008152:	0c0b      	lsrs	r3, r1, #16
 8008154:	fb02 3306 	mla	r3, r2, r6, r3
 8008158:	b289      	uxth	r1, r1
 800815a:	3001      	adds	r0, #1
 800815c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008160:	4285      	cmp	r5, r0
 8008162:	f84c 1b04 	str.w	r1, [ip], #4
 8008166:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800816a:	dcec      	bgt.n	8008146 <__multadd+0x12>
 800816c:	b30e      	cbz	r6, 80081b2 <__multadd+0x7e>
 800816e:	68a3      	ldr	r3, [r4, #8]
 8008170:	42ab      	cmp	r3, r5
 8008172:	dc19      	bgt.n	80081a8 <__multadd+0x74>
 8008174:	6861      	ldr	r1, [r4, #4]
 8008176:	4638      	mov	r0, r7
 8008178:	3101      	adds	r1, #1
 800817a:	f7ff ff79 	bl	8008070 <_Balloc>
 800817e:	4680      	mov	r8, r0
 8008180:	b928      	cbnz	r0, 800818e <__multadd+0x5a>
 8008182:	4602      	mov	r2, r0
 8008184:	4b0c      	ldr	r3, [pc, #48]	; (80081b8 <__multadd+0x84>)
 8008186:	480d      	ldr	r0, [pc, #52]	; (80081bc <__multadd+0x88>)
 8008188:	21b5      	movs	r1, #181	; 0xb5
 800818a:	f000 fd57 	bl	8008c3c <__assert_func>
 800818e:	6922      	ldr	r2, [r4, #16]
 8008190:	3202      	adds	r2, #2
 8008192:	f104 010c 	add.w	r1, r4, #12
 8008196:	0092      	lsls	r2, r2, #2
 8008198:	300c      	adds	r0, #12
 800819a:	f7ff ff5b 	bl	8008054 <memcpy>
 800819e:	4621      	mov	r1, r4
 80081a0:	4638      	mov	r0, r7
 80081a2:	f7ff ffa5 	bl	80080f0 <_Bfree>
 80081a6:	4644      	mov	r4, r8
 80081a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081ac:	3501      	adds	r5, #1
 80081ae:	615e      	str	r6, [r3, #20]
 80081b0:	6125      	str	r5, [r4, #16]
 80081b2:	4620      	mov	r0, r4
 80081b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b8:	08009abb 	.word	0x08009abb
 80081bc:	08009acc 	.word	0x08009acc

080081c0 <__hi0bits>:
 80081c0:	0c03      	lsrs	r3, r0, #16
 80081c2:	041b      	lsls	r3, r3, #16
 80081c4:	b9d3      	cbnz	r3, 80081fc <__hi0bits+0x3c>
 80081c6:	0400      	lsls	r0, r0, #16
 80081c8:	2310      	movs	r3, #16
 80081ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80081ce:	bf04      	itt	eq
 80081d0:	0200      	lsleq	r0, r0, #8
 80081d2:	3308      	addeq	r3, #8
 80081d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80081d8:	bf04      	itt	eq
 80081da:	0100      	lsleq	r0, r0, #4
 80081dc:	3304      	addeq	r3, #4
 80081de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80081e2:	bf04      	itt	eq
 80081e4:	0080      	lsleq	r0, r0, #2
 80081e6:	3302      	addeq	r3, #2
 80081e8:	2800      	cmp	r0, #0
 80081ea:	db05      	blt.n	80081f8 <__hi0bits+0x38>
 80081ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80081f0:	f103 0301 	add.w	r3, r3, #1
 80081f4:	bf08      	it	eq
 80081f6:	2320      	moveq	r3, #32
 80081f8:	4618      	mov	r0, r3
 80081fa:	4770      	bx	lr
 80081fc:	2300      	movs	r3, #0
 80081fe:	e7e4      	b.n	80081ca <__hi0bits+0xa>

08008200 <__lo0bits>:
 8008200:	6803      	ldr	r3, [r0, #0]
 8008202:	f013 0207 	ands.w	r2, r3, #7
 8008206:	4601      	mov	r1, r0
 8008208:	d00b      	beq.n	8008222 <__lo0bits+0x22>
 800820a:	07da      	lsls	r2, r3, #31
 800820c:	d423      	bmi.n	8008256 <__lo0bits+0x56>
 800820e:	0798      	lsls	r0, r3, #30
 8008210:	bf49      	itett	mi
 8008212:	085b      	lsrmi	r3, r3, #1
 8008214:	089b      	lsrpl	r3, r3, #2
 8008216:	2001      	movmi	r0, #1
 8008218:	600b      	strmi	r3, [r1, #0]
 800821a:	bf5c      	itt	pl
 800821c:	600b      	strpl	r3, [r1, #0]
 800821e:	2002      	movpl	r0, #2
 8008220:	4770      	bx	lr
 8008222:	b298      	uxth	r0, r3
 8008224:	b9a8      	cbnz	r0, 8008252 <__lo0bits+0x52>
 8008226:	0c1b      	lsrs	r3, r3, #16
 8008228:	2010      	movs	r0, #16
 800822a:	b2da      	uxtb	r2, r3
 800822c:	b90a      	cbnz	r2, 8008232 <__lo0bits+0x32>
 800822e:	3008      	adds	r0, #8
 8008230:	0a1b      	lsrs	r3, r3, #8
 8008232:	071a      	lsls	r2, r3, #28
 8008234:	bf04      	itt	eq
 8008236:	091b      	lsreq	r3, r3, #4
 8008238:	3004      	addeq	r0, #4
 800823a:	079a      	lsls	r2, r3, #30
 800823c:	bf04      	itt	eq
 800823e:	089b      	lsreq	r3, r3, #2
 8008240:	3002      	addeq	r0, #2
 8008242:	07da      	lsls	r2, r3, #31
 8008244:	d403      	bmi.n	800824e <__lo0bits+0x4e>
 8008246:	085b      	lsrs	r3, r3, #1
 8008248:	f100 0001 	add.w	r0, r0, #1
 800824c:	d005      	beq.n	800825a <__lo0bits+0x5a>
 800824e:	600b      	str	r3, [r1, #0]
 8008250:	4770      	bx	lr
 8008252:	4610      	mov	r0, r2
 8008254:	e7e9      	b.n	800822a <__lo0bits+0x2a>
 8008256:	2000      	movs	r0, #0
 8008258:	4770      	bx	lr
 800825a:	2020      	movs	r0, #32
 800825c:	4770      	bx	lr
	...

08008260 <__i2b>:
 8008260:	b510      	push	{r4, lr}
 8008262:	460c      	mov	r4, r1
 8008264:	2101      	movs	r1, #1
 8008266:	f7ff ff03 	bl	8008070 <_Balloc>
 800826a:	4602      	mov	r2, r0
 800826c:	b928      	cbnz	r0, 800827a <__i2b+0x1a>
 800826e:	4b05      	ldr	r3, [pc, #20]	; (8008284 <__i2b+0x24>)
 8008270:	4805      	ldr	r0, [pc, #20]	; (8008288 <__i2b+0x28>)
 8008272:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008276:	f000 fce1 	bl	8008c3c <__assert_func>
 800827a:	2301      	movs	r3, #1
 800827c:	6144      	str	r4, [r0, #20]
 800827e:	6103      	str	r3, [r0, #16]
 8008280:	bd10      	pop	{r4, pc}
 8008282:	bf00      	nop
 8008284:	08009abb 	.word	0x08009abb
 8008288:	08009acc 	.word	0x08009acc

0800828c <__multiply>:
 800828c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008290:	4691      	mov	r9, r2
 8008292:	690a      	ldr	r2, [r1, #16]
 8008294:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008298:	429a      	cmp	r2, r3
 800829a:	bfb8      	it	lt
 800829c:	460b      	movlt	r3, r1
 800829e:	460c      	mov	r4, r1
 80082a0:	bfbc      	itt	lt
 80082a2:	464c      	movlt	r4, r9
 80082a4:	4699      	movlt	r9, r3
 80082a6:	6927      	ldr	r7, [r4, #16]
 80082a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80082ac:	68a3      	ldr	r3, [r4, #8]
 80082ae:	6861      	ldr	r1, [r4, #4]
 80082b0:	eb07 060a 	add.w	r6, r7, sl
 80082b4:	42b3      	cmp	r3, r6
 80082b6:	b085      	sub	sp, #20
 80082b8:	bfb8      	it	lt
 80082ba:	3101      	addlt	r1, #1
 80082bc:	f7ff fed8 	bl	8008070 <_Balloc>
 80082c0:	b930      	cbnz	r0, 80082d0 <__multiply+0x44>
 80082c2:	4602      	mov	r2, r0
 80082c4:	4b44      	ldr	r3, [pc, #272]	; (80083d8 <__multiply+0x14c>)
 80082c6:	4845      	ldr	r0, [pc, #276]	; (80083dc <__multiply+0x150>)
 80082c8:	f240 115d 	movw	r1, #349	; 0x15d
 80082cc:	f000 fcb6 	bl	8008c3c <__assert_func>
 80082d0:	f100 0514 	add.w	r5, r0, #20
 80082d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082d8:	462b      	mov	r3, r5
 80082da:	2200      	movs	r2, #0
 80082dc:	4543      	cmp	r3, r8
 80082de:	d321      	bcc.n	8008324 <__multiply+0x98>
 80082e0:	f104 0314 	add.w	r3, r4, #20
 80082e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80082e8:	f109 0314 	add.w	r3, r9, #20
 80082ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80082f0:	9202      	str	r2, [sp, #8]
 80082f2:	1b3a      	subs	r2, r7, r4
 80082f4:	3a15      	subs	r2, #21
 80082f6:	f022 0203 	bic.w	r2, r2, #3
 80082fa:	3204      	adds	r2, #4
 80082fc:	f104 0115 	add.w	r1, r4, #21
 8008300:	428f      	cmp	r7, r1
 8008302:	bf38      	it	cc
 8008304:	2204      	movcc	r2, #4
 8008306:	9201      	str	r2, [sp, #4]
 8008308:	9a02      	ldr	r2, [sp, #8]
 800830a:	9303      	str	r3, [sp, #12]
 800830c:	429a      	cmp	r2, r3
 800830e:	d80c      	bhi.n	800832a <__multiply+0x9e>
 8008310:	2e00      	cmp	r6, #0
 8008312:	dd03      	ble.n	800831c <__multiply+0x90>
 8008314:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008318:	2b00      	cmp	r3, #0
 800831a:	d05a      	beq.n	80083d2 <__multiply+0x146>
 800831c:	6106      	str	r6, [r0, #16]
 800831e:	b005      	add	sp, #20
 8008320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008324:	f843 2b04 	str.w	r2, [r3], #4
 8008328:	e7d8      	b.n	80082dc <__multiply+0x50>
 800832a:	f8b3 a000 	ldrh.w	sl, [r3]
 800832e:	f1ba 0f00 	cmp.w	sl, #0
 8008332:	d024      	beq.n	800837e <__multiply+0xf2>
 8008334:	f104 0e14 	add.w	lr, r4, #20
 8008338:	46a9      	mov	r9, r5
 800833a:	f04f 0c00 	mov.w	ip, #0
 800833e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008342:	f8d9 1000 	ldr.w	r1, [r9]
 8008346:	fa1f fb82 	uxth.w	fp, r2
 800834a:	b289      	uxth	r1, r1
 800834c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008350:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008354:	f8d9 2000 	ldr.w	r2, [r9]
 8008358:	4461      	add	r1, ip
 800835a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800835e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008362:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008366:	b289      	uxth	r1, r1
 8008368:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800836c:	4577      	cmp	r7, lr
 800836e:	f849 1b04 	str.w	r1, [r9], #4
 8008372:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008376:	d8e2      	bhi.n	800833e <__multiply+0xb2>
 8008378:	9a01      	ldr	r2, [sp, #4]
 800837a:	f845 c002 	str.w	ip, [r5, r2]
 800837e:	9a03      	ldr	r2, [sp, #12]
 8008380:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008384:	3304      	adds	r3, #4
 8008386:	f1b9 0f00 	cmp.w	r9, #0
 800838a:	d020      	beq.n	80083ce <__multiply+0x142>
 800838c:	6829      	ldr	r1, [r5, #0]
 800838e:	f104 0c14 	add.w	ip, r4, #20
 8008392:	46ae      	mov	lr, r5
 8008394:	f04f 0a00 	mov.w	sl, #0
 8008398:	f8bc b000 	ldrh.w	fp, [ip]
 800839c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80083a0:	fb09 220b 	mla	r2, r9, fp, r2
 80083a4:	4492      	add	sl, r2
 80083a6:	b289      	uxth	r1, r1
 80083a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80083ac:	f84e 1b04 	str.w	r1, [lr], #4
 80083b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80083b4:	f8be 1000 	ldrh.w	r1, [lr]
 80083b8:	0c12      	lsrs	r2, r2, #16
 80083ba:	fb09 1102 	mla	r1, r9, r2, r1
 80083be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80083c2:	4567      	cmp	r7, ip
 80083c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80083c8:	d8e6      	bhi.n	8008398 <__multiply+0x10c>
 80083ca:	9a01      	ldr	r2, [sp, #4]
 80083cc:	50a9      	str	r1, [r5, r2]
 80083ce:	3504      	adds	r5, #4
 80083d0:	e79a      	b.n	8008308 <__multiply+0x7c>
 80083d2:	3e01      	subs	r6, #1
 80083d4:	e79c      	b.n	8008310 <__multiply+0x84>
 80083d6:	bf00      	nop
 80083d8:	08009abb 	.word	0x08009abb
 80083dc:	08009acc 	.word	0x08009acc

080083e0 <__pow5mult>:
 80083e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083e4:	4615      	mov	r5, r2
 80083e6:	f012 0203 	ands.w	r2, r2, #3
 80083ea:	4606      	mov	r6, r0
 80083ec:	460f      	mov	r7, r1
 80083ee:	d007      	beq.n	8008400 <__pow5mult+0x20>
 80083f0:	4c25      	ldr	r4, [pc, #148]	; (8008488 <__pow5mult+0xa8>)
 80083f2:	3a01      	subs	r2, #1
 80083f4:	2300      	movs	r3, #0
 80083f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083fa:	f7ff fe9b 	bl	8008134 <__multadd>
 80083fe:	4607      	mov	r7, r0
 8008400:	10ad      	asrs	r5, r5, #2
 8008402:	d03d      	beq.n	8008480 <__pow5mult+0xa0>
 8008404:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008406:	b97c      	cbnz	r4, 8008428 <__pow5mult+0x48>
 8008408:	2010      	movs	r0, #16
 800840a:	f7ff fe1b 	bl	8008044 <malloc>
 800840e:	4602      	mov	r2, r0
 8008410:	6270      	str	r0, [r6, #36]	; 0x24
 8008412:	b928      	cbnz	r0, 8008420 <__pow5mult+0x40>
 8008414:	4b1d      	ldr	r3, [pc, #116]	; (800848c <__pow5mult+0xac>)
 8008416:	481e      	ldr	r0, [pc, #120]	; (8008490 <__pow5mult+0xb0>)
 8008418:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800841c:	f000 fc0e 	bl	8008c3c <__assert_func>
 8008420:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008424:	6004      	str	r4, [r0, #0]
 8008426:	60c4      	str	r4, [r0, #12]
 8008428:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800842c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008430:	b94c      	cbnz	r4, 8008446 <__pow5mult+0x66>
 8008432:	f240 2171 	movw	r1, #625	; 0x271
 8008436:	4630      	mov	r0, r6
 8008438:	f7ff ff12 	bl	8008260 <__i2b>
 800843c:	2300      	movs	r3, #0
 800843e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008442:	4604      	mov	r4, r0
 8008444:	6003      	str	r3, [r0, #0]
 8008446:	f04f 0900 	mov.w	r9, #0
 800844a:	07eb      	lsls	r3, r5, #31
 800844c:	d50a      	bpl.n	8008464 <__pow5mult+0x84>
 800844e:	4639      	mov	r1, r7
 8008450:	4622      	mov	r2, r4
 8008452:	4630      	mov	r0, r6
 8008454:	f7ff ff1a 	bl	800828c <__multiply>
 8008458:	4639      	mov	r1, r7
 800845a:	4680      	mov	r8, r0
 800845c:	4630      	mov	r0, r6
 800845e:	f7ff fe47 	bl	80080f0 <_Bfree>
 8008462:	4647      	mov	r7, r8
 8008464:	106d      	asrs	r5, r5, #1
 8008466:	d00b      	beq.n	8008480 <__pow5mult+0xa0>
 8008468:	6820      	ldr	r0, [r4, #0]
 800846a:	b938      	cbnz	r0, 800847c <__pow5mult+0x9c>
 800846c:	4622      	mov	r2, r4
 800846e:	4621      	mov	r1, r4
 8008470:	4630      	mov	r0, r6
 8008472:	f7ff ff0b 	bl	800828c <__multiply>
 8008476:	6020      	str	r0, [r4, #0]
 8008478:	f8c0 9000 	str.w	r9, [r0]
 800847c:	4604      	mov	r4, r0
 800847e:	e7e4      	b.n	800844a <__pow5mult+0x6a>
 8008480:	4638      	mov	r0, r7
 8008482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008486:	bf00      	nop
 8008488:	08009c18 	.word	0x08009c18
 800848c:	08009a49 	.word	0x08009a49
 8008490:	08009acc 	.word	0x08009acc

08008494 <__lshift>:
 8008494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008498:	460c      	mov	r4, r1
 800849a:	6849      	ldr	r1, [r1, #4]
 800849c:	6923      	ldr	r3, [r4, #16]
 800849e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084a2:	68a3      	ldr	r3, [r4, #8]
 80084a4:	4607      	mov	r7, r0
 80084a6:	4691      	mov	r9, r2
 80084a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084ac:	f108 0601 	add.w	r6, r8, #1
 80084b0:	42b3      	cmp	r3, r6
 80084b2:	db0b      	blt.n	80084cc <__lshift+0x38>
 80084b4:	4638      	mov	r0, r7
 80084b6:	f7ff fddb 	bl	8008070 <_Balloc>
 80084ba:	4605      	mov	r5, r0
 80084bc:	b948      	cbnz	r0, 80084d2 <__lshift+0x3e>
 80084be:	4602      	mov	r2, r0
 80084c0:	4b2a      	ldr	r3, [pc, #168]	; (800856c <__lshift+0xd8>)
 80084c2:	482b      	ldr	r0, [pc, #172]	; (8008570 <__lshift+0xdc>)
 80084c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80084c8:	f000 fbb8 	bl	8008c3c <__assert_func>
 80084cc:	3101      	adds	r1, #1
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	e7ee      	b.n	80084b0 <__lshift+0x1c>
 80084d2:	2300      	movs	r3, #0
 80084d4:	f100 0114 	add.w	r1, r0, #20
 80084d8:	f100 0210 	add.w	r2, r0, #16
 80084dc:	4618      	mov	r0, r3
 80084de:	4553      	cmp	r3, sl
 80084e0:	db37      	blt.n	8008552 <__lshift+0xbe>
 80084e2:	6920      	ldr	r0, [r4, #16]
 80084e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084e8:	f104 0314 	add.w	r3, r4, #20
 80084ec:	f019 091f 	ands.w	r9, r9, #31
 80084f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80084f8:	d02f      	beq.n	800855a <__lshift+0xc6>
 80084fa:	f1c9 0e20 	rsb	lr, r9, #32
 80084fe:	468a      	mov	sl, r1
 8008500:	f04f 0c00 	mov.w	ip, #0
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	fa02 f209 	lsl.w	r2, r2, r9
 800850a:	ea42 020c 	orr.w	r2, r2, ip
 800850e:	f84a 2b04 	str.w	r2, [sl], #4
 8008512:	f853 2b04 	ldr.w	r2, [r3], #4
 8008516:	4298      	cmp	r0, r3
 8008518:	fa22 fc0e 	lsr.w	ip, r2, lr
 800851c:	d8f2      	bhi.n	8008504 <__lshift+0x70>
 800851e:	1b03      	subs	r3, r0, r4
 8008520:	3b15      	subs	r3, #21
 8008522:	f023 0303 	bic.w	r3, r3, #3
 8008526:	3304      	adds	r3, #4
 8008528:	f104 0215 	add.w	r2, r4, #21
 800852c:	4290      	cmp	r0, r2
 800852e:	bf38      	it	cc
 8008530:	2304      	movcc	r3, #4
 8008532:	f841 c003 	str.w	ip, [r1, r3]
 8008536:	f1bc 0f00 	cmp.w	ip, #0
 800853a:	d001      	beq.n	8008540 <__lshift+0xac>
 800853c:	f108 0602 	add.w	r6, r8, #2
 8008540:	3e01      	subs	r6, #1
 8008542:	4638      	mov	r0, r7
 8008544:	612e      	str	r6, [r5, #16]
 8008546:	4621      	mov	r1, r4
 8008548:	f7ff fdd2 	bl	80080f0 <_Bfree>
 800854c:	4628      	mov	r0, r5
 800854e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008552:	f842 0f04 	str.w	r0, [r2, #4]!
 8008556:	3301      	adds	r3, #1
 8008558:	e7c1      	b.n	80084de <__lshift+0x4a>
 800855a:	3904      	subs	r1, #4
 800855c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008560:	f841 2f04 	str.w	r2, [r1, #4]!
 8008564:	4298      	cmp	r0, r3
 8008566:	d8f9      	bhi.n	800855c <__lshift+0xc8>
 8008568:	e7ea      	b.n	8008540 <__lshift+0xac>
 800856a:	bf00      	nop
 800856c:	08009abb 	.word	0x08009abb
 8008570:	08009acc 	.word	0x08009acc

08008574 <__mcmp>:
 8008574:	b530      	push	{r4, r5, lr}
 8008576:	6902      	ldr	r2, [r0, #16]
 8008578:	690c      	ldr	r4, [r1, #16]
 800857a:	1b12      	subs	r2, r2, r4
 800857c:	d10e      	bne.n	800859c <__mcmp+0x28>
 800857e:	f100 0314 	add.w	r3, r0, #20
 8008582:	3114      	adds	r1, #20
 8008584:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008588:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800858c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008590:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008594:	42a5      	cmp	r5, r4
 8008596:	d003      	beq.n	80085a0 <__mcmp+0x2c>
 8008598:	d305      	bcc.n	80085a6 <__mcmp+0x32>
 800859a:	2201      	movs	r2, #1
 800859c:	4610      	mov	r0, r2
 800859e:	bd30      	pop	{r4, r5, pc}
 80085a0:	4283      	cmp	r3, r0
 80085a2:	d3f3      	bcc.n	800858c <__mcmp+0x18>
 80085a4:	e7fa      	b.n	800859c <__mcmp+0x28>
 80085a6:	f04f 32ff 	mov.w	r2, #4294967295
 80085aa:	e7f7      	b.n	800859c <__mcmp+0x28>

080085ac <__mdiff>:
 80085ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b0:	460c      	mov	r4, r1
 80085b2:	4606      	mov	r6, r0
 80085b4:	4611      	mov	r1, r2
 80085b6:	4620      	mov	r0, r4
 80085b8:	4690      	mov	r8, r2
 80085ba:	f7ff ffdb 	bl	8008574 <__mcmp>
 80085be:	1e05      	subs	r5, r0, #0
 80085c0:	d110      	bne.n	80085e4 <__mdiff+0x38>
 80085c2:	4629      	mov	r1, r5
 80085c4:	4630      	mov	r0, r6
 80085c6:	f7ff fd53 	bl	8008070 <_Balloc>
 80085ca:	b930      	cbnz	r0, 80085da <__mdiff+0x2e>
 80085cc:	4b3a      	ldr	r3, [pc, #232]	; (80086b8 <__mdiff+0x10c>)
 80085ce:	4602      	mov	r2, r0
 80085d0:	f240 2132 	movw	r1, #562	; 0x232
 80085d4:	4839      	ldr	r0, [pc, #228]	; (80086bc <__mdiff+0x110>)
 80085d6:	f000 fb31 	bl	8008c3c <__assert_func>
 80085da:	2301      	movs	r3, #1
 80085dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e4:	bfa4      	itt	ge
 80085e6:	4643      	movge	r3, r8
 80085e8:	46a0      	movge	r8, r4
 80085ea:	4630      	mov	r0, r6
 80085ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80085f0:	bfa6      	itte	ge
 80085f2:	461c      	movge	r4, r3
 80085f4:	2500      	movge	r5, #0
 80085f6:	2501      	movlt	r5, #1
 80085f8:	f7ff fd3a 	bl	8008070 <_Balloc>
 80085fc:	b920      	cbnz	r0, 8008608 <__mdiff+0x5c>
 80085fe:	4b2e      	ldr	r3, [pc, #184]	; (80086b8 <__mdiff+0x10c>)
 8008600:	4602      	mov	r2, r0
 8008602:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008606:	e7e5      	b.n	80085d4 <__mdiff+0x28>
 8008608:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800860c:	6926      	ldr	r6, [r4, #16]
 800860e:	60c5      	str	r5, [r0, #12]
 8008610:	f104 0914 	add.w	r9, r4, #20
 8008614:	f108 0514 	add.w	r5, r8, #20
 8008618:	f100 0e14 	add.w	lr, r0, #20
 800861c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008620:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008624:	f108 0210 	add.w	r2, r8, #16
 8008628:	46f2      	mov	sl, lr
 800862a:	2100      	movs	r1, #0
 800862c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008630:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008634:	fa1f f883 	uxth.w	r8, r3
 8008638:	fa11 f18b 	uxtah	r1, r1, fp
 800863c:	0c1b      	lsrs	r3, r3, #16
 800863e:	eba1 0808 	sub.w	r8, r1, r8
 8008642:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008646:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800864a:	fa1f f888 	uxth.w	r8, r8
 800864e:	1419      	asrs	r1, r3, #16
 8008650:	454e      	cmp	r6, r9
 8008652:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008656:	f84a 3b04 	str.w	r3, [sl], #4
 800865a:	d8e7      	bhi.n	800862c <__mdiff+0x80>
 800865c:	1b33      	subs	r3, r6, r4
 800865e:	3b15      	subs	r3, #21
 8008660:	f023 0303 	bic.w	r3, r3, #3
 8008664:	3304      	adds	r3, #4
 8008666:	3415      	adds	r4, #21
 8008668:	42a6      	cmp	r6, r4
 800866a:	bf38      	it	cc
 800866c:	2304      	movcc	r3, #4
 800866e:	441d      	add	r5, r3
 8008670:	4473      	add	r3, lr
 8008672:	469e      	mov	lr, r3
 8008674:	462e      	mov	r6, r5
 8008676:	4566      	cmp	r6, ip
 8008678:	d30e      	bcc.n	8008698 <__mdiff+0xec>
 800867a:	f10c 0203 	add.w	r2, ip, #3
 800867e:	1b52      	subs	r2, r2, r5
 8008680:	f022 0203 	bic.w	r2, r2, #3
 8008684:	3d03      	subs	r5, #3
 8008686:	45ac      	cmp	ip, r5
 8008688:	bf38      	it	cc
 800868a:	2200      	movcc	r2, #0
 800868c:	441a      	add	r2, r3
 800868e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008692:	b17b      	cbz	r3, 80086b4 <__mdiff+0x108>
 8008694:	6107      	str	r7, [r0, #16]
 8008696:	e7a3      	b.n	80085e0 <__mdiff+0x34>
 8008698:	f856 8b04 	ldr.w	r8, [r6], #4
 800869c:	fa11 f288 	uxtah	r2, r1, r8
 80086a0:	1414      	asrs	r4, r2, #16
 80086a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80086a6:	b292      	uxth	r2, r2
 80086a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80086ac:	f84e 2b04 	str.w	r2, [lr], #4
 80086b0:	1421      	asrs	r1, r4, #16
 80086b2:	e7e0      	b.n	8008676 <__mdiff+0xca>
 80086b4:	3f01      	subs	r7, #1
 80086b6:	e7ea      	b.n	800868e <__mdiff+0xe2>
 80086b8:	08009abb 	.word	0x08009abb
 80086bc:	08009acc 	.word	0x08009acc

080086c0 <__d2b>:
 80086c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086c4:	4689      	mov	r9, r1
 80086c6:	2101      	movs	r1, #1
 80086c8:	ec57 6b10 	vmov	r6, r7, d0
 80086cc:	4690      	mov	r8, r2
 80086ce:	f7ff fccf 	bl	8008070 <_Balloc>
 80086d2:	4604      	mov	r4, r0
 80086d4:	b930      	cbnz	r0, 80086e4 <__d2b+0x24>
 80086d6:	4602      	mov	r2, r0
 80086d8:	4b25      	ldr	r3, [pc, #148]	; (8008770 <__d2b+0xb0>)
 80086da:	4826      	ldr	r0, [pc, #152]	; (8008774 <__d2b+0xb4>)
 80086dc:	f240 310a 	movw	r1, #778	; 0x30a
 80086e0:	f000 faac 	bl	8008c3c <__assert_func>
 80086e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80086e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086ec:	bb35      	cbnz	r5, 800873c <__d2b+0x7c>
 80086ee:	2e00      	cmp	r6, #0
 80086f0:	9301      	str	r3, [sp, #4]
 80086f2:	d028      	beq.n	8008746 <__d2b+0x86>
 80086f4:	4668      	mov	r0, sp
 80086f6:	9600      	str	r6, [sp, #0]
 80086f8:	f7ff fd82 	bl	8008200 <__lo0bits>
 80086fc:	9900      	ldr	r1, [sp, #0]
 80086fe:	b300      	cbz	r0, 8008742 <__d2b+0x82>
 8008700:	9a01      	ldr	r2, [sp, #4]
 8008702:	f1c0 0320 	rsb	r3, r0, #32
 8008706:	fa02 f303 	lsl.w	r3, r2, r3
 800870a:	430b      	orrs	r3, r1
 800870c:	40c2      	lsrs	r2, r0
 800870e:	6163      	str	r3, [r4, #20]
 8008710:	9201      	str	r2, [sp, #4]
 8008712:	9b01      	ldr	r3, [sp, #4]
 8008714:	61a3      	str	r3, [r4, #24]
 8008716:	2b00      	cmp	r3, #0
 8008718:	bf14      	ite	ne
 800871a:	2202      	movne	r2, #2
 800871c:	2201      	moveq	r2, #1
 800871e:	6122      	str	r2, [r4, #16]
 8008720:	b1d5      	cbz	r5, 8008758 <__d2b+0x98>
 8008722:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008726:	4405      	add	r5, r0
 8008728:	f8c9 5000 	str.w	r5, [r9]
 800872c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008730:	f8c8 0000 	str.w	r0, [r8]
 8008734:	4620      	mov	r0, r4
 8008736:	b003      	add	sp, #12
 8008738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800873c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008740:	e7d5      	b.n	80086ee <__d2b+0x2e>
 8008742:	6161      	str	r1, [r4, #20]
 8008744:	e7e5      	b.n	8008712 <__d2b+0x52>
 8008746:	a801      	add	r0, sp, #4
 8008748:	f7ff fd5a 	bl	8008200 <__lo0bits>
 800874c:	9b01      	ldr	r3, [sp, #4]
 800874e:	6163      	str	r3, [r4, #20]
 8008750:	2201      	movs	r2, #1
 8008752:	6122      	str	r2, [r4, #16]
 8008754:	3020      	adds	r0, #32
 8008756:	e7e3      	b.n	8008720 <__d2b+0x60>
 8008758:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800875c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008760:	f8c9 0000 	str.w	r0, [r9]
 8008764:	6918      	ldr	r0, [r3, #16]
 8008766:	f7ff fd2b 	bl	80081c0 <__hi0bits>
 800876a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800876e:	e7df      	b.n	8008730 <__d2b+0x70>
 8008770:	08009abb 	.word	0x08009abb
 8008774:	08009acc 	.word	0x08009acc

08008778 <_calloc_r>:
 8008778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800877a:	fba1 2402 	umull	r2, r4, r1, r2
 800877e:	b94c      	cbnz	r4, 8008794 <_calloc_r+0x1c>
 8008780:	4611      	mov	r1, r2
 8008782:	9201      	str	r2, [sp, #4]
 8008784:	f000 f87a 	bl	800887c <_malloc_r>
 8008788:	9a01      	ldr	r2, [sp, #4]
 800878a:	4605      	mov	r5, r0
 800878c:	b930      	cbnz	r0, 800879c <_calloc_r+0x24>
 800878e:	4628      	mov	r0, r5
 8008790:	b003      	add	sp, #12
 8008792:	bd30      	pop	{r4, r5, pc}
 8008794:	220c      	movs	r2, #12
 8008796:	6002      	str	r2, [r0, #0]
 8008798:	2500      	movs	r5, #0
 800879a:	e7f8      	b.n	800878e <_calloc_r+0x16>
 800879c:	4621      	mov	r1, r4
 800879e:	f7fe f92d 	bl	80069fc <memset>
 80087a2:	e7f4      	b.n	800878e <_calloc_r+0x16>

080087a4 <_free_r>:
 80087a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087a6:	2900      	cmp	r1, #0
 80087a8:	d044      	beq.n	8008834 <_free_r+0x90>
 80087aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087ae:	9001      	str	r0, [sp, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f1a1 0404 	sub.w	r4, r1, #4
 80087b6:	bfb8      	it	lt
 80087b8:	18e4      	addlt	r4, r4, r3
 80087ba:	f000 fa9b 	bl	8008cf4 <__malloc_lock>
 80087be:	4a1e      	ldr	r2, [pc, #120]	; (8008838 <_free_r+0x94>)
 80087c0:	9801      	ldr	r0, [sp, #4]
 80087c2:	6813      	ldr	r3, [r2, #0]
 80087c4:	b933      	cbnz	r3, 80087d4 <_free_r+0x30>
 80087c6:	6063      	str	r3, [r4, #4]
 80087c8:	6014      	str	r4, [r2, #0]
 80087ca:	b003      	add	sp, #12
 80087cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087d0:	f000 ba96 	b.w	8008d00 <__malloc_unlock>
 80087d4:	42a3      	cmp	r3, r4
 80087d6:	d908      	bls.n	80087ea <_free_r+0x46>
 80087d8:	6825      	ldr	r5, [r4, #0]
 80087da:	1961      	adds	r1, r4, r5
 80087dc:	428b      	cmp	r3, r1
 80087de:	bf01      	itttt	eq
 80087e0:	6819      	ldreq	r1, [r3, #0]
 80087e2:	685b      	ldreq	r3, [r3, #4]
 80087e4:	1949      	addeq	r1, r1, r5
 80087e6:	6021      	streq	r1, [r4, #0]
 80087e8:	e7ed      	b.n	80087c6 <_free_r+0x22>
 80087ea:	461a      	mov	r2, r3
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	b10b      	cbz	r3, 80087f4 <_free_r+0x50>
 80087f0:	42a3      	cmp	r3, r4
 80087f2:	d9fa      	bls.n	80087ea <_free_r+0x46>
 80087f4:	6811      	ldr	r1, [r2, #0]
 80087f6:	1855      	adds	r5, r2, r1
 80087f8:	42a5      	cmp	r5, r4
 80087fa:	d10b      	bne.n	8008814 <_free_r+0x70>
 80087fc:	6824      	ldr	r4, [r4, #0]
 80087fe:	4421      	add	r1, r4
 8008800:	1854      	adds	r4, r2, r1
 8008802:	42a3      	cmp	r3, r4
 8008804:	6011      	str	r1, [r2, #0]
 8008806:	d1e0      	bne.n	80087ca <_free_r+0x26>
 8008808:	681c      	ldr	r4, [r3, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	6053      	str	r3, [r2, #4]
 800880e:	4421      	add	r1, r4
 8008810:	6011      	str	r1, [r2, #0]
 8008812:	e7da      	b.n	80087ca <_free_r+0x26>
 8008814:	d902      	bls.n	800881c <_free_r+0x78>
 8008816:	230c      	movs	r3, #12
 8008818:	6003      	str	r3, [r0, #0]
 800881a:	e7d6      	b.n	80087ca <_free_r+0x26>
 800881c:	6825      	ldr	r5, [r4, #0]
 800881e:	1961      	adds	r1, r4, r5
 8008820:	428b      	cmp	r3, r1
 8008822:	bf04      	itt	eq
 8008824:	6819      	ldreq	r1, [r3, #0]
 8008826:	685b      	ldreq	r3, [r3, #4]
 8008828:	6063      	str	r3, [r4, #4]
 800882a:	bf04      	itt	eq
 800882c:	1949      	addeq	r1, r1, r5
 800882e:	6021      	streq	r1, [r4, #0]
 8008830:	6054      	str	r4, [r2, #4]
 8008832:	e7ca      	b.n	80087ca <_free_r+0x26>
 8008834:	b003      	add	sp, #12
 8008836:	bd30      	pop	{r4, r5, pc}
 8008838:	20000630 	.word	0x20000630

0800883c <sbrk_aligned>:
 800883c:	b570      	push	{r4, r5, r6, lr}
 800883e:	4e0e      	ldr	r6, [pc, #56]	; (8008878 <sbrk_aligned+0x3c>)
 8008840:	460c      	mov	r4, r1
 8008842:	6831      	ldr	r1, [r6, #0]
 8008844:	4605      	mov	r5, r0
 8008846:	b911      	cbnz	r1, 800884e <sbrk_aligned+0x12>
 8008848:	f000 f9e8 	bl	8008c1c <_sbrk_r>
 800884c:	6030      	str	r0, [r6, #0]
 800884e:	4621      	mov	r1, r4
 8008850:	4628      	mov	r0, r5
 8008852:	f000 f9e3 	bl	8008c1c <_sbrk_r>
 8008856:	1c43      	adds	r3, r0, #1
 8008858:	d00a      	beq.n	8008870 <sbrk_aligned+0x34>
 800885a:	1cc4      	adds	r4, r0, #3
 800885c:	f024 0403 	bic.w	r4, r4, #3
 8008860:	42a0      	cmp	r0, r4
 8008862:	d007      	beq.n	8008874 <sbrk_aligned+0x38>
 8008864:	1a21      	subs	r1, r4, r0
 8008866:	4628      	mov	r0, r5
 8008868:	f000 f9d8 	bl	8008c1c <_sbrk_r>
 800886c:	3001      	adds	r0, #1
 800886e:	d101      	bne.n	8008874 <sbrk_aligned+0x38>
 8008870:	f04f 34ff 	mov.w	r4, #4294967295
 8008874:	4620      	mov	r0, r4
 8008876:	bd70      	pop	{r4, r5, r6, pc}
 8008878:	20000634 	.word	0x20000634

0800887c <_malloc_r>:
 800887c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008880:	1ccd      	adds	r5, r1, #3
 8008882:	f025 0503 	bic.w	r5, r5, #3
 8008886:	3508      	adds	r5, #8
 8008888:	2d0c      	cmp	r5, #12
 800888a:	bf38      	it	cc
 800888c:	250c      	movcc	r5, #12
 800888e:	2d00      	cmp	r5, #0
 8008890:	4607      	mov	r7, r0
 8008892:	db01      	blt.n	8008898 <_malloc_r+0x1c>
 8008894:	42a9      	cmp	r1, r5
 8008896:	d905      	bls.n	80088a4 <_malloc_r+0x28>
 8008898:	230c      	movs	r3, #12
 800889a:	603b      	str	r3, [r7, #0]
 800889c:	2600      	movs	r6, #0
 800889e:	4630      	mov	r0, r6
 80088a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088a4:	4e2e      	ldr	r6, [pc, #184]	; (8008960 <_malloc_r+0xe4>)
 80088a6:	f000 fa25 	bl	8008cf4 <__malloc_lock>
 80088aa:	6833      	ldr	r3, [r6, #0]
 80088ac:	461c      	mov	r4, r3
 80088ae:	bb34      	cbnz	r4, 80088fe <_malloc_r+0x82>
 80088b0:	4629      	mov	r1, r5
 80088b2:	4638      	mov	r0, r7
 80088b4:	f7ff ffc2 	bl	800883c <sbrk_aligned>
 80088b8:	1c43      	adds	r3, r0, #1
 80088ba:	4604      	mov	r4, r0
 80088bc:	d14d      	bne.n	800895a <_malloc_r+0xde>
 80088be:	6834      	ldr	r4, [r6, #0]
 80088c0:	4626      	mov	r6, r4
 80088c2:	2e00      	cmp	r6, #0
 80088c4:	d140      	bne.n	8008948 <_malloc_r+0xcc>
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	4631      	mov	r1, r6
 80088ca:	4638      	mov	r0, r7
 80088cc:	eb04 0803 	add.w	r8, r4, r3
 80088d0:	f000 f9a4 	bl	8008c1c <_sbrk_r>
 80088d4:	4580      	cmp	r8, r0
 80088d6:	d13a      	bne.n	800894e <_malloc_r+0xd2>
 80088d8:	6821      	ldr	r1, [r4, #0]
 80088da:	3503      	adds	r5, #3
 80088dc:	1a6d      	subs	r5, r5, r1
 80088de:	f025 0503 	bic.w	r5, r5, #3
 80088e2:	3508      	adds	r5, #8
 80088e4:	2d0c      	cmp	r5, #12
 80088e6:	bf38      	it	cc
 80088e8:	250c      	movcc	r5, #12
 80088ea:	4629      	mov	r1, r5
 80088ec:	4638      	mov	r0, r7
 80088ee:	f7ff ffa5 	bl	800883c <sbrk_aligned>
 80088f2:	3001      	adds	r0, #1
 80088f4:	d02b      	beq.n	800894e <_malloc_r+0xd2>
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	442b      	add	r3, r5
 80088fa:	6023      	str	r3, [r4, #0]
 80088fc:	e00e      	b.n	800891c <_malloc_r+0xa0>
 80088fe:	6822      	ldr	r2, [r4, #0]
 8008900:	1b52      	subs	r2, r2, r5
 8008902:	d41e      	bmi.n	8008942 <_malloc_r+0xc6>
 8008904:	2a0b      	cmp	r2, #11
 8008906:	d916      	bls.n	8008936 <_malloc_r+0xba>
 8008908:	1961      	adds	r1, r4, r5
 800890a:	42a3      	cmp	r3, r4
 800890c:	6025      	str	r5, [r4, #0]
 800890e:	bf18      	it	ne
 8008910:	6059      	strne	r1, [r3, #4]
 8008912:	6863      	ldr	r3, [r4, #4]
 8008914:	bf08      	it	eq
 8008916:	6031      	streq	r1, [r6, #0]
 8008918:	5162      	str	r2, [r4, r5]
 800891a:	604b      	str	r3, [r1, #4]
 800891c:	4638      	mov	r0, r7
 800891e:	f104 060b 	add.w	r6, r4, #11
 8008922:	f000 f9ed 	bl	8008d00 <__malloc_unlock>
 8008926:	f026 0607 	bic.w	r6, r6, #7
 800892a:	1d23      	adds	r3, r4, #4
 800892c:	1af2      	subs	r2, r6, r3
 800892e:	d0b6      	beq.n	800889e <_malloc_r+0x22>
 8008930:	1b9b      	subs	r3, r3, r6
 8008932:	50a3      	str	r3, [r4, r2]
 8008934:	e7b3      	b.n	800889e <_malloc_r+0x22>
 8008936:	6862      	ldr	r2, [r4, #4]
 8008938:	42a3      	cmp	r3, r4
 800893a:	bf0c      	ite	eq
 800893c:	6032      	streq	r2, [r6, #0]
 800893e:	605a      	strne	r2, [r3, #4]
 8008940:	e7ec      	b.n	800891c <_malloc_r+0xa0>
 8008942:	4623      	mov	r3, r4
 8008944:	6864      	ldr	r4, [r4, #4]
 8008946:	e7b2      	b.n	80088ae <_malloc_r+0x32>
 8008948:	4634      	mov	r4, r6
 800894a:	6876      	ldr	r6, [r6, #4]
 800894c:	e7b9      	b.n	80088c2 <_malloc_r+0x46>
 800894e:	230c      	movs	r3, #12
 8008950:	603b      	str	r3, [r7, #0]
 8008952:	4638      	mov	r0, r7
 8008954:	f000 f9d4 	bl	8008d00 <__malloc_unlock>
 8008958:	e7a1      	b.n	800889e <_malloc_r+0x22>
 800895a:	6025      	str	r5, [r4, #0]
 800895c:	e7de      	b.n	800891c <_malloc_r+0xa0>
 800895e:	bf00      	nop
 8008960:	20000630 	.word	0x20000630

08008964 <__ssputs_r>:
 8008964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008968:	688e      	ldr	r6, [r1, #8]
 800896a:	429e      	cmp	r6, r3
 800896c:	4682      	mov	sl, r0
 800896e:	460c      	mov	r4, r1
 8008970:	4690      	mov	r8, r2
 8008972:	461f      	mov	r7, r3
 8008974:	d838      	bhi.n	80089e8 <__ssputs_r+0x84>
 8008976:	898a      	ldrh	r2, [r1, #12]
 8008978:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800897c:	d032      	beq.n	80089e4 <__ssputs_r+0x80>
 800897e:	6825      	ldr	r5, [r4, #0]
 8008980:	6909      	ldr	r1, [r1, #16]
 8008982:	eba5 0901 	sub.w	r9, r5, r1
 8008986:	6965      	ldr	r5, [r4, #20]
 8008988:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800898c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008990:	3301      	adds	r3, #1
 8008992:	444b      	add	r3, r9
 8008994:	106d      	asrs	r5, r5, #1
 8008996:	429d      	cmp	r5, r3
 8008998:	bf38      	it	cc
 800899a:	461d      	movcc	r5, r3
 800899c:	0553      	lsls	r3, r2, #21
 800899e:	d531      	bpl.n	8008a04 <__ssputs_r+0xa0>
 80089a0:	4629      	mov	r1, r5
 80089a2:	f7ff ff6b 	bl	800887c <_malloc_r>
 80089a6:	4606      	mov	r6, r0
 80089a8:	b950      	cbnz	r0, 80089c0 <__ssputs_r+0x5c>
 80089aa:	230c      	movs	r3, #12
 80089ac:	f8ca 3000 	str.w	r3, [sl]
 80089b0:	89a3      	ldrh	r3, [r4, #12]
 80089b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089b6:	81a3      	strh	r3, [r4, #12]
 80089b8:	f04f 30ff 	mov.w	r0, #4294967295
 80089bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089c0:	6921      	ldr	r1, [r4, #16]
 80089c2:	464a      	mov	r2, r9
 80089c4:	f7ff fb46 	bl	8008054 <memcpy>
 80089c8:	89a3      	ldrh	r3, [r4, #12]
 80089ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089d2:	81a3      	strh	r3, [r4, #12]
 80089d4:	6126      	str	r6, [r4, #16]
 80089d6:	6165      	str	r5, [r4, #20]
 80089d8:	444e      	add	r6, r9
 80089da:	eba5 0509 	sub.w	r5, r5, r9
 80089de:	6026      	str	r6, [r4, #0]
 80089e0:	60a5      	str	r5, [r4, #8]
 80089e2:	463e      	mov	r6, r7
 80089e4:	42be      	cmp	r6, r7
 80089e6:	d900      	bls.n	80089ea <__ssputs_r+0x86>
 80089e8:	463e      	mov	r6, r7
 80089ea:	6820      	ldr	r0, [r4, #0]
 80089ec:	4632      	mov	r2, r6
 80089ee:	4641      	mov	r1, r8
 80089f0:	f000 f966 	bl	8008cc0 <memmove>
 80089f4:	68a3      	ldr	r3, [r4, #8]
 80089f6:	1b9b      	subs	r3, r3, r6
 80089f8:	60a3      	str	r3, [r4, #8]
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	4433      	add	r3, r6
 80089fe:	6023      	str	r3, [r4, #0]
 8008a00:	2000      	movs	r0, #0
 8008a02:	e7db      	b.n	80089bc <__ssputs_r+0x58>
 8008a04:	462a      	mov	r2, r5
 8008a06:	f000 f981 	bl	8008d0c <_realloc_r>
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	d1e1      	bne.n	80089d4 <__ssputs_r+0x70>
 8008a10:	6921      	ldr	r1, [r4, #16]
 8008a12:	4650      	mov	r0, sl
 8008a14:	f7ff fec6 	bl	80087a4 <_free_r>
 8008a18:	e7c7      	b.n	80089aa <__ssputs_r+0x46>
	...

08008a1c <_svfiprintf_r>:
 8008a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a20:	4698      	mov	r8, r3
 8008a22:	898b      	ldrh	r3, [r1, #12]
 8008a24:	061b      	lsls	r3, r3, #24
 8008a26:	b09d      	sub	sp, #116	; 0x74
 8008a28:	4607      	mov	r7, r0
 8008a2a:	460d      	mov	r5, r1
 8008a2c:	4614      	mov	r4, r2
 8008a2e:	d50e      	bpl.n	8008a4e <_svfiprintf_r+0x32>
 8008a30:	690b      	ldr	r3, [r1, #16]
 8008a32:	b963      	cbnz	r3, 8008a4e <_svfiprintf_r+0x32>
 8008a34:	2140      	movs	r1, #64	; 0x40
 8008a36:	f7ff ff21 	bl	800887c <_malloc_r>
 8008a3a:	6028      	str	r0, [r5, #0]
 8008a3c:	6128      	str	r0, [r5, #16]
 8008a3e:	b920      	cbnz	r0, 8008a4a <_svfiprintf_r+0x2e>
 8008a40:	230c      	movs	r3, #12
 8008a42:	603b      	str	r3, [r7, #0]
 8008a44:	f04f 30ff 	mov.w	r0, #4294967295
 8008a48:	e0d1      	b.n	8008bee <_svfiprintf_r+0x1d2>
 8008a4a:	2340      	movs	r3, #64	; 0x40
 8008a4c:	616b      	str	r3, [r5, #20]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	9309      	str	r3, [sp, #36]	; 0x24
 8008a52:	2320      	movs	r3, #32
 8008a54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a58:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a5c:	2330      	movs	r3, #48	; 0x30
 8008a5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008c08 <_svfiprintf_r+0x1ec>
 8008a62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a66:	f04f 0901 	mov.w	r9, #1
 8008a6a:	4623      	mov	r3, r4
 8008a6c:	469a      	mov	sl, r3
 8008a6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a72:	b10a      	cbz	r2, 8008a78 <_svfiprintf_r+0x5c>
 8008a74:	2a25      	cmp	r2, #37	; 0x25
 8008a76:	d1f9      	bne.n	8008a6c <_svfiprintf_r+0x50>
 8008a78:	ebba 0b04 	subs.w	fp, sl, r4
 8008a7c:	d00b      	beq.n	8008a96 <_svfiprintf_r+0x7a>
 8008a7e:	465b      	mov	r3, fp
 8008a80:	4622      	mov	r2, r4
 8008a82:	4629      	mov	r1, r5
 8008a84:	4638      	mov	r0, r7
 8008a86:	f7ff ff6d 	bl	8008964 <__ssputs_r>
 8008a8a:	3001      	adds	r0, #1
 8008a8c:	f000 80aa 	beq.w	8008be4 <_svfiprintf_r+0x1c8>
 8008a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a92:	445a      	add	r2, fp
 8008a94:	9209      	str	r2, [sp, #36]	; 0x24
 8008a96:	f89a 3000 	ldrb.w	r3, [sl]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f000 80a2 	beq.w	8008be4 <_svfiprintf_r+0x1c8>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aaa:	f10a 0a01 	add.w	sl, sl, #1
 8008aae:	9304      	str	r3, [sp, #16]
 8008ab0:	9307      	str	r3, [sp, #28]
 8008ab2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ab6:	931a      	str	r3, [sp, #104]	; 0x68
 8008ab8:	4654      	mov	r4, sl
 8008aba:	2205      	movs	r2, #5
 8008abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ac0:	4851      	ldr	r0, [pc, #324]	; (8008c08 <_svfiprintf_r+0x1ec>)
 8008ac2:	f7f7 fbb5 	bl	8000230 <memchr>
 8008ac6:	9a04      	ldr	r2, [sp, #16]
 8008ac8:	b9d8      	cbnz	r0, 8008b02 <_svfiprintf_r+0xe6>
 8008aca:	06d0      	lsls	r0, r2, #27
 8008acc:	bf44      	itt	mi
 8008ace:	2320      	movmi	r3, #32
 8008ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ad4:	0711      	lsls	r1, r2, #28
 8008ad6:	bf44      	itt	mi
 8008ad8:	232b      	movmi	r3, #43	; 0x2b
 8008ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ade:	f89a 3000 	ldrb.w	r3, [sl]
 8008ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ae4:	d015      	beq.n	8008b12 <_svfiprintf_r+0xf6>
 8008ae6:	9a07      	ldr	r2, [sp, #28]
 8008ae8:	4654      	mov	r4, sl
 8008aea:	2000      	movs	r0, #0
 8008aec:	f04f 0c0a 	mov.w	ip, #10
 8008af0:	4621      	mov	r1, r4
 8008af2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008af6:	3b30      	subs	r3, #48	; 0x30
 8008af8:	2b09      	cmp	r3, #9
 8008afa:	d94e      	bls.n	8008b9a <_svfiprintf_r+0x17e>
 8008afc:	b1b0      	cbz	r0, 8008b2c <_svfiprintf_r+0x110>
 8008afe:	9207      	str	r2, [sp, #28]
 8008b00:	e014      	b.n	8008b2c <_svfiprintf_r+0x110>
 8008b02:	eba0 0308 	sub.w	r3, r0, r8
 8008b06:	fa09 f303 	lsl.w	r3, r9, r3
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	9304      	str	r3, [sp, #16]
 8008b0e:	46a2      	mov	sl, r4
 8008b10:	e7d2      	b.n	8008ab8 <_svfiprintf_r+0x9c>
 8008b12:	9b03      	ldr	r3, [sp, #12]
 8008b14:	1d19      	adds	r1, r3, #4
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	9103      	str	r1, [sp, #12]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	bfbb      	ittet	lt
 8008b1e:	425b      	neglt	r3, r3
 8008b20:	f042 0202 	orrlt.w	r2, r2, #2
 8008b24:	9307      	strge	r3, [sp, #28]
 8008b26:	9307      	strlt	r3, [sp, #28]
 8008b28:	bfb8      	it	lt
 8008b2a:	9204      	strlt	r2, [sp, #16]
 8008b2c:	7823      	ldrb	r3, [r4, #0]
 8008b2e:	2b2e      	cmp	r3, #46	; 0x2e
 8008b30:	d10c      	bne.n	8008b4c <_svfiprintf_r+0x130>
 8008b32:	7863      	ldrb	r3, [r4, #1]
 8008b34:	2b2a      	cmp	r3, #42	; 0x2a
 8008b36:	d135      	bne.n	8008ba4 <_svfiprintf_r+0x188>
 8008b38:	9b03      	ldr	r3, [sp, #12]
 8008b3a:	1d1a      	adds	r2, r3, #4
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	9203      	str	r2, [sp, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	bfb8      	it	lt
 8008b44:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b48:	3402      	adds	r4, #2
 8008b4a:	9305      	str	r3, [sp, #20]
 8008b4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c18 <_svfiprintf_r+0x1fc>
 8008b50:	7821      	ldrb	r1, [r4, #0]
 8008b52:	2203      	movs	r2, #3
 8008b54:	4650      	mov	r0, sl
 8008b56:	f7f7 fb6b 	bl	8000230 <memchr>
 8008b5a:	b140      	cbz	r0, 8008b6e <_svfiprintf_r+0x152>
 8008b5c:	2340      	movs	r3, #64	; 0x40
 8008b5e:	eba0 000a 	sub.w	r0, r0, sl
 8008b62:	fa03 f000 	lsl.w	r0, r3, r0
 8008b66:	9b04      	ldr	r3, [sp, #16]
 8008b68:	4303      	orrs	r3, r0
 8008b6a:	3401      	adds	r4, #1
 8008b6c:	9304      	str	r3, [sp, #16]
 8008b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b72:	4826      	ldr	r0, [pc, #152]	; (8008c0c <_svfiprintf_r+0x1f0>)
 8008b74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b78:	2206      	movs	r2, #6
 8008b7a:	f7f7 fb59 	bl	8000230 <memchr>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	d038      	beq.n	8008bf4 <_svfiprintf_r+0x1d8>
 8008b82:	4b23      	ldr	r3, [pc, #140]	; (8008c10 <_svfiprintf_r+0x1f4>)
 8008b84:	bb1b      	cbnz	r3, 8008bce <_svfiprintf_r+0x1b2>
 8008b86:	9b03      	ldr	r3, [sp, #12]
 8008b88:	3307      	adds	r3, #7
 8008b8a:	f023 0307 	bic.w	r3, r3, #7
 8008b8e:	3308      	adds	r3, #8
 8008b90:	9303      	str	r3, [sp, #12]
 8008b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b94:	4433      	add	r3, r6
 8008b96:	9309      	str	r3, [sp, #36]	; 0x24
 8008b98:	e767      	b.n	8008a6a <_svfiprintf_r+0x4e>
 8008b9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	2001      	movs	r0, #1
 8008ba2:	e7a5      	b.n	8008af0 <_svfiprintf_r+0xd4>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	3401      	adds	r4, #1
 8008ba8:	9305      	str	r3, [sp, #20]
 8008baa:	4619      	mov	r1, r3
 8008bac:	f04f 0c0a 	mov.w	ip, #10
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bb6:	3a30      	subs	r2, #48	; 0x30
 8008bb8:	2a09      	cmp	r2, #9
 8008bba:	d903      	bls.n	8008bc4 <_svfiprintf_r+0x1a8>
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d0c5      	beq.n	8008b4c <_svfiprintf_r+0x130>
 8008bc0:	9105      	str	r1, [sp, #20]
 8008bc2:	e7c3      	b.n	8008b4c <_svfiprintf_r+0x130>
 8008bc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bc8:	4604      	mov	r4, r0
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e7f0      	b.n	8008bb0 <_svfiprintf_r+0x194>
 8008bce:	ab03      	add	r3, sp, #12
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	462a      	mov	r2, r5
 8008bd4:	4b0f      	ldr	r3, [pc, #60]	; (8008c14 <_svfiprintf_r+0x1f8>)
 8008bd6:	a904      	add	r1, sp, #16
 8008bd8:	4638      	mov	r0, r7
 8008bda:	f7fd ffb7 	bl	8006b4c <_printf_float>
 8008bde:	1c42      	adds	r2, r0, #1
 8008be0:	4606      	mov	r6, r0
 8008be2:	d1d6      	bne.n	8008b92 <_svfiprintf_r+0x176>
 8008be4:	89ab      	ldrh	r3, [r5, #12]
 8008be6:	065b      	lsls	r3, r3, #25
 8008be8:	f53f af2c 	bmi.w	8008a44 <_svfiprintf_r+0x28>
 8008bec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bee:	b01d      	add	sp, #116	; 0x74
 8008bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf4:	ab03      	add	r3, sp, #12
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	462a      	mov	r2, r5
 8008bfa:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <_svfiprintf_r+0x1f8>)
 8008bfc:	a904      	add	r1, sp, #16
 8008bfe:	4638      	mov	r0, r7
 8008c00:	f7fe fa48 	bl	8007094 <_printf_i>
 8008c04:	e7eb      	b.n	8008bde <_svfiprintf_r+0x1c2>
 8008c06:	bf00      	nop
 8008c08:	08009c24 	.word	0x08009c24
 8008c0c:	08009c2e 	.word	0x08009c2e
 8008c10:	08006b4d 	.word	0x08006b4d
 8008c14:	08008965 	.word	0x08008965
 8008c18:	08009c2a 	.word	0x08009c2a

08008c1c <_sbrk_r>:
 8008c1c:	b538      	push	{r3, r4, r5, lr}
 8008c1e:	4d06      	ldr	r5, [pc, #24]	; (8008c38 <_sbrk_r+0x1c>)
 8008c20:	2300      	movs	r3, #0
 8008c22:	4604      	mov	r4, r0
 8008c24:	4608      	mov	r0, r1
 8008c26:	602b      	str	r3, [r5, #0]
 8008c28:	f7f9 fba4 	bl	8002374 <_sbrk>
 8008c2c:	1c43      	adds	r3, r0, #1
 8008c2e:	d102      	bne.n	8008c36 <_sbrk_r+0x1a>
 8008c30:	682b      	ldr	r3, [r5, #0]
 8008c32:	b103      	cbz	r3, 8008c36 <_sbrk_r+0x1a>
 8008c34:	6023      	str	r3, [r4, #0]
 8008c36:	bd38      	pop	{r3, r4, r5, pc}
 8008c38:	20000638 	.word	0x20000638

08008c3c <__assert_func>:
 8008c3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c3e:	4614      	mov	r4, r2
 8008c40:	461a      	mov	r2, r3
 8008c42:	4b09      	ldr	r3, [pc, #36]	; (8008c68 <__assert_func+0x2c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4605      	mov	r5, r0
 8008c48:	68d8      	ldr	r0, [r3, #12]
 8008c4a:	b14c      	cbz	r4, 8008c60 <__assert_func+0x24>
 8008c4c:	4b07      	ldr	r3, [pc, #28]	; (8008c6c <__assert_func+0x30>)
 8008c4e:	9100      	str	r1, [sp, #0]
 8008c50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c54:	4906      	ldr	r1, [pc, #24]	; (8008c70 <__assert_func+0x34>)
 8008c56:	462b      	mov	r3, r5
 8008c58:	f000 f80e 	bl	8008c78 <fiprintf>
 8008c5c:	f000 faac 	bl	80091b8 <abort>
 8008c60:	4b04      	ldr	r3, [pc, #16]	; (8008c74 <__assert_func+0x38>)
 8008c62:	461c      	mov	r4, r3
 8008c64:	e7f3      	b.n	8008c4e <__assert_func+0x12>
 8008c66:	bf00      	nop
 8008c68:	200001d4 	.word	0x200001d4
 8008c6c:	08009c35 	.word	0x08009c35
 8008c70:	08009c42 	.word	0x08009c42
 8008c74:	08009c70 	.word	0x08009c70

08008c78 <fiprintf>:
 8008c78:	b40e      	push	{r1, r2, r3}
 8008c7a:	b503      	push	{r0, r1, lr}
 8008c7c:	4601      	mov	r1, r0
 8008c7e:	ab03      	add	r3, sp, #12
 8008c80:	4805      	ldr	r0, [pc, #20]	; (8008c98 <fiprintf+0x20>)
 8008c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c86:	6800      	ldr	r0, [r0, #0]
 8008c88:	9301      	str	r3, [sp, #4]
 8008c8a:	f000 f897 	bl	8008dbc <_vfiprintf_r>
 8008c8e:	b002      	add	sp, #8
 8008c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c94:	b003      	add	sp, #12
 8008c96:	4770      	bx	lr
 8008c98:	200001d4 	.word	0x200001d4

08008c9c <__ascii_mbtowc>:
 8008c9c:	b082      	sub	sp, #8
 8008c9e:	b901      	cbnz	r1, 8008ca2 <__ascii_mbtowc+0x6>
 8008ca0:	a901      	add	r1, sp, #4
 8008ca2:	b142      	cbz	r2, 8008cb6 <__ascii_mbtowc+0x1a>
 8008ca4:	b14b      	cbz	r3, 8008cba <__ascii_mbtowc+0x1e>
 8008ca6:	7813      	ldrb	r3, [r2, #0]
 8008ca8:	600b      	str	r3, [r1, #0]
 8008caa:	7812      	ldrb	r2, [r2, #0]
 8008cac:	1e10      	subs	r0, r2, #0
 8008cae:	bf18      	it	ne
 8008cb0:	2001      	movne	r0, #1
 8008cb2:	b002      	add	sp, #8
 8008cb4:	4770      	bx	lr
 8008cb6:	4610      	mov	r0, r2
 8008cb8:	e7fb      	b.n	8008cb2 <__ascii_mbtowc+0x16>
 8008cba:	f06f 0001 	mvn.w	r0, #1
 8008cbe:	e7f8      	b.n	8008cb2 <__ascii_mbtowc+0x16>

08008cc0 <memmove>:
 8008cc0:	4288      	cmp	r0, r1
 8008cc2:	b510      	push	{r4, lr}
 8008cc4:	eb01 0402 	add.w	r4, r1, r2
 8008cc8:	d902      	bls.n	8008cd0 <memmove+0x10>
 8008cca:	4284      	cmp	r4, r0
 8008ccc:	4623      	mov	r3, r4
 8008cce:	d807      	bhi.n	8008ce0 <memmove+0x20>
 8008cd0:	1e43      	subs	r3, r0, #1
 8008cd2:	42a1      	cmp	r1, r4
 8008cd4:	d008      	beq.n	8008ce8 <memmove+0x28>
 8008cd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cde:	e7f8      	b.n	8008cd2 <memmove+0x12>
 8008ce0:	4402      	add	r2, r0
 8008ce2:	4601      	mov	r1, r0
 8008ce4:	428a      	cmp	r2, r1
 8008ce6:	d100      	bne.n	8008cea <memmove+0x2a>
 8008ce8:	bd10      	pop	{r4, pc}
 8008cea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cf2:	e7f7      	b.n	8008ce4 <memmove+0x24>

08008cf4 <__malloc_lock>:
 8008cf4:	4801      	ldr	r0, [pc, #4]	; (8008cfc <__malloc_lock+0x8>)
 8008cf6:	f000 bc1f 	b.w	8009538 <__retarget_lock_acquire_recursive>
 8008cfa:	bf00      	nop
 8008cfc:	2000063c 	.word	0x2000063c

08008d00 <__malloc_unlock>:
 8008d00:	4801      	ldr	r0, [pc, #4]	; (8008d08 <__malloc_unlock+0x8>)
 8008d02:	f000 bc1a 	b.w	800953a <__retarget_lock_release_recursive>
 8008d06:	bf00      	nop
 8008d08:	2000063c 	.word	0x2000063c

08008d0c <_realloc_r>:
 8008d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d10:	4680      	mov	r8, r0
 8008d12:	4614      	mov	r4, r2
 8008d14:	460e      	mov	r6, r1
 8008d16:	b921      	cbnz	r1, 8008d22 <_realloc_r+0x16>
 8008d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1c:	4611      	mov	r1, r2
 8008d1e:	f7ff bdad 	b.w	800887c <_malloc_r>
 8008d22:	b92a      	cbnz	r2, 8008d30 <_realloc_r+0x24>
 8008d24:	f7ff fd3e 	bl	80087a4 <_free_r>
 8008d28:	4625      	mov	r5, r4
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d30:	f000 fc6a 	bl	8009608 <_malloc_usable_size_r>
 8008d34:	4284      	cmp	r4, r0
 8008d36:	4607      	mov	r7, r0
 8008d38:	d802      	bhi.n	8008d40 <_realloc_r+0x34>
 8008d3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d3e:	d812      	bhi.n	8008d66 <_realloc_r+0x5a>
 8008d40:	4621      	mov	r1, r4
 8008d42:	4640      	mov	r0, r8
 8008d44:	f7ff fd9a 	bl	800887c <_malloc_r>
 8008d48:	4605      	mov	r5, r0
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	d0ed      	beq.n	8008d2a <_realloc_r+0x1e>
 8008d4e:	42bc      	cmp	r4, r7
 8008d50:	4622      	mov	r2, r4
 8008d52:	4631      	mov	r1, r6
 8008d54:	bf28      	it	cs
 8008d56:	463a      	movcs	r2, r7
 8008d58:	f7ff f97c 	bl	8008054 <memcpy>
 8008d5c:	4631      	mov	r1, r6
 8008d5e:	4640      	mov	r0, r8
 8008d60:	f7ff fd20 	bl	80087a4 <_free_r>
 8008d64:	e7e1      	b.n	8008d2a <_realloc_r+0x1e>
 8008d66:	4635      	mov	r5, r6
 8008d68:	e7df      	b.n	8008d2a <_realloc_r+0x1e>

08008d6a <__sfputc_r>:
 8008d6a:	6893      	ldr	r3, [r2, #8]
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	b410      	push	{r4}
 8008d72:	6093      	str	r3, [r2, #8]
 8008d74:	da08      	bge.n	8008d88 <__sfputc_r+0x1e>
 8008d76:	6994      	ldr	r4, [r2, #24]
 8008d78:	42a3      	cmp	r3, r4
 8008d7a:	db01      	blt.n	8008d80 <__sfputc_r+0x16>
 8008d7c:	290a      	cmp	r1, #10
 8008d7e:	d103      	bne.n	8008d88 <__sfputc_r+0x1e>
 8008d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d84:	f000 b94a 	b.w	800901c <__swbuf_r>
 8008d88:	6813      	ldr	r3, [r2, #0]
 8008d8a:	1c58      	adds	r0, r3, #1
 8008d8c:	6010      	str	r0, [r2, #0]
 8008d8e:	7019      	strb	r1, [r3, #0]
 8008d90:	4608      	mov	r0, r1
 8008d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <__sfputs_r>:
 8008d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9a:	4606      	mov	r6, r0
 8008d9c:	460f      	mov	r7, r1
 8008d9e:	4614      	mov	r4, r2
 8008da0:	18d5      	adds	r5, r2, r3
 8008da2:	42ac      	cmp	r4, r5
 8008da4:	d101      	bne.n	8008daa <__sfputs_r+0x12>
 8008da6:	2000      	movs	r0, #0
 8008da8:	e007      	b.n	8008dba <__sfputs_r+0x22>
 8008daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dae:	463a      	mov	r2, r7
 8008db0:	4630      	mov	r0, r6
 8008db2:	f7ff ffda 	bl	8008d6a <__sfputc_r>
 8008db6:	1c43      	adds	r3, r0, #1
 8008db8:	d1f3      	bne.n	8008da2 <__sfputs_r+0xa>
 8008dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008dbc <_vfiprintf_r>:
 8008dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc0:	460d      	mov	r5, r1
 8008dc2:	b09d      	sub	sp, #116	; 0x74
 8008dc4:	4614      	mov	r4, r2
 8008dc6:	4698      	mov	r8, r3
 8008dc8:	4606      	mov	r6, r0
 8008dca:	b118      	cbz	r0, 8008dd4 <_vfiprintf_r+0x18>
 8008dcc:	6983      	ldr	r3, [r0, #24]
 8008dce:	b90b      	cbnz	r3, 8008dd4 <_vfiprintf_r+0x18>
 8008dd0:	f000 fb14 	bl	80093fc <__sinit>
 8008dd4:	4b89      	ldr	r3, [pc, #548]	; (8008ffc <_vfiprintf_r+0x240>)
 8008dd6:	429d      	cmp	r5, r3
 8008dd8:	d11b      	bne.n	8008e12 <_vfiprintf_r+0x56>
 8008dda:	6875      	ldr	r5, [r6, #4]
 8008ddc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dde:	07d9      	lsls	r1, r3, #31
 8008de0:	d405      	bmi.n	8008dee <_vfiprintf_r+0x32>
 8008de2:	89ab      	ldrh	r3, [r5, #12]
 8008de4:	059a      	lsls	r2, r3, #22
 8008de6:	d402      	bmi.n	8008dee <_vfiprintf_r+0x32>
 8008de8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dea:	f000 fba5 	bl	8009538 <__retarget_lock_acquire_recursive>
 8008dee:	89ab      	ldrh	r3, [r5, #12]
 8008df0:	071b      	lsls	r3, r3, #28
 8008df2:	d501      	bpl.n	8008df8 <_vfiprintf_r+0x3c>
 8008df4:	692b      	ldr	r3, [r5, #16]
 8008df6:	b9eb      	cbnz	r3, 8008e34 <_vfiprintf_r+0x78>
 8008df8:	4629      	mov	r1, r5
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	f000 f96e 	bl	80090dc <__swsetup_r>
 8008e00:	b1c0      	cbz	r0, 8008e34 <_vfiprintf_r+0x78>
 8008e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e04:	07dc      	lsls	r4, r3, #31
 8008e06:	d50e      	bpl.n	8008e26 <_vfiprintf_r+0x6a>
 8008e08:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0c:	b01d      	add	sp, #116	; 0x74
 8008e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e12:	4b7b      	ldr	r3, [pc, #492]	; (8009000 <_vfiprintf_r+0x244>)
 8008e14:	429d      	cmp	r5, r3
 8008e16:	d101      	bne.n	8008e1c <_vfiprintf_r+0x60>
 8008e18:	68b5      	ldr	r5, [r6, #8]
 8008e1a:	e7df      	b.n	8008ddc <_vfiprintf_r+0x20>
 8008e1c:	4b79      	ldr	r3, [pc, #484]	; (8009004 <_vfiprintf_r+0x248>)
 8008e1e:	429d      	cmp	r5, r3
 8008e20:	bf08      	it	eq
 8008e22:	68f5      	ldreq	r5, [r6, #12]
 8008e24:	e7da      	b.n	8008ddc <_vfiprintf_r+0x20>
 8008e26:	89ab      	ldrh	r3, [r5, #12]
 8008e28:	0598      	lsls	r0, r3, #22
 8008e2a:	d4ed      	bmi.n	8008e08 <_vfiprintf_r+0x4c>
 8008e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e2e:	f000 fb84 	bl	800953a <__retarget_lock_release_recursive>
 8008e32:	e7e9      	b.n	8008e08 <_vfiprintf_r+0x4c>
 8008e34:	2300      	movs	r3, #0
 8008e36:	9309      	str	r3, [sp, #36]	; 0x24
 8008e38:	2320      	movs	r3, #32
 8008e3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e42:	2330      	movs	r3, #48	; 0x30
 8008e44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009008 <_vfiprintf_r+0x24c>
 8008e48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e4c:	f04f 0901 	mov.w	r9, #1
 8008e50:	4623      	mov	r3, r4
 8008e52:	469a      	mov	sl, r3
 8008e54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e58:	b10a      	cbz	r2, 8008e5e <_vfiprintf_r+0xa2>
 8008e5a:	2a25      	cmp	r2, #37	; 0x25
 8008e5c:	d1f9      	bne.n	8008e52 <_vfiprintf_r+0x96>
 8008e5e:	ebba 0b04 	subs.w	fp, sl, r4
 8008e62:	d00b      	beq.n	8008e7c <_vfiprintf_r+0xc0>
 8008e64:	465b      	mov	r3, fp
 8008e66:	4622      	mov	r2, r4
 8008e68:	4629      	mov	r1, r5
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	f7ff ff94 	bl	8008d98 <__sfputs_r>
 8008e70:	3001      	adds	r0, #1
 8008e72:	f000 80aa 	beq.w	8008fca <_vfiprintf_r+0x20e>
 8008e76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e78:	445a      	add	r2, fp
 8008e7a:	9209      	str	r2, [sp, #36]	; 0x24
 8008e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f000 80a2 	beq.w	8008fca <_vfiprintf_r+0x20e>
 8008e86:	2300      	movs	r3, #0
 8008e88:	f04f 32ff 	mov.w	r2, #4294967295
 8008e8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e90:	f10a 0a01 	add.w	sl, sl, #1
 8008e94:	9304      	str	r3, [sp, #16]
 8008e96:	9307      	str	r3, [sp, #28]
 8008e98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e9c:	931a      	str	r3, [sp, #104]	; 0x68
 8008e9e:	4654      	mov	r4, sl
 8008ea0:	2205      	movs	r2, #5
 8008ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ea6:	4858      	ldr	r0, [pc, #352]	; (8009008 <_vfiprintf_r+0x24c>)
 8008ea8:	f7f7 f9c2 	bl	8000230 <memchr>
 8008eac:	9a04      	ldr	r2, [sp, #16]
 8008eae:	b9d8      	cbnz	r0, 8008ee8 <_vfiprintf_r+0x12c>
 8008eb0:	06d1      	lsls	r1, r2, #27
 8008eb2:	bf44      	itt	mi
 8008eb4:	2320      	movmi	r3, #32
 8008eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eba:	0713      	lsls	r3, r2, #28
 8008ebc:	bf44      	itt	mi
 8008ebe:	232b      	movmi	r3, #43	; 0x2b
 8008ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8008eca:	d015      	beq.n	8008ef8 <_vfiprintf_r+0x13c>
 8008ecc:	9a07      	ldr	r2, [sp, #28]
 8008ece:	4654      	mov	r4, sl
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	f04f 0c0a 	mov.w	ip, #10
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008edc:	3b30      	subs	r3, #48	; 0x30
 8008ede:	2b09      	cmp	r3, #9
 8008ee0:	d94e      	bls.n	8008f80 <_vfiprintf_r+0x1c4>
 8008ee2:	b1b0      	cbz	r0, 8008f12 <_vfiprintf_r+0x156>
 8008ee4:	9207      	str	r2, [sp, #28]
 8008ee6:	e014      	b.n	8008f12 <_vfiprintf_r+0x156>
 8008ee8:	eba0 0308 	sub.w	r3, r0, r8
 8008eec:	fa09 f303 	lsl.w	r3, r9, r3
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	9304      	str	r3, [sp, #16]
 8008ef4:	46a2      	mov	sl, r4
 8008ef6:	e7d2      	b.n	8008e9e <_vfiprintf_r+0xe2>
 8008ef8:	9b03      	ldr	r3, [sp, #12]
 8008efa:	1d19      	adds	r1, r3, #4
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	9103      	str	r1, [sp, #12]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	bfbb      	ittet	lt
 8008f04:	425b      	neglt	r3, r3
 8008f06:	f042 0202 	orrlt.w	r2, r2, #2
 8008f0a:	9307      	strge	r3, [sp, #28]
 8008f0c:	9307      	strlt	r3, [sp, #28]
 8008f0e:	bfb8      	it	lt
 8008f10:	9204      	strlt	r2, [sp, #16]
 8008f12:	7823      	ldrb	r3, [r4, #0]
 8008f14:	2b2e      	cmp	r3, #46	; 0x2e
 8008f16:	d10c      	bne.n	8008f32 <_vfiprintf_r+0x176>
 8008f18:	7863      	ldrb	r3, [r4, #1]
 8008f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8008f1c:	d135      	bne.n	8008f8a <_vfiprintf_r+0x1ce>
 8008f1e:	9b03      	ldr	r3, [sp, #12]
 8008f20:	1d1a      	adds	r2, r3, #4
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	9203      	str	r2, [sp, #12]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	bfb8      	it	lt
 8008f2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f2e:	3402      	adds	r4, #2
 8008f30:	9305      	str	r3, [sp, #20]
 8008f32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009018 <_vfiprintf_r+0x25c>
 8008f36:	7821      	ldrb	r1, [r4, #0]
 8008f38:	2203      	movs	r2, #3
 8008f3a:	4650      	mov	r0, sl
 8008f3c:	f7f7 f978 	bl	8000230 <memchr>
 8008f40:	b140      	cbz	r0, 8008f54 <_vfiprintf_r+0x198>
 8008f42:	2340      	movs	r3, #64	; 0x40
 8008f44:	eba0 000a 	sub.w	r0, r0, sl
 8008f48:	fa03 f000 	lsl.w	r0, r3, r0
 8008f4c:	9b04      	ldr	r3, [sp, #16]
 8008f4e:	4303      	orrs	r3, r0
 8008f50:	3401      	adds	r4, #1
 8008f52:	9304      	str	r3, [sp, #16]
 8008f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f58:	482c      	ldr	r0, [pc, #176]	; (800900c <_vfiprintf_r+0x250>)
 8008f5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f5e:	2206      	movs	r2, #6
 8008f60:	f7f7 f966 	bl	8000230 <memchr>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	d03f      	beq.n	8008fe8 <_vfiprintf_r+0x22c>
 8008f68:	4b29      	ldr	r3, [pc, #164]	; (8009010 <_vfiprintf_r+0x254>)
 8008f6a:	bb1b      	cbnz	r3, 8008fb4 <_vfiprintf_r+0x1f8>
 8008f6c:	9b03      	ldr	r3, [sp, #12]
 8008f6e:	3307      	adds	r3, #7
 8008f70:	f023 0307 	bic.w	r3, r3, #7
 8008f74:	3308      	adds	r3, #8
 8008f76:	9303      	str	r3, [sp, #12]
 8008f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f7a:	443b      	add	r3, r7
 8008f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f7e:	e767      	b.n	8008e50 <_vfiprintf_r+0x94>
 8008f80:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f84:	460c      	mov	r4, r1
 8008f86:	2001      	movs	r0, #1
 8008f88:	e7a5      	b.n	8008ed6 <_vfiprintf_r+0x11a>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	3401      	adds	r4, #1
 8008f8e:	9305      	str	r3, [sp, #20]
 8008f90:	4619      	mov	r1, r3
 8008f92:	f04f 0c0a 	mov.w	ip, #10
 8008f96:	4620      	mov	r0, r4
 8008f98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f9c:	3a30      	subs	r2, #48	; 0x30
 8008f9e:	2a09      	cmp	r2, #9
 8008fa0:	d903      	bls.n	8008faa <_vfiprintf_r+0x1ee>
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d0c5      	beq.n	8008f32 <_vfiprintf_r+0x176>
 8008fa6:	9105      	str	r1, [sp, #20]
 8008fa8:	e7c3      	b.n	8008f32 <_vfiprintf_r+0x176>
 8008faa:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fae:	4604      	mov	r4, r0
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e7f0      	b.n	8008f96 <_vfiprintf_r+0x1da>
 8008fb4:	ab03      	add	r3, sp, #12
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	462a      	mov	r2, r5
 8008fba:	4b16      	ldr	r3, [pc, #88]	; (8009014 <_vfiprintf_r+0x258>)
 8008fbc:	a904      	add	r1, sp, #16
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f7fd fdc4 	bl	8006b4c <_printf_float>
 8008fc4:	4607      	mov	r7, r0
 8008fc6:	1c78      	adds	r0, r7, #1
 8008fc8:	d1d6      	bne.n	8008f78 <_vfiprintf_r+0x1bc>
 8008fca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fcc:	07d9      	lsls	r1, r3, #31
 8008fce:	d405      	bmi.n	8008fdc <_vfiprintf_r+0x220>
 8008fd0:	89ab      	ldrh	r3, [r5, #12]
 8008fd2:	059a      	lsls	r2, r3, #22
 8008fd4:	d402      	bmi.n	8008fdc <_vfiprintf_r+0x220>
 8008fd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fd8:	f000 faaf 	bl	800953a <__retarget_lock_release_recursive>
 8008fdc:	89ab      	ldrh	r3, [r5, #12]
 8008fde:	065b      	lsls	r3, r3, #25
 8008fe0:	f53f af12 	bmi.w	8008e08 <_vfiprintf_r+0x4c>
 8008fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fe6:	e711      	b.n	8008e0c <_vfiprintf_r+0x50>
 8008fe8:	ab03      	add	r3, sp, #12
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	462a      	mov	r2, r5
 8008fee:	4b09      	ldr	r3, [pc, #36]	; (8009014 <_vfiprintf_r+0x258>)
 8008ff0:	a904      	add	r1, sp, #16
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f7fe f84e 	bl	8007094 <_printf_i>
 8008ff8:	e7e4      	b.n	8008fc4 <_vfiprintf_r+0x208>
 8008ffa:	bf00      	nop
 8008ffc:	08009d9c 	.word	0x08009d9c
 8009000:	08009dbc 	.word	0x08009dbc
 8009004:	08009d7c 	.word	0x08009d7c
 8009008:	08009c24 	.word	0x08009c24
 800900c:	08009c2e 	.word	0x08009c2e
 8009010:	08006b4d 	.word	0x08006b4d
 8009014:	08008d99 	.word	0x08008d99
 8009018:	08009c2a 	.word	0x08009c2a

0800901c <__swbuf_r>:
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901e:	460e      	mov	r6, r1
 8009020:	4614      	mov	r4, r2
 8009022:	4605      	mov	r5, r0
 8009024:	b118      	cbz	r0, 800902e <__swbuf_r+0x12>
 8009026:	6983      	ldr	r3, [r0, #24]
 8009028:	b90b      	cbnz	r3, 800902e <__swbuf_r+0x12>
 800902a:	f000 f9e7 	bl	80093fc <__sinit>
 800902e:	4b21      	ldr	r3, [pc, #132]	; (80090b4 <__swbuf_r+0x98>)
 8009030:	429c      	cmp	r4, r3
 8009032:	d12b      	bne.n	800908c <__swbuf_r+0x70>
 8009034:	686c      	ldr	r4, [r5, #4]
 8009036:	69a3      	ldr	r3, [r4, #24]
 8009038:	60a3      	str	r3, [r4, #8]
 800903a:	89a3      	ldrh	r3, [r4, #12]
 800903c:	071a      	lsls	r2, r3, #28
 800903e:	d52f      	bpl.n	80090a0 <__swbuf_r+0x84>
 8009040:	6923      	ldr	r3, [r4, #16]
 8009042:	b36b      	cbz	r3, 80090a0 <__swbuf_r+0x84>
 8009044:	6923      	ldr	r3, [r4, #16]
 8009046:	6820      	ldr	r0, [r4, #0]
 8009048:	1ac0      	subs	r0, r0, r3
 800904a:	6963      	ldr	r3, [r4, #20]
 800904c:	b2f6      	uxtb	r6, r6
 800904e:	4283      	cmp	r3, r0
 8009050:	4637      	mov	r7, r6
 8009052:	dc04      	bgt.n	800905e <__swbuf_r+0x42>
 8009054:	4621      	mov	r1, r4
 8009056:	4628      	mov	r0, r5
 8009058:	f000 f93c 	bl	80092d4 <_fflush_r>
 800905c:	bb30      	cbnz	r0, 80090ac <__swbuf_r+0x90>
 800905e:	68a3      	ldr	r3, [r4, #8]
 8009060:	3b01      	subs	r3, #1
 8009062:	60a3      	str	r3, [r4, #8]
 8009064:	6823      	ldr	r3, [r4, #0]
 8009066:	1c5a      	adds	r2, r3, #1
 8009068:	6022      	str	r2, [r4, #0]
 800906a:	701e      	strb	r6, [r3, #0]
 800906c:	6963      	ldr	r3, [r4, #20]
 800906e:	3001      	adds	r0, #1
 8009070:	4283      	cmp	r3, r0
 8009072:	d004      	beq.n	800907e <__swbuf_r+0x62>
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	07db      	lsls	r3, r3, #31
 8009078:	d506      	bpl.n	8009088 <__swbuf_r+0x6c>
 800907a:	2e0a      	cmp	r6, #10
 800907c:	d104      	bne.n	8009088 <__swbuf_r+0x6c>
 800907e:	4621      	mov	r1, r4
 8009080:	4628      	mov	r0, r5
 8009082:	f000 f927 	bl	80092d4 <_fflush_r>
 8009086:	b988      	cbnz	r0, 80090ac <__swbuf_r+0x90>
 8009088:	4638      	mov	r0, r7
 800908a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800908c:	4b0a      	ldr	r3, [pc, #40]	; (80090b8 <__swbuf_r+0x9c>)
 800908e:	429c      	cmp	r4, r3
 8009090:	d101      	bne.n	8009096 <__swbuf_r+0x7a>
 8009092:	68ac      	ldr	r4, [r5, #8]
 8009094:	e7cf      	b.n	8009036 <__swbuf_r+0x1a>
 8009096:	4b09      	ldr	r3, [pc, #36]	; (80090bc <__swbuf_r+0xa0>)
 8009098:	429c      	cmp	r4, r3
 800909a:	bf08      	it	eq
 800909c:	68ec      	ldreq	r4, [r5, #12]
 800909e:	e7ca      	b.n	8009036 <__swbuf_r+0x1a>
 80090a0:	4621      	mov	r1, r4
 80090a2:	4628      	mov	r0, r5
 80090a4:	f000 f81a 	bl	80090dc <__swsetup_r>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	d0cb      	beq.n	8009044 <__swbuf_r+0x28>
 80090ac:	f04f 37ff 	mov.w	r7, #4294967295
 80090b0:	e7ea      	b.n	8009088 <__swbuf_r+0x6c>
 80090b2:	bf00      	nop
 80090b4:	08009d9c 	.word	0x08009d9c
 80090b8:	08009dbc 	.word	0x08009dbc
 80090bc:	08009d7c 	.word	0x08009d7c

080090c0 <__ascii_wctomb>:
 80090c0:	b149      	cbz	r1, 80090d6 <__ascii_wctomb+0x16>
 80090c2:	2aff      	cmp	r2, #255	; 0xff
 80090c4:	bf85      	ittet	hi
 80090c6:	238a      	movhi	r3, #138	; 0x8a
 80090c8:	6003      	strhi	r3, [r0, #0]
 80090ca:	700a      	strbls	r2, [r1, #0]
 80090cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80090d0:	bf98      	it	ls
 80090d2:	2001      	movls	r0, #1
 80090d4:	4770      	bx	lr
 80090d6:	4608      	mov	r0, r1
 80090d8:	4770      	bx	lr
	...

080090dc <__swsetup_r>:
 80090dc:	4b32      	ldr	r3, [pc, #200]	; (80091a8 <__swsetup_r+0xcc>)
 80090de:	b570      	push	{r4, r5, r6, lr}
 80090e0:	681d      	ldr	r5, [r3, #0]
 80090e2:	4606      	mov	r6, r0
 80090e4:	460c      	mov	r4, r1
 80090e6:	b125      	cbz	r5, 80090f2 <__swsetup_r+0x16>
 80090e8:	69ab      	ldr	r3, [r5, #24]
 80090ea:	b913      	cbnz	r3, 80090f2 <__swsetup_r+0x16>
 80090ec:	4628      	mov	r0, r5
 80090ee:	f000 f985 	bl	80093fc <__sinit>
 80090f2:	4b2e      	ldr	r3, [pc, #184]	; (80091ac <__swsetup_r+0xd0>)
 80090f4:	429c      	cmp	r4, r3
 80090f6:	d10f      	bne.n	8009118 <__swsetup_r+0x3c>
 80090f8:	686c      	ldr	r4, [r5, #4]
 80090fa:	89a3      	ldrh	r3, [r4, #12]
 80090fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009100:	0719      	lsls	r1, r3, #28
 8009102:	d42c      	bmi.n	800915e <__swsetup_r+0x82>
 8009104:	06dd      	lsls	r5, r3, #27
 8009106:	d411      	bmi.n	800912c <__swsetup_r+0x50>
 8009108:	2309      	movs	r3, #9
 800910a:	6033      	str	r3, [r6, #0]
 800910c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009110:	81a3      	strh	r3, [r4, #12]
 8009112:	f04f 30ff 	mov.w	r0, #4294967295
 8009116:	e03e      	b.n	8009196 <__swsetup_r+0xba>
 8009118:	4b25      	ldr	r3, [pc, #148]	; (80091b0 <__swsetup_r+0xd4>)
 800911a:	429c      	cmp	r4, r3
 800911c:	d101      	bne.n	8009122 <__swsetup_r+0x46>
 800911e:	68ac      	ldr	r4, [r5, #8]
 8009120:	e7eb      	b.n	80090fa <__swsetup_r+0x1e>
 8009122:	4b24      	ldr	r3, [pc, #144]	; (80091b4 <__swsetup_r+0xd8>)
 8009124:	429c      	cmp	r4, r3
 8009126:	bf08      	it	eq
 8009128:	68ec      	ldreq	r4, [r5, #12]
 800912a:	e7e6      	b.n	80090fa <__swsetup_r+0x1e>
 800912c:	0758      	lsls	r0, r3, #29
 800912e:	d512      	bpl.n	8009156 <__swsetup_r+0x7a>
 8009130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009132:	b141      	cbz	r1, 8009146 <__swsetup_r+0x6a>
 8009134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009138:	4299      	cmp	r1, r3
 800913a:	d002      	beq.n	8009142 <__swsetup_r+0x66>
 800913c:	4630      	mov	r0, r6
 800913e:	f7ff fb31 	bl	80087a4 <_free_r>
 8009142:	2300      	movs	r3, #0
 8009144:	6363      	str	r3, [r4, #52]	; 0x34
 8009146:	89a3      	ldrh	r3, [r4, #12]
 8009148:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800914c:	81a3      	strh	r3, [r4, #12]
 800914e:	2300      	movs	r3, #0
 8009150:	6063      	str	r3, [r4, #4]
 8009152:	6923      	ldr	r3, [r4, #16]
 8009154:	6023      	str	r3, [r4, #0]
 8009156:	89a3      	ldrh	r3, [r4, #12]
 8009158:	f043 0308 	orr.w	r3, r3, #8
 800915c:	81a3      	strh	r3, [r4, #12]
 800915e:	6923      	ldr	r3, [r4, #16]
 8009160:	b94b      	cbnz	r3, 8009176 <__swsetup_r+0x9a>
 8009162:	89a3      	ldrh	r3, [r4, #12]
 8009164:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800916c:	d003      	beq.n	8009176 <__swsetup_r+0x9a>
 800916e:	4621      	mov	r1, r4
 8009170:	4630      	mov	r0, r6
 8009172:	f000 fa09 	bl	8009588 <__smakebuf_r>
 8009176:	89a0      	ldrh	r0, [r4, #12]
 8009178:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800917c:	f010 0301 	ands.w	r3, r0, #1
 8009180:	d00a      	beq.n	8009198 <__swsetup_r+0xbc>
 8009182:	2300      	movs	r3, #0
 8009184:	60a3      	str	r3, [r4, #8]
 8009186:	6963      	ldr	r3, [r4, #20]
 8009188:	425b      	negs	r3, r3
 800918a:	61a3      	str	r3, [r4, #24]
 800918c:	6923      	ldr	r3, [r4, #16]
 800918e:	b943      	cbnz	r3, 80091a2 <__swsetup_r+0xc6>
 8009190:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009194:	d1ba      	bne.n	800910c <__swsetup_r+0x30>
 8009196:	bd70      	pop	{r4, r5, r6, pc}
 8009198:	0781      	lsls	r1, r0, #30
 800919a:	bf58      	it	pl
 800919c:	6963      	ldrpl	r3, [r4, #20]
 800919e:	60a3      	str	r3, [r4, #8]
 80091a0:	e7f4      	b.n	800918c <__swsetup_r+0xb0>
 80091a2:	2000      	movs	r0, #0
 80091a4:	e7f7      	b.n	8009196 <__swsetup_r+0xba>
 80091a6:	bf00      	nop
 80091a8:	200001d4 	.word	0x200001d4
 80091ac:	08009d9c 	.word	0x08009d9c
 80091b0:	08009dbc 	.word	0x08009dbc
 80091b4:	08009d7c 	.word	0x08009d7c

080091b8 <abort>:
 80091b8:	b508      	push	{r3, lr}
 80091ba:	2006      	movs	r0, #6
 80091bc:	f000 fa54 	bl	8009668 <raise>
 80091c0:	2001      	movs	r0, #1
 80091c2:	f7f9 f85f 	bl	8002284 <_exit>
	...

080091c8 <__sflush_r>:
 80091c8:	898a      	ldrh	r2, [r1, #12]
 80091ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ce:	4605      	mov	r5, r0
 80091d0:	0710      	lsls	r0, r2, #28
 80091d2:	460c      	mov	r4, r1
 80091d4:	d458      	bmi.n	8009288 <__sflush_r+0xc0>
 80091d6:	684b      	ldr	r3, [r1, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	dc05      	bgt.n	80091e8 <__sflush_r+0x20>
 80091dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091de:	2b00      	cmp	r3, #0
 80091e0:	dc02      	bgt.n	80091e8 <__sflush_r+0x20>
 80091e2:	2000      	movs	r0, #0
 80091e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091ea:	2e00      	cmp	r6, #0
 80091ec:	d0f9      	beq.n	80091e2 <__sflush_r+0x1a>
 80091ee:	2300      	movs	r3, #0
 80091f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091f4:	682f      	ldr	r7, [r5, #0]
 80091f6:	602b      	str	r3, [r5, #0]
 80091f8:	d032      	beq.n	8009260 <__sflush_r+0x98>
 80091fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091fc:	89a3      	ldrh	r3, [r4, #12]
 80091fe:	075a      	lsls	r2, r3, #29
 8009200:	d505      	bpl.n	800920e <__sflush_r+0x46>
 8009202:	6863      	ldr	r3, [r4, #4]
 8009204:	1ac0      	subs	r0, r0, r3
 8009206:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009208:	b10b      	cbz	r3, 800920e <__sflush_r+0x46>
 800920a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800920c:	1ac0      	subs	r0, r0, r3
 800920e:	2300      	movs	r3, #0
 8009210:	4602      	mov	r2, r0
 8009212:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009214:	6a21      	ldr	r1, [r4, #32]
 8009216:	4628      	mov	r0, r5
 8009218:	47b0      	blx	r6
 800921a:	1c43      	adds	r3, r0, #1
 800921c:	89a3      	ldrh	r3, [r4, #12]
 800921e:	d106      	bne.n	800922e <__sflush_r+0x66>
 8009220:	6829      	ldr	r1, [r5, #0]
 8009222:	291d      	cmp	r1, #29
 8009224:	d82c      	bhi.n	8009280 <__sflush_r+0xb8>
 8009226:	4a2a      	ldr	r2, [pc, #168]	; (80092d0 <__sflush_r+0x108>)
 8009228:	40ca      	lsrs	r2, r1
 800922a:	07d6      	lsls	r6, r2, #31
 800922c:	d528      	bpl.n	8009280 <__sflush_r+0xb8>
 800922e:	2200      	movs	r2, #0
 8009230:	6062      	str	r2, [r4, #4]
 8009232:	04d9      	lsls	r1, r3, #19
 8009234:	6922      	ldr	r2, [r4, #16]
 8009236:	6022      	str	r2, [r4, #0]
 8009238:	d504      	bpl.n	8009244 <__sflush_r+0x7c>
 800923a:	1c42      	adds	r2, r0, #1
 800923c:	d101      	bne.n	8009242 <__sflush_r+0x7a>
 800923e:	682b      	ldr	r3, [r5, #0]
 8009240:	b903      	cbnz	r3, 8009244 <__sflush_r+0x7c>
 8009242:	6560      	str	r0, [r4, #84]	; 0x54
 8009244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009246:	602f      	str	r7, [r5, #0]
 8009248:	2900      	cmp	r1, #0
 800924a:	d0ca      	beq.n	80091e2 <__sflush_r+0x1a>
 800924c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009250:	4299      	cmp	r1, r3
 8009252:	d002      	beq.n	800925a <__sflush_r+0x92>
 8009254:	4628      	mov	r0, r5
 8009256:	f7ff faa5 	bl	80087a4 <_free_r>
 800925a:	2000      	movs	r0, #0
 800925c:	6360      	str	r0, [r4, #52]	; 0x34
 800925e:	e7c1      	b.n	80091e4 <__sflush_r+0x1c>
 8009260:	6a21      	ldr	r1, [r4, #32]
 8009262:	2301      	movs	r3, #1
 8009264:	4628      	mov	r0, r5
 8009266:	47b0      	blx	r6
 8009268:	1c41      	adds	r1, r0, #1
 800926a:	d1c7      	bne.n	80091fc <__sflush_r+0x34>
 800926c:	682b      	ldr	r3, [r5, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d0c4      	beq.n	80091fc <__sflush_r+0x34>
 8009272:	2b1d      	cmp	r3, #29
 8009274:	d001      	beq.n	800927a <__sflush_r+0xb2>
 8009276:	2b16      	cmp	r3, #22
 8009278:	d101      	bne.n	800927e <__sflush_r+0xb6>
 800927a:	602f      	str	r7, [r5, #0]
 800927c:	e7b1      	b.n	80091e2 <__sflush_r+0x1a>
 800927e:	89a3      	ldrh	r3, [r4, #12]
 8009280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009284:	81a3      	strh	r3, [r4, #12]
 8009286:	e7ad      	b.n	80091e4 <__sflush_r+0x1c>
 8009288:	690f      	ldr	r7, [r1, #16]
 800928a:	2f00      	cmp	r7, #0
 800928c:	d0a9      	beq.n	80091e2 <__sflush_r+0x1a>
 800928e:	0793      	lsls	r3, r2, #30
 8009290:	680e      	ldr	r6, [r1, #0]
 8009292:	bf08      	it	eq
 8009294:	694b      	ldreq	r3, [r1, #20]
 8009296:	600f      	str	r7, [r1, #0]
 8009298:	bf18      	it	ne
 800929a:	2300      	movne	r3, #0
 800929c:	eba6 0807 	sub.w	r8, r6, r7
 80092a0:	608b      	str	r3, [r1, #8]
 80092a2:	f1b8 0f00 	cmp.w	r8, #0
 80092a6:	dd9c      	ble.n	80091e2 <__sflush_r+0x1a>
 80092a8:	6a21      	ldr	r1, [r4, #32]
 80092aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092ac:	4643      	mov	r3, r8
 80092ae:	463a      	mov	r2, r7
 80092b0:	4628      	mov	r0, r5
 80092b2:	47b0      	blx	r6
 80092b4:	2800      	cmp	r0, #0
 80092b6:	dc06      	bgt.n	80092c6 <__sflush_r+0xfe>
 80092b8:	89a3      	ldrh	r3, [r4, #12]
 80092ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092be:	81a3      	strh	r3, [r4, #12]
 80092c0:	f04f 30ff 	mov.w	r0, #4294967295
 80092c4:	e78e      	b.n	80091e4 <__sflush_r+0x1c>
 80092c6:	4407      	add	r7, r0
 80092c8:	eba8 0800 	sub.w	r8, r8, r0
 80092cc:	e7e9      	b.n	80092a2 <__sflush_r+0xda>
 80092ce:	bf00      	nop
 80092d0:	20400001 	.word	0x20400001

080092d4 <_fflush_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	690b      	ldr	r3, [r1, #16]
 80092d8:	4605      	mov	r5, r0
 80092da:	460c      	mov	r4, r1
 80092dc:	b913      	cbnz	r3, 80092e4 <_fflush_r+0x10>
 80092de:	2500      	movs	r5, #0
 80092e0:	4628      	mov	r0, r5
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	b118      	cbz	r0, 80092ee <_fflush_r+0x1a>
 80092e6:	6983      	ldr	r3, [r0, #24]
 80092e8:	b90b      	cbnz	r3, 80092ee <_fflush_r+0x1a>
 80092ea:	f000 f887 	bl	80093fc <__sinit>
 80092ee:	4b14      	ldr	r3, [pc, #80]	; (8009340 <_fflush_r+0x6c>)
 80092f0:	429c      	cmp	r4, r3
 80092f2:	d11b      	bne.n	800932c <_fflush_r+0x58>
 80092f4:	686c      	ldr	r4, [r5, #4]
 80092f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d0ef      	beq.n	80092de <_fflush_r+0xa>
 80092fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009300:	07d0      	lsls	r0, r2, #31
 8009302:	d404      	bmi.n	800930e <_fflush_r+0x3a>
 8009304:	0599      	lsls	r1, r3, #22
 8009306:	d402      	bmi.n	800930e <_fflush_r+0x3a>
 8009308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800930a:	f000 f915 	bl	8009538 <__retarget_lock_acquire_recursive>
 800930e:	4628      	mov	r0, r5
 8009310:	4621      	mov	r1, r4
 8009312:	f7ff ff59 	bl	80091c8 <__sflush_r>
 8009316:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009318:	07da      	lsls	r2, r3, #31
 800931a:	4605      	mov	r5, r0
 800931c:	d4e0      	bmi.n	80092e0 <_fflush_r+0xc>
 800931e:	89a3      	ldrh	r3, [r4, #12]
 8009320:	059b      	lsls	r3, r3, #22
 8009322:	d4dd      	bmi.n	80092e0 <_fflush_r+0xc>
 8009324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009326:	f000 f908 	bl	800953a <__retarget_lock_release_recursive>
 800932a:	e7d9      	b.n	80092e0 <_fflush_r+0xc>
 800932c:	4b05      	ldr	r3, [pc, #20]	; (8009344 <_fflush_r+0x70>)
 800932e:	429c      	cmp	r4, r3
 8009330:	d101      	bne.n	8009336 <_fflush_r+0x62>
 8009332:	68ac      	ldr	r4, [r5, #8]
 8009334:	e7df      	b.n	80092f6 <_fflush_r+0x22>
 8009336:	4b04      	ldr	r3, [pc, #16]	; (8009348 <_fflush_r+0x74>)
 8009338:	429c      	cmp	r4, r3
 800933a:	bf08      	it	eq
 800933c:	68ec      	ldreq	r4, [r5, #12]
 800933e:	e7da      	b.n	80092f6 <_fflush_r+0x22>
 8009340:	08009d9c 	.word	0x08009d9c
 8009344:	08009dbc 	.word	0x08009dbc
 8009348:	08009d7c 	.word	0x08009d7c

0800934c <std>:
 800934c:	2300      	movs	r3, #0
 800934e:	b510      	push	{r4, lr}
 8009350:	4604      	mov	r4, r0
 8009352:	e9c0 3300 	strd	r3, r3, [r0]
 8009356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800935a:	6083      	str	r3, [r0, #8]
 800935c:	8181      	strh	r1, [r0, #12]
 800935e:	6643      	str	r3, [r0, #100]	; 0x64
 8009360:	81c2      	strh	r2, [r0, #14]
 8009362:	6183      	str	r3, [r0, #24]
 8009364:	4619      	mov	r1, r3
 8009366:	2208      	movs	r2, #8
 8009368:	305c      	adds	r0, #92	; 0x5c
 800936a:	f7fd fb47 	bl	80069fc <memset>
 800936e:	4b05      	ldr	r3, [pc, #20]	; (8009384 <std+0x38>)
 8009370:	6263      	str	r3, [r4, #36]	; 0x24
 8009372:	4b05      	ldr	r3, [pc, #20]	; (8009388 <std+0x3c>)
 8009374:	62a3      	str	r3, [r4, #40]	; 0x28
 8009376:	4b05      	ldr	r3, [pc, #20]	; (800938c <std+0x40>)
 8009378:	62e3      	str	r3, [r4, #44]	; 0x2c
 800937a:	4b05      	ldr	r3, [pc, #20]	; (8009390 <std+0x44>)
 800937c:	6224      	str	r4, [r4, #32]
 800937e:	6323      	str	r3, [r4, #48]	; 0x30
 8009380:	bd10      	pop	{r4, pc}
 8009382:	bf00      	nop
 8009384:	080096a1 	.word	0x080096a1
 8009388:	080096c3 	.word	0x080096c3
 800938c:	080096fb 	.word	0x080096fb
 8009390:	0800971f 	.word	0x0800971f

08009394 <_cleanup_r>:
 8009394:	4901      	ldr	r1, [pc, #4]	; (800939c <_cleanup_r+0x8>)
 8009396:	f000 b8af 	b.w	80094f8 <_fwalk_reent>
 800939a:	bf00      	nop
 800939c:	080092d5 	.word	0x080092d5

080093a0 <__sfmoreglue>:
 80093a0:	b570      	push	{r4, r5, r6, lr}
 80093a2:	2268      	movs	r2, #104	; 0x68
 80093a4:	1e4d      	subs	r5, r1, #1
 80093a6:	4355      	muls	r5, r2
 80093a8:	460e      	mov	r6, r1
 80093aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093ae:	f7ff fa65 	bl	800887c <_malloc_r>
 80093b2:	4604      	mov	r4, r0
 80093b4:	b140      	cbz	r0, 80093c8 <__sfmoreglue+0x28>
 80093b6:	2100      	movs	r1, #0
 80093b8:	e9c0 1600 	strd	r1, r6, [r0]
 80093bc:	300c      	adds	r0, #12
 80093be:	60a0      	str	r0, [r4, #8]
 80093c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093c4:	f7fd fb1a 	bl	80069fc <memset>
 80093c8:	4620      	mov	r0, r4
 80093ca:	bd70      	pop	{r4, r5, r6, pc}

080093cc <__sfp_lock_acquire>:
 80093cc:	4801      	ldr	r0, [pc, #4]	; (80093d4 <__sfp_lock_acquire+0x8>)
 80093ce:	f000 b8b3 	b.w	8009538 <__retarget_lock_acquire_recursive>
 80093d2:	bf00      	nop
 80093d4:	2000063d 	.word	0x2000063d

080093d8 <__sfp_lock_release>:
 80093d8:	4801      	ldr	r0, [pc, #4]	; (80093e0 <__sfp_lock_release+0x8>)
 80093da:	f000 b8ae 	b.w	800953a <__retarget_lock_release_recursive>
 80093de:	bf00      	nop
 80093e0:	2000063d 	.word	0x2000063d

080093e4 <__sinit_lock_acquire>:
 80093e4:	4801      	ldr	r0, [pc, #4]	; (80093ec <__sinit_lock_acquire+0x8>)
 80093e6:	f000 b8a7 	b.w	8009538 <__retarget_lock_acquire_recursive>
 80093ea:	bf00      	nop
 80093ec:	2000063e 	.word	0x2000063e

080093f0 <__sinit_lock_release>:
 80093f0:	4801      	ldr	r0, [pc, #4]	; (80093f8 <__sinit_lock_release+0x8>)
 80093f2:	f000 b8a2 	b.w	800953a <__retarget_lock_release_recursive>
 80093f6:	bf00      	nop
 80093f8:	2000063e 	.word	0x2000063e

080093fc <__sinit>:
 80093fc:	b510      	push	{r4, lr}
 80093fe:	4604      	mov	r4, r0
 8009400:	f7ff fff0 	bl	80093e4 <__sinit_lock_acquire>
 8009404:	69a3      	ldr	r3, [r4, #24]
 8009406:	b11b      	cbz	r3, 8009410 <__sinit+0x14>
 8009408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800940c:	f7ff bff0 	b.w	80093f0 <__sinit_lock_release>
 8009410:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009414:	6523      	str	r3, [r4, #80]	; 0x50
 8009416:	4b13      	ldr	r3, [pc, #76]	; (8009464 <__sinit+0x68>)
 8009418:	4a13      	ldr	r2, [pc, #76]	; (8009468 <__sinit+0x6c>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	62a2      	str	r2, [r4, #40]	; 0x28
 800941e:	42a3      	cmp	r3, r4
 8009420:	bf04      	itt	eq
 8009422:	2301      	moveq	r3, #1
 8009424:	61a3      	streq	r3, [r4, #24]
 8009426:	4620      	mov	r0, r4
 8009428:	f000 f820 	bl	800946c <__sfp>
 800942c:	6060      	str	r0, [r4, #4]
 800942e:	4620      	mov	r0, r4
 8009430:	f000 f81c 	bl	800946c <__sfp>
 8009434:	60a0      	str	r0, [r4, #8]
 8009436:	4620      	mov	r0, r4
 8009438:	f000 f818 	bl	800946c <__sfp>
 800943c:	2200      	movs	r2, #0
 800943e:	60e0      	str	r0, [r4, #12]
 8009440:	2104      	movs	r1, #4
 8009442:	6860      	ldr	r0, [r4, #4]
 8009444:	f7ff ff82 	bl	800934c <std>
 8009448:	68a0      	ldr	r0, [r4, #8]
 800944a:	2201      	movs	r2, #1
 800944c:	2109      	movs	r1, #9
 800944e:	f7ff ff7d 	bl	800934c <std>
 8009452:	68e0      	ldr	r0, [r4, #12]
 8009454:	2202      	movs	r2, #2
 8009456:	2112      	movs	r1, #18
 8009458:	f7ff ff78 	bl	800934c <std>
 800945c:	2301      	movs	r3, #1
 800945e:	61a3      	str	r3, [r4, #24]
 8009460:	e7d2      	b.n	8009408 <__sinit+0xc>
 8009462:	bf00      	nop
 8009464:	08009a04 	.word	0x08009a04
 8009468:	08009395 	.word	0x08009395

0800946c <__sfp>:
 800946c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946e:	4607      	mov	r7, r0
 8009470:	f7ff ffac 	bl	80093cc <__sfp_lock_acquire>
 8009474:	4b1e      	ldr	r3, [pc, #120]	; (80094f0 <__sfp+0x84>)
 8009476:	681e      	ldr	r6, [r3, #0]
 8009478:	69b3      	ldr	r3, [r6, #24]
 800947a:	b913      	cbnz	r3, 8009482 <__sfp+0x16>
 800947c:	4630      	mov	r0, r6
 800947e:	f7ff ffbd 	bl	80093fc <__sinit>
 8009482:	3648      	adds	r6, #72	; 0x48
 8009484:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009488:	3b01      	subs	r3, #1
 800948a:	d503      	bpl.n	8009494 <__sfp+0x28>
 800948c:	6833      	ldr	r3, [r6, #0]
 800948e:	b30b      	cbz	r3, 80094d4 <__sfp+0x68>
 8009490:	6836      	ldr	r6, [r6, #0]
 8009492:	e7f7      	b.n	8009484 <__sfp+0x18>
 8009494:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009498:	b9d5      	cbnz	r5, 80094d0 <__sfp+0x64>
 800949a:	4b16      	ldr	r3, [pc, #88]	; (80094f4 <__sfp+0x88>)
 800949c:	60e3      	str	r3, [r4, #12]
 800949e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094a2:	6665      	str	r5, [r4, #100]	; 0x64
 80094a4:	f000 f847 	bl	8009536 <__retarget_lock_init_recursive>
 80094a8:	f7ff ff96 	bl	80093d8 <__sfp_lock_release>
 80094ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094b4:	6025      	str	r5, [r4, #0]
 80094b6:	61a5      	str	r5, [r4, #24]
 80094b8:	2208      	movs	r2, #8
 80094ba:	4629      	mov	r1, r5
 80094bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094c0:	f7fd fa9c 	bl	80069fc <memset>
 80094c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094cc:	4620      	mov	r0, r4
 80094ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094d0:	3468      	adds	r4, #104	; 0x68
 80094d2:	e7d9      	b.n	8009488 <__sfp+0x1c>
 80094d4:	2104      	movs	r1, #4
 80094d6:	4638      	mov	r0, r7
 80094d8:	f7ff ff62 	bl	80093a0 <__sfmoreglue>
 80094dc:	4604      	mov	r4, r0
 80094de:	6030      	str	r0, [r6, #0]
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d1d5      	bne.n	8009490 <__sfp+0x24>
 80094e4:	f7ff ff78 	bl	80093d8 <__sfp_lock_release>
 80094e8:	230c      	movs	r3, #12
 80094ea:	603b      	str	r3, [r7, #0]
 80094ec:	e7ee      	b.n	80094cc <__sfp+0x60>
 80094ee:	bf00      	nop
 80094f0:	08009a04 	.word	0x08009a04
 80094f4:	ffff0001 	.word	0xffff0001

080094f8 <_fwalk_reent>:
 80094f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094fc:	4606      	mov	r6, r0
 80094fe:	4688      	mov	r8, r1
 8009500:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009504:	2700      	movs	r7, #0
 8009506:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800950a:	f1b9 0901 	subs.w	r9, r9, #1
 800950e:	d505      	bpl.n	800951c <_fwalk_reent+0x24>
 8009510:	6824      	ldr	r4, [r4, #0]
 8009512:	2c00      	cmp	r4, #0
 8009514:	d1f7      	bne.n	8009506 <_fwalk_reent+0xe>
 8009516:	4638      	mov	r0, r7
 8009518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800951c:	89ab      	ldrh	r3, [r5, #12]
 800951e:	2b01      	cmp	r3, #1
 8009520:	d907      	bls.n	8009532 <_fwalk_reent+0x3a>
 8009522:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009526:	3301      	adds	r3, #1
 8009528:	d003      	beq.n	8009532 <_fwalk_reent+0x3a>
 800952a:	4629      	mov	r1, r5
 800952c:	4630      	mov	r0, r6
 800952e:	47c0      	blx	r8
 8009530:	4307      	orrs	r7, r0
 8009532:	3568      	adds	r5, #104	; 0x68
 8009534:	e7e9      	b.n	800950a <_fwalk_reent+0x12>

08009536 <__retarget_lock_init_recursive>:
 8009536:	4770      	bx	lr

08009538 <__retarget_lock_acquire_recursive>:
 8009538:	4770      	bx	lr

0800953a <__retarget_lock_release_recursive>:
 800953a:	4770      	bx	lr

0800953c <__swhatbuf_r>:
 800953c:	b570      	push	{r4, r5, r6, lr}
 800953e:	460e      	mov	r6, r1
 8009540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009544:	2900      	cmp	r1, #0
 8009546:	b096      	sub	sp, #88	; 0x58
 8009548:	4614      	mov	r4, r2
 800954a:	461d      	mov	r5, r3
 800954c:	da08      	bge.n	8009560 <__swhatbuf_r+0x24>
 800954e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	602a      	str	r2, [r5, #0]
 8009556:	061a      	lsls	r2, r3, #24
 8009558:	d410      	bmi.n	800957c <__swhatbuf_r+0x40>
 800955a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800955e:	e00e      	b.n	800957e <__swhatbuf_r+0x42>
 8009560:	466a      	mov	r2, sp
 8009562:	f000 f903 	bl	800976c <_fstat_r>
 8009566:	2800      	cmp	r0, #0
 8009568:	dbf1      	blt.n	800954e <__swhatbuf_r+0x12>
 800956a:	9a01      	ldr	r2, [sp, #4]
 800956c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009570:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009574:	425a      	negs	r2, r3
 8009576:	415a      	adcs	r2, r3
 8009578:	602a      	str	r2, [r5, #0]
 800957a:	e7ee      	b.n	800955a <__swhatbuf_r+0x1e>
 800957c:	2340      	movs	r3, #64	; 0x40
 800957e:	2000      	movs	r0, #0
 8009580:	6023      	str	r3, [r4, #0]
 8009582:	b016      	add	sp, #88	; 0x58
 8009584:	bd70      	pop	{r4, r5, r6, pc}
	...

08009588 <__smakebuf_r>:
 8009588:	898b      	ldrh	r3, [r1, #12]
 800958a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800958c:	079d      	lsls	r5, r3, #30
 800958e:	4606      	mov	r6, r0
 8009590:	460c      	mov	r4, r1
 8009592:	d507      	bpl.n	80095a4 <__smakebuf_r+0x1c>
 8009594:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	6123      	str	r3, [r4, #16]
 800959c:	2301      	movs	r3, #1
 800959e:	6163      	str	r3, [r4, #20]
 80095a0:	b002      	add	sp, #8
 80095a2:	bd70      	pop	{r4, r5, r6, pc}
 80095a4:	ab01      	add	r3, sp, #4
 80095a6:	466a      	mov	r2, sp
 80095a8:	f7ff ffc8 	bl	800953c <__swhatbuf_r>
 80095ac:	9900      	ldr	r1, [sp, #0]
 80095ae:	4605      	mov	r5, r0
 80095b0:	4630      	mov	r0, r6
 80095b2:	f7ff f963 	bl	800887c <_malloc_r>
 80095b6:	b948      	cbnz	r0, 80095cc <__smakebuf_r+0x44>
 80095b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095bc:	059a      	lsls	r2, r3, #22
 80095be:	d4ef      	bmi.n	80095a0 <__smakebuf_r+0x18>
 80095c0:	f023 0303 	bic.w	r3, r3, #3
 80095c4:	f043 0302 	orr.w	r3, r3, #2
 80095c8:	81a3      	strh	r3, [r4, #12]
 80095ca:	e7e3      	b.n	8009594 <__smakebuf_r+0xc>
 80095cc:	4b0d      	ldr	r3, [pc, #52]	; (8009604 <__smakebuf_r+0x7c>)
 80095ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80095d0:	89a3      	ldrh	r3, [r4, #12]
 80095d2:	6020      	str	r0, [r4, #0]
 80095d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095d8:	81a3      	strh	r3, [r4, #12]
 80095da:	9b00      	ldr	r3, [sp, #0]
 80095dc:	6163      	str	r3, [r4, #20]
 80095de:	9b01      	ldr	r3, [sp, #4]
 80095e0:	6120      	str	r0, [r4, #16]
 80095e2:	b15b      	cbz	r3, 80095fc <__smakebuf_r+0x74>
 80095e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095e8:	4630      	mov	r0, r6
 80095ea:	f000 f8d1 	bl	8009790 <_isatty_r>
 80095ee:	b128      	cbz	r0, 80095fc <__smakebuf_r+0x74>
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	f023 0303 	bic.w	r3, r3, #3
 80095f6:	f043 0301 	orr.w	r3, r3, #1
 80095fa:	81a3      	strh	r3, [r4, #12]
 80095fc:	89a0      	ldrh	r0, [r4, #12]
 80095fe:	4305      	orrs	r5, r0
 8009600:	81a5      	strh	r5, [r4, #12]
 8009602:	e7cd      	b.n	80095a0 <__smakebuf_r+0x18>
 8009604:	08009395 	.word	0x08009395

08009608 <_malloc_usable_size_r>:
 8009608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800960c:	1f18      	subs	r0, r3, #4
 800960e:	2b00      	cmp	r3, #0
 8009610:	bfbc      	itt	lt
 8009612:	580b      	ldrlt	r3, [r1, r0]
 8009614:	18c0      	addlt	r0, r0, r3
 8009616:	4770      	bx	lr

08009618 <_raise_r>:
 8009618:	291f      	cmp	r1, #31
 800961a:	b538      	push	{r3, r4, r5, lr}
 800961c:	4604      	mov	r4, r0
 800961e:	460d      	mov	r5, r1
 8009620:	d904      	bls.n	800962c <_raise_r+0x14>
 8009622:	2316      	movs	r3, #22
 8009624:	6003      	str	r3, [r0, #0]
 8009626:	f04f 30ff 	mov.w	r0, #4294967295
 800962a:	bd38      	pop	{r3, r4, r5, pc}
 800962c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800962e:	b112      	cbz	r2, 8009636 <_raise_r+0x1e>
 8009630:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009634:	b94b      	cbnz	r3, 800964a <_raise_r+0x32>
 8009636:	4620      	mov	r0, r4
 8009638:	f000 f830 	bl	800969c <_getpid_r>
 800963c:	462a      	mov	r2, r5
 800963e:	4601      	mov	r1, r0
 8009640:	4620      	mov	r0, r4
 8009642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009646:	f000 b817 	b.w	8009678 <_kill_r>
 800964a:	2b01      	cmp	r3, #1
 800964c:	d00a      	beq.n	8009664 <_raise_r+0x4c>
 800964e:	1c59      	adds	r1, r3, #1
 8009650:	d103      	bne.n	800965a <_raise_r+0x42>
 8009652:	2316      	movs	r3, #22
 8009654:	6003      	str	r3, [r0, #0]
 8009656:	2001      	movs	r0, #1
 8009658:	e7e7      	b.n	800962a <_raise_r+0x12>
 800965a:	2400      	movs	r4, #0
 800965c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009660:	4628      	mov	r0, r5
 8009662:	4798      	blx	r3
 8009664:	2000      	movs	r0, #0
 8009666:	e7e0      	b.n	800962a <_raise_r+0x12>

08009668 <raise>:
 8009668:	4b02      	ldr	r3, [pc, #8]	; (8009674 <raise+0xc>)
 800966a:	4601      	mov	r1, r0
 800966c:	6818      	ldr	r0, [r3, #0]
 800966e:	f7ff bfd3 	b.w	8009618 <_raise_r>
 8009672:	bf00      	nop
 8009674:	200001d4 	.word	0x200001d4

08009678 <_kill_r>:
 8009678:	b538      	push	{r3, r4, r5, lr}
 800967a:	4d07      	ldr	r5, [pc, #28]	; (8009698 <_kill_r+0x20>)
 800967c:	2300      	movs	r3, #0
 800967e:	4604      	mov	r4, r0
 8009680:	4608      	mov	r0, r1
 8009682:	4611      	mov	r1, r2
 8009684:	602b      	str	r3, [r5, #0]
 8009686:	f7f8 fded 	bl	8002264 <_kill>
 800968a:	1c43      	adds	r3, r0, #1
 800968c:	d102      	bne.n	8009694 <_kill_r+0x1c>
 800968e:	682b      	ldr	r3, [r5, #0]
 8009690:	b103      	cbz	r3, 8009694 <_kill_r+0x1c>
 8009692:	6023      	str	r3, [r4, #0]
 8009694:	bd38      	pop	{r3, r4, r5, pc}
 8009696:	bf00      	nop
 8009698:	20000638 	.word	0x20000638

0800969c <_getpid_r>:
 800969c:	f7f8 bdda 	b.w	8002254 <_getpid>

080096a0 <__sread>:
 80096a0:	b510      	push	{r4, lr}
 80096a2:	460c      	mov	r4, r1
 80096a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096a8:	f000 f894 	bl	80097d4 <_read_r>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	bfab      	itete	ge
 80096b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096b2:	89a3      	ldrhlt	r3, [r4, #12]
 80096b4:	181b      	addge	r3, r3, r0
 80096b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096ba:	bfac      	ite	ge
 80096bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80096be:	81a3      	strhlt	r3, [r4, #12]
 80096c0:	bd10      	pop	{r4, pc}

080096c2 <__swrite>:
 80096c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c6:	461f      	mov	r7, r3
 80096c8:	898b      	ldrh	r3, [r1, #12]
 80096ca:	05db      	lsls	r3, r3, #23
 80096cc:	4605      	mov	r5, r0
 80096ce:	460c      	mov	r4, r1
 80096d0:	4616      	mov	r6, r2
 80096d2:	d505      	bpl.n	80096e0 <__swrite+0x1e>
 80096d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096d8:	2302      	movs	r3, #2
 80096da:	2200      	movs	r2, #0
 80096dc:	f000 f868 	bl	80097b0 <_lseek_r>
 80096e0:	89a3      	ldrh	r3, [r4, #12]
 80096e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096ea:	81a3      	strh	r3, [r4, #12]
 80096ec:	4632      	mov	r2, r6
 80096ee:	463b      	mov	r3, r7
 80096f0:	4628      	mov	r0, r5
 80096f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096f6:	f000 b817 	b.w	8009728 <_write_r>

080096fa <__sseek>:
 80096fa:	b510      	push	{r4, lr}
 80096fc:	460c      	mov	r4, r1
 80096fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009702:	f000 f855 	bl	80097b0 <_lseek_r>
 8009706:	1c43      	adds	r3, r0, #1
 8009708:	89a3      	ldrh	r3, [r4, #12]
 800970a:	bf15      	itete	ne
 800970c:	6560      	strne	r0, [r4, #84]	; 0x54
 800970e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009712:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009716:	81a3      	strheq	r3, [r4, #12]
 8009718:	bf18      	it	ne
 800971a:	81a3      	strhne	r3, [r4, #12]
 800971c:	bd10      	pop	{r4, pc}

0800971e <__sclose>:
 800971e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009722:	f000 b813 	b.w	800974c <_close_r>
	...

08009728 <_write_r>:
 8009728:	b538      	push	{r3, r4, r5, lr}
 800972a:	4d07      	ldr	r5, [pc, #28]	; (8009748 <_write_r+0x20>)
 800972c:	4604      	mov	r4, r0
 800972e:	4608      	mov	r0, r1
 8009730:	4611      	mov	r1, r2
 8009732:	2200      	movs	r2, #0
 8009734:	602a      	str	r2, [r5, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	f7f8 fdcb 	bl	80022d2 <_write>
 800973c:	1c43      	adds	r3, r0, #1
 800973e:	d102      	bne.n	8009746 <_write_r+0x1e>
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	b103      	cbz	r3, 8009746 <_write_r+0x1e>
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	bd38      	pop	{r3, r4, r5, pc}
 8009748:	20000638 	.word	0x20000638

0800974c <_close_r>:
 800974c:	b538      	push	{r3, r4, r5, lr}
 800974e:	4d06      	ldr	r5, [pc, #24]	; (8009768 <_close_r+0x1c>)
 8009750:	2300      	movs	r3, #0
 8009752:	4604      	mov	r4, r0
 8009754:	4608      	mov	r0, r1
 8009756:	602b      	str	r3, [r5, #0]
 8009758:	f7f8 fdd7 	bl	800230a <_close>
 800975c:	1c43      	adds	r3, r0, #1
 800975e:	d102      	bne.n	8009766 <_close_r+0x1a>
 8009760:	682b      	ldr	r3, [r5, #0]
 8009762:	b103      	cbz	r3, 8009766 <_close_r+0x1a>
 8009764:	6023      	str	r3, [r4, #0]
 8009766:	bd38      	pop	{r3, r4, r5, pc}
 8009768:	20000638 	.word	0x20000638

0800976c <_fstat_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	4d07      	ldr	r5, [pc, #28]	; (800978c <_fstat_r+0x20>)
 8009770:	2300      	movs	r3, #0
 8009772:	4604      	mov	r4, r0
 8009774:	4608      	mov	r0, r1
 8009776:	4611      	mov	r1, r2
 8009778:	602b      	str	r3, [r5, #0]
 800977a:	f7f8 fdd2 	bl	8002322 <_fstat>
 800977e:	1c43      	adds	r3, r0, #1
 8009780:	d102      	bne.n	8009788 <_fstat_r+0x1c>
 8009782:	682b      	ldr	r3, [r5, #0]
 8009784:	b103      	cbz	r3, 8009788 <_fstat_r+0x1c>
 8009786:	6023      	str	r3, [r4, #0]
 8009788:	bd38      	pop	{r3, r4, r5, pc}
 800978a:	bf00      	nop
 800978c:	20000638 	.word	0x20000638

08009790 <_isatty_r>:
 8009790:	b538      	push	{r3, r4, r5, lr}
 8009792:	4d06      	ldr	r5, [pc, #24]	; (80097ac <_isatty_r+0x1c>)
 8009794:	2300      	movs	r3, #0
 8009796:	4604      	mov	r4, r0
 8009798:	4608      	mov	r0, r1
 800979a:	602b      	str	r3, [r5, #0]
 800979c:	f7f8 fdd1 	bl	8002342 <_isatty>
 80097a0:	1c43      	adds	r3, r0, #1
 80097a2:	d102      	bne.n	80097aa <_isatty_r+0x1a>
 80097a4:	682b      	ldr	r3, [r5, #0]
 80097a6:	b103      	cbz	r3, 80097aa <_isatty_r+0x1a>
 80097a8:	6023      	str	r3, [r4, #0]
 80097aa:	bd38      	pop	{r3, r4, r5, pc}
 80097ac:	20000638 	.word	0x20000638

080097b0 <_lseek_r>:
 80097b0:	b538      	push	{r3, r4, r5, lr}
 80097b2:	4d07      	ldr	r5, [pc, #28]	; (80097d0 <_lseek_r+0x20>)
 80097b4:	4604      	mov	r4, r0
 80097b6:	4608      	mov	r0, r1
 80097b8:	4611      	mov	r1, r2
 80097ba:	2200      	movs	r2, #0
 80097bc:	602a      	str	r2, [r5, #0]
 80097be:	461a      	mov	r2, r3
 80097c0:	f7f8 fdca 	bl	8002358 <_lseek>
 80097c4:	1c43      	adds	r3, r0, #1
 80097c6:	d102      	bne.n	80097ce <_lseek_r+0x1e>
 80097c8:	682b      	ldr	r3, [r5, #0]
 80097ca:	b103      	cbz	r3, 80097ce <_lseek_r+0x1e>
 80097cc:	6023      	str	r3, [r4, #0]
 80097ce:	bd38      	pop	{r3, r4, r5, pc}
 80097d0:	20000638 	.word	0x20000638

080097d4 <_read_r>:
 80097d4:	b538      	push	{r3, r4, r5, lr}
 80097d6:	4d07      	ldr	r5, [pc, #28]	; (80097f4 <_read_r+0x20>)
 80097d8:	4604      	mov	r4, r0
 80097da:	4608      	mov	r0, r1
 80097dc:	4611      	mov	r1, r2
 80097de:	2200      	movs	r2, #0
 80097e0:	602a      	str	r2, [r5, #0]
 80097e2:	461a      	mov	r2, r3
 80097e4:	f7f8 fd58 	bl	8002298 <_read>
 80097e8:	1c43      	adds	r3, r0, #1
 80097ea:	d102      	bne.n	80097f2 <_read_r+0x1e>
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	b103      	cbz	r3, 80097f2 <_read_r+0x1e>
 80097f0:	6023      	str	r3, [r4, #0]
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	20000638 	.word	0x20000638

080097f8 <_init>:
 80097f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fa:	bf00      	nop
 80097fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097fe:	bc08      	pop	{r3}
 8009800:	469e      	mov	lr, r3
 8009802:	4770      	bx	lr

08009804 <_fini>:
 8009804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009806:	bf00      	nop
 8009808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800980a:	bc08      	pop	{r3}
 800980c:	469e      	mov	lr, r3
 800980e:	4770      	bx	lr
