
G474_Verita_Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009508  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  080096e8  080096e8  000196e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c4c  08009c4c  0002039c  2**0
                  CONTENTS
  4 .ARM          00000008  08009c4c  08009c4c  00019c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c54  08009c54  0002039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c54  08009c54  00019c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c58  08009c58  00019c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000039c  20000000  08009c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  2000039c  08009ff8  0002039c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000774  08009ff8  00020774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002039c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d7e  00000000  00000000  0002040f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027be  00000000  00000000  0003318d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  00035950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b9c  00000000  00000000  00036878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003ac1  00000000  00000000  00037414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013794  00000000  00000000  0003aed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001022bd  00000000  00000000  0004e669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000050fc  00000000  00000000  00150928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00155a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000039c 	.word	0x2000039c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080096d0 	.word	0x080096d0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003a0 	.word	0x200003a0
 800021c:	080096d0 	.word	0x080096d0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <gpio_selftest_input_pupdr_1>:
//// lists All port - pin to inspect first // avoid special pin like osilators / UART
//// GPIO_PIN_x is in bit position format (0 2 4 8 16 ...) which loss if stored in that form and log2() to calculate back



uint32_t gpio_selftest_input_pupdr_1(GPIO_TypeDef* GPIOx,uint16_t *Lista_GPIOx){
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]

	uint32_t result = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]

	uint32_t temp_mode = GPIOx->MODER;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	617b      	str	r3, [r7, #20]
	uint32_t temp_pupdr = GPIOx->PUPDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	613b      	str	r3, [r7, #16]

	//uint16_t sizearr = sizeof(Lista_GPIOx); // / sizeof(List_GPIOC[0])
	//// use instead of sizeof which return array length input into function as 4
	uint16_t sizearr = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	81fb      	strh	r3, [r7, #14]
	for(register int i = 0; i <= 17 ;i++){
 8000fb2:	2400      	movs	r4, #0
 8000fb4:	e00a      	b.n	8000fcc <gpio_selftest_input_pupdr_1+0x38>
		if(Lista_GPIOx[i] == 20){
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	2b14      	cmp	r3, #20
 8000fc2:	d006      	beq.n	8000fd2 <gpio_selftest_input_pupdr_1+0x3e>
			break;
		}else{
			sizearr++;
 8000fc4:	89fb      	ldrh	r3, [r7, #14]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	81fb      	strh	r3, [r7, #14]
	for(register int i = 0; i <= 17 ;i++){
 8000fca:	3401      	adds	r4, #1
 8000fcc:	2c11      	cmp	r4, #17
 8000fce:	ddf2      	ble.n	8000fb6 <gpio_selftest_input_pupdr_1+0x22>
 8000fd0:	e000      	b.n	8000fd4 <gpio_selftest_input_pupdr_1+0x40>
			break;
 8000fd2:	bf00      	nop
		}
	}


	//// ------------------ Input PULLUP ------------------------------
	for(register int i = 0;i < sizearr; i++){
 8000fd4:	2400      	movs	r4, #0
 8000fd6:	e00e      	b.n	8000ff6 <gpio_selftest_input_pupdr_1+0x62>
		temp_mode &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 8000fd8:	4623      	mov	r3, r4
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	461a      	mov	r2, r3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	617b      	str	r3, [r7, #20]
	for(register int i = 0;i < sizearr; i++){
 8000ff4:	3401      	adds	r4, #1
 8000ff6:	89fb      	ldrh	r3, [r7, #14]
 8000ff8:	429c      	cmp	r4, r3
 8000ffa:	dbed      	blt.n	8000fd8 <gpio_selftest_input_pupdr_1+0x44>
		temp_mode |= ( GPIO_MODE_INPUT << (Lista_GPIOx[i] * 2U));
	}
	GPIOx->MODER = temp_mode;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	601a      	str	r2, [r3, #0]


	for(register int i = 0;i < sizearr; i++){
 8001002:	2400      	movs	r4, #0
 8001004:	e01a      	b.n	800103c <gpio_selftest_input_pupdr_1+0xa8>
		temp_pupdr &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 8001006:	4623      	mov	r3, r4
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	4413      	add	r3, r2
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	461a      	mov	r2, r3
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
		temp_pupdr |= ( GPIO_PULLUP << (Lista_GPIOx[i] * 2U));
 8001022:	4623      	mov	r3, r4
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	4413      	add	r3, r2
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2201      	movs	r2, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
	for(register int i = 0;i < sizearr; i++){
 800103a:	3401      	adds	r4, #1
 800103c:	89fb      	ldrh	r3, [r7, #14]
 800103e:	429c      	cmp	r4, r3
 8001040:	dbe1      	blt.n	8001006 <gpio_selftest_input_pupdr_1+0x72>
	}
	GPIOx->PUPDR = temp_pupdr;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	60da      	str	r2, [r3, #12]
	HAL_Delay(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f001 fa71 	bl	8002530 <HAL_Delay>
	result |= (GPIOx->IDR) << 16;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	041b      	lsls	r3, r3, #16
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	4313      	orrs	r3, r2
 8001058:	60bb      	str	r3, [r7, #8]

	//// ------------------ Input PULLDOWN ------------------------------
	for(register int i = 0;i < sizearr; i++){
 800105a:	2400      	movs	r4, #0
 800105c:	e01a      	b.n	8001094 <gpio_selftest_input_pupdr_1+0x100>
		temp_pupdr &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 800105e:	4623      	mov	r3, r4
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	4413      	add	r3, r2
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	461a      	mov	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
		temp_pupdr |= ( GPIO_PULLDOWN << (Lista_GPIOx[i] * 2U));
 800107a:	4623      	mov	r3, r4
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	4413      	add	r3, r2
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2202      	movs	r2, #2
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
	for(register int i = 0;i < sizearr; i++){
 8001092:	3401      	adds	r4, #1
 8001094:	89fb      	ldrh	r3, [r7, #14]
 8001096:	429c      	cmp	r4, r3
 8001098:	dbe1      	blt.n	800105e <gpio_selftest_input_pupdr_1+0xca>
	}
	GPIOx->PUPDR = temp_pupdr;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	60da      	str	r2, [r3, #12]
	HAL_Delay(5);
 80010a0:	2005      	movs	r0, #5
 80010a2:	f001 fa45 	bl	8002530 <HAL_Delay>
	result |= GPIOx->IDR;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]

	return result;
 80010b0:	68bb      	ldr	r3, [r7, #8]

	}
 80010b2:	4618      	mov	r0, r3
 80010b4:	371c      	adds	r7, #28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd90      	pop	{r4, r7, pc}

080010ba <gpio_selftest_output_pp_1>:

//// output pushpull
uint32_t gpio_selftest_output_pp_1(GPIO_TypeDef* GPIOx,uint16_t *Lista_GPIOx){
 80010ba:	b590      	push	{r4, r7, lr}
 80010bc:	b087      	sub	sp, #28
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	6039      	str	r1, [r7, #0]
	uint32_t temp_mode = GPIOx->MODER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	617b      	str	r3, [r7, #20]
	uint32_t temp_bsrr = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
	uint32_t result = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]

	uint16_t sizearr = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	81fb      	strh	r3, [r7, #14]
	//// use instead of sizeof
	for(register int i = 0; i <= 17 ;i++){
 80010d6:	2400      	movs	r4, #0
 80010d8:	e00a      	b.n	80010f0 <gpio_selftest_output_pp_1+0x36>
		if(Lista_GPIOx[i] == 20){
 80010da:	4623      	mov	r3, r4
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	4413      	add	r3, r2
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	2b14      	cmp	r3, #20
 80010e6:	d006      	beq.n	80010f6 <gpio_selftest_output_pp_1+0x3c>
			break;
		}else{
			sizearr++;
 80010e8:	89fb      	ldrh	r3, [r7, #14]
 80010ea:	3301      	adds	r3, #1
 80010ec:	81fb      	strh	r3, [r7, #14]
	for(register int i = 0; i <= 17 ;i++){
 80010ee:	3401      	adds	r4, #1
 80010f0:	2c11      	cmp	r4, #17
 80010f2:	ddf2      	ble.n	80010da <gpio_selftest_output_pp_1+0x20>
 80010f4:	e000      	b.n	80010f8 <gpio_selftest_output_pp_1+0x3e>
			break;
 80010f6:	bf00      	nop
		}
	}

	///// -------------- Set Output Pushpull ---------------------
	for(register int i = 0;i < sizearr; i++){
 80010f8:	2400      	movs	r4, #0
 80010fa:	e01a      	b.n	8001132 <gpio_selftest_output_pp_1+0x78>
			temp_mode &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 80010fc:	4623      	mov	r3, r4
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	4413      	add	r3, r2
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2203      	movs	r2, #3
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	461a      	mov	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	4013      	ands	r3, r2
 8001116:	617b      	str	r3, [r7, #20]
			temp_mode |= ( GPIO_MODE_OUTPUT_PP << (Lista_GPIOx[i] * 2U));
 8001118:	4623      	mov	r3, r4
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	4413      	add	r3, r2
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	2201      	movs	r2, #1
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4313      	orrs	r3, r2
 800112e:	617b      	str	r3, [r7, #20]
	for(register int i = 0;i < sizearr; i++){
 8001130:	3401      	adds	r4, #1
 8001132:	89fb      	ldrh	r3, [r7, #14]
 8001134:	429c      	cmp	r4, r3
 8001136:	dbe1      	blt.n	80010fc <gpio_selftest_output_pp_1+0x42>
		}
	GPIOx->MODER = temp_mode;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	601a      	str	r2, [r3, #0]

	//// write SET to BSRR
	for(register int i = 0;i < sizearr; i++){
 800113e:	2400      	movs	r4, #0
 8001140:	e019      	b.n	8001176 <gpio_selftest_output_pp_1+0xbc>
			temp_bsrr &= ~( 0b1 << Lista_GPIOx[i]); // clear only register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 8001142:	4623      	mov	r3, r4
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	4413      	add	r3, r2
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	2301      	movs	r3, #1
 8001150:	4093      	lsls	r3, r2
 8001152:	43db      	mvns	r3, r3
 8001154:	461a      	mov	r2, r3
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
			temp_bsrr |= ( GPIO_PIN_SET << Lista_GPIOx[i]);
 800115c:	4623      	mov	r3, r4
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	4413      	add	r3, r2
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	2301      	movs	r3, #1
 800116a:	4093      	lsls	r3, r2
 800116c:	461a      	mov	r2, r3
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
	for(register int i = 0;i < sizearr; i++){
 8001174:	3401      	adds	r4, #1
 8001176:	89fb      	ldrh	r3, [r7, #14]
 8001178:	429c      	cmp	r4, r3
 800117a:	dbe2      	blt.n	8001142 <gpio_selftest_output_pp_1+0x88>
		}
	GPIOx->BSRR = temp_bsrr; // insert 1 into SET position
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	619a      	str	r2, [r3, #24]

	//// Read Back #1 get set
	HAL_Delay(1);
 8001182:	2001      	movs	r0, #1
 8001184:	f001 f9d4 	bl	8002530 <HAL_Delay>
	result |= (GPIOx->IDR) << 16;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	041b      	lsls	r3, r3, #16
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	4313      	orrs	r3, r2
 8001192:	60bb      	str	r3, [r7, #8]
	HAL_Delay(1);
 8001194:	2001      	movs	r0, #1
 8001196:	f001 f9cb 	bl	8002530 <HAL_Delay>

	//// write RESET to BSRR
	GPIOx->BSRR = temp_bsrr << 16; // insert 1 into RESET position << 16
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	041a      	lsls	r2, r3, #16
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	619a      	str	r2, [r3, #24]
	//// Read Back #2 get Reset
	HAL_Delay(1);
 80011a2:	2001      	movs	r0, #1
 80011a4:	f001 f9c4 	bl	8002530 <HAL_Delay>
	result |= GPIOx->IDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]

	return result;
 80011b2:	68bb      	ldr	r3, [r7, #8]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	371c      	adds	r7, #28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd90      	pop	{r4, r7, pc}

080011bc <gpio_selftest_output_od_1>:

//// output opendrain
/* Open drain mode: A “0” in the Output register activates the N-MOS whereas a “1”
 * in the Output register leaves the port in Hi-Z (the P-MOS is never activated)
 * */
uint32_t gpio_selftest_output_od_1(GPIO_TypeDef* GPIOx,uint16_t *Lista_GPIOx){
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
	uint32_t temp_mode = GPIOx->MODER;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	61fb      	str	r3, [r7, #28]
	uint32_t temp_bsrr = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
	uint32_t temp_pupdr = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
	uint32_t result = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]

	uint16_t sizearr = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	827b      	strh	r3, [r7, #18]
	//// use instead of sizeof
	for(register int i = 0; i <= 17 ;i++){
 80011dc:	2400      	movs	r4, #0
 80011de:	e00a      	b.n	80011f6 <gpio_selftest_output_od_1+0x3a>
		if(Lista_GPIOx[i] == 20){
 80011e0:	4623      	mov	r3, r4
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	2b14      	cmp	r3, #20
 80011ec:	d006      	beq.n	80011fc <gpio_selftest_output_od_1+0x40>
			break;
		}else{
			sizearr++;
 80011ee:	8a7b      	ldrh	r3, [r7, #18]
 80011f0:	3301      	adds	r3, #1
 80011f2:	827b      	strh	r3, [r7, #18]
	for(register int i = 0; i <= 17 ;i++){
 80011f4:	3401      	adds	r4, #1
 80011f6:	2c11      	cmp	r4, #17
 80011f8:	ddf2      	ble.n	80011e0 <gpio_selftest_output_od_1+0x24>
 80011fa:	e000      	b.n	80011fe <gpio_selftest_output_od_1+0x42>
			break;
 80011fc:	bf00      	nop
		}
	}

	///// -------------- Set Output  opendrain ---------------------
	for(register int i = 0;i < sizearr; i++){
 80011fe:	2400      	movs	r4, #0
 8001200:	e01a      	b.n	8001238 <gpio_selftest_output_od_1+0x7c>
			temp_mode &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 8001202:	4623      	mov	r3, r4
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	4413      	add	r3, r2
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	461a      	mov	r2, r3
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	4013      	ands	r3, r2
 800121c:	61fb      	str	r3, [r7, #28]
			temp_mode |= ( GPIO_MODE_OUTPUT_OD << (Lista_GPIOx[i] * 2U));
 800121e:	4623      	mov	r3, r4
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	4413      	add	r3, r2
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	2211      	movs	r2, #17
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	4313      	orrs	r3, r2
 8001234:	61fb      	str	r3, [r7, #28]
	for(register int i = 0;i < sizearr; i++){
 8001236:	3401      	adds	r4, #1
 8001238:	8a7b      	ldrh	r3, [r7, #18]
 800123a:	429c      	cmp	r4, r3
 800123c:	dbe1      	blt.n	8001202 <gpio_selftest_output_od_1+0x46>
		}
	GPIOx->MODER = temp_mode;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	601a      	str	r2, [r3, #0]

	//// Set Pullup for Hi-Z State read
	for(register int i = 0;i < sizearr; i++){
 8001244:	2400      	movs	r4, #0
 8001246:	e01a      	b.n	800127e <gpio_selftest_output_od_1+0xc2>
		temp_pupdr &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 8001248:	4623      	mov	r3, r4
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	4413      	add	r3, r2
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	2203      	movs	r2, #3
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	461a      	mov	r2, r3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	4013      	ands	r3, r2
 8001262:	617b      	str	r3, [r7, #20]
		temp_pupdr |= ( GPIO_PULLUP << (Lista_GPIOx[i] * 2U));
 8001264:	4623      	mov	r3, r4
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	4413      	add	r3, r2
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	2201      	movs	r2, #1
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4313      	orrs	r3, r2
 800127a:	617b      	str	r3, [r7, #20]
	for(register int i = 0;i < sizearr; i++){
 800127c:	3401      	adds	r4, #1
 800127e:	8a7b      	ldrh	r3, [r7, #18]
 8001280:	429c      	cmp	r4, r3
 8001282:	dbe1      	blt.n	8001248 <gpio_selftest_output_od_1+0x8c>
	}
	GPIOx->PUPDR = temp_pupdr;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	60da      	str	r2, [r3, #12]

	//// write SET to BSRR
	for(register int i = 0;i < sizearr; i++){
 800128a:	2400      	movs	r4, #0
 800128c:	e019      	b.n	80012c2 <gpio_selftest_output_od_1+0x106>
			temp_bsrr &= ~( 0b1 << Lista_GPIOx[i]); // clear only register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 800128e:	4623      	mov	r3, r4
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	4413      	add	r3, r2
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	2301      	movs	r3, #1
 800129c:	4093      	lsls	r3, r2
 800129e:	43db      	mvns	r3, r3
 80012a0:	461a      	mov	r2, r3
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
			temp_bsrr |= ( GPIO_PIN_SET << Lista_GPIOx[i]);
 80012a8:	4623      	mov	r3, r4
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	2301      	movs	r3, #1
 80012b6:	4093      	lsls	r3, r2
 80012b8:	461a      	mov	r2, r3
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
	for(register int i = 0;i < sizearr; i++){
 80012c0:	3401      	adds	r4, #1
 80012c2:	8a7b      	ldrh	r3, [r7, #18]
 80012c4:	429c      	cmp	r4, r3
 80012c6:	dbe2      	blt.n	800128e <gpio_selftest_output_od_1+0xd2>
		}
	GPIOx->BSRR = temp_bsrr; // insert 1 into SET position
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	619a      	str	r2, [r3, #24]

	//// Read Back #1 get set
	HAL_Delay(1);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f001 f92e 	bl	8002530 <HAL_Delay>
	result |= (GPIOx->IDR) << 16;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	041b      	lsls	r3, r3, #16
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]
	HAL_Delay(1);
 80012e0:	2001      	movs	r0, #1
 80012e2:	f001 f925 	bl	8002530 <HAL_Delay>

	//// write RESET to BSRR
	GPIOx->BSRR = temp_bsrr << 16; // insert 1 into RESET position << 16
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	041a      	lsls	r2, r3, #16
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	619a      	str	r2, [r3, #24]
	//// Read Back #2 get Reset
	HAL_Delay(1);
 80012ee:	2001      	movs	r0, #1
 80012f0:	f001 f91e 	bl	8002530 <HAL_Delay>
	result |= GPIOx->IDR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]

	return result;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3724      	adds	r7, #36	; 0x24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd90      	pop	{r4, r7, pc}

08001308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001308:	b5b0      	push	{r4, r5, r7, lr}
 800130a:	b094      	sub	sp, #80	; 0x50
 800130c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130e:	f001 f89e 	bl	800244e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001312:	f000 fa5d 	bl	80017d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001316:	f000 fba5 	bl	8001a64 <MX_GPIO_Init>
  MX_DMA_Init();
 800131a:	f000 fb79 	bl	8001a10 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800131e:	f000 fb2d 	bl	800197c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001322:	f000 faa1 	bl	8001868 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  char temp[]="\r\n----------------- G474_Verita_Client --------------------\r\n";
 8001326:	4b57      	ldr	r3, [pc, #348]	; (8001484 <main+0x17c>)
 8001328:	463c      	mov	r4, r7
 800132a:	461d      	mov	r5, r3
 800132c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001338:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800133c:	c407      	stmia	r4!, {r0, r1, r2}
 800133e:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)temp, strlen(temp),10);
 8001340:	463b      	mov	r3, r7
 8001342:	4618      	mov	r0, r3
 8001344:	f7fe ffbc 	bl	80002c0 <strlen>
 8001348:	4603      	mov	r3, r0
 800134a:	b29a      	uxth	r2, r3
 800134c:	4639      	mov	r1, r7
 800134e:	230a      	movs	r3, #10
 8001350:	484d      	ldr	r0, [pc, #308]	; (8001488 <main+0x180>)
 8001352:	f004 fcdb 	bl	8005d0c <HAL_UART_Transmit>

  sprintf(uartTXBf, "Firmware ver: %08X \r\n ", FIRMWARE_VER);
 8001356:	4a4d      	ldr	r2, [pc, #308]	; (800148c <main+0x184>)
 8001358:	494d      	ldr	r1, [pc, #308]	; (8001490 <main+0x188>)
 800135a:	484e      	ldr	r0, [pc, #312]	; (8001494 <main+0x18c>)
 800135c:	f006 f848 	bl	80073f0 <siprintf>
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 8001360:	484c      	ldr	r0, [pc, #304]	; (8001494 <main+0x18c>)
 8001362:	f7fe ffad 	bl	80002c0 <strlen>
 8001366:	4603      	mov	r3, r0
 8001368:	b29a      	uxth	r2, r3
 800136a:	230a      	movs	r3, #10
 800136c:	4949      	ldr	r1, [pc, #292]	; (8001494 <main+0x18c>)
 800136e:	4846      	ldr	r0, [pc, #280]	; (8001488 <main+0x180>)
 8001370:	f004 fccc 	bl	8005d0c <HAL_UART_Transmit>

  //// ADC Start --------------------------
  //CPUTemprdINIT();
  //HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);

  HAL_ADC_Start_DMA(&hadc1, ADCRawread.u32, 6);
 8001374:	2206      	movs	r2, #6
 8001376:	4948      	ldr	r1, [pc, #288]	; (8001498 <main+0x190>)
 8001378:	4848      	ldr	r0, [pc, #288]	; (800149c <main+0x194>)
 800137a:	f001 fd01 	bl	8002d80 <HAL_ADC_Start_DMA>
  //HAL_ADC_Start_DMA(&hadc1, ADCRawreadc, 6);

  //// ------------- UART Recieve : Circular DMA here--------------------------
  //HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], RxbufferSize_VRT);
  VR_Cli.Mark.FirmwareVer = FIRMWARE_VER;
 800137e:	4b48      	ldr	r3, [pc, #288]	; (80014a0 <main+0x198>)
 8001380:	4a42      	ldr	r2, [pc, #264]	; (800148c <main+0x184>)
 8001382:	649a      	str	r2, [r3, #72]	; 0x48
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(HAL_GetTick() >= timestamp_one){
 8001384:	f001 f8c8 	bl	8002518 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	4b46      	ldr	r3, [pc, #280]	; (80014a4 <main+0x19c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	f0c0 8126 	bcc.w	80015e0 <main+0x2d8>
	  		  timestamp_one += 1000;
 8001394:	4b43      	ldr	r3, [pc, #268]	; (80014a4 <main+0x19c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800139c:	4a41      	ldr	r2, [pc, #260]	; (80014a4 <main+0x19c>)
 800139e:	6013      	str	r3, [r2, #0]
	  		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80013a0:	2120      	movs	r1, #32
 80013a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a6:	f003 fbf9 	bl	8004b9c <HAL_GPIO_TogglePin>

	  		  //cputmpraw = CPUTempread();

	  		  sprintf(uartTXBf, "\r\n - - - - - - - - VERITA - - - G474RE - - - - - BETA - - - - - -\r\n");
 80013aa:	493f      	ldr	r1, [pc, #252]	; (80014a8 <main+0x1a0>)
 80013ac:	4839      	ldr	r0, [pc, #228]	; (8001494 <main+0x18c>)
 80013ae:	f006 f81f 	bl	80073f0 <siprintf>
	  		  HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 80013b2:	4838      	ldr	r0, [pc, #224]	; (8001494 <main+0x18c>)
 80013b4:	f7fe ff84 	bl	80002c0 <strlen>
 80013b8:	4603      	mov	r3, r0
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	230a      	movs	r3, #10
 80013be:	4935      	ldr	r1, [pc, #212]	; (8001494 <main+0x18c>)
 80013c0:	4831      	ldr	r0, [pc, #196]	; (8001488 <main+0x180>)
 80013c2:	f004 fca3 	bl	8005d0c <HAL_UART_Transmit>

	  		  sprintf(uartTXBf, "Vrefint : %4d = %.2f V \r\n", (uint16_t)ADCRawread.u16[1], ADCTVoltar(ADCRawread.u16[1], 3.32));
 80013c6:	4b34      	ldr	r3, [pc, #208]	; (8001498 <main+0x190>)
 80013c8:	885b      	ldrh	r3, [r3, #2]
 80013ca:	461c      	mov	r4, r3
 80013cc:	4b32      	ldr	r3, [pc, #200]	; (8001498 <main+0x190>)
 80013ce:	885b      	ldrh	r3, [r3, #2]
 80013d0:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80014ac <main+0x1a4>
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fbb3 	bl	8001b40 <ADCTVoltar>
 80013da:	ee10 3a10 	vmov	r3, s0
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f8da 	bl	8000598 <__aeabi_f2d>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	e9cd 2300 	strd	r2, r3, [sp]
 80013ec:	4622      	mov	r2, r4
 80013ee:	4930      	ldr	r1, [pc, #192]	; (80014b0 <main+0x1a8>)
 80013f0:	4828      	ldr	r0, [pc, #160]	; (8001494 <main+0x18c>)
 80013f2:	f005 fffd 	bl	80073f0 <siprintf>
	  		  HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 80013f6:	4827      	ldr	r0, [pc, #156]	; (8001494 <main+0x18c>)
 80013f8:	f7fe ff62 	bl	80002c0 <strlen>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	230a      	movs	r3, #10
 8001402:	4924      	ldr	r1, [pc, #144]	; (8001494 <main+0x18c>)
 8001404:	4820      	ldr	r0, [pc, #128]	; (8001488 <main+0x180>)
 8001406:	f004 fc81 	bl	8005d0c <HAL_UART_Transmit>
	  		  //// CPU temp reoprt // incomplete, odd value, formula
	  		  sprintf(uartTXBf, "TempMCU : %4d = %.2f C , (+ %d offset)  \r\n ", (uint16_t)ADCRawread.u16[0],
 800140a:	4b23      	ldr	r3, [pc, #140]	; (8001498 <main+0x190>)
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	461c      	mov	r4, r3
	  				Tempequat_G4(ADCRawread.u16[0], 3.3), fakeoffset);
 8001410:	4b21      	ldr	r3, [pc, #132]	; (8001498 <main+0x190>)
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	b21b      	sxth	r3, r3
 8001416:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80014b4 <main+0x1ac>
 800141a:	4618      	mov	r0, r3
 800141c:	f000 fbbe 	bl	8001b9c <Tempequat_G4>
 8001420:	ee10 3a10 	vmov	r3, s0
	  		  sprintf(uartTXBf, "TempMCU : %4d = %.2f C , (+ %d offset)  \r\n ", (uint16_t)ADCRawread.u16[0],
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f8b7 	bl	8000598 <__aeabi_f2d>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	2106      	movs	r1, #6
 8001430:	9102      	str	r1, [sp, #8]
 8001432:	e9cd 2300 	strd	r2, r3, [sp]
 8001436:	4622      	mov	r2, r4
 8001438:	491f      	ldr	r1, [pc, #124]	; (80014b8 <main+0x1b0>)
 800143a:	4816      	ldr	r0, [pc, #88]	; (8001494 <main+0x18c>)
 800143c:	f005 ffd8 	bl	80073f0 <siprintf>
	  		  HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 8001440:	4814      	ldr	r0, [pc, #80]	; (8001494 <main+0x18c>)
 8001442:	f7fe ff3d 	bl	80002c0 <strlen>
 8001446:	4603      	mov	r3, r0
 8001448:	b29a      	uxth	r2, r3
 800144a:	230a      	movs	r3, #10
 800144c:	4911      	ldr	r1, [pc, #68]	; (8001494 <main+0x18c>)
 800144e:	480e      	ldr	r0, [pc, #56]	; (8001488 <main+0x180>)
 8001450:	f004 fc5c 	bl	8005d0c <HAL_UART_Transmit>
	  		  ////

	  		  //// ALL PASS report ////
			  //// Print GPIO Test Result
			  if(counter_flagger){
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <main+0x1b4>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80c1 	beq.w	80015e0 <main+0x2d8>
				  if(cnt_allpass >= 9){//// there're 9 pass
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <main+0x1b8>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b08      	cmp	r3, #8
 8001464:	d930      	bls.n	80014c8 <main+0x1c0>

					  sprintf(uartTXBf, "\r\n+++ GPIO ALL PASS +++\r\n"); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 8001466:	4917      	ldr	r1, [pc, #92]	; (80014c4 <main+0x1bc>)
 8001468:	480a      	ldr	r0, [pc, #40]	; (8001494 <main+0x18c>)
 800146a:	f005 ffc1 	bl	80073f0 <siprintf>
 800146e:	4809      	ldr	r0, [pc, #36]	; (8001494 <main+0x18c>)
 8001470:	f7fe ff26 	bl	80002c0 <strlen>
 8001474:	4603      	mov	r3, r0
 8001476:	b29a      	uxth	r2, r3
 8001478:	230a      	movs	r3, #10
 800147a:	4906      	ldr	r1, [pc, #24]	; (8001494 <main+0x18c>)
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <main+0x180>)
 800147e:	f004 fc45 	bl	8005d0c <HAL_UART_Transmit>
 8001482:	e02f      	b.n	80014e4 <main+0x1dc>
 8001484:	080097c4 	.word	0x080097c4
 8001488:	20000484 	.word	0x20000484
 800148c:	bb261223 	.word	0xbb261223
 8001490:	080096e8 	.word	0x080096e8
 8001494:	200005bc 	.word	0x200005bc
 8001498:	20000514 	.word	0x20000514
 800149c:	200003b8 	.word	0x200003b8
 80014a0:	20000558 	.word	0x20000558
 80014a4:	20000534 	.word	0x20000534
 80014a8:	08009700 	.word	0x08009700
 80014ac:	40547ae1 	.word	0x40547ae1
 80014b0:	08009744 	.word	0x08009744
 80014b4:	40533333 	.word	0x40533333
 80014b8:	08009760 	.word	0x08009760
 80014bc:	20000531 	.word	0x20000531
 80014c0:	20000532 	.word	0x20000532
 80014c4:	0800978c 	.word	0x0800978c
				  }else{
					  sprintf(uartTXBf, "\r\n--- GPIO unhealthy ---\r\n"); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 80014c8:	49aa      	ldr	r1, [pc, #680]	; (8001774 <main+0x46c>)
 80014ca:	48ab      	ldr	r0, [pc, #684]	; (8001778 <main+0x470>)
 80014cc:	f005 ff90 	bl	80073f0 <siprintf>
 80014d0:	48a9      	ldr	r0, [pc, #676]	; (8001778 <main+0x470>)
 80014d2:	f7fe fef5 	bl	80002c0 <strlen>
 80014d6:	4603      	mov	r3, r0
 80014d8:	b29a      	uxth	r2, r3
 80014da:	230a      	movs	r3, #10
 80014dc:	49a6      	ldr	r1, [pc, #664]	; (8001778 <main+0x470>)
 80014de:	48a7      	ldr	r0, [pc, #668]	; (800177c <main+0x474>)
 80014e0:	f004 fc14 	bl	8005d0c <HAL_UART_Transmit>
				  }

				  sprintf(uartTXBf, WR_A_PUPDR); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 80014e4:	49a6      	ldr	r1, [pc, #664]	; (8001780 <main+0x478>)
 80014e6:	48a4      	ldr	r0, [pc, #656]	; (8001778 <main+0x470>)
 80014e8:	f005 ff82 	bl	80073f0 <siprintf>
 80014ec:	48a2      	ldr	r0, [pc, #648]	; (8001778 <main+0x470>)
 80014ee:	f7fe fee7 	bl	80002c0 <strlen>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	230a      	movs	r3, #10
 80014f8:	499f      	ldr	r1, [pc, #636]	; (8001778 <main+0x470>)
 80014fa:	48a0      	ldr	r0, [pc, #640]	; (800177c <main+0x474>)
 80014fc:	f004 fc06 	bl	8005d0c <HAL_UART_Transmit>
				  sprintf(uartTXBf, WR_A_OPP); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 8001500:	49a0      	ldr	r1, [pc, #640]	; (8001784 <main+0x47c>)
 8001502:	489d      	ldr	r0, [pc, #628]	; (8001778 <main+0x470>)
 8001504:	f005 ff74 	bl	80073f0 <siprintf>
 8001508:	489b      	ldr	r0, [pc, #620]	; (8001778 <main+0x470>)
 800150a:	f7fe fed9 	bl	80002c0 <strlen>
 800150e:	4603      	mov	r3, r0
 8001510:	b29a      	uxth	r2, r3
 8001512:	230a      	movs	r3, #10
 8001514:	4998      	ldr	r1, [pc, #608]	; (8001778 <main+0x470>)
 8001516:	4899      	ldr	r0, [pc, #612]	; (800177c <main+0x474>)
 8001518:	f004 fbf8 	bl	8005d0c <HAL_UART_Transmit>
				  sprintf(uartTXBf, WR_A_OOD); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 800151c:	499a      	ldr	r1, [pc, #616]	; (8001788 <main+0x480>)
 800151e:	4896      	ldr	r0, [pc, #600]	; (8001778 <main+0x470>)
 8001520:	f005 ff66 	bl	80073f0 <siprintf>
 8001524:	4894      	ldr	r0, [pc, #592]	; (8001778 <main+0x470>)
 8001526:	f7fe fecb 	bl	80002c0 <strlen>
 800152a:	4603      	mov	r3, r0
 800152c:	b29a      	uxth	r2, r3
 800152e:	230a      	movs	r3, #10
 8001530:	4991      	ldr	r1, [pc, #580]	; (8001778 <main+0x470>)
 8001532:	4892      	ldr	r0, [pc, #584]	; (800177c <main+0x474>)
 8001534:	f004 fbea 	bl	8005d0c <HAL_UART_Transmit>
				  sprintf(uartTXBf, WR_B_PUPDR); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 8001538:	4994      	ldr	r1, [pc, #592]	; (800178c <main+0x484>)
 800153a:	488f      	ldr	r0, [pc, #572]	; (8001778 <main+0x470>)
 800153c:	f005 ff58 	bl	80073f0 <siprintf>
 8001540:	488d      	ldr	r0, [pc, #564]	; (8001778 <main+0x470>)
 8001542:	f7fe febd 	bl	80002c0 <strlen>
 8001546:	4603      	mov	r3, r0
 8001548:	b29a      	uxth	r2, r3
 800154a:	230a      	movs	r3, #10
 800154c:	498a      	ldr	r1, [pc, #552]	; (8001778 <main+0x470>)
 800154e:	488b      	ldr	r0, [pc, #556]	; (800177c <main+0x474>)
 8001550:	f004 fbdc 	bl	8005d0c <HAL_UART_Transmit>
				  sprintf(uartTXBf, WR_B_OPP); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 8001554:	498e      	ldr	r1, [pc, #568]	; (8001790 <main+0x488>)
 8001556:	4888      	ldr	r0, [pc, #544]	; (8001778 <main+0x470>)
 8001558:	f005 ff4a 	bl	80073f0 <siprintf>
 800155c:	4886      	ldr	r0, [pc, #536]	; (8001778 <main+0x470>)
 800155e:	f7fe feaf 	bl	80002c0 <strlen>
 8001562:	4603      	mov	r3, r0
 8001564:	b29a      	uxth	r2, r3
 8001566:	230a      	movs	r3, #10
 8001568:	4983      	ldr	r1, [pc, #524]	; (8001778 <main+0x470>)
 800156a:	4884      	ldr	r0, [pc, #528]	; (800177c <main+0x474>)
 800156c:	f004 fbce 	bl	8005d0c <HAL_UART_Transmit>
				  sprintf(uartTXBf, WR_B_OOD); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 8001570:	4988      	ldr	r1, [pc, #544]	; (8001794 <main+0x48c>)
 8001572:	4881      	ldr	r0, [pc, #516]	; (8001778 <main+0x470>)
 8001574:	f005 ff3c 	bl	80073f0 <siprintf>
 8001578:	487f      	ldr	r0, [pc, #508]	; (8001778 <main+0x470>)
 800157a:	f7fe fea1 	bl	80002c0 <strlen>
 800157e:	4603      	mov	r3, r0
 8001580:	b29a      	uxth	r2, r3
 8001582:	230a      	movs	r3, #10
 8001584:	497c      	ldr	r1, [pc, #496]	; (8001778 <main+0x470>)
 8001586:	487d      	ldr	r0, [pc, #500]	; (800177c <main+0x474>)
 8001588:	f004 fbc0 	bl	8005d0c <HAL_UART_Transmit>
				  sprintf(uartTXBf, WR_C_PUPDR); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 800158c:	4982      	ldr	r1, [pc, #520]	; (8001798 <main+0x490>)
 800158e:	487a      	ldr	r0, [pc, #488]	; (8001778 <main+0x470>)
 8001590:	f005 ff2e 	bl	80073f0 <siprintf>
 8001594:	4878      	ldr	r0, [pc, #480]	; (8001778 <main+0x470>)
 8001596:	f7fe fe93 	bl	80002c0 <strlen>
 800159a:	4603      	mov	r3, r0
 800159c:	b29a      	uxth	r2, r3
 800159e:	230a      	movs	r3, #10
 80015a0:	4975      	ldr	r1, [pc, #468]	; (8001778 <main+0x470>)
 80015a2:	4876      	ldr	r0, [pc, #472]	; (800177c <main+0x474>)
 80015a4:	f004 fbb2 	bl	8005d0c <HAL_UART_Transmit>
				  sprintf(uartTXBf, WR_C_OPP); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 80015a8:	497c      	ldr	r1, [pc, #496]	; (800179c <main+0x494>)
 80015aa:	4873      	ldr	r0, [pc, #460]	; (8001778 <main+0x470>)
 80015ac:	f005 ff20 	bl	80073f0 <siprintf>
 80015b0:	4871      	ldr	r0, [pc, #452]	; (8001778 <main+0x470>)
 80015b2:	f7fe fe85 	bl	80002c0 <strlen>
 80015b6:	4603      	mov	r3, r0
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	230a      	movs	r3, #10
 80015bc:	496e      	ldr	r1, [pc, #440]	; (8001778 <main+0x470>)
 80015be:	486f      	ldr	r0, [pc, #444]	; (800177c <main+0x474>)
 80015c0:	f004 fba4 	bl	8005d0c <HAL_UART_Transmit>
				  sprintf(uartTXBf, WR_C_OOD); HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 80015c4:	4976      	ldr	r1, [pc, #472]	; (80017a0 <main+0x498>)
 80015c6:	486c      	ldr	r0, [pc, #432]	; (8001778 <main+0x470>)
 80015c8:	f005 ff12 	bl	80073f0 <siprintf>
 80015cc:	486a      	ldr	r0, [pc, #424]	; (8001778 <main+0x470>)
 80015ce:	f7fe fe77 	bl	80002c0 <strlen>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	230a      	movs	r3, #10
 80015d8:	4967      	ldr	r1, [pc, #412]	; (8001778 <main+0x470>)
 80015da:	4868      	ldr	r0, [pc, #416]	; (800177c <main+0x474>)
 80015dc:	f004 fb96 	bl	8005d0c <HAL_UART_Transmit>
			  }
	  		  ////

	  		 }// timestamp_one

	  	  if(flag_gpioselftest){
 80015e0:	4b70      	ldr	r3, [pc, #448]	; (80017a4 <main+0x49c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00d      	beq.n	8001604 <main+0x2fc>
	  		  //// delay wait for button release
	  		  if (HAL_GetTick() >= timestamp_selftestdelay){
 80015e8:	f000 ff96 	bl	8002518 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	4b6e      	ldr	r3, [pc, #440]	; (80017a8 <main+0x4a0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d306      	bcc.n	8001604 <main+0x2fc>

	  			  VR_Cli.Mark.Flag_ger = VRF_GPIO_Runalltest;
 80015f6:	4b6d      	ldr	r3, [pc, #436]	; (80017ac <main+0x4a4>)
 80015f8:	2202      	movs	r2, #2
 80015fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	  			  flag_gpioselftest = 0;
 80015fe:	4b69      	ldr	r3, [pc, #420]	; (80017a4 <main+0x49c>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
	  		  }
	  	  } //// flag_gpioselftest

	  	//// Flag run all test
	  if(VR_Cli.Mark.Flag_ger == VRF_GPIO_Runalltest){
 8001604:	4b69      	ldr	r3, [pc, #420]	; (80017ac <main+0x4a4>)
 8001606:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800160a:	2b02      	cmp	r3, #2
 800160c:	f47f aeba 	bne.w	8001384 <main+0x7c>
		  counter_flagger++;
 8001610:	4b67      	ldr	r3, [pc, #412]	; (80017b0 <main+0x4a8>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	3301      	adds	r3, #1
 8001616:	b2da      	uxtb	r2, r3
 8001618:	4b65      	ldr	r3, [pc, #404]	; (80017b0 <main+0x4a8>)
 800161a:	701a      	strb	r2, [r3, #0]

		  ////record default GPIO setup before modified in testscript
		  gpio_rec_mode[0] = GPIOA->MODER;
 800161c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a64      	ldr	r2, [pc, #400]	; (80017b4 <main+0x4ac>)
 8001624:	6013      	str	r3, [r2, #0]
		  gpio_rec_pupdr[0] = GPIOA->PUPDR;
 8001626:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	4a62      	ldr	r2, [pc, #392]	; (80017b8 <main+0x4b0>)
 800162e:	6013      	str	r3, [r2, #0]

		  //// Run GPIO Testscript all here or run before While
		  VR_Cli.Mark.PA_PUPDR = gpio_selftest_input_pupdr_1(GPIOA, List_GPIOA);
 8001630:	4962      	ldr	r1, [pc, #392]	; (80017bc <main+0x4b4>)
 8001632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001636:	f7ff fcad 	bl	8000f94 <gpio_selftest_input_pupdr_1>
 800163a:	4603      	mov	r3, r0
 800163c:	4a5b      	ldr	r2, [pc, #364]	; (80017ac <main+0x4a4>)
 800163e:	6053      	str	r3, [r2, #4]
		  VR_Cli.Mark.PB_PUPDR = gpio_selftest_input_pupdr_1(GPIOB, List_GPIOB);
 8001640:	495f      	ldr	r1, [pc, #380]	; (80017c0 <main+0x4b8>)
 8001642:	4860      	ldr	r0, [pc, #384]	; (80017c4 <main+0x4bc>)
 8001644:	f7ff fca6 	bl	8000f94 <gpio_selftest_input_pupdr_1>
 8001648:	4603      	mov	r3, r0
 800164a:	4a58      	ldr	r2, [pc, #352]	; (80017ac <main+0x4a4>)
 800164c:	6113      	str	r3, [r2, #16]
		  VR_Cli.Mark.PC_PUPDR = gpio_selftest_input_pupdr_1(GPIOC, List_GPIOC);
 800164e:	495e      	ldr	r1, [pc, #376]	; (80017c8 <main+0x4c0>)
 8001650:	485e      	ldr	r0, [pc, #376]	; (80017cc <main+0x4c4>)
 8001652:	f7ff fc9f 	bl	8000f94 <gpio_selftest_input_pupdr_1>
 8001656:	4603      	mov	r3, r0
 8001658:	4a54      	ldr	r2, [pc, #336]	; (80017ac <main+0x4a4>)
 800165a:	61d3      	str	r3, [r2, #28]

		  HAL_Delay(5);
 800165c:	2005      	movs	r0, #5
 800165e:	f000 ff67 	bl	8002530 <HAL_Delay>

		  VR_Cli.Mark.PA_OUT_PP = gpio_selftest_output_pp_1(GPIOA, List_GPIOA);
 8001662:	4956      	ldr	r1, [pc, #344]	; (80017bc <main+0x4b4>)
 8001664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001668:	f7ff fd27 	bl	80010ba <gpio_selftest_output_pp_1>
 800166c:	4603      	mov	r3, r0
 800166e:	4a4f      	ldr	r2, [pc, #316]	; (80017ac <main+0x4a4>)
 8001670:	6093      	str	r3, [r2, #8]
		  VR_Cli.Mark.PB_OUT_PP = gpio_selftest_output_pp_1(GPIOB, List_GPIOB);
 8001672:	4953      	ldr	r1, [pc, #332]	; (80017c0 <main+0x4b8>)
 8001674:	4853      	ldr	r0, [pc, #332]	; (80017c4 <main+0x4bc>)
 8001676:	f7ff fd20 	bl	80010ba <gpio_selftest_output_pp_1>
 800167a:	4603      	mov	r3, r0
 800167c:	4a4b      	ldr	r2, [pc, #300]	; (80017ac <main+0x4a4>)
 800167e:	6153      	str	r3, [r2, #20]
		  VR_Cli.Mark.PC_OUT_PP = gpio_selftest_output_pp_1(GPIOC, List_GPIOC);
 8001680:	4951      	ldr	r1, [pc, #324]	; (80017c8 <main+0x4c0>)
 8001682:	4852      	ldr	r0, [pc, #328]	; (80017cc <main+0x4c4>)
 8001684:	f7ff fd19 	bl	80010ba <gpio_selftest_output_pp_1>
 8001688:	4603      	mov	r3, r0
 800168a:	4a48      	ldr	r2, [pc, #288]	; (80017ac <main+0x4a4>)
 800168c:	6213      	str	r3, [r2, #32]

		  HAL_Delay(5);
 800168e:	2005      	movs	r0, #5
 8001690:	f000 ff4e 	bl	8002530 <HAL_Delay>

		  VR_Cli.Mark.PA_OUT_OD = gpio_selftest_output_od_1(GPIOA, List_GPIOA);
 8001694:	4949      	ldr	r1, [pc, #292]	; (80017bc <main+0x4b4>)
 8001696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169a:	f7ff fd8f 	bl	80011bc <gpio_selftest_output_od_1>
 800169e:	4603      	mov	r3, r0
 80016a0:	4a42      	ldr	r2, [pc, #264]	; (80017ac <main+0x4a4>)
 80016a2:	60d3      	str	r3, [r2, #12]
		  VR_Cli.Mark.PB_OUT_OD = gpio_selftest_output_od_1(GPIOB, List_GPIOB);
 80016a4:	4946      	ldr	r1, [pc, #280]	; (80017c0 <main+0x4b8>)
 80016a6:	4847      	ldr	r0, [pc, #284]	; (80017c4 <main+0x4bc>)
 80016a8:	f7ff fd88 	bl	80011bc <gpio_selftest_output_od_1>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4a3f      	ldr	r2, [pc, #252]	; (80017ac <main+0x4a4>)
 80016b0:	6193      	str	r3, [r2, #24]
		  VR_Cli.Mark.PC_OUT_OD = gpio_selftest_output_od_1(GPIOC, List_GPIOC);
 80016b2:	4945      	ldr	r1, [pc, #276]	; (80017c8 <main+0x4c0>)
 80016b4:	4845      	ldr	r0, [pc, #276]	; (80017cc <main+0x4c4>)
 80016b6:	f7ff fd81 	bl	80011bc <gpio_selftest_output_od_1>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a3b      	ldr	r2, [pc, #236]	; (80017ac <main+0x4a4>)
 80016be:	6253      	str	r3, [r2, #36]	; 0x24

		  //// revert back, enable to send UART again after crashed in testscript
		  GPIOA->MODER = gpio_rec_mode[0] ;
 80016c0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016c4:	4b3b      	ldr	r3, [pc, #236]	; (80017b4 <main+0x4ac>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6013      	str	r3, [r2, #0]
		  GPIOA->PUPDR = gpio_rec_pupdr[0] ;
 80016ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016ce:	4b3a      	ldr	r3, [pc, #232]	; (80017b8 <main+0x4b0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	60d3      	str	r3, [r2, #12]

		  //// clear previous buffer
		  resetgpio_char();
 80016d4:	f000 fb96 	bl	8001e04 <resetgpio_char>
		  ////Compare_pin()
		  Compare_pin_32(VR_Cli.Mark.PA_PUPDR, List_GPIOA, 0, WR_A_PUPDR);
 80016d8:	4b34      	ldr	r3, [pc, #208]	; (80017ac <main+0x4a4>)
 80016da:	6858      	ldr	r0, [r3, #4]
 80016dc:	4b28      	ldr	r3, [pc, #160]	; (8001780 <main+0x478>)
 80016de:	2200      	movs	r2, #0
 80016e0:	4936      	ldr	r1, [pc, #216]	; (80017bc <main+0x4b4>)
 80016e2:	f000 fad5 	bl	8001c90 <Compare_pin_32>
		  Compare_pin_32(VR_Cli.Mark.PA_OUT_PP, List_GPIOA, 0, WR_A_OPP);
 80016e6:	4b31      	ldr	r3, [pc, #196]	; (80017ac <main+0x4a4>)
 80016e8:	6898      	ldr	r0, [r3, #8]
 80016ea:	4b26      	ldr	r3, [pc, #152]	; (8001784 <main+0x47c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	4933      	ldr	r1, [pc, #204]	; (80017bc <main+0x4b4>)
 80016f0:	f000 face 	bl	8001c90 <Compare_pin_32>
		  Compare_pin_32(VR_Cli.Mark.PA_OUT_OD, List_GPIOA, 0, WR_A_OOD);
 80016f4:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <main+0x4a4>)
 80016f6:	68d8      	ldr	r0, [r3, #12]
 80016f8:	4b23      	ldr	r3, [pc, #140]	; (8001788 <main+0x480>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	492f      	ldr	r1, [pc, #188]	; (80017bc <main+0x4b4>)
 80016fe:	f000 fac7 	bl	8001c90 <Compare_pin_32>

		  Compare_pin_32(VR_Cli.Mark.PB_PUPDR, List_GPIOB, 1,  WR_B_PUPDR);
 8001702:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <main+0x4a4>)
 8001704:	6918      	ldr	r0, [r3, #16]
 8001706:	4b21      	ldr	r3, [pc, #132]	; (800178c <main+0x484>)
 8001708:	2201      	movs	r2, #1
 800170a:	492d      	ldr	r1, [pc, #180]	; (80017c0 <main+0x4b8>)
 800170c:	f000 fac0 	bl	8001c90 <Compare_pin_32>
		  Compare_pin_32(VR_Cli.Mark.PB_OUT_PP, List_GPIOB, 1, WR_B_OPP);
 8001710:	4b26      	ldr	r3, [pc, #152]	; (80017ac <main+0x4a4>)
 8001712:	6958      	ldr	r0, [r3, #20]
 8001714:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <main+0x488>)
 8001716:	2201      	movs	r2, #1
 8001718:	4929      	ldr	r1, [pc, #164]	; (80017c0 <main+0x4b8>)
 800171a:	f000 fab9 	bl	8001c90 <Compare_pin_32>
		  Compare_pin_32(VR_Cli.Mark.PB_OUT_OD, List_GPIOB, 1, WR_B_OOD);
 800171e:	4b23      	ldr	r3, [pc, #140]	; (80017ac <main+0x4a4>)
 8001720:	6998      	ldr	r0, [r3, #24]
 8001722:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <main+0x48c>)
 8001724:	2201      	movs	r2, #1
 8001726:	4926      	ldr	r1, [pc, #152]	; (80017c0 <main+0x4b8>)
 8001728:	f000 fab2 	bl	8001c90 <Compare_pin_32>

		  Compare_pin_32(VR_Cli.Mark.PC_PUPDR, List_GPIOC, 2, WR_C_PUPDR);
 800172c:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <main+0x4a4>)
 800172e:	69d8      	ldr	r0, [r3, #28]
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <main+0x490>)
 8001732:	2202      	movs	r2, #2
 8001734:	4924      	ldr	r1, [pc, #144]	; (80017c8 <main+0x4c0>)
 8001736:	f000 faab 	bl	8001c90 <Compare_pin_32>
		  Compare_pin_32(VR_Cli.Mark.PC_OUT_PP, List_GPIOC, 2, WR_C_OPP);
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <main+0x4a4>)
 800173c:	6a18      	ldr	r0, [r3, #32]
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <main+0x494>)
 8001740:	2202      	movs	r2, #2
 8001742:	4921      	ldr	r1, [pc, #132]	; (80017c8 <main+0x4c0>)
 8001744:	f000 faa4 	bl	8001c90 <Compare_pin_32>
		  Compare_pin_32(VR_Cli.Mark.PC_OUT_OD, List_GPIOC, 2, WR_C_OOD);
 8001748:	4b18      	ldr	r3, [pc, #96]	; (80017ac <main+0x4a4>)
 800174a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <main+0x498>)
 800174e:	2202      	movs	r2, #2
 8001750:	491d      	ldr	r1, [pc, #116]	; (80017c8 <main+0x4c0>)
 8001752:	f000 fa9d 	bl	8001c90 <Compare_pin_32>

		  HAL_Delay(10);
 8001756:	200a      	movs	r0, #10
 8001758:	f000 feea 	bl	8002530 <HAL_Delay>

		  CheckAllPass();
 800175c:	f000 fb9e 	bl	8001e9c <CheckAllPass>


		  //Tx_UART_Verita_Command(&huart6, VRC_Next, 0x00);
		  VR_Cli.Mark.Flag_ger = VRF_SendALLTestData;
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <main+0x4a4>)
 8001762:	2204      	movs	r2, #4
 8001764:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		  VR_Cli.Mark.Flag_ger = 0;
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <main+0x4a4>)
 800176a:	2200      	movs	r2, #0
 800176c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	  if(HAL_GetTick() >= timestamp_one){
 8001770:	e608      	b.n	8001384 <main+0x7c>
 8001772:	bf00      	nop
 8001774:	080097a8 	.word	0x080097a8
 8001778:	200005bc 	.word	0x200005bc
 800177c:	20000484 	.word	0x20000484
 8001780:	2000005c 	.word	0x2000005c
 8001784:	200000d4 	.word	0x200000d4
 8001788:	2000014c 	.word	0x2000014c
 800178c:	20000084 	.word	0x20000084
 8001790:	200000fc 	.word	0x200000fc
 8001794:	20000174 	.word	0x20000174
 8001798:	200000ac 	.word	0x200000ac
 800179c:	20000124 	.word	0x20000124
 80017a0:	2000019c 	.word	0x2000019c
 80017a4:	2000053c 	.word	0x2000053c
 80017a8:	20000538 	.word	0x20000538
 80017ac:	20000558 	.word	0x20000558
 80017b0:	20000531 	.word	0x20000531
 80017b4:	20000540 	.word	0x20000540
 80017b8:	2000054c 	.word	0x2000054c
 80017bc:	20000000 	.word	0x20000000
 80017c0:	2000001c 	.word	0x2000001c
 80017c4:	48000400 	.word	0x48000400
 80017c8:	2000003c 	.word	0x2000003c
 80017cc:	48000800 	.word	0x48000800

080017d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b094      	sub	sp, #80	; 0x50
 80017d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d6:	f107 0318 	add.w	r3, r7, #24
 80017da:	2238      	movs	r2, #56	; 0x38
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f005 fe69 	bl	80074b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017f2:	2000      	movs	r0, #0
 80017f4:	f003 fa04 	bl	8004c00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017f8:	2302      	movs	r3, #2
 80017fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001802:	2340      	movs	r3, #64	; 0x40
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001806:	2302      	movs	r3, #2
 8001808:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800180a:	2302      	movs	r3, #2
 800180c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800180e:	2304      	movs	r3, #4
 8001810:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001812:	2355      	movs	r3, #85	; 0x55
 8001814:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001816:	2302      	movs	r3, #2
 8001818:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800181a:	2302      	movs	r3, #2
 800181c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800181e:	2302      	movs	r3, #2
 8001820:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001822:	f107 0318 	add.w	r3, r7, #24
 8001826:	4618      	mov	r0, r3
 8001828:	f003 fa9e 	bl	8004d68 <HAL_RCC_OscConfig>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001832:	f000 fbd9 	bl	8001fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001836:	230f      	movs	r3, #15
 8001838:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800183a:	2303      	movs	r3, #3
 800183c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	2104      	movs	r1, #4
 800184e:	4618      	mov	r0, r3
 8001850:	f003 fda2 	bl	8005398 <HAL_RCC_ClockConfig>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800185a:	f000 fbc5 	bl	8001fe8 <Error_Handler>
  }
}
 800185e:	bf00      	nop
 8001860:	3750      	adds	r7, #80	; 0x50
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08c      	sub	sp, #48	; 0x30
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800186e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	2220      	movs	r2, #32
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f005 fe18 	bl	80074b6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001886:	4b3a      	ldr	r3, [pc, #232]	; (8001970 <MX_ADC1_Init+0x108>)
 8001888:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800188c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
 800188e:	4b38      	ldr	r3, [pc, #224]	; (8001970 <MX_ADC1_Init+0x108>)
 8001890:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8001894:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001896:	4b36      	ldr	r3, [pc, #216]	; (8001970 <MX_ADC1_Init+0x108>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800189c:	4b34      	ldr	r3, [pc, #208]	; (8001970 <MX_ADC1_Init+0x108>)
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80018a2:	4b33      	ldr	r3, [pc, #204]	; (8001970 <MX_ADC1_Init+0x108>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80018a8:	4b31      	ldr	r3, [pc, #196]	; (8001970 <MX_ADC1_Init+0x108>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018ae:	4b30      	ldr	r3, [pc, #192]	; (8001970 <MX_ADC1_Init+0x108>)
 80018b0:	2204      	movs	r2, #4
 80018b2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018b4:	4b2e      	ldr	r3, [pc, #184]	; (8001970 <MX_ADC1_Init+0x108>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018ba:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <MX_ADC1_Init+0x108>)
 80018bc:	2201      	movs	r2, #1
 80018be:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80018c0:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <MX_ADC1_Init+0x108>)
 80018c2:	2202      	movs	r2, #2
 80018c4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018c6:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <MX_ADC1_Init+0x108>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018ce:	4b28      	ldr	r3, [pc, #160]	; (8001970 <MX_ADC1_Init+0x108>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018d4:	4b26      	ldr	r3, [pc, #152]	; (8001970 <MX_ADC1_Init+0x108>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80018da:	4b25      	ldr	r3, [pc, #148]	; (8001970 <MX_ADC1_Init+0x108>)
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018e2:	4b23      	ldr	r3, [pc, #140]	; (8001970 <MX_ADC1_Init+0x108>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80018e8:	4b21      	ldr	r3, [pc, #132]	; (8001970 <MX_ADC1_Init+0x108>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018f0:	481f      	ldr	r0, [pc, #124]	; (8001970 <MX_ADC1_Init+0x108>)
 80018f2:	f001 f883 	bl	80029fc <HAL_ADC_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80018fc:	f000 fb74 	bl	8001fe8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001908:	4619      	mov	r1, r3
 800190a:	4819      	ldr	r0, [pc, #100]	; (8001970 <MX_ADC1_Init+0x108>)
 800190c:	f002 fb22 	bl	8003f54 <HAL_ADCEx_MultiModeConfigChannel>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001916:	f000 fb67 	bl	8001fe8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <MX_ADC1_Init+0x10c>)
 800191c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800191e:	2306      	movs	r3, #6
 8001920:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001922:	2306      	movs	r3, #6
 8001924:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001926:	237f      	movs	r3, #127	; 0x7f
 8001928:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800192a:	2304      	movs	r3, #4
 800192c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	4619      	mov	r1, r3
 8001936:	480e      	ldr	r0, [pc, #56]	; (8001970 <MX_ADC1_Init+0x108>)
 8001938:	f001 fd7e 	bl	8003438 <HAL_ADC_ConfigChannel>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001942:	f000 fb51 	bl	8001fe8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <MX_ADC1_Init+0x110>)
 8001948:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800194a:	230c      	movs	r3, #12
 800194c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800194e:	2304      	movs	r3, #4
 8001950:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	4619      	mov	r1, r3
 8001956:	4806      	ldr	r0, [pc, #24]	; (8001970 <MX_ADC1_Init+0x108>)
 8001958:	f001 fd6e 	bl	8003438 <HAL_ADC_ConfigChannel>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001962:	f000 fb41 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	3730      	adds	r7, #48	; 0x30
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200003b8 	.word	0x200003b8
 8001974:	c3210000 	.word	0xc3210000
 8001978:	cb840000 	.word	0xcb840000

0800197c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001980:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <MX_LPUART1_UART_Init+0x8c>)
 8001982:	4a22      	ldr	r2, [pc, #136]	; (8001a0c <MX_LPUART1_UART_Init+0x90>)
 8001984:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001986:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <MX_LPUART1_UART_Init+0x8c>)
 8001988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800198c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800198e:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <MX_LPUART1_UART_Init+0x8c>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001994:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <MX_LPUART1_UART_Init+0x8c>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800199a:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <MX_LPUART1_UART_Init+0x8c>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <MX_LPUART1_UART_Init+0x8c>)
 80019a2:	220c      	movs	r2, #12
 80019a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <MX_LPUART1_UART_Init+0x8c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <MX_LPUART1_UART_Init+0x8c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <MX_LPUART1_UART_Init+0x8c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <MX_LPUART1_UART_Init+0x8c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80019be:	4812      	ldr	r0, [pc, #72]	; (8001a08 <MX_LPUART1_UART_Init+0x8c>)
 80019c0:	f004 f954 	bl	8005c6c <HAL_UART_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80019ca:	f000 fb0d 	bl	8001fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ce:	2100      	movs	r1, #0
 80019d0:	480d      	ldr	r0, [pc, #52]	; (8001a08 <MX_LPUART1_UART_Init+0x8c>)
 80019d2:	f004 ff1b 	bl	800680c <HAL_UARTEx_SetTxFifoThreshold>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80019dc:	f000 fb04 	bl	8001fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e0:	2100      	movs	r1, #0
 80019e2:	4809      	ldr	r0, [pc, #36]	; (8001a08 <MX_LPUART1_UART_Init+0x8c>)
 80019e4:	f004 ff50 	bl	8006888 <HAL_UARTEx_SetRxFifoThreshold>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80019ee:	f000 fafb 	bl	8001fe8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80019f2:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_LPUART1_UART_Init+0x8c>)
 80019f4:	f004 fed1 	bl	800679a <HAL_UARTEx_DisableFifoMode>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80019fe:	f000 faf3 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000484 	.word	0x20000484
 8001a0c:	40008000 	.word	0x40008000

08001a10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <MX_DMA_Init+0x50>)
 8001a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a1a:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <MX_DMA_Init+0x50>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	6493      	str	r3, [r2, #72]	; 0x48
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <MX_DMA_Init+0x50>)
 8001a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <MX_DMA_Init+0x50>)
 8001a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <MX_DMA_Init+0x50>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6493      	str	r3, [r2, #72]	; 0x48
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <MX_DMA_Init+0x50>)
 8001a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	200b      	movs	r0, #11
 8001a4c:	f002 fc65 	bl	800431a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a50:	200b      	movs	r0, #11
 8001a52:	f002 fc7c 	bl	800434e <HAL_NVIC_EnableIRQ>

}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000

08001a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7a:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <MX_GPIO_Init+0xd4>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	4a2e      	ldr	r2, [pc, #184]	; (8001b38 <MX_GPIO_Init+0xd4>)
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a86:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <MX_GPIO_Init+0xd4>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a92:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <MX_GPIO_Init+0xd4>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	4a28      	ldr	r2, [pc, #160]	; (8001b38 <MX_GPIO_Init+0xd4>)
 8001a98:	f043 0320 	orr.w	r3, r3, #32
 8001a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9e:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <MX_GPIO_Init+0xd4>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	f003 0320 	and.w	r3, r3, #32
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <MX_GPIO_Init+0xd4>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	4a22      	ldr	r2, [pc, #136]	; (8001b38 <MX_GPIO_Init+0xd4>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <MX_GPIO_Init+0xd4>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <MX_GPIO_Init+0xd4>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	4a1c      	ldr	r2, [pc, #112]	; (8001b38 <MX_GPIO_Init+0xd4>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ace:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <MX_GPIO_Init+0xd4>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2120      	movs	r1, #32
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae2:	f003 f843 	bl	8004b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ae6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	480f      	ldr	r0, [pc, #60]	; (8001b3c <MX_GPIO_Init+0xd8>)
 8001afe:	f002 feb3 	bl	8004868 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b02:	2320      	movs	r3, #32
 8001b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b06:	2301      	movs	r3, #1
 8001b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4619      	mov	r1, r3
 8001b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1c:	f002 fea4 	bl	8004868 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2100      	movs	r1, #0
 8001b24:	2028      	movs	r0, #40	; 0x28
 8001b26:	f002 fbf8 	bl	800431a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b2a:	2028      	movs	r0, #40	; 0x28
 8001b2c:	f002 fc0f 	bl	800434e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b30:	bf00      	nop
 8001b32:	3728      	adds	r7, #40	; 0x28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	48000800 	.word	0x48000800

08001b40 <ADCTVoltar>:
//
//	return tmpbf;
//}


float ADCTVoltar(uint16_t btt, float vref){
 8001b40:	b5b0      	push	{r4, r5, r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	ed87 0a00 	vstr	s0, [r7]
 8001b4c:	80fb      	strh	r3, [r7, #6]
	// convert 0-4096 ADC bit -> 0-Vref from device(3.3V, 3.25V)
	return (btt /4096.0) * vref;
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fd0f 	bl	8000574 <__aeabi_i2d>
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <ADCTVoltar+0x58>)
 8001b5c:	f7fe fe9e 	bl	800089c <__aeabi_ddiv>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4614      	mov	r4, r2
 8001b66:	461d      	mov	r5, r3
 8001b68:	6838      	ldr	r0, [r7, #0]
 8001b6a:	f7fe fd15 	bl	8000598 <__aeabi_f2d>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4620      	mov	r0, r4
 8001b74:	4629      	mov	r1, r5
 8001b76:	f7fe fd67 	bl	8000648 <__aeabi_dmul>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f7ff f839 	bl	8000bf8 <__aeabi_d2f>
 8001b86:	4603      	mov	r3, r0
 8001b88:	ee07 3a90 	vmov	s15, r3
}
 8001b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bdb0      	pop	{r4, r5, r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40b00000 	.word	0x40b00000

08001b9c <Tempequat_G4>:
//float TempEquat(float Vs){
//	//Vs = V tmp read , V25= 0.76V, Avg_slope = 2.5 mV
//	return ((Vs - 0.76)/(0.0025)) + 25.0; //2.5*0.001
//}

float Tempequat_G4(int16_t data, float vref){
 8001b9c:	b5b0      	push	{r4, r5, r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	ed87 0a00 	vstr	s0, [r7]
 8001ba8:	80fb      	strh	r3, [r7, #6]
	/* Get equation from RM0440 R.7, 21.4.31 Temp sensor
	 * */
	static int16_t TSCALT1 = TEMPSENSOR_CAL1_TEMP;
	static int16_t TSCALT2 = 110;
	int16_t TCAL1 = (int16_t) *TEMPSENSOR_CAL1_ADDR; // 1037 read the ST factory calibrate value from the address
 8001baa:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <Tempequat_G4+0xe0>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	82fb      	strh	r3, [r7, #22]
	int16_t TCAL2 = (int16_t) *TEMPSENSOR_CAL2_ADDR; // 1378
 8001bb0:	4b33      	ldr	r3, [pc, #204]	; (8001c80 <Tempequat_G4+0xe4>)
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	82bb      	strh	r3, [r7, #20]

	float set1 = ((TSCALT2 - TSCALT1)*1.0) / ((TCAL2 - TCAL1)*1.0) ;
 8001bb6:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <Tempequat_G4+0xe8>)
 8001bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <Tempequat_G4+0xec>)
 8001bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fcd4 	bl	8000574 <__aeabi_i2d>
 8001bcc:	4604      	mov	r4, r0
 8001bce:	460d      	mov	r5, r1
 8001bd0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001bd4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fcca 	bl	8000574 <__aeabi_i2d>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4620      	mov	r0, r4
 8001be6:	4629      	mov	r1, r5
 8001be8:	f7fe fe58 	bl	800089c <__aeabi_ddiv>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7ff f800 	bl	8000bf8 <__aeabi_d2f>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	613b      	str	r3, [r7, #16]
	float set2 = ( data * (vref/3.0) )-TCAL1;
 8001bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fcb7 	bl	8000574 <__aeabi_i2d>
 8001c06:	4604      	mov	r4, r0
 8001c08:	460d      	mov	r5, r1
 8001c0a:	6838      	ldr	r0, [r7, #0]
 8001c0c:	f7fe fcc4 	bl	8000598 <__aeabi_f2d>
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <Tempequat_G4+0xf0>)
 8001c16:	f7fe fe41 	bl	800089c <__aeabi_ddiv>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4620      	mov	r0, r4
 8001c20:	4629      	mov	r1, r5
 8001c22:	f7fe fd11 	bl	8000648 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4614      	mov	r4, r2
 8001c2c:	461d      	mov	r5, r3
 8001c2e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fc9e 	bl	8000574 <__aeabi_i2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	4629      	mov	r1, r5
 8001c40:	f7fe fb4a 	bl	80002d8 <__aeabi_dsub>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe ffd4 	bl	8000bf8 <__aeabi_d2f>
 8001c50:	4603      	mov	r3, r0
 8001c52:	60fb      	str	r3, [r7, #12]

	return (set1 * set2)+ 30 + fakeoffset; //// + 12 is fake offset
 8001c54:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c58:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c60:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001c64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c68:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001c6c:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001c70:	eeb0 0a67 	vmov.f32	s0, s15
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bdb0      	pop	{r4, r5, r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	1fff75a8 	.word	0x1fff75a8
 8001c80:	1fff75ca 	.word	0x1fff75ca
 8001c84:	200001c4 	.word	0x200001c4
 8001c88:	200001c6 	.word	0x200001c6
 8001c8c:	40080000 	.word	0x40080000

08001c90 <Compare_pin_32>:
//// GPIO Testscript
void Compare_pin_32(uint32_t raw32, uint16_t *Lista_GPIOx, uint8_t gpst,char *outchar){
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	71fb      	strb	r3, [r7, #7]
	 * 	@param raw32       rawuint32_t data given from gpio_testscript functions
	 * 	@param Lista_GPIOx List of GPIOs bank need to be checked
	 * 	@param gpst        select report type [0 - PA_] [1 - PB_] [2 - PC_]
	 * 	@param outchar     char for record the compare result report
	 * */
	uint16_t raw32_N = raw32 & 0xFFFF;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	83bb      	strh	r3, [r7, #28]
	uint16_t raw32_P = (raw32 >> 16) & 0xFFFF;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	0c1b      	lsrs	r3, r3, #16
 8001ca8:	837b      	strh	r3, [r7, #26]
	uint8_t iaa, iab, cntr_w = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	77fb      	strb	r3, [r7, #31]
	char aadd[6];

	for(register int i = 0;i < 16;i++){
 8001cae:	2400      	movs	r4, #0
 8001cb0:	e081      	b.n	8001db6 <Compare_pin_32+0x126>
		if(Lista_GPIOx[i] >= 20){break;}
 8001cb2:	4623      	mov	r3, r4
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	4413      	add	r3, r2
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	2b13      	cmp	r3, #19
 8001cbe:	d87e      	bhi.n	8001dbe <Compare_pin_32+0x12e>

		iaa = (raw32_N >> Lista_GPIOx[i]) & 0x01;
 8001cc0:	8bbb      	ldrh	r3, [r7, #28]
 8001cc2:	4622      	mov	r2, r4
 8001cc4:	0052      	lsls	r2, r2, #1
 8001cc6:	68b9      	ldr	r1, [r7, #8]
 8001cc8:	440a      	add	r2, r1
 8001cca:	8812      	ldrh	r2, [r2, #0]
 8001ccc:	4113      	asrs	r3, r2
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	767b      	strb	r3, [r7, #25]
		iab = (raw32_P >> Lista_GPIOx[i]) & 0x01;
 8001cd6:	8b7b      	ldrh	r3, [r7, #26]
 8001cd8:	4622      	mov	r2, r4
 8001cda:	0052      	lsls	r2, r2, #1
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	440a      	add	r2, r1
 8001ce0:	8812      	ldrh	r2, [r2, #0]
 8001ce2:	4113      	asrs	r3, r2
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	763b      	strb	r3, [r7, #24]
		 if(iaa == iab){
 8001cec:	7e7a      	ldrb	r2, [r7, #25]
 8001cee:	7e3b      	ldrb	r3, [r7, #24]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d15f      	bne.n	8001db4 <Compare_pin_32+0x124>

			 cntr_w++; // count if match
 8001cf4:	7ffb      	ldrb	r3, [r7, #31]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	77fb      	strb	r3, [r7, #31]

			 //// add problem pin
			 switch(gpst){
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d00f      	beq.n	8001d20 <Compare_pin_32+0x90>
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d01b      	beq.n	8001d3c <Compare_pin_32+0xac>
			 default:
			 case 0: // A
				 sprintf(aadd, "PA%d", (uint8_t)Lista_GPIOx[i]); //
 8001d04:	4623      	mov	r3, r4
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	f107 0310 	add.w	r3, r7, #16
 8001d16:	4934      	ldr	r1, [pc, #208]	; (8001de8 <Compare_pin_32+0x158>)
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f005 fb69 	bl	80073f0 <siprintf>
				 break;
 8001d1e:	e01b      	b.n	8001d58 <Compare_pin_32+0xc8>
			 case 1: // B
			 	 sprintf(aadd, "PB%d", (uint8_t)Lista_GPIOx[i]); //
 8001d20:	4623      	mov	r3, r4
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	4413      	add	r3, r2
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	f107 0310 	add.w	r3, r7, #16
 8001d32:	492e      	ldr	r1, [pc, #184]	; (8001dec <Compare_pin_32+0x15c>)
 8001d34:	4618      	mov	r0, r3
 8001d36:	f005 fb5b 	bl	80073f0 <siprintf>
			 	 break;
 8001d3a:	e00d      	b.n	8001d58 <Compare_pin_32+0xc8>
			 case 2: // C
			 	 sprintf(aadd, "PC%d", (uint8_t)Lista_GPIOx[i]); //
 8001d3c:	4623      	mov	r3, r4
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	4413      	add	r3, r2
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	f107 0310 	add.w	r3, r7, #16
 8001d4e:	4928      	ldr	r1, [pc, #160]	; (8001df0 <Compare_pin_32+0x160>)
 8001d50:	4618      	mov	r0, r3
 8001d52:	f005 fb4d 	bl	80073f0 <siprintf>
			 	 break;
 8001d56:	bf00      	nop

			 }
			 strncat(outchar, aadd, 4);
 8001d58:	f107 0310 	add.w	r3, r7, #16
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	4619      	mov	r1, r3
 8001d60:	6838      	ldr	r0, [r7, #0]
 8001d62:	f005 fbb0 	bl	80074c6 <strncat>

			 //// add High, Low
			 if(iaa == 1){
 8001d66:	7e7b      	ldrb	r3, [r7, #25]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d106      	bne.n	8001d7a <Compare_pin_32+0xea>
				 sprintf(aadd, "_H");
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	4920      	ldr	r1, [pc, #128]	; (8001df4 <Compare_pin_32+0x164>)
 8001d72:	4618      	mov	r0, r3
 8001d74:	f005 fb3c 	bl	80073f0 <siprintf>
 8001d78:	e008      	b.n	8001d8c <Compare_pin_32+0xfc>
			 }else if(iaa == 0){
 8001d7a:	7e7b      	ldrb	r3, [r7, #25]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d105      	bne.n	8001d8c <Compare_pin_32+0xfc>
				 sprintf(aadd, "_L");
 8001d80:	f107 0310 	add.w	r3, r7, #16
 8001d84:	491c      	ldr	r1, [pc, #112]	; (8001df8 <Compare_pin_32+0x168>)
 8001d86:	4618      	mov	r0, r3
 8001d88:	f005 fb32 	bl	80073f0 <siprintf>
			 }
			 strncat(outchar, aadd, 2);
 8001d8c:	f107 0310 	add.w	r3, r7, #16
 8001d90:	2202      	movs	r2, #2
 8001d92:	4619      	mov	r1, r3
 8001d94:	6838      	ldr	r0, [r7, #0]
 8001d96:	f005 fb96 	bl	80074c6 <strncat>

			 //// add blank
			 sprintf(aadd, " ");
 8001d9a:	f107 0310 	add.w	r3, r7, #16
 8001d9e:	4917      	ldr	r1, [pc, #92]	; (8001dfc <Compare_pin_32+0x16c>)
 8001da0:	4618      	mov	r0, r3
 8001da2:	f005 fb25 	bl	80073f0 <siprintf>
			 strncat(outchar, aadd, 1);
 8001da6:	f107 0310 	add.w	r3, r7, #16
 8001daa:	2201      	movs	r2, #1
 8001dac:	4619      	mov	r1, r3
 8001dae:	6838      	ldr	r0, [r7, #0]
 8001db0:	f005 fb89 	bl	80074c6 <strncat>
	for(register int i = 0;i < 16;i++){
 8001db4:	3401      	adds	r4, #1
 8001db6:	2c0f      	cmp	r4, #15
 8001db8:	f77f af7b 	ble.w	8001cb2 <Compare_pin_32+0x22>
 8001dbc:	e000      	b.n	8001dc0 <Compare_pin_32+0x130>
		if(Lista_GPIOx[i] >= 20){break;}
 8001dbe:	bf00      	nop
		 }
	}

	if(!cntr_w){
 8001dc0:	7ffb      	ldrb	r3, [r7, #31]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10c      	bne.n	8001de0 <Compare_pin_32+0x150>
		sprintf(aadd, "_PASS");
 8001dc6:	f107 0310 	add.w	r3, r7, #16
 8001dca:	490d      	ldr	r1, [pc, #52]	; (8001e00 <Compare_pin_32+0x170>)
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f005 fb0f 	bl	80073f0 <siprintf>
		strncat(outchar, aadd, 7);
 8001dd2:	f107 0310 	add.w	r3, r7, #16
 8001dd6:	2207      	movs	r2, #7
 8001dd8:	4619      	mov	r1, r3
 8001dda:	6838      	ldr	r0, [r7, #0]
 8001ddc:	f005 fb73 	bl	80074c6 <strncat>
	}
}
 8001de0:	bf00      	nop
 8001de2:	3724      	adds	r7, #36	; 0x24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd90      	pop	{r4, r7, pc}
 8001de8:	08009804 	.word	0x08009804
 8001dec:	0800980c 	.word	0x0800980c
 8001df0:	08009814 	.word	0x08009814
 8001df4:	0800981c 	.word	0x0800981c
 8001df8:	08009820 	.word	0x08009820
 8001dfc:	08009824 	.word	0x08009824
 8001e00:	08009828 	.word	0x08009828

08001e04 <resetgpio_char>:

//// GPIO Testscript
void resetgpio_char(){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0

	sprintf(WR_A_PUPDR, "\r\nA_PUR: ");
 8001e08:	4912      	ldr	r1, [pc, #72]	; (8001e54 <resetgpio_char+0x50>)
 8001e0a:	4813      	ldr	r0, [pc, #76]	; (8001e58 <resetgpio_char+0x54>)
 8001e0c:	f005 faf0 	bl	80073f0 <siprintf>
	sprintf(WR_B_PUPDR, "\r\nB_PUR: ");
 8001e10:	4912      	ldr	r1, [pc, #72]	; (8001e5c <resetgpio_char+0x58>)
 8001e12:	4813      	ldr	r0, [pc, #76]	; (8001e60 <resetgpio_char+0x5c>)
 8001e14:	f005 faec 	bl	80073f0 <siprintf>
	sprintf(WR_C_PUPDR, "\r\nC_PUR: ");
 8001e18:	4912      	ldr	r1, [pc, #72]	; (8001e64 <resetgpio_char+0x60>)
 8001e1a:	4813      	ldr	r0, [pc, #76]	; (8001e68 <resetgpio_char+0x64>)
 8001e1c:	f005 fae8 	bl	80073f0 <siprintf>

	sprintf(WR_A_OPP, "\r\nA_OPP: ");
 8001e20:	4912      	ldr	r1, [pc, #72]	; (8001e6c <resetgpio_char+0x68>)
 8001e22:	4813      	ldr	r0, [pc, #76]	; (8001e70 <resetgpio_char+0x6c>)
 8001e24:	f005 fae4 	bl	80073f0 <siprintf>
	sprintf(WR_B_OPP, "\r\nB_OPP: ");
 8001e28:	4912      	ldr	r1, [pc, #72]	; (8001e74 <resetgpio_char+0x70>)
 8001e2a:	4813      	ldr	r0, [pc, #76]	; (8001e78 <resetgpio_char+0x74>)
 8001e2c:	f005 fae0 	bl	80073f0 <siprintf>
	sprintf(WR_C_OPP, "\r\nC_OPP: ");
 8001e30:	4912      	ldr	r1, [pc, #72]	; (8001e7c <resetgpio_char+0x78>)
 8001e32:	4813      	ldr	r0, [pc, #76]	; (8001e80 <resetgpio_char+0x7c>)
 8001e34:	f005 fadc 	bl	80073f0 <siprintf>

	sprintf(WR_A_OOD, "\r\nA_OOD: ");
 8001e38:	4912      	ldr	r1, [pc, #72]	; (8001e84 <resetgpio_char+0x80>)
 8001e3a:	4813      	ldr	r0, [pc, #76]	; (8001e88 <resetgpio_char+0x84>)
 8001e3c:	f005 fad8 	bl	80073f0 <siprintf>
	sprintf(WR_B_OOD, "\r\nB_OOD: ");
 8001e40:	4912      	ldr	r1, [pc, #72]	; (8001e8c <resetgpio_char+0x88>)
 8001e42:	4813      	ldr	r0, [pc, #76]	; (8001e90 <resetgpio_char+0x8c>)
 8001e44:	f005 fad4 	bl	80073f0 <siprintf>
	sprintf(WR_C_OOD, "\r\nC_OOD: ");
 8001e48:	4912      	ldr	r1, [pc, #72]	; (8001e94 <resetgpio_char+0x90>)
 8001e4a:	4813      	ldr	r0, [pc, #76]	; (8001e98 <resetgpio_char+0x94>)
 8001e4c:	f005 fad0 	bl	80073f0 <siprintf>
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	08009830 	.word	0x08009830
 8001e58:	2000005c 	.word	0x2000005c
 8001e5c:	0800983c 	.word	0x0800983c
 8001e60:	20000084 	.word	0x20000084
 8001e64:	08009848 	.word	0x08009848
 8001e68:	200000ac 	.word	0x200000ac
 8001e6c:	08009854 	.word	0x08009854
 8001e70:	200000d4 	.word	0x200000d4
 8001e74:	08009860 	.word	0x08009860
 8001e78:	200000fc 	.word	0x200000fc
 8001e7c:	0800986c 	.word	0x0800986c
 8001e80:	20000124 	.word	0x20000124
 8001e84:	08009878 	.word	0x08009878
 8001e88:	2000014c 	.word	0x2000014c
 8001e8c:	08009884 	.word	0x08009884
 8001e90:	20000174 	.word	0x20000174
 8001e94:	08009890 	.word	0x08009890
 8001e98:	2000019c 	.word	0x2000019c

08001e9c <CheckAllPass>:

//// GPIO Testscript
void CheckAllPass(){
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
	cnt_allpass = 0; // init reset
 8001ea0:	4b32      	ldr	r3, [pc, #200]	; (8001f6c <CheckAllPass+0xd0>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]

	//// lazy Cat cat chekallpass
	////  \r,\n count as 1
	if(WR_A_PUPDR[9] == 95){cnt_allpass++;} //// 95 = "_"
 8001ea6:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <CheckAllPass+0xd4>)
 8001ea8:	7a5b      	ldrb	r3, [r3, #9]
 8001eaa:	2b5f      	cmp	r3, #95	; 0x5f
 8001eac:	d105      	bne.n	8001eba <CheckAllPass+0x1e>
 8001eae:	4b2f      	ldr	r3, [pc, #188]	; (8001f6c <CheckAllPass+0xd0>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <CheckAllPass+0xd0>)
 8001eb8:	701a      	strb	r2, [r3, #0]
	if(WR_B_PUPDR[9] == 95){cnt_allpass++;}
 8001eba:	4b2e      	ldr	r3, [pc, #184]	; (8001f74 <CheckAllPass+0xd8>)
 8001ebc:	7a5b      	ldrb	r3, [r3, #9]
 8001ebe:	2b5f      	cmp	r3, #95	; 0x5f
 8001ec0:	d105      	bne.n	8001ece <CheckAllPass+0x32>
 8001ec2:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <CheckAllPass+0xd0>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <CheckAllPass+0xd0>)
 8001ecc:	701a      	strb	r2, [r3, #0]
	if(strlen(WR_C_PUPDR) <= 16 && WR_C_PUPDR[10] == 67){cnt_allpass++;}// PC_13
 8001ece:	482a      	ldr	r0, [pc, #168]	; (8001f78 <CheckAllPass+0xdc>)
 8001ed0:	f7fe f9f6 	bl	80002c0 <strlen>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b10      	cmp	r3, #16
 8001ed8:	d809      	bhi.n	8001eee <CheckAllPass+0x52>
 8001eda:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <CheckAllPass+0xdc>)
 8001edc:	7a9b      	ldrb	r3, [r3, #10]
 8001ede:	2b43      	cmp	r3, #67	; 0x43
 8001ee0:	d105      	bne.n	8001eee <CheckAllPass+0x52>
 8001ee2:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <CheckAllPass+0xd0>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <CheckAllPass+0xd0>)
 8001eec:	701a      	strb	r2, [r3, #0]

	if(WR_A_OPP[9] == 95){cnt_allpass++;}
 8001eee:	4b23      	ldr	r3, [pc, #140]	; (8001f7c <CheckAllPass+0xe0>)
 8001ef0:	7a5b      	ldrb	r3, [r3, #9]
 8001ef2:	2b5f      	cmp	r3, #95	; 0x5f
 8001ef4:	d105      	bne.n	8001f02 <CheckAllPass+0x66>
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <CheckAllPass+0xd0>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	3301      	adds	r3, #1
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <CheckAllPass+0xd0>)
 8001f00:	701a      	strb	r2, [r3, #0]
	if(WR_B_OPP[9] == 95){cnt_allpass++;}
 8001f02:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <CheckAllPass+0xe4>)
 8001f04:	7a5b      	ldrb	r3, [r3, #9]
 8001f06:	2b5f      	cmp	r3, #95	; 0x5f
 8001f08:	d105      	bne.n	8001f16 <CheckAllPass+0x7a>
 8001f0a:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <CheckAllPass+0xd0>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <CheckAllPass+0xd0>)
 8001f14:	701a      	strb	r2, [r3, #0]
	if(WR_C_OPP[9] == 95){cnt_allpass++;}
 8001f16:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <CheckAllPass+0xe8>)
 8001f18:	7a5b      	ldrb	r3, [r3, #9]
 8001f1a:	2b5f      	cmp	r3, #95	; 0x5f
 8001f1c:	d105      	bne.n	8001f2a <CheckAllPass+0x8e>
 8001f1e:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <CheckAllPass+0xd0>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	3301      	adds	r3, #1
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <CheckAllPass+0xd0>)
 8001f28:	701a      	strb	r2, [r3, #0]

	if(WR_A_OOD[9] == 95){cnt_allpass++;}
 8001f2a:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <CheckAllPass+0xec>)
 8001f2c:	7a5b      	ldrb	r3, [r3, #9]
 8001f2e:	2b5f      	cmp	r3, #95	; 0x5f
 8001f30:	d105      	bne.n	8001f3e <CheckAllPass+0xa2>
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <CheckAllPass+0xd0>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	3301      	adds	r3, #1
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <CheckAllPass+0xd0>)
 8001f3c:	701a      	strb	r2, [r3, #0]
	if(WR_B_OOD[9] == 95){cnt_allpass++;}
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <CheckAllPass+0xf0>)
 8001f40:	7a5b      	ldrb	r3, [r3, #9]
 8001f42:	2b5f      	cmp	r3, #95	; 0x5f
 8001f44:	d105      	bne.n	8001f52 <CheckAllPass+0xb6>
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <CheckAllPass+0xd0>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <CheckAllPass+0xd0>)
 8001f50:	701a      	strb	r2, [r3, #0]
	if(WR_C_OOD[9] == 95){cnt_allpass++;}
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <CheckAllPass+0xf4>)
 8001f54:	7a5b      	ldrb	r3, [r3, #9]
 8001f56:	2b5f      	cmp	r3, #95	; 0x5f
 8001f58:	d105      	bne.n	8001f66 <CheckAllPass+0xca>
 8001f5a:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <CheckAllPass+0xd0>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b02      	ldr	r3, [pc, #8]	; (8001f6c <CheckAllPass+0xd0>)
 8001f64:	701a      	strb	r2, [r3, #0]

}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000532 	.word	0x20000532
 8001f70:	2000005c 	.word	0x2000005c
 8001f74:	20000084 	.word	0x20000084
 8001f78:	200000ac 	.word	0x200000ac
 8001f7c:	200000d4 	.word	0x200000d4
 8001f80:	200000fc 	.word	0x200000fc
 8001f84:	20000124 	.word	0x20000124
 8001f88:	2000014c 	.word	0x2000014c
 8001f8c:	20000174 	.word	0x20000174
 8001f90:	2000019c 	.word	0x2000019c

08001f94 <HAL_GPIO_EXTI_Callback>:

//// ----------------GPIO_EXTI_Callback-----------------------------------------

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fa4:	d116      	bne.n	8001fd4 <HAL_GPIO_EXTI_Callback+0x40>
		bluecounter++;
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_GPIO_EXTI_Callback+0x48>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	3301      	adds	r3, #1
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_GPIO_EXTI_Callback+0x48>)
 8001fb0:	701a      	strb	r2, [r3, #0]
		bluecounter%=4;
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <HAL_GPIO_EXTI_Callback+0x48>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <HAL_GPIO_EXTI_Callback+0x48>)
 8001fbe:	701a      	strb	r2, [r3, #0]

		flag_gpioselftest = 1;
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]
		timestamp_selftestdelay = HAL_GetTick() + 600;
 8001fc6:	f000 faa7 	bl	8002518 <HAL_GetTick>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001fd0:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <HAL_GPIO_EXTI_Callback+0x50>)
 8001fd2:	6013      	str	r3, [r2, #0]
		}
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000530 	.word	0x20000530
 8001fe0:	2000053c 	.word	0x2000053c
 8001fe4:	20000538 	.word	0x20000538

08001fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fec:	b672      	cpsid	i
}
 8001fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <Error_Handler+0x8>
	...

08001ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <HAL_MspInit+0x44>)
 8001ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffe:	4a0e      	ldr	r2, [pc, #56]	; (8002038 <HAL_MspInit+0x44>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6613      	str	r3, [r2, #96]	; 0x60
 8002006:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <HAL_MspInit+0x44>)
 8002008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_MspInit+0x44>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	4a08      	ldr	r2, [pc, #32]	; (8002038 <HAL_MspInit+0x44>)
 8002018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201c:	6593      	str	r3, [r2, #88]	; 0x58
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_MspInit+0x44>)
 8002020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800202a:	f002 fe8d 	bl	8004d48 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000

0800203c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b098      	sub	sp, #96	; 0x60
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	2254      	movs	r2, #84	; 0x54
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f005 fa32 	bl	80074b6 <memset>
  if(hadc->Instance==ADC1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800205a:	d14f      	bne.n	80020fc <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800205c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002060:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002062:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002066:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	4618      	mov	r0, r3
 800206e:	f003 fbaf 	bl	80057d0 <HAL_RCCEx_PeriphCLKConfig>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8002078:	f7ff ffb6 	bl	8001fe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800207c:	4b21      	ldr	r3, [pc, #132]	; (8002104 <HAL_ADC_MspInit+0xc8>)
 800207e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002080:	4a20      	ldr	r2, [pc, #128]	; (8002104 <HAL_ADC_MspInit+0xc8>)
 8002082:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002086:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002088:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <HAL_ADC_MspInit+0xc8>)
 800208a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002094:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <HAL_ADC_MspInit+0xcc>)
 8002096:	4a1d      	ldr	r2, [pc, #116]	; (800210c <HAL_ADC_MspInit+0xd0>)
 8002098:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800209a:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_ADC_MspInit+0xcc>)
 800209c:	2205      	movs	r2, #5
 800209e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_ADC_MspInit+0xcc>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_ADC_MspInit+0xcc>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020ac:	4b16      	ldr	r3, [pc, #88]	; (8002108 <HAL_ADC_MspInit+0xcc>)
 80020ae:	2280      	movs	r2, #128	; 0x80
 80020b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_ADC_MspInit+0xcc>)
 80020b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <HAL_ADC_MspInit+0xcc>)
 80020bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_ADC_MspInit+0xcc>)
 80020c4:	2220      	movs	r2, #32
 80020c6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <HAL_ADC_MspInit+0xcc>)
 80020ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020d0:	480d      	ldr	r0, [pc, #52]	; (8002108 <HAL_ADC_MspInit+0xcc>)
 80020d2:	f002 f957 	bl	8004384 <HAL_DMA_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_ADC_MspInit+0xa4>
    {
      Error_Handler();
 80020dc:	f7ff ff84 	bl	8001fe8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a09      	ldr	r2, [pc, #36]	; (8002108 <HAL_ADC_MspInit+0xcc>)
 80020e4:	655a      	str	r2, [r3, #84]	; 0x54
 80020e6:	4a08      	ldr	r2, [pc, #32]	; (8002108 <HAL_ADC_MspInit+0xcc>)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2100      	movs	r1, #0
 80020f0:	2012      	movs	r0, #18
 80020f2:	f002 f912 	bl	800431a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80020f6:	2012      	movs	r0, #18
 80020f8:	f002 f929 	bl	800434e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020fc:	bf00      	nop
 80020fe:	3760      	adds	r7, #96	; 0x60
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	20000424 	.word	0x20000424
 800210c:	40020008 	.word	0x40020008

08002110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b09e      	sub	sp, #120	; 0x78
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	2254      	movs	r2, #84	; 0x54
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f005 f9c0 	bl	80074b6 <memset>
  if(huart->Instance==LPUART1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a1f      	ldr	r2, [pc, #124]	; (80021b8 <HAL_UART_MspInit+0xa8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d136      	bne.n	80021ae <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002140:	2320      	movs	r3, #32
 8002142:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002144:	2300      	movs	r3, #0
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002148:	f107 0310 	add.w	r3, r7, #16
 800214c:	4618      	mov	r0, r3
 800214e:	f003 fb3f 	bl	80057d0 <HAL_RCCEx_PeriphCLKConfig>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002158:	f7ff ff46 	bl	8001fe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <HAL_UART_MspInit+0xac>)
 800215e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002160:	4a16      	ldr	r2, [pc, #88]	; (80021bc <HAL_UART_MspInit+0xac>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002168:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_UART_MspInit+0xac>)
 800216a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_UART_MspInit+0xac>)
 8002176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002178:	4a10      	ldr	r2, [pc, #64]	; (80021bc <HAL_UART_MspInit+0xac>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002180:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_UART_MspInit+0xac>)
 8002182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800218c:	230c      	movs	r3, #12
 800218e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800219c:	230c      	movs	r3, #12
 800219e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021a4:	4619      	mov	r1, r3
 80021a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021aa:	f002 fb5d 	bl	8004868 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80021ae:	bf00      	nop
 80021b0:	3778      	adds	r7, #120	; 0x78
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40008000 	.word	0x40008000
 80021bc:	40021000 	.word	0x40021000

080021c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <NMI_Handler+0x4>

080021c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ca:	e7fe      	b.n	80021ca <HardFault_Handler+0x4>

080021cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d0:	e7fe      	b.n	80021d0 <MemManage_Handler+0x4>

080021d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d6:	e7fe      	b.n	80021d6 <BusFault_Handler+0x4>

080021d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021dc:	e7fe      	b.n	80021dc <UsageFault_Handler+0x4>

080021de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800220c:	f000 f972 	bl	80024f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}

08002214 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <DMA1_Channel1_IRQHandler+0x10>)
 800221a:	f002 f9d6 	bl	80045ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000424 	.word	0x20000424

08002228 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <ADC1_2_IRQHandler+0x10>)
 800222e:	f000 fe7b 	bl	8002f28 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200003b8 	.word	0x200003b8

0800223c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002240:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002244:	f002 fcc4 	bl	8004bd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}

0800224c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return 1;
 8002250:	2301      	movs	r3, #1
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <_kill>:

int _kill(int pid, int sig)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002266:	f005 f98b 	bl	8007580 <__errno>
 800226a:	4603      	mov	r3, r0
 800226c:	2216      	movs	r2, #22
 800226e:	601a      	str	r2, [r3, #0]
  return -1;
 8002270:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <_exit>:

void _exit (int status)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002284:	f04f 31ff 	mov.w	r1, #4294967295
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ffe7 	bl	800225c <_kill>
  while (1) {}    /* Make sure we hang here */
 800228e:	e7fe      	b.n	800228e <_exit+0x12>

08002290 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	e00a      	b.n	80022b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022a2:	f3af 8000 	nop.w
 80022a6:	4601      	mov	r1, r0
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	60ba      	str	r2, [r7, #8]
 80022ae:	b2ca      	uxtb	r2, r1
 80022b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	3301      	adds	r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	dbf0      	blt.n	80022a2 <_read+0x12>
  }

  return len;
 80022c0:	687b      	ldr	r3, [r7, #4]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e009      	b.n	80022f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	60ba      	str	r2, [r7, #8]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3301      	adds	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	dbf1      	blt.n	80022dc <_write+0x12>
  }
  return len;
 80022f8:	687b      	ldr	r3, [r7, #4]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <_close>:

int _close(int file)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800232a:	605a      	str	r2, [r3, #4]
  return 0;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <_isatty>:

int _isatty(int file)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002342:	2301      	movs	r3, #1
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002374:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <_sbrk+0x5c>)
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <_sbrk+0x60>)
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <_sbrk+0x64>)
 800238a:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <_sbrk+0x68>)
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <_sbrk+0x64>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	429a      	cmp	r2, r3
 800239a:	d207      	bcs.n	80023ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800239c:	f005 f8f0 	bl	8007580 <__errno>
 80023a0:	4603      	mov	r3, r0
 80023a2:	220c      	movs	r2, #12
 80023a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
 80023aa:	e009      	b.n	80023c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <_sbrk+0x64>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <_sbrk+0x64>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <_sbrk+0x64>)
 80023bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20020000 	.word	0x20020000
 80023cc:	00000400 	.word	0x00000400
 80023d0:	20000620 	.word	0x20000620
 80023d4:	20000778 	.word	0x20000778

080023d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <SystemInit+0x20>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <SystemInit+0x20>)
 80023e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023fc:	480d      	ldr	r0, [pc, #52]	; (8002434 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002400:	480d      	ldr	r0, [pc, #52]	; (8002438 <LoopForever+0x6>)
  ldr r1, =_edata
 8002402:	490e      	ldr	r1, [pc, #56]	; (800243c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002404:	4a0e      	ldr	r2, [pc, #56]	; (8002440 <LoopForever+0xe>)
  movs r3, #0
 8002406:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002408:	e002      	b.n	8002410 <LoopCopyDataInit>

0800240a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800240a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800240c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240e:	3304      	adds	r3, #4

08002410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002414:	d3f9      	bcc.n	800240a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002416:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002418:	4c0b      	ldr	r4, [pc, #44]	; (8002448 <LoopForever+0x16>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800241c:	e001      	b.n	8002422 <LoopFillZerobss>

0800241e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002420:	3204      	adds	r2, #4

08002422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002424:	d3fb      	bcc.n	800241e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002426:	f7ff ffd7 	bl	80023d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800242a:	f005 f8af 	bl	800758c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800242e:	f7fe ff6b 	bl	8001308 <main>

08002432 <LoopForever>:

LoopForever:
    b LoopForever
 8002432:	e7fe      	b.n	8002432 <LoopForever>
  ldr   r0, =_estack
 8002434:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800243c:	2000039c 	.word	0x2000039c
  ldr r2, =_sidata
 8002440:	08009c5c 	.word	0x08009c5c
  ldr r2, =_sbss
 8002444:	2000039c 	.word	0x2000039c
  ldr r4, =_ebss
 8002448:	20000774 	.word	0x20000774

0800244c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800244c:	e7fe      	b.n	800244c <ADC3_IRQHandler>

0800244e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002458:	2003      	movs	r0, #3
 800245a:	f001 ff53 	bl	8004304 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800245e:	2000      	movs	r0, #0
 8002460:	f000 f80e 	bl	8002480 <HAL_InitTick>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	71fb      	strb	r3, [r7, #7]
 800246e:	e001      	b.n	8002474 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002470:	f7ff fdc0 	bl	8001ff4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002474:	79fb      	ldrb	r3, [r7, #7]

}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002488:	2300      	movs	r3, #0
 800248a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <HAL_InitTick+0x68>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d022      	beq.n	80024da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002494:	4b15      	ldr	r3, [pc, #84]	; (80024ec <HAL_InitTick+0x6c>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <HAL_InitTick+0x68>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a8:	4618      	mov	r0, r3
 80024aa:	f001 ff5e 	bl	800436a <HAL_SYSTICK_Config>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10f      	bne.n	80024d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b0f      	cmp	r3, #15
 80024b8:	d809      	bhi.n	80024ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024ba:	2200      	movs	r2, #0
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	f04f 30ff 	mov.w	r0, #4294967295
 80024c2:	f001 ff2a 	bl	800431a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024c6:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <HAL_InitTick+0x70>)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	e007      	b.n	80024de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
 80024d2:	e004      	b.n	80024de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	e001      	b.n	80024de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024de:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	200001d0 	.word	0x200001d0
 80024ec:	200001c8 	.word	0x200001c8
 80024f0:	200001cc 	.word	0x200001cc

080024f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_IncTick+0x1c>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_IncTick+0x20>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4413      	add	r3, r2
 8002502:	4a03      	ldr	r2, [pc, #12]	; (8002510 <HAL_IncTick+0x1c>)
 8002504:	6013      	str	r3, [r2, #0]
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	20000624 	.word	0x20000624
 8002514:	200001d0 	.word	0x200001d0

08002518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return uwTick;
 800251c:	4b03      	ldr	r3, [pc, #12]	; (800252c <HAL_GetTick+0x14>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000624 	.word	0x20000624

08002530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002538:	f7ff ffee 	bl	8002518 <HAL_GetTick>
 800253c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d004      	beq.n	8002554 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800254a:	4b09      	ldr	r3, [pc, #36]	; (8002570 <HAL_Delay+0x40>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4413      	add	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002554:	bf00      	nop
 8002556:	f7ff ffdf 	bl	8002518 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	429a      	cmp	r2, r3
 8002564:	d8f7      	bhi.n	8002556 <HAL_Delay+0x26>
  {
  }
}
 8002566:	bf00      	nop
 8002568:	bf00      	nop
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	200001d0 	.word	0x200001d0

08002574 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	609a      	str	r2, [r3, #8]
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	609a      	str	r2, [r3, #8]
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	3360      	adds	r3, #96	; 0x60
 80025ee:	461a      	mov	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <LL_ADC_SetOffset+0x44>)
 80025fe:	4013      	ands	r3, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	4313      	orrs	r3, r2
 800260c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002614:	bf00      	nop
 8002616:	371c      	adds	r7, #28
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	03fff000 	.word	0x03fff000

08002624 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3360      	adds	r3, #96	; 0x60
 8002632:	461a      	mov	r2, r3
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3360      	adds	r3, #96	; 0x60
 8002660:	461a      	mov	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	431a      	orrs	r2, r3
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800267a:	bf00      	nop
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002686:	b480      	push	{r7}
 8002688:	b087      	sub	sp, #28
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	3360      	adds	r3, #96	; 0x60
 8002696:	461a      	mov	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	431a      	orrs	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80026b0:	bf00      	nop
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	3360      	adds	r3, #96	; 0x60
 80026cc:	461a      	mov	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	431a      	orrs	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	615a      	str	r2, [r3, #20]
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800273e:	b480      	push	{r7}
 8002740:	b087      	sub	sp, #28
 8002742:	af00      	add	r7, sp, #0
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	3330      	adds	r3, #48	; 0x30
 800274e:	461a      	mov	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	4413      	add	r3, r2
 800275c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	211f      	movs	r1, #31
 800276a:	fa01 f303 	lsl.w	r3, r1, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	401a      	ands	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	0e9b      	lsrs	r3, r3, #26
 8002776:	f003 011f 	and.w	r1, r3, #31
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	431a      	orrs	r2, r3
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800278a:	bf00      	nop
 800278c:	371c      	adds	r7, #28
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	3314      	adds	r3, #20
 80027cc:	461a      	mov	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	0e5b      	lsrs	r3, r3, #25
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	4413      	add	r3, r2
 80027da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	0d1b      	lsrs	r3, r3, #20
 80027e4:	f003 031f 	and.w	r3, r3, #31
 80027e8:	2107      	movs	r1, #7
 80027ea:	fa01 f303 	lsl.w	r3, r1, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	401a      	ands	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	0d1b      	lsrs	r3, r3, #20
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002800:	431a      	orrs	r2, r3
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002806:	bf00      	nop
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a0f      	ldr	r2, [pc, #60]	; (8002860 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d10a      	bne.n	800283e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002834:	431a      	orrs	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800283c:	e00a      	b.n	8002854 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284a:	43db      	mvns	r3, r3
 800284c:	401a      	ands	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002854:	bf00      	nop
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	407f0000 	.word	0x407f0000

08002864 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 031f 	and.w	r3, r3, #31
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002890:	4618      	mov	r0, r3
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80028ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6093      	str	r3, [r2, #8]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028d4:	d101      	bne.n	80028da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80028f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002920:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002924:	d101      	bne.n	800292a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002948:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800294c:	f043 0201 	orr.w	r2, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <LL_ADC_IsEnabled+0x18>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <LL_ADC_IsEnabled+0x1a>
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002996:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800299a:	f043 0204 	orr.w	r2, r3, #4
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d101      	bne.n	80029c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d101      	bne.n	80029ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029fc:	b590      	push	{r4, r7, lr}
 80029fe:	b089      	sub	sp, #36	; 0x24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e1af      	b.n	8002d76 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d109      	bne.n	8002a38 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff fb09 	bl	800203c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ff3f 	bl	80028c0 <LL_ADC_IsDeepPowerDownEnabled>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d004      	beq.n	8002a52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff25 	bl	800289c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff ff5a 	bl	8002910 <LL_ADC_IsInternalRegulatorEnabled>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d115      	bne.n	8002a8e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ff3e 	bl	80028e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a6c:	4b9f      	ldr	r3, [pc, #636]	; (8002cec <HAL_ADC_Init+0x2f0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	099b      	lsrs	r3, r3, #6
 8002a72:	4a9f      	ldr	r2, [pc, #636]	; (8002cf0 <HAL_ADC_Init+0x2f4>)
 8002a74:	fba2 2303 	umull	r2, r3, r2, r3
 8002a78:	099b      	lsrs	r3, r3, #6
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a80:	e002      	b.n	8002a88 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f9      	bne.n	8002a82 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff ff3c 	bl	8002910 <LL_ADC_IsInternalRegulatorEnabled>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10d      	bne.n	8002aba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa2:	f043 0210 	orr.w	r2, r3, #16
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aae:	f043 0201 	orr.w	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff ff75 	bl	80029ae <LL_ADC_REG_IsConversionOngoing>
 8002ac4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f040 8148 	bne.w	8002d64 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f040 8144 	bne.w	8002d64 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ae4:	f043 0202 	orr.w	r2, r3, #2
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff ff35 	bl	8002960 <LL_ADC_IsEnabled>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d141      	bne.n	8002b80 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b04:	d004      	beq.n	8002b10 <HAL_ADC_Init+0x114>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a7a      	ldr	r2, [pc, #488]	; (8002cf4 <HAL_ADC_Init+0x2f8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d10f      	bne.n	8002b30 <HAL_ADC_Init+0x134>
 8002b10:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b14:	f7ff ff24 	bl	8002960 <LL_ADC_IsEnabled>
 8002b18:	4604      	mov	r4, r0
 8002b1a:	4876      	ldr	r0, [pc, #472]	; (8002cf4 <HAL_ADC_Init+0x2f8>)
 8002b1c:	f7ff ff20 	bl	8002960 <LL_ADC_IsEnabled>
 8002b20:	4603      	mov	r3, r0
 8002b22:	4323      	orrs	r3, r4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	e012      	b.n	8002b56 <HAL_ADC_Init+0x15a>
 8002b30:	4871      	ldr	r0, [pc, #452]	; (8002cf8 <HAL_ADC_Init+0x2fc>)
 8002b32:	f7ff ff15 	bl	8002960 <LL_ADC_IsEnabled>
 8002b36:	4604      	mov	r4, r0
 8002b38:	4870      	ldr	r0, [pc, #448]	; (8002cfc <HAL_ADC_Init+0x300>)
 8002b3a:	f7ff ff11 	bl	8002960 <LL_ADC_IsEnabled>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	431c      	orrs	r4, r3
 8002b42:	486f      	ldr	r0, [pc, #444]	; (8002d00 <HAL_ADC_Init+0x304>)
 8002b44:	f7ff ff0c 	bl	8002960 <LL_ADC_IsEnabled>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	4323      	orrs	r3, r4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	bf0c      	ite	eq
 8002b50:	2301      	moveq	r3, #1
 8002b52:	2300      	movne	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d012      	beq.n	8002b80 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b62:	d004      	beq.n	8002b6e <HAL_ADC_Init+0x172>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a62      	ldr	r2, [pc, #392]	; (8002cf4 <HAL_ADC_Init+0x2f8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_Init+0x176>
 8002b6e:	4a65      	ldr	r2, [pc, #404]	; (8002d04 <HAL_ADC_Init+0x308>)
 8002b70:	e000      	b.n	8002b74 <HAL_ADC_Init+0x178>
 8002b72:	4a65      	ldr	r2, [pc, #404]	; (8002d08 <HAL_ADC_Init+0x30c>)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	f7ff fcfa 	bl	8002574 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	7f5b      	ldrb	r3, [r3, #29]
 8002b84:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b8a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002b90:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002b96:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b9e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d106      	bne.n	8002bbc <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	045b      	lsls	r3, r3, #17
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d009      	beq.n	8002bd8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	4b4b      	ldr	r3, [pc, #300]	; (8002d0c <HAL_ADC_Init+0x310>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	69b9      	ldr	r1, [r7, #24]
 8002be8:	430b      	orrs	r3, r1
 8002bea:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fed1 	bl	80029ae <LL_ADC_REG_IsConversionOngoing>
 8002c0c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fede 	bl	80029d4 <LL_ADC_INJ_IsConversionOngoing>
 8002c18:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d17f      	bne.n	8002d20 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d17c      	bne.n	8002d20 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c2a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c32:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c42:	f023 0302 	bic.w	r3, r3, #2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	69b9      	ldr	r1, [r7, #24]
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d017      	beq.n	8002c88 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002c70:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6911      	ldr	r1, [r2, #16]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	430b      	orrs	r3, r1
 8002c82:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002c86:	e013      	b.n	8002cb0 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c96:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ca8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d12a      	bne.n	8002d10 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002cc4:	f023 0304 	bic.w	r3, r3, #4
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002cd0:	4311      	orrs	r1, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002cd6:	4311      	orrs	r1, r2
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0201 	orr.w	r2, r2, #1
 8002ce8:	611a      	str	r2, [r3, #16]
 8002cea:	e019      	b.n	8002d20 <HAL_ADC_Init+0x324>
 8002cec:	200001c8 	.word	0x200001c8
 8002cf0:	053e2d63 	.word	0x053e2d63
 8002cf4:	50000100 	.word	0x50000100
 8002cf8:	50000400 	.word	0x50000400
 8002cfc:	50000500 	.word	0x50000500
 8002d00:	50000600 	.word	0x50000600
 8002d04:	50000300 	.word	0x50000300
 8002d08:	50000700 	.word	0x50000700
 8002d0c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d10c      	bne.n	8002d42 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f023 010f 	bic.w	r1, r3, #15
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	1e5a      	subs	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8002d40:	e007      	b.n	8002d52 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 020f 	bic.w	r2, r2, #15
 8002d50:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d56:	f023 0303 	bic.w	r3, r3, #3
 8002d5a:	f043 0201 	orr.w	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d62:	e007      	b.n	8002d74 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d68:	f043 0210 	orr.w	r2, r3, #16
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d74:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3724      	adds	r7, #36	; 0x24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd90      	pop	{r4, r7, pc}
 8002d7e:	bf00      	nop

08002d80 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d94:	d004      	beq.n	8002da0 <HAL_ADC_Start_DMA+0x20>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a5a      	ldr	r2, [pc, #360]	; (8002f04 <HAL_ADC_Start_DMA+0x184>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d101      	bne.n	8002da4 <HAL_ADC_Start_DMA+0x24>
 8002da0:	4b59      	ldr	r3, [pc, #356]	; (8002f08 <HAL_ADC_Start_DMA+0x188>)
 8002da2:	e000      	b.n	8002da6 <HAL_ADC_Start_DMA+0x26>
 8002da4:	4b59      	ldr	r3, [pc, #356]	; (8002f0c <HAL_ADC_Start_DMA+0x18c>)
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fd5c 	bl	8002864 <LL_ADC_GetMultimode>
 8002dac:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fdfb 	bl	80029ae <LL_ADC_REG_IsConversionOngoing>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f040 809b 	bne.w	8002ef6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_ADC_Start_DMA+0x4e>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e096      	b.n	8002efc <HAL_ADC_Start_DMA+0x17c>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a4d      	ldr	r2, [pc, #308]	; (8002f10 <HAL_ADC_Start_DMA+0x190>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d008      	beq.n	8002df2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	2b05      	cmp	r3, #5
 8002dea:	d002      	beq.n	8002df2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	2b09      	cmp	r3, #9
 8002df0:	d17a      	bne.n	8002ee8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 ff60 	bl	8003cb8 <ADC_Enable>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d16d      	bne.n	8002ede <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e06:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a3a      	ldr	r2, [pc, #232]	; (8002f04 <HAL_ADC_Start_DMA+0x184>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d009      	beq.n	8002e34 <HAL_ADC_Start_DMA+0xb4>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a3b      	ldr	r2, [pc, #236]	; (8002f14 <HAL_ADC_Start_DMA+0x194>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d002      	beq.n	8002e30 <HAL_ADC_Start_DMA+0xb0>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	e003      	b.n	8002e38 <HAL_ADC_Start_DMA+0xb8>
 8002e30:	4b39      	ldr	r3, [pc, #228]	; (8002f18 <HAL_ADC_Start_DMA+0x198>)
 8002e32:	e001      	b.n	8002e38 <HAL_ADC_Start_DMA+0xb8>
 8002e34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d002      	beq.n	8002e46 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d105      	bne.n	8002e52 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d006      	beq.n	8002e6c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e62:	f023 0206 	bic.w	r2, r3, #6
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	661a      	str	r2, [r3, #96]	; 0x60
 8002e6a:	e002      	b.n	8002e72 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e76:	4a29      	ldr	r2, [pc, #164]	; (8002f1c <HAL_ADC_Start_DMA+0x19c>)
 8002e78:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7e:	4a28      	ldr	r2, [pc, #160]	; (8002f20 <HAL_ADC_Start_DMA+0x1a0>)
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	4a27      	ldr	r2, [pc, #156]	; (8002f24 <HAL_ADC_Start_DMA+0x1a4>)
 8002e88:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	221c      	movs	r2, #28
 8002e90:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0210 	orr.w	r2, r2, #16
 8002ea8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0201 	orr.w	r2, r2, #1
 8002eb8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3340      	adds	r3, #64	; 0x40
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f001 fb03 	bl	80044d4 <HAL_DMA_Start_IT>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fd55 	bl	8002986 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002edc:	e00d      	b.n	8002efa <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002ee6:	e008      	b.n	8002efa <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002ef4:	e001      	b.n	8002efa <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	50000100 	.word	0x50000100
 8002f08:	50000300 	.word	0x50000300
 8002f0c:	50000700 	.word	0x50000700
 8002f10:	50000600 	.word	0x50000600
 8002f14:	50000500 	.word	0x50000500
 8002f18:	50000400 	.word	0x50000400
 8002f1c:	08003d7d 	.word	0x08003d7d
 8002f20:	08003e55 	.word	0x08003e55
 8002f24:	08003e71 	.word	0x08003e71

08002f28 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	; 0x28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002f30:	2300      	movs	r3, #0
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f4c:	d004      	beq.n	8002f58 <HAL_ADC_IRQHandler+0x30>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a8e      	ldr	r2, [pc, #568]	; (800318c <HAL_ADC_IRQHandler+0x264>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d101      	bne.n	8002f5c <HAL_ADC_IRQHandler+0x34>
 8002f58:	4b8d      	ldr	r3, [pc, #564]	; (8003190 <HAL_ADC_IRQHandler+0x268>)
 8002f5a:	e000      	b.n	8002f5e <HAL_ADC_IRQHandler+0x36>
 8002f5c:	4b8d      	ldr	r3, [pc, #564]	; (8003194 <HAL_ADC_IRQHandler+0x26c>)
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff fc80 	bl	8002864 <LL_ADC_GetMultimode>
 8002f64:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d017      	beq.n	8002fa0 <HAL_ADC_IRQHandler+0x78>
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d012      	beq.n	8002fa0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d105      	bne.n	8002f92 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 ffd4 	bl	8003f40 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d004      	beq.n	8002fb4 <HAL_ADC_IRQHandler+0x8c>
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10b      	bne.n	8002fcc <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8094 	beq.w	80030e8 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 808e 	beq.w	80030e8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d105      	bne.n	8002fe4 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fdc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fb95 	bl	8002718 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d072      	beq.n	80030da <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a64      	ldr	r2, [pc, #400]	; (800318c <HAL_ADC_IRQHandler+0x264>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d009      	beq.n	8003012 <HAL_ADC_IRQHandler+0xea>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a65      	ldr	r2, [pc, #404]	; (8003198 <HAL_ADC_IRQHandler+0x270>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d002      	beq.n	800300e <HAL_ADC_IRQHandler+0xe6>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	e003      	b.n	8003016 <HAL_ADC_IRQHandler+0xee>
 800300e:	4b63      	ldr	r3, [pc, #396]	; (800319c <HAL_ADC_IRQHandler+0x274>)
 8003010:	e001      	b.n	8003016 <HAL_ADC_IRQHandler+0xee>
 8003012:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	4293      	cmp	r3, r2
 800301c:	d008      	beq.n	8003030 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2b05      	cmp	r3, #5
 8003028:	d002      	beq.n	8003030 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b09      	cmp	r3, #9
 800302e:	d104      	bne.n	800303a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	623b      	str	r3, [r7, #32]
 8003038:	e014      	b.n	8003064 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a53      	ldr	r2, [pc, #332]	; (800318c <HAL_ADC_IRQHandler+0x264>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d009      	beq.n	8003058 <HAL_ADC_IRQHandler+0x130>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a53      	ldr	r2, [pc, #332]	; (8003198 <HAL_ADC_IRQHandler+0x270>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d002      	beq.n	8003054 <HAL_ADC_IRQHandler+0x12c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	e003      	b.n	800305c <HAL_ADC_IRQHandler+0x134>
 8003054:	4b51      	ldr	r3, [pc, #324]	; (800319c <HAL_ADC_IRQHandler+0x274>)
 8003056:	e001      	b.n	800305c <HAL_ADC_IRQHandler+0x134>
 8003058:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800305c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d135      	bne.n	80030da <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b08      	cmp	r3, #8
 800307a:	d12e      	bne.n	80030da <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fc94 	bl	80029ae <LL_ADC_REG_IsConversionOngoing>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d11a      	bne.n	80030c2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 020c 	bic.w	r2, r2, #12
 800309a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d112      	bne.n	80030da <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	f043 0201 	orr.w	r2, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	65da      	str	r2, [r3, #92]	; 0x5c
 80030c0:	e00b      	b.n	80030da <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c6:	f043 0210 	orr.w	r2, r3, #16
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d2:	f043 0201 	orr.w	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f984 	bl	80033e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	220c      	movs	r2, #12
 80030e6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d004      	beq.n	80030fc <HAL_ADC_IRQHandler+0x1d4>
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10b      	bne.n	8003114 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 80b3 	beq.w	800326e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 80ad 	beq.w	800326e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003118:	f003 0310 	and.w	r3, r3, #16
 800311c:	2b00      	cmp	r3, #0
 800311e:	d105      	bne.n	800312c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003124:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fb30 	bl	8002796 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003136:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff faeb 	bl	8002718 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003142:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a10      	ldr	r2, [pc, #64]	; (800318c <HAL_ADC_IRQHandler+0x264>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d009      	beq.n	8003162 <HAL_ADC_IRQHandler+0x23a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a11      	ldr	r2, [pc, #68]	; (8003198 <HAL_ADC_IRQHandler+0x270>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d002      	beq.n	800315e <HAL_ADC_IRQHandler+0x236>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	e003      	b.n	8003166 <HAL_ADC_IRQHandler+0x23e>
 800315e:	4b0f      	ldr	r3, [pc, #60]	; (800319c <HAL_ADC_IRQHandler+0x274>)
 8003160:	e001      	b.n	8003166 <HAL_ADC_IRQHandler+0x23e>
 8003162:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	4293      	cmp	r3, r2
 800316c:	d008      	beq.n	8003180 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2b06      	cmp	r3, #6
 8003178:	d002      	beq.n	8003180 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b07      	cmp	r3, #7
 800317e:	d10f      	bne.n	80031a0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	623b      	str	r3, [r7, #32]
 8003188:	e01f      	b.n	80031ca <HAL_ADC_IRQHandler+0x2a2>
 800318a:	bf00      	nop
 800318c:	50000100 	.word	0x50000100
 8003190:	50000300 	.word	0x50000300
 8003194:	50000700 	.word	0x50000700
 8003198:	50000500 	.word	0x50000500
 800319c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a8b      	ldr	r2, [pc, #556]	; (80033d4 <HAL_ADC_IRQHandler+0x4ac>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d009      	beq.n	80031be <HAL_ADC_IRQHandler+0x296>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a8a      	ldr	r2, [pc, #552]	; (80033d8 <HAL_ADC_IRQHandler+0x4b0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d002      	beq.n	80031ba <HAL_ADC_IRQHandler+0x292>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	e003      	b.n	80031c2 <HAL_ADC_IRQHandler+0x29a>
 80031ba:	4b88      	ldr	r3, [pc, #544]	; (80033dc <HAL_ADC_IRQHandler+0x4b4>)
 80031bc:	e001      	b.n	80031c2 <HAL_ADC_IRQHandler+0x29a>
 80031be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031c2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d047      	beq.n	8003260 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d007      	beq.n	80031ea <HAL_ADC_IRQHandler+0x2c2>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d03f      	beq.n	8003260 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d13a      	bne.n	8003260 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f4:	2b40      	cmp	r3, #64	; 0x40
 80031f6:	d133      	bne.n	8003260 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d12e      	bne.n	8003260 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff fbe4 	bl	80029d4 <LL_ADC_INJ_IsConversionOngoing>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d11a      	bne.n	8003248 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003220:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d112      	bne.n	8003260 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323e:	f043 0201 	orr.w	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	65da      	str	r2, [r3, #92]	; 0x5c
 8003246:	e00b      	b.n	8003260 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324c:	f043 0210 	orr.w	r2, r3, #16
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003258:	f043 0201 	orr.w	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fe45 	bl	8003ef0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2260      	movs	r2, #96	; 0x60
 800326c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003274:	2b00      	cmp	r3, #0
 8003276:	d011      	beq.n	800329c <HAL_ADC_IRQHandler+0x374>
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00c      	beq.n	800329c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003286:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f8be 	bl	8003410 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2280      	movs	r2, #128	; 0x80
 800329a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d012      	beq.n	80032cc <HAL_ADC_IRQHandler+0x3a4>
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00d      	beq.n	80032cc <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fe2b 	bl	8003f18 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d012      	beq.n	80032fc <HAL_ADC_IRQHandler+0x3d4>
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00d      	beq.n	80032fc <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 fe1d 	bl	8003f2c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	2b00      	cmp	r3, #0
 8003304:	d043      	beq.n	800338e <HAL_ADC_IRQHandler+0x466>
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	d03e      	beq.n	800338e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	2b00      	cmp	r3, #0
 8003316:	d102      	bne.n	800331e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003318:	2301      	movs	r3, #1
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
 800331c:	e021      	b.n	8003362 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d015      	beq.n	8003350 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800332c:	d004      	beq.n	8003338 <HAL_ADC_IRQHandler+0x410>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a28      	ldr	r2, [pc, #160]	; (80033d4 <HAL_ADC_IRQHandler+0x4ac>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d101      	bne.n	800333c <HAL_ADC_IRQHandler+0x414>
 8003338:	4b29      	ldr	r3, [pc, #164]	; (80033e0 <HAL_ADC_IRQHandler+0x4b8>)
 800333a:	e000      	b.n	800333e <HAL_ADC_IRQHandler+0x416>
 800333c:	4b29      	ldr	r3, [pc, #164]	; (80033e4 <HAL_ADC_IRQHandler+0x4bc>)
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff fa9e 	bl	8002880 <LL_ADC_GetMultiDMATransfer>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00b      	beq.n	8003362 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800334a:	2301      	movs	r3, #1
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
 800334e:	e008      	b.n	8003362 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800335e:	2301      	movs	r3, #1
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	2b01      	cmp	r3, #1
 8003366:	d10e      	bne.n	8003386 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003378:	f043 0202 	orr.w	r2, r3, #2
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f84f 	bl	8003424 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2210      	movs	r2, #16
 800338c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003394:	2b00      	cmp	r3, #0
 8003396:	d018      	beq.n	80033ca <HAL_ADC_IRQHandler+0x4a2>
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d013      	beq.n	80033ca <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b2:	f043 0208 	orr.w	r2, r3, #8
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033c2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 fd9d 	bl	8003f04 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80033ca:	bf00      	nop
 80033cc:	3728      	adds	r7, #40	; 0x28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	50000100 	.word	0x50000100
 80033d8:	50000500 	.word	0x50000500
 80033dc:	50000400 	.word	0x50000400
 80033e0:	50000300 	.word	0x50000300
 80033e4:	50000700 	.word	0x50000700

080033e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b0b6      	sub	sp, #216	; 0xd8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003452:	2b01      	cmp	r3, #1
 8003454:	d102      	bne.n	800345c <HAL_ADC_ConfigChannel+0x24>
 8003456:	2302      	movs	r3, #2
 8003458:	f000 bc13 	b.w	8003c82 <HAL_ADC_ConfigChannel+0x84a>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff faa0 	bl	80029ae <LL_ADC_REG_IsConversionOngoing>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	f040 83f3 	bne.w	8003c5c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6859      	ldr	r1, [r3, #4]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	f7ff f95b 	bl	800273e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fa8e 	bl	80029ae <LL_ADC_REG_IsConversionOngoing>
 8003492:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fa9a 	bl	80029d4 <LL_ADC_INJ_IsConversionOngoing>
 80034a0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f040 81d9 	bne.w	8003860 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f040 81d4 	bne.w	8003860 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034c0:	d10f      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2200      	movs	r2, #0
 80034cc:	4619      	mov	r1, r3
 80034ce:	f7ff f975 	bl	80027bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff f909 	bl	80026f2 <LL_ADC_SetSamplingTimeCommonConfig>
 80034e0:	e00e      	b.n	8003500 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	6819      	ldr	r1, [r3, #0]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	461a      	mov	r2, r3
 80034f0:	f7ff f964 	bl	80027bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2100      	movs	r1, #0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff f8f9 	bl	80026f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	695a      	ldr	r2, [r3, #20]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	08db      	lsrs	r3, r3, #3
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b04      	cmp	r3, #4
 8003520:	d022      	beq.n	8003568 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	6919      	ldr	r1, [r3, #16]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003532:	f7ff f853 	bl	80025dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	6919      	ldr	r1, [r3, #16]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	461a      	mov	r2, r3
 8003544:	f7ff f89f 	bl	8002686 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	6919      	ldr	r1, [r3, #16]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	7f1b      	ldrb	r3, [r3, #28]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d102      	bne.n	800355e <HAL_ADC_ConfigChannel+0x126>
 8003558:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800355c:	e000      	b.n	8003560 <HAL_ADC_ConfigChannel+0x128>
 800355e:	2300      	movs	r3, #0
 8003560:	461a      	mov	r2, r3
 8003562:	f7ff f8ab 	bl	80026bc <LL_ADC_SetOffsetSaturation>
 8003566:	e17b      	b.n	8003860 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2100      	movs	r1, #0
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff f858 	bl	8002624 <LL_ADC_GetOffsetChannel>
 8003574:	4603      	mov	r3, r0
 8003576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10a      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x15c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2100      	movs	r1, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff f84d 	bl	8002624 <LL_ADC_GetOffsetChannel>
 800358a:	4603      	mov	r3, r0
 800358c:	0e9b      	lsrs	r3, r3, #26
 800358e:	f003 021f 	and.w	r2, r3, #31
 8003592:	e01e      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x19a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff f842 	bl	8002624 <LL_ADC_GetOffsetChannel>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80035b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80035c2:	2320      	movs	r3, #32
 80035c4:	e004      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80035c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d105      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x1b2>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	0e9b      	lsrs	r3, r3, #26
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	e018      	b.n	800361c <HAL_ADC_ConfigChannel+0x1e4>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80035f6:	fa93 f3a3 	rbit	r3, r3
 80035fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80035fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003602:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003606:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800360e:	2320      	movs	r3, #32
 8003610:	e004      	b.n	800361c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003612:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003616:	fab3 f383 	clz	r3, r3
 800361a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800361c:	429a      	cmp	r2, r3
 800361e:	d106      	bne.n	800362e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2200      	movs	r2, #0
 8003626:	2100      	movs	r1, #0
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff f811 	bl	8002650 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2101      	movs	r1, #1
 8003634:	4618      	mov	r0, r3
 8003636:	f7fe fff5 	bl	8002624 <LL_ADC_GetOffsetChannel>
 800363a:	4603      	mov	r3, r0
 800363c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <HAL_ADC_ConfigChannel+0x222>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2101      	movs	r1, #1
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe ffea 	bl	8002624 <LL_ADC_GetOffsetChannel>
 8003650:	4603      	mov	r3, r0
 8003652:	0e9b      	lsrs	r3, r3, #26
 8003654:	f003 021f 	and.w	r2, r3, #31
 8003658:	e01e      	b.n	8003698 <HAL_ADC_ConfigChannel+0x260>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2101      	movs	r1, #1
 8003660:	4618      	mov	r0, r3
 8003662:	f7fe ffdf 	bl	8002624 <LL_ADC_GetOffsetChannel>
 8003666:	4603      	mov	r3, r0
 8003668:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003678:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800367c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003680:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003688:	2320      	movs	r3, #32
 800368a:	e004      	b.n	8003696 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800368c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	b2db      	uxtb	r3, r3
 8003696:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x278>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	0e9b      	lsrs	r3, r3, #26
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	e018      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x2aa>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036bc:	fa93 f3a3 	rbit	r3, r3
 80036c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80036c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80036c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80036cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80036d4:	2320      	movs	r3, #32
 80036d6:	e004      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80036d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036dc:	fab3 f383 	clz	r3, r3
 80036e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d106      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2200      	movs	r2, #0
 80036ec:	2101      	movs	r1, #1
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fe ffae 	bl	8002650 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2102      	movs	r1, #2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fe ff92 	bl	8002624 <LL_ADC_GetOffsetChannel>
 8003700:	4603      	mov	r3, r0
 8003702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10a      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x2e8>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2102      	movs	r1, #2
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe ff87 	bl	8002624 <LL_ADC_GetOffsetChannel>
 8003716:	4603      	mov	r3, r0
 8003718:	0e9b      	lsrs	r3, r3, #26
 800371a:	f003 021f 	and.w	r2, r3, #31
 800371e:	e01e      	b.n	800375e <HAL_ADC_ConfigChannel+0x326>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2102      	movs	r1, #2
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe ff7c 	bl	8002624 <LL_ADC_GetOffsetChannel>
 800372c:	4603      	mov	r3, r0
 800372e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800373e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003742:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003746:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800374e:	2320      	movs	r3, #32
 8003750:	e004      	b.n	800375c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003752:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003766:	2b00      	cmp	r3, #0
 8003768:	d105      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x33e>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	0e9b      	lsrs	r3, r3, #26
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	e016      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x36c>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003782:	fa93 f3a3 	rbit	r3, r3
 8003786:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003788:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800378a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800378e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003796:	2320      	movs	r3, #32
 8003798:	e004      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800379a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800379e:	fab3 f383 	clz	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d106      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2200      	movs	r2, #0
 80037ae:	2102      	movs	r1, #2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe ff4d 	bl	8002650 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2103      	movs	r1, #3
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fe ff31 	bl	8002624 <LL_ADC_GetOffsetChannel>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10a      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x3aa>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2103      	movs	r1, #3
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe ff26 	bl	8002624 <LL_ADC_GetOffsetChannel>
 80037d8:	4603      	mov	r3, r0
 80037da:	0e9b      	lsrs	r3, r3, #26
 80037dc:	f003 021f 	and.w	r2, r3, #31
 80037e0:	e017      	b.n	8003812 <HAL_ADC_ConfigChannel+0x3da>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2103      	movs	r1, #3
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fe ff1b 	bl	8002624 <LL_ADC_GetOffsetChannel>
 80037ee:	4603      	mov	r3, r0
 80037f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80037fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037fc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80037fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003804:	2320      	movs	r3, #32
 8003806:	e003      	b.n	8003810 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800381a:	2b00      	cmp	r3, #0
 800381c:	d105      	bne.n	800382a <HAL_ADC_ConfigChannel+0x3f2>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	0e9b      	lsrs	r3, r3, #26
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	e011      	b.n	800384e <HAL_ADC_ConfigChannel+0x416>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003830:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003832:	fa93 f3a3 	rbit	r3, r3
 8003836:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800383a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800383c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003842:	2320      	movs	r3, #32
 8003844:	e003      	b.n	800384e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003848:	fab3 f383 	clz	r3, r3
 800384c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800384e:	429a      	cmp	r2, r3
 8003850:	d106      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2200      	movs	r2, #0
 8003858:	2103      	movs	r1, #3
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe fef8 	bl	8002650 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff f87b 	bl	8002960 <LL_ADC_IsEnabled>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	f040 813d 	bne.w	8003aec <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6819      	ldr	r1, [r3, #0]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	461a      	mov	r2, r3
 8003880:	f7fe ffc8 	bl	8002814 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4aa2      	ldr	r2, [pc, #648]	; (8003b14 <HAL_ADC_ConfigChannel+0x6dc>)
 800388a:	4293      	cmp	r3, r2
 800388c:	f040 812e 	bne.w	8003aec <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10b      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x480>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	0e9b      	lsrs	r3, r3, #26
 80038a6:	3301      	adds	r3, #1
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	2b09      	cmp	r3, #9
 80038ae:	bf94      	ite	ls
 80038b0:	2301      	movls	r3, #1
 80038b2:	2300      	movhi	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	e019      	b.n	80038ec <HAL_ADC_ConfigChannel+0x4b4>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038c0:	fa93 f3a3 	rbit	r3, r3
 80038c4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80038c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038c8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80038ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80038d0:	2320      	movs	r3, #32
 80038d2:	e003      	b.n	80038dc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80038d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038d6:	fab3 f383 	clz	r3, r3
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	3301      	adds	r3, #1
 80038de:	f003 031f 	and.w	r3, r3, #31
 80038e2:	2b09      	cmp	r3, #9
 80038e4:	bf94      	ite	ls
 80038e6:	2301      	movls	r3, #1
 80038e8:	2300      	movhi	r3, #0
 80038ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d079      	beq.n	80039e4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d107      	bne.n	800390c <HAL_ADC_ConfigChannel+0x4d4>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	0e9b      	lsrs	r3, r3, #26
 8003902:	3301      	adds	r3, #1
 8003904:	069b      	lsls	r3, r3, #26
 8003906:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800390a:	e015      	b.n	8003938 <HAL_ADC_ConfigChannel+0x500>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800391a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800391c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800391e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003924:	2320      	movs	r3, #32
 8003926:	e003      	b.n	8003930 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	3301      	adds	r3, #1
 8003932:	069b      	lsls	r3, r3, #26
 8003934:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003940:	2b00      	cmp	r3, #0
 8003942:	d109      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x520>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	0e9b      	lsrs	r3, r3, #26
 800394a:	3301      	adds	r3, #1
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	2101      	movs	r1, #1
 8003952:	fa01 f303 	lsl.w	r3, r1, r3
 8003956:	e017      	b.n	8003988 <HAL_ADC_ConfigChannel+0x550>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003960:	fa93 f3a3 	rbit	r3, r3
 8003964:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003968:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800396a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003970:	2320      	movs	r3, #32
 8003972:	e003      	b.n	800397c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003976:	fab3 f383 	clz	r3, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	3301      	adds	r3, #1
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	2101      	movs	r1, #1
 8003984:	fa01 f303 	lsl.w	r3, r1, r3
 8003988:	ea42 0103 	orr.w	r1, r2, r3
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x576>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	0e9b      	lsrs	r3, r3, #26
 800399e:	3301      	adds	r3, #1
 80039a0:	f003 021f 	and.w	r2, r3, #31
 80039a4:	4613      	mov	r3, r2
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	4413      	add	r3, r2
 80039aa:	051b      	lsls	r3, r3, #20
 80039ac:	e018      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x5a8>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80039bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80039c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80039c6:	2320      	movs	r3, #32
 80039c8:	e003      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80039ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039cc:	fab3 f383 	clz	r3, r3
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	3301      	adds	r3, #1
 80039d4:	f003 021f 	and.w	r2, r3, #31
 80039d8:	4613      	mov	r3, r2
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	4413      	add	r3, r2
 80039de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039e0:	430b      	orrs	r3, r1
 80039e2:	e07e      	b.n	8003ae2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d107      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x5c8>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	0e9b      	lsrs	r3, r3, #26
 80039f6:	3301      	adds	r3, #1
 80039f8:	069b      	lsls	r3, r3, #26
 80039fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039fe:	e015      	b.n	8003a2c <HAL_ADC_ConfigChannel+0x5f4>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a08:	fa93 f3a3 	rbit	r3, r3
 8003a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a10:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003a18:	2320      	movs	r3, #32
 8003a1a:	e003      	b.n	8003a24 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1e:	fab3 f383 	clz	r3, r3
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	3301      	adds	r3, #1
 8003a26:	069b      	lsls	r3, r3, #26
 8003a28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d109      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x614>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	0e9b      	lsrs	r3, r3, #26
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	2101      	movs	r1, #1
 8003a46:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4a:	e017      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x644>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	fa93 f3a3 	rbit	r3, r3
 8003a58:	61fb      	str	r3, [r7, #28]
  return result;
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003a64:	2320      	movs	r3, #32
 8003a66:	e003      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	3301      	adds	r3, #1
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	2101      	movs	r1, #1
 8003a78:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7c:	ea42 0103 	orr.w	r1, r2, r3
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10d      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x670>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	0e9b      	lsrs	r3, r3, #26
 8003a92:	3301      	adds	r3, #1
 8003a94:	f003 021f 	and.w	r2, r3, #31
 8003a98:	4613      	mov	r3, r2
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3b1e      	subs	r3, #30
 8003aa0:	051b      	lsls	r3, r3, #20
 8003aa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003aa6:	e01b      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x6a8>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	fa93 f3a3 	rbit	r3, r3
 8003ab4:	613b      	str	r3, [r7, #16]
  return result;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003ac0:	2320      	movs	r3, #32
 8003ac2:	e003      	b.n	8003acc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	fab3 f383 	clz	r3, r3
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	3301      	adds	r3, #1
 8003ace:	f003 021f 	and.w	r2, r3, #31
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	4413      	add	r3, r2
 8003ad8:	3b1e      	subs	r3, #30
 8003ada:	051b      	lsls	r3, r3, #20
 8003adc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	6892      	ldr	r2, [r2, #8]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f7fe fe68 	bl	80027bc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <HAL_ADC_ConfigChannel+0x6e0>)
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80be 	beq.w	8003c76 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b02:	d004      	beq.n	8003b0e <HAL_ADC_ConfigChannel+0x6d6>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a04      	ldr	r2, [pc, #16]	; (8003b1c <HAL_ADC_ConfigChannel+0x6e4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d10a      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x6ec>
 8003b0e:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <HAL_ADC_ConfigChannel+0x6e8>)
 8003b10:	e009      	b.n	8003b26 <HAL_ADC_ConfigChannel+0x6ee>
 8003b12:	bf00      	nop
 8003b14:	407f0000 	.word	0x407f0000
 8003b18:	80080000 	.word	0x80080000
 8003b1c:	50000100 	.word	0x50000100
 8003b20:	50000300 	.word	0x50000300
 8003b24:	4b59      	ldr	r3, [pc, #356]	; (8003c8c <HAL_ADC_ConfigChannel+0x854>)
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe fd4a 	bl	80025c0 <LL_ADC_GetCommonPathInternalCh>
 8003b2c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a56      	ldr	r2, [pc, #344]	; (8003c90 <HAL_ADC_ConfigChannel+0x858>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d004      	beq.n	8003b44 <HAL_ADC_ConfigChannel+0x70c>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a55      	ldr	r2, [pc, #340]	; (8003c94 <HAL_ADC_ConfigChannel+0x85c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d13a      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d134      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b58:	d005      	beq.n	8003b66 <HAL_ADC_ConfigChannel+0x72e>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a4e      	ldr	r2, [pc, #312]	; (8003c98 <HAL_ADC_ConfigChannel+0x860>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	f040 8085 	bne.w	8003c70 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b6e:	d004      	beq.n	8003b7a <HAL_ADC_ConfigChannel+0x742>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a49      	ldr	r2, [pc, #292]	; (8003c9c <HAL_ADC_ConfigChannel+0x864>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d101      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x746>
 8003b7a:	4a49      	ldr	r2, [pc, #292]	; (8003ca0 <HAL_ADC_ConfigChannel+0x868>)
 8003b7c:	e000      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x748>
 8003b7e:	4a43      	ldr	r2, [pc, #268]	; (8003c8c <HAL_ADC_ConfigChannel+0x854>)
 8003b80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	f7fe fd05 	bl	800259a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b90:	4b44      	ldr	r3, [pc, #272]	; (8003ca4 <HAL_ADC_ConfigChannel+0x86c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	099b      	lsrs	r3, r3, #6
 8003b96:	4a44      	ldr	r2, [pc, #272]	; (8003ca8 <HAL_ADC_ConfigChannel+0x870>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	099b      	lsrs	r3, r3, #6
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003baa:	e002      	b.n	8003bb2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1f9      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bb8:	e05a      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a3b      	ldr	r2, [pc, #236]	; (8003cac <HAL_ADC_ConfigChannel+0x874>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d125      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x7d8>
 8003bc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d11f      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a31      	ldr	r2, [pc, #196]	; (8003c9c <HAL_ADC_ConfigChannel+0x864>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d104      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x7ac>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a34      	ldr	r2, [pc, #208]	; (8003cb0 <HAL_ADC_ConfigChannel+0x878>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d047      	beq.n	8003c74 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bec:	d004      	beq.n	8003bf8 <HAL_ADC_ConfigChannel+0x7c0>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a2a      	ldr	r2, [pc, #168]	; (8003c9c <HAL_ADC_ConfigChannel+0x864>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d101      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x7c4>
 8003bf8:	4a29      	ldr	r2, [pc, #164]	; (8003ca0 <HAL_ADC_ConfigChannel+0x868>)
 8003bfa:	e000      	b.n	8003bfe <HAL_ADC_ConfigChannel+0x7c6>
 8003bfc:	4a23      	ldr	r2, [pc, #140]	; (8003c8c <HAL_ADC_ConfigChannel+0x854>)
 8003bfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c06:	4619      	mov	r1, r3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	f7fe fcc6 	bl	800259a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c0e:	e031      	b.n	8003c74 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a27      	ldr	r2, [pc, #156]	; (8003cb4 <HAL_ADC_ConfigChannel+0x87c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d12d      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d127      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a1c      	ldr	r2, [pc, #112]	; (8003c9c <HAL_ADC_ConfigChannel+0x864>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d022      	beq.n	8003c76 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c38:	d004      	beq.n	8003c44 <HAL_ADC_ConfigChannel+0x80c>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a17      	ldr	r2, [pc, #92]	; (8003c9c <HAL_ADC_ConfigChannel+0x864>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d101      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x810>
 8003c44:	4a16      	ldr	r2, [pc, #88]	; (8003ca0 <HAL_ADC_ConfigChannel+0x868>)
 8003c46:	e000      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x812>
 8003c48:	4a10      	ldr	r2, [pc, #64]	; (8003c8c <HAL_ADC_ConfigChannel+0x854>)
 8003c4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c52:	4619      	mov	r1, r3
 8003c54:	4610      	mov	r0, r2
 8003c56:	f7fe fca0 	bl	800259a <LL_ADC_SetCommonPathInternalCh>
 8003c5a:	e00c      	b.n	8003c76 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c60:	f043 0220 	orr.w	r2, r3, #32
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003c6e:	e002      	b.n	8003c76 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c70:	bf00      	nop
 8003c72:	e000      	b.n	8003c76 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	37d8      	adds	r7, #216	; 0xd8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	50000700 	.word	0x50000700
 8003c90:	c3210000 	.word	0xc3210000
 8003c94:	90c00010 	.word	0x90c00010
 8003c98:	50000600 	.word	0x50000600
 8003c9c:	50000100 	.word	0x50000100
 8003ca0:	50000300 	.word	0x50000300
 8003ca4:	200001c8 	.word	0x200001c8
 8003ca8:	053e2d63 	.word	0x053e2d63
 8003cac:	c7520000 	.word	0xc7520000
 8003cb0:	50000500 	.word	0x50000500
 8003cb4:	cb840000 	.word	0xcb840000

08003cb8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fe fe4b 	bl	8002960 <LL_ADC_IsEnabled>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d14d      	bne.n	8003d6c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	4b28      	ldr	r3, [pc, #160]	; (8003d78 <ADC_Enable+0xc0>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00d      	beq.n	8003cfa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce2:	f043 0210 	orr.w	r2, r3, #16
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cee:	f043 0201 	orr.w	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e039      	b.n	8003d6e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe fe1a 	bl	8002938 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d04:	f7fe fc08 	bl	8002518 <HAL_GetTick>
 8003d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d0a:	e028      	b.n	8003d5e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fe fe25 	bl	8002960 <LL_ADC_IsEnabled>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d104      	bne.n	8003d26 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fe fe09 	bl	8002938 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d26:	f7fe fbf7 	bl	8002518 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d914      	bls.n	8003d5e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d00d      	beq.n	8003d5e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d46:	f043 0210 	orr.w	r2, r3, #16
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d52:	f043 0201 	orr.w	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e007      	b.n	8003d6e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d1cf      	bne.n	8003d0c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	8000003f 	.word	0x8000003f

08003d7c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d14b      	bne.n	8003e2e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0308 	and.w	r3, r3, #8
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d021      	beq.n	8003df4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fe fcaf 	bl	8002718 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d032      	beq.n	8003e26 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d12b      	bne.n	8003e26 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d11f      	bne.n	8003e26 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dea:	f043 0201 	orr.w	r2, r3, #1
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003df2:	e018      	b.n	8003e26 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d111      	bne.n	8003e26 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d105      	bne.n	8003e26 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1e:	f043 0201 	orr.w	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f7ff fade 	bl	80033e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e2c:	e00e      	b.n	8003e4c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f7ff faf2 	bl	8003424 <HAL_ADC_ErrorCallback>
}
 8003e40:	e004      	b.n	8003e4c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	4798      	blx	r3
}
 8003e4c:	bf00      	nop
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f7ff faca 	bl	80033fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e68:	bf00      	nop
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e8e:	f043 0204 	orr.w	r2, r3, #4
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f7ff fac4 	bl	8003424 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e9c:	bf00      	nop
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <LL_ADC_IsEnabled>:
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <LL_ADC_IsEnabled+0x18>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <LL_ADC_IsEnabled+0x1a>
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <LL_ADC_REG_IsConversionOngoing>:
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d101      	bne.n	8003ee2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f54:	b590      	push	{r4, r7, lr}
 8003f56:	b0a1      	sub	sp, #132	; 0x84
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e0e7      	b.n	8004142 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003f7e:	2300      	movs	r3, #0
 8003f80:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f8a:	d102      	bne.n	8003f92 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f8c:	4b6f      	ldr	r3, [pc, #444]	; (800414c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f8e:	60bb      	str	r3, [r7, #8]
 8003f90:	e009      	b.n	8003fa6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a6e      	ldr	r2, [pc, #440]	; (8004150 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d102      	bne.n	8003fa2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003f9c:	4b6d      	ldr	r3, [pc, #436]	; (8004154 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	e001      	b.n	8003fa6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10b      	bne.n	8003fc4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb0:	f043 0220 	orr.w	r2, r3, #32
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0be      	b.n	8004142 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff ff7f 	bl	8003eca <LL_ADC_REG_IsConversionOngoing>
 8003fcc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff ff79 	bl	8003eca <LL_ADC_REG_IsConversionOngoing>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f040 80a0 	bne.w	8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f040 809c 	bne.w	8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ff0:	d004      	beq.n	8003ffc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a55      	ldr	r2, [pc, #340]	; (800414c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d101      	bne.n	8004000 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003ffc:	4b56      	ldr	r3, [pc, #344]	; (8004158 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003ffe:	e000      	b.n	8004002 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004000:	4b56      	ldr	r3, [pc, #344]	; (800415c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004002:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d04b      	beq.n	80040a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800400c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	6859      	ldr	r1, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800401e:	035b      	lsls	r3, r3, #13
 8004020:	430b      	orrs	r3, r1
 8004022:	431a      	orrs	r2, r3
 8004024:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004026:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004030:	d004      	beq.n	800403c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a45      	ldr	r2, [pc, #276]	; (800414c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d10f      	bne.n	800405c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800403c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004040:	f7ff ff30 	bl	8003ea4 <LL_ADC_IsEnabled>
 8004044:	4604      	mov	r4, r0
 8004046:	4841      	ldr	r0, [pc, #260]	; (800414c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004048:	f7ff ff2c 	bl	8003ea4 <LL_ADC_IsEnabled>
 800404c:	4603      	mov	r3, r0
 800404e:	4323      	orrs	r3, r4
 8004050:	2b00      	cmp	r3, #0
 8004052:	bf0c      	ite	eq
 8004054:	2301      	moveq	r3, #1
 8004056:	2300      	movne	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	e012      	b.n	8004082 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800405c:	483c      	ldr	r0, [pc, #240]	; (8004150 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800405e:	f7ff ff21 	bl	8003ea4 <LL_ADC_IsEnabled>
 8004062:	4604      	mov	r4, r0
 8004064:	483b      	ldr	r0, [pc, #236]	; (8004154 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004066:	f7ff ff1d 	bl	8003ea4 <LL_ADC_IsEnabled>
 800406a:	4603      	mov	r3, r0
 800406c:	431c      	orrs	r4, r3
 800406e:	483c      	ldr	r0, [pc, #240]	; (8004160 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004070:	f7ff ff18 	bl	8003ea4 <LL_ADC_IsEnabled>
 8004074:	4603      	mov	r3, r0
 8004076:	4323      	orrs	r3, r4
 8004078:	2b00      	cmp	r3, #0
 800407a:	bf0c      	ite	eq
 800407c:	2301      	moveq	r3, #1
 800407e:	2300      	movne	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d056      	beq.n	8004134 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800408e:	f023 030f 	bic.w	r3, r3, #15
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	6811      	ldr	r1, [r2, #0]
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	6892      	ldr	r2, [r2, #8]
 800409a:	430a      	orrs	r2, r1
 800409c:	431a      	orrs	r2, r3
 800409e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040a0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040a2:	e047      	b.n	8004134 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80040a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040b8:	d004      	beq.n	80040c4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a23      	ldr	r2, [pc, #140]	; (800414c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d10f      	bne.n	80040e4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80040c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80040c8:	f7ff feec 	bl	8003ea4 <LL_ADC_IsEnabled>
 80040cc:	4604      	mov	r4, r0
 80040ce:	481f      	ldr	r0, [pc, #124]	; (800414c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040d0:	f7ff fee8 	bl	8003ea4 <LL_ADC_IsEnabled>
 80040d4:	4603      	mov	r3, r0
 80040d6:	4323      	orrs	r3, r4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf0c      	ite	eq
 80040dc:	2301      	moveq	r3, #1
 80040de:	2300      	movne	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	e012      	b.n	800410a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80040e4:	481a      	ldr	r0, [pc, #104]	; (8004150 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80040e6:	f7ff fedd 	bl	8003ea4 <LL_ADC_IsEnabled>
 80040ea:	4604      	mov	r4, r0
 80040ec:	4819      	ldr	r0, [pc, #100]	; (8004154 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80040ee:	f7ff fed9 	bl	8003ea4 <LL_ADC_IsEnabled>
 80040f2:	4603      	mov	r3, r0
 80040f4:	431c      	orrs	r4, r3
 80040f6:	481a      	ldr	r0, [pc, #104]	; (8004160 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80040f8:	f7ff fed4 	bl	8003ea4 <LL_ADC_IsEnabled>
 80040fc:	4603      	mov	r3, r0
 80040fe:	4323      	orrs	r3, r4
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d012      	beq.n	8004134 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800410e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004116:	f023 030f 	bic.w	r3, r3, #15
 800411a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800411c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800411e:	e009      	b.n	8004134 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004124:	f043 0220 	orr.w	r2, r3, #32
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004132:	e000      	b.n	8004136 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004134:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800413e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004142:	4618      	mov	r0, r3
 8004144:	3784      	adds	r7, #132	; 0x84
 8004146:	46bd      	mov	sp, r7
 8004148:	bd90      	pop	{r4, r7, pc}
 800414a:	bf00      	nop
 800414c:	50000100 	.word	0x50000100
 8004150:	50000400 	.word	0x50000400
 8004154:	50000500 	.word	0x50000500
 8004158:	50000300 	.word	0x50000300
 800415c:	50000700 	.word	0x50000700
 8004160:	50000600 	.word	0x50000600

08004164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004180:	4013      	ands	r3, r2
 8004182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800418c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004196:	4a04      	ldr	r2, [pc, #16]	; (80041a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	60d3      	str	r3, [r2, #12]
}
 800419c:	bf00      	nop
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041b0:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <__NVIC_GetPriorityGrouping+0x18>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	0a1b      	lsrs	r3, r3, #8
 80041b6:	f003 0307 	and.w	r3, r3, #7
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	e000ed00 	.word	0xe000ed00

080041c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	db0b      	blt.n	80041f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041da:	79fb      	ldrb	r3, [r7, #7]
 80041dc:	f003 021f 	and.w	r2, r3, #31
 80041e0:	4907      	ldr	r1, [pc, #28]	; (8004200 <__NVIC_EnableIRQ+0x38>)
 80041e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	2001      	movs	r0, #1
 80041ea:	fa00 f202 	lsl.w	r2, r0, r2
 80041ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	e000e100 	.word	0xe000e100

08004204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	6039      	str	r1, [r7, #0]
 800420e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004214:	2b00      	cmp	r3, #0
 8004216:	db0a      	blt.n	800422e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	b2da      	uxtb	r2, r3
 800421c:	490c      	ldr	r1, [pc, #48]	; (8004250 <__NVIC_SetPriority+0x4c>)
 800421e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004222:	0112      	lsls	r2, r2, #4
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	440b      	add	r3, r1
 8004228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800422c:	e00a      	b.n	8004244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	b2da      	uxtb	r2, r3
 8004232:	4908      	ldr	r1, [pc, #32]	; (8004254 <__NVIC_SetPriority+0x50>)
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	3b04      	subs	r3, #4
 800423c:	0112      	lsls	r2, r2, #4
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	440b      	add	r3, r1
 8004242:	761a      	strb	r2, [r3, #24]
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	e000e100 	.word	0xe000e100
 8004254:	e000ed00 	.word	0xe000ed00

08004258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004258:	b480      	push	{r7}
 800425a:	b089      	sub	sp, #36	; 0x24
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f1c3 0307 	rsb	r3, r3, #7
 8004272:	2b04      	cmp	r3, #4
 8004274:	bf28      	it	cs
 8004276:	2304      	movcs	r3, #4
 8004278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	3304      	adds	r3, #4
 800427e:	2b06      	cmp	r3, #6
 8004280:	d902      	bls.n	8004288 <NVIC_EncodePriority+0x30>
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	3b03      	subs	r3, #3
 8004286:	e000      	b.n	800428a <NVIC_EncodePriority+0x32>
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800428c:	f04f 32ff 	mov.w	r2, #4294967295
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43da      	mvns	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	401a      	ands	r2, r3
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042a0:	f04f 31ff 	mov.w	r1, #4294967295
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	fa01 f303 	lsl.w	r3, r1, r3
 80042aa:	43d9      	mvns	r1, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b0:	4313      	orrs	r3, r2
         );
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3724      	adds	r7, #36	; 0x24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042d0:	d301      	bcc.n	80042d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042d2:	2301      	movs	r3, #1
 80042d4:	e00f      	b.n	80042f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042d6:	4a0a      	ldr	r2, [pc, #40]	; (8004300 <SysTick_Config+0x40>)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3b01      	subs	r3, #1
 80042dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042de:	210f      	movs	r1, #15
 80042e0:	f04f 30ff 	mov.w	r0, #4294967295
 80042e4:	f7ff ff8e 	bl	8004204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042e8:	4b05      	ldr	r3, [pc, #20]	; (8004300 <SysTick_Config+0x40>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042ee:	4b04      	ldr	r3, [pc, #16]	; (8004300 <SysTick_Config+0x40>)
 80042f0:	2207      	movs	r2, #7
 80042f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	e000e010 	.word	0xe000e010

08004304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff ff29 	bl	8004164 <__NVIC_SetPriorityGrouping>
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b086      	sub	sp, #24
 800431e:	af00      	add	r7, sp, #0
 8004320:	4603      	mov	r3, r0
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004328:	f7ff ff40 	bl	80041ac <__NVIC_GetPriorityGrouping>
 800432c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	68b9      	ldr	r1, [r7, #8]
 8004332:	6978      	ldr	r0, [r7, #20]
 8004334:	f7ff ff90 	bl	8004258 <NVIC_EncodePriority>
 8004338:	4602      	mov	r2, r0
 800433a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800433e:	4611      	mov	r1, r2
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff ff5f 	bl	8004204 <__NVIC_SetPriority>
}
 8004346:	bf00      	nop
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b082      	sub	sp, #8
 8004352:	af00      	add	r7, sp, #0
 8004354:	4603      	mov	r3, r0
 8004356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff ff33 	bl	80041c8 <__NVIC_EnableIRQ>
}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff ffa4 	bl	80042c0 <SysTick_Config>
 8004378:	4603      	mov	r3, r0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e08d      	b.n	80044b2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	4b47      	ldr	r3, [pc, #284]	; (80044bc <HAL_DMA_Init+0x138>)
 800439e:	429a      	cmp	r2, r3
 80043a0:	d80f      	bhi.n	80043c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	4b45      	ldr	r3, [pc, #276]	; (80044c0 <HAL_DMA_Init+0x13c>)
 80043aa:	4413      	add	r3, r2
 80043ac:	4a45      	ldr	r2, [pc, #276]	; (80044c4 <HAL_DMA_Init+0x140>)
 80043ae:	fba2 2303 	umull	r2, r3, r2, r3
 80043b2:	091b      	lsrs	r3, r3, #4
 80043b4:	009a      	lsls	r2, r3, #2
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a42      	ldr	r2, [pc, #264]	; (80044c8 <HAL_DMA_Init+0x144>)
 80043be:	641a      	str	r2, [r3, #64]	; 0x40
 80043c0:	e00e      	b.n	80043e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	4b40      	ldr	r3, [pc, #256]	; (80044cc <HAL_DMA_Init+0x148>)
 80043ca:	4413      	add	r3, r2
 80043cc:	4a3d      	ldr	r2, [pc, #244]	; (80044c4 <HAL_DMA_Init+0x140>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	091b      	lsrs	r3, r3, #4
 80043d4:	009a      	lsls	r2, r3, #2
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a3c      	ldr	r2, [pc, #240]	; (80044d0 <HAL_DMA_Init+0x14c>)
 80043de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80043f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004404:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004410:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800441c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f9b6 	bl	80047a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004440:	d102      	bne.n	8004448 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800445c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d010      	beq.n	8004488 <HAL_DMA_Init+0x104>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b04      	cmp	r3, #4
 800446c:	d80c      	bhi.n	8004488 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f9d6 	bl	8004820 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004484:	605a      	str	r2, [r3, #4]
 8004486:	e008      	b.n	800449a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40020407 	.word	0x40020407
 80044c0:	bffdfff8 	.word	0xbffdfff8
 80044c4:	cccccccd 	.word	0xcccccccd
 80044c8:	40020000 	.word	0x40020000
 80044cc:	bffdfbf8 	.word	0xbffdfbf8
 80044d0:	40020400 	.word	0x40020400

080044d4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_DMA_Start_IT+0x20>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e066      	b.n	80045c2 <HAL_DMA_Start_IT+0xee>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	d155      	bne.n	80045b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0201 	bic.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	68b9      	ldr	r1, [r7, #8]
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 f8fb 	bl	8004728 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	2b00      	cmp	r3, #0
 8004538:	d008      	beq.n	800454c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 020e 	orr.w	r2, r2, #14
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	e00f      	b.n	800456c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0204 	bic.w	r2, r2, #4
 800455a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 020a 	orr.w	r2, r2, #10
 800456a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d007      	beq.n	800458a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004588:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458e:	2b00      	cmp	r3, #0
 8004590:	d007      	beq.n	80045a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0201 	orr.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	e005      	b.n	80045c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80045bc:	2302      	movs	r3, #2
 80045be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80045c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	2204      	movs	r2, #4
 80045ec:	409a      	lsls	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4013      	ands	r3, r2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d026      	beq.n	8004644 <HAL_DMA_IRQHandler+0x7a>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d021      	beq.n	8004644 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d107      	bne.n	800461e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0204 	bic.w	r2, r2, #4
 800461c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004622:	f003 021f 	and.w	r2, r3, #31
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	2104      	movs	r1, #4
 800462c:	fa01 f202 	lsl.w	r2, r1, r2
 8004630:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	2b00      	cmp	r3, #0
 8004638:	d071      	beq.n	800471e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004642:	e06c      	b.n	800471e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004648:	f003 031f 	and.w	r3, r3, #31
 800464c:	2202      	movs	r2, #2
 800464e:	409a      	lsls	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4013      	ands	r3, r2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d02e      	beq.n	80046b6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d029      	beq.n	80046b6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10b      	bne.n	8004688 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 020a 	bic.w	r2, r2, #10
 800467e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468c:	f003 021f 	and.w	r2, r3, #31
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	2102      	movs	r1, #2
 8004696:	fa01 f202 	lsl.w	r2, r1, r2
 800469a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d038      	beq.n	800471e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80046b4:	e033      	b.n	800471e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ba:	f003 031f 	and.w	r3, r3, #31
 80046be:	2208      	movs	r2, #8
 80046c0:	409a      	lsls	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4013      	ands	r3, r2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d02a      	beq.n	8004720 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f003 0308 	and.w	r3, r3, #8
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d025      	beq.n	8004720 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 020e 	bic.w	r2, r2, #14
 80046e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e8:	f003 021f 	and.w	r2, r3, #31
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	2101      	movs	r1, #1
 80046f2:	fa01 f202 	lsl.w	r2, r1, r2
 80046f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004712:	2b00      	cmp	r3, #0
 8004714:	d004      	beq.n	8004720 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800471e:	bf00      	nop
 8004720:	bf00      	nop
}
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800473e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004744:	2b00      	cmp	r3, #0
 8004746:	d004      	beq.n	8004752 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004750:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004756:	f003 021f 	and.w	r2, r3, #31
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	2101      	movs	r1, #1
 8004760:	fa01 f202 	lsl.w	r2, r1, r2
 8004764:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b10      	cmp	r3, #16
 8004774:	d108      	bne.n	8004788 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004786:	e007      	b.n	8004798 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	60da      	str	r2, [r3, #12]
}
 8004798:	bf00      	nop
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	461a      	mov	r2, r3
 80047b2:	4b16      	ldr	r3, [pc, #88]	; (800480c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d802      	bhi.n	80047be <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80047b8:	4b15      	ldr	r3, [pc, #84]	; (8004810 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	e001      	b.n	80047c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80047be:	4b15      	ldr	r3, [pc, #84]	; (8004814 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80047c0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	3b08      	subs	r3, #8
 80047ce:	4a12      	ldr	r2, [pc, #72]	; (8004818 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80047d0:	fba2 2303 	umull	r2, r3, r2, r3
 80047d4:	091b      	lsrs	r3, r3, #4
 80047d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047dc:	089b      	lsrs	r3, r3, #2
 80047de:	009a      	lsls	r2, r3, #2
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	4413      	add	r3, r2
 80047e4:	461a      	mov	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a0b      	ldr	r2, [pc, #44]	; (800481c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80047ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f003 031f 	and.w	r3, r3, #31
 80047f6:	2201      	movs	r2, #1
 80047f8:	409a      	lsls	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80047fe:	bf00      	nop
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40020407 	.word	0x40020407
 8004810:	40020800 	.word	0x40020800
 8004814:	40020820 	.word	0x40020820
 8004818:	cccccccd 	.word	0xcccccccd
 800481c:	40020880 	.word	0x40020880

08004820 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	461a      	mov	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a08      	ldr	r2, [pc, #32]	; (8004864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004842:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	3b01      	subs	r3, #1
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	2201      	movs	r2, #1
 800484e:	409a      	lsls	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	1000823f 	.word	0x1000823f
 8004864:	40020940 	.word	0x40020940

08004868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004876:	e15a      	b.n	8004b2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	2101      	movs	r1, #1
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	fa01 f303 	lsl.w	r3, r1, r3
 8004884:	4013      	ands	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 814c 	beq.w	8004b28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	2b01      	cmp	r3, #1
 800489a:	d005      	beq.n	80048a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d130      	bne.n	800490a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	2203      	movs	r2, #3
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	43db      	mvns	r3, r3
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4013      	ands	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048de:	2201      	movs	r2, #1
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43db      	mvns	r3, r3
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4013      	ands	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	091b      	lsrs	r3, r3, #4
 80048f4:	f003 0201 	and.w	r2, r3, #1
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	2b03      	cmp	r3, #3
 8004914:	d017      	beq.n	8004946 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	2203      	movs	r2, #3
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	43db      	mvns	r3, r3
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	4013      	ands	r3, r2
 800492c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d123      	bne.n	800499a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	08da      	lsrs	r2, r3, #3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3208      	adds	r2, #8
 800495a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800495e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	220f      	movs	r2, #15
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4013      	ands	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	08da      	lsrs	r2, r3, #3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3208      	adds	r2, #8
 8004994:	6939      	ldr	r1, [r7, #16]
 8004996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	2203      	movs	r2, #3
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	43db      	mvns	r3, r3
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4013      	ands	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f003 0203 	and.w	r2, r3, #3
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 80a6 	beq.w	8004b28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049dc:	4b5b      	ldr	r3, [pc, #364]	; (8004b4c <HAL_GPIO_Init+0x2e4>)
 80049de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e0:	4a5a      	ldr	r2, [pc, #360]	; (8004b4c <HAL_GPIO_Init+0x2e4>)
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	6613      	str	r3, [r2, #96]	; 0x60
 80049e8:	4b58      	ldr	r3, [pc, #352]	; (8004b4c <HAL_GPIO_Init+0x2e4>)
 80049ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049f4:	4a56      	ldr	r2, [pc, #344]	; (8004b50 <HAL_GPIO_Init+0x2e8>)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	089b      	lsrs	r3, r3, #2
 80049fa:	3302      	adds	r3, #2
 80049fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f003 0303 	and.w	r3, r3, #3
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	220f      	movs	r2, #15
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4013      	ands	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a1e:	d01f      	beq.n	8004a60 <HAL_GPIO_Init+0x1f8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a4c      	ldr	r2, [pc, #304]	; (8004b54 <HAL_GPIO_Init+0x2ec>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d019      	beq.n	8004a5c <HAL_GPIO_Init+0x1f4>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a4b      	ldr	r2, [pc, #300]	; (8004b58 <HAL_GPIO_Init+0x2f0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d013      	beq.n	8004a58 <HAL_GPIO_Init+0x1f0>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a4a      	ldr	r2, [pc, #296]	; (8004b5c <HAL_GPIO_Init+0x2f4>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00d      	beq.n	8004a54 <HAL_GPIO_Init+0x1ec>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a49      	ldr	r2, [pc, #292]	; (8004b60 <HAL_GPIO_Init+0x2f8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d007      	beq.n	8004a50 <HAL_GPIO_Init+0x1e8>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a48      	ldr	r2, [pc, #288]	; (8004b64 <HAL_GPIO_Init+0x2fc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d101      	bne.n	8004a4c <HAL_GPIO_Init+0x1e4>
 8004a48:	2305      	movs	r3, #5
 8004a4a:	e00a      	b.n	8004a62 <HAL_GPIO_Init+0x1fa>
 8004a4c:	2306      	movs	r3, #6
 8004a4e:	e008      	b.n	8004a62 <HAL_GPIO_Init+0x1fa>
 8004a50:	2304      	movs	r3, #4
 8004a52:	e006      	b.n	8004a62 <HAL_GPIO_Init+0x1fa>
 8004a54:	2303      	movs	r3, #3
 8004a56:	e004      	b.n	8004a62 <HAL_GPIO_Init+0x1fa>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	e002      	b.n	8004a62 <HAL_GPIO_Init+0x1fa>
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e000      	b.n	8004a62 <HAL_GPIO_Init+0x1fa>
 8004a60:	2300      	movs	r3, #0
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	f002 0203 	and.w	r2, r2, #3
 8004a68:	0092      	lsls	r2, r2, #2
 8004a6a:	4093      	lsls	r3, r2
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a72:	4937      	ldr	r1, [pc, #220]	; (8004b50 <HAL_GPIO_Init+0x2e8>)
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	089b      	lsrs	r3, r3, #2
 8004a78:	3302      	adds	r3, #2
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a80:	4b39      	ldr	r3, [pc, #228]	; (8004b68 <HAL_GPIO_Init+0x300>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004aa4:	4a30      	ldr	r2, [pc, #192]	; (8004b68 <HAL_GPIO_Init+0x300>)
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004aaa:	4b2f      	ldr	r3, [pc, #188]	; (8004b68 <HAL_GPIO_Init+0x300>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ace:	4a26      	ldr	r2, [pc, #152]	; (8004b68 <HAL_GPIO_Init+0x300>)
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004ad4:	4b24      	ldr	r3, [pc, #144]	; (8004b68 <HAL_GPIO_Init+0x300>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	43db      	mvns	r3, r3
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004af8:	4a1b      	ldr	r2, [pc, #108]	; (8004b68 <HAL_GPIO_Init+0x300>)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004afe:	4b1a      	ldr	r3, [pc, #104]	; (8004b68 <HAL_GPIO_Init+0x300>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	43db      	mvns	r3, r3
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b22:	4a11      	ldr	r2, [pc, #68]	; (8004b68 <HAL_GPIO_Init+0x300>)
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	fa22 f303 	lsr.w	r3, r2, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f47f ae9d 	bne.w	8004878 <HAL_GPIO_Init+0x10>
  }
}
 8004b3e:	bf00      	nop
 8004b40:	bf00      	nop
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	40010000 	.word	0x40010000
 8004b54:	48000400 	.word	0x48000400
 8004b58:	48000800 	.word	0x48000800
 8004b5c:	48000c00 	.word	0x48000c00
 8004b60:	48001000 	.word	0x48001000
 8004b64:	48001400 	.word	0x48001400
 8004b68:	40010400 	.word	0x40010400

08004b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	807b      	strh	r3, [r7, #2]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b7c:	787b      	ldrb	r3, [r7, #1]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b82:	887a      	ldrh	r2, [r7, #2]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b88:	e002      	b.n	8004b90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b8a:	887a      	ldrh	r2, [r7, #2]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bae:	887a      	ldrh	r2, [r7, #2]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	041a      	lsls	r2, r3, #16
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	43d9      	mvns	r1, r3
 8004bba:	887b      	ldrh	r3, [r7, #2]
 8004bbc:	400b      	ands	r3, r1
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	619a      	str	r2, [r3, #24]
}
 8004bc4:	bf00      	nop
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004bda:	4b08      	ldr	r3, [pc, #32]	; (8004bfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bdc:	695a      	ldr	r2, [r3, #20]
 8004bde:	88fb      	ldrh	r3, [r7, #6]
 8004be0:	4013      	ands	r3, r2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d006      	beq.n	8004bf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004be6:	4a05      	ldr	r2, [pc, #20]	; (8004bfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004be8:	88fb      	ldrh	r3, [r7, #6]
 8004bea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bec:	88fb      	ldrh	r3, [r7, #6]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fd f9d0 	bl	8001f94 <HAL_GPIO_EXTI_Callback>
  }
}
 8004bf4:	bf00      	nop
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40010400 	.word	0x40010400

08004c00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d141      	bne.n	8004c92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c0e:	4b4b      	ldr	r3, [pc, #300]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c1a:	d131      	bne.n	8004c80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c1c:	4b47      	ldr	r3, [pc, #284]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c22:	4a46      	ldr	r2, [pc, #280]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c2c:	4b43      	ldr	r3, [pc, #268]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c34:	4a41      	ldr	r2, [pc, #260]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c3c:	4b40      	ldr	r3, [pc, #256]	; (8004d40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2232      	movs	r2, #50	; 0x32
 8004c42:	fb02 f303 	mul.w	r3, r2, r3
 8004c46:	4a3f      	ldr	r2, [pc, #252]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c48:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4c:	0c9b      	lsrs	r3, r3, #18
 8004c4e:	3301      	adds	r3, #1
 8004c50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c52:	e002      	b.n	8004c5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c5a:	4b38      	ldr	r3, [pc, #224]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c66:	d102      	bne.n	8004c6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1f2      	bne.n	8004c54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c6e:	4b33      	ldr	r3, [pc, #204]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c7a:	d158      	bne.n	8004d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e057      	b.n	8004d30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c80:	4b2e      	ldr	r3, [pc, #184]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c86:	4a2d      	ldr	r2, [pc, #180]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c90:	e04d      	b.n	8004d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c98:	d141      	bne.n	8004d1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c9a:	4b28      	ldr	r3, [pc, #160]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca6:	d131      	bne.n	8004d0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ca8:	4b24      	ldr	r3, [pc, #144]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cae:	4a23      	ldr	r2, [pc, #140]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cb8:	4b20      	ldr	r3, [pc, #128]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cc0:	4a1e      	ldr	r2, [pc, #120]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cc8:	4b1d      	ldr	r3, [pc, #116]	; (8004d40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2232      	movs	r2, #50	; 0x32
 8004cce:	fb02 f303 	mul.w	r3, r2, r3
 8004cd2:	4a1c      	ldr	r2, [pc, #112]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	0c9b      	lsrs	r3, r3, #18
 8004cda:	3301      	adds	r3, #1
 8004cdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cde:	e002      	b.n	8004ce6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ce6:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf2:	d102      	bne.n	8004cfa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f2      	bne.n	8004ce0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cfa:	4b10      	ldr	r3, [pc, #64]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d06:	d112      	bne.n	8004d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e011      	b.n	8004d30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d12:	4a0a      	ldr	r2, [pc, #40]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d1c:	e007      	b.n	8004d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d1e:	4b07      	ldr	r3, [pc, #28]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d26:	4a05      	ldr	r2, [pc, #20]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	40007000 	.word	0x40007000
 8004d40:	200001c8 	.word	0x200001c8
 8004d44:	431bde83 	.word	0x431bde83

08004d48 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004d4c:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	4a04      	ldr	r2, [pc, #16]	; (8004d64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d56:	6093      	str	r3, [r2, #8]
}
 8004d58:	bf00      	nop
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40007000 	.word	0x40007000

08004d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e306      	b.n	8005388 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d075      	beq.n	8004e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d86:	4b97      	ldr	r3, [pc, #604]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d90:	4b94      	ldr	r3, [pc, #592]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2b0c      	cmp	r3, #12
 8004d9e:	d102      	bne.n	8004da6 <HAL_RCC_OscConfig+0x3e>
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	d002      	beq.n	8004dac <HAL_RCC_OscConfig+0x44>
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d10b      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dac:	4b8d      	ldr	r3, [pc, #564]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d05b      	beq.n	8004e70 <HAL_RCC_OscConfig+0x108>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d157      	bne.n	8004e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e2e1      	b.n	8005388 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dcc:	d106      	bne.n	8004ddc <HAL_RCC_OscConfig+0x74>
 8004dce:	4b85      	ldr	r3, [pc, #532]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a84      	ldr	r2, [pc, #528]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	e01d      	b.n	8004e18 <HAL_RCC_OscConfig+0xb0>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004de4:	d10c      	bne.n	8004e00 <HAL_RCC_OscConfig+0x98>
 8004de6:	4b7f      	ldr	r3, [pc, #508]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a7e      	ldr	r2, [pc, #504]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	4b7c      	ldr	r3, [pc, #496]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a7b      	ldr	r2, [pc, #492]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	e00b      	b.n	8004e18 <HAL_RCC_OscConfig+0xb0>
 8004e00:	4b78      	ldr	r3, [pc, #480]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a77      	ldr	r2, [pc, #476]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	4b75      	ldr	r3, [pc, #468]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a74      	ldr	r2, [pc, #464]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d013      	beq.n	8004e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e20:	f7fd fb7a 	bl	8002518 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e28:	f7fd fb76 	bl	8002518 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b64      	cmp	r3, #100	; 0x64
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e2a6      	b.n	8005388 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e3a:	4b6a      	ldr	r3, [pc, #424]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCC_OscConfig+0xc0>
 8004e46:	e014      	b.n	8004e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e48:	f7fd fb66 	bl	8002518 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e50:	f7fd fb62 	bl	8002518 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b64      	cmp	r3, #100	; 0x64
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e292      	b.n	8005388 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e62:	4b60      	ldr	r3, [pc, #384]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f0      	bne.n	8004e50 <HAL_RCC_OscConfig+0xe8>
 8004e6e:	e000      	b.n	8004e72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d075      	beq.n	8004f6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e7e:	4b59      	ldr	r3, [pc, #356]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 030c 	and.w	r3, r3, #12
 8004e86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e88:	4b56      	ldr	r3, [pc, #344]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	2b0c      	cmp	r3, #12
 8004e96:	d102      	bne.n	8004e9e <HAL_RCC_OscConfig+0x136>
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d002      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x13c>
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d11f      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ea4:	4b4f      	ldr	r3, [pc, #316]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <HAL_RCC_OscConfig+0x154>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e265      	b.n	8005388 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ebc:	4b49      	ldr	r3, [pc, #292]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	061b      	lsls	r3, r3, #24
 8004eca:	4946      	ldr	r1, [pc, #280]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ed0:	4b45      	ldr	r3, [pc, #276]	; (8004fe8 <HAL_RCC_OscConfig+0x280>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fd fad3 	bl	8002480 <HAL_InitTick>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d043      	beq.n	8004f68 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e251      	b.n	8005388 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d023      	beq.n	8004f34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eec:	4b3d      	ldr	r3, [pc, #244]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a3c      	ldr	r2, [pc, #240]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef8:	f7fd fb0e 	bl	8002518 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f00:	f7fd fb0a 	bl	8002518 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e23a      	b.n	8005388 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f12:	4b34      	ldr	r3, [pc, #208]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f0      	beq.n	8004f00 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f1e:	4b31      	ldr	r3, [pc, #196]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	061b      	lsls	r3, r3, #24
 8004f2c:	492d      	ldr	r1, [pc, #180]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	604b      	str	r3, [r1, #4]
 8004f32:	e01a      	b.n	8004f6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f34:	4b2b      	ldr	r3, [pc, #172]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a2a      	ldr	r2, [pc, #168]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004f3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f40:	f7fd faea 	bl	8002518 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f48:	f7fd fae6 	bl	8002518 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e216      	b.n	8005388 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f5a:	4b22      	ldr	r3, [pc, #136]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0x1e0>
 8004f66:	e000      	b.n	8004f6a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d041      	beq.n	8004ffa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01c      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f7e:	4b19      	ldr	r3, [pc, #100]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f84:	4a17      	ldr	r2, [pc, #92]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8e:	f7fd fac3 	bl	8002518 <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f96:	f7fd fabf 	bl	8002518 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e1ef      	b.n	8005388 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fa8:	4b0e      	ldr	r3, [pc, #56]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0ef      	beq.n	8004f96 <HAL_RCC_OscConfig+0x22e>
 8004fb6:	e020      	b.n	8004ffa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fb8:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fbe:	4a09      	ldr	r2, [pc, #36]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004fc0:	f023 0301 	bic.w	r3, r3, #1
 8004fc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc8:	f7fd faa6 	bl	8002518 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fce:	e00d      	b.n	8004fec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fd0:	f7fd faa2 	bl	8002518 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d906      	bls.n	8004fec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e1d2      	b.n	8005388 <HAL_RCC_OscConfig+0x620>
 8004fe2:	bf00      	nop
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	200001cc 	.word	0x200001cc
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fec:	4b8c      	ldr	r3, [pc, #560]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 8004fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1ea      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 80a6 	beq.w	8005154 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005008:	2300      	movs	r3, #0
 800500a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800500c:	4b84      	ldr	r3, [pc, #528]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 800500e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_RCC_OscConfig+0x2b4>
 8005018:	2301      	movs	r3, #1
 800501a:	e000      	b.n	800501e <HAL_RCC_OscConfig+0x2b6>
 800501c:	2300      	movs	r3, #0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00d      	beq.n	800503e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005022:	4b7f      	ldr	r3, [pc, #508]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 8005024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005026:	4a7e      	ldr	r2, [pc, #504]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 8005028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800502c:	6593      	str	r3, [r2, #88]	; 0x58
 800502e:	4b7c      	ldr	r3, [pc, #496]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 8005030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800503a:	2301      	movs	r3, #1
 800503c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800503e:	4b79      	ldr	r3, [pc, #484]	; (8005224 <HAL_RCC_OscConfig+0x4bc>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005046:	2b00      	cmp	r3, #0
 8005048:	d118      	bne.n	800507c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800504a:	4b76      	ldr	r3, [pc, #472]	; (8005224 <HAL_RCC_OscConfig+0x4bc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a75      	ldr	r2, [pc, #468]	; (8005224 <HAL_RCC_OscConfig+0x4bc>)
 8005050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005056:	f7fd fa5f 	bl	8002518 <HAL_GetTick>
 800505a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800505c:	e008      	b.n	8005070 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800505e:	f7fd fa5b 	bl	8002518 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d901      	bls.n	8005070 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e18b      	b.n	8005388 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005070:	4b6c      	ldr	r3, [pc, #432]	; (8005224 <HAL_RCC_OscConfig+0x4bc>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0f0      	beq.n	800505e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d108      	bne.n	8005096 <HAL_RCC_OscConfig+0x32e>
 8005084:	4b66      	ldr	r3, [pc, #408]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 8005086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508a:	4a65      	ldr	r2, [pc, #404]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 800508c:	f043 0301 	orr.w	r3, r3, #1
 8005090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005094:	e024      	b.n	80050e0 <HAL_RCC_OscConfig+0x378>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	2b05      	cmp	r3, #5
 800509c:	d110      	bne.n	80050c0 <HAL_RCC_OscConfig+0x358>
 800509e:	4b60      	ldr	r3, [pc, #384]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 80050a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a4:	4a5e      	ldr	r2, [pc, #376]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 80050a6:	f043 0304 	orr.w	r3, r3, #4
 80050aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050ae:	4b5c      	ldr	r3, [pc, #368]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 80050b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b4:	4a5a      	ldr	r2, [pc, #360]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050be:	e00f      	b.n	80050e0 <HAL_RCC_OscConfig+0x378>
 80050c0:	4b57      	ldr	r3, [pc, #348]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 80050c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c6:	4a56      	ldr	r2, [pc, #344]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 80050c8:	f023 0301 	bic.w	r3, r3, #1
 80050cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050d0:	4b53      	ldr	r3, [pc, #332]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 80050d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d6:	4a52      	ldr	r2, [pc, #328]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 80050d8:	f023 0304 	bic.w	r3, r3, #4
 80050dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d016      	beq.n	8005116 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e8:	f7fd fa16 	bl	8002518 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ee:	e00a      	b.n	8005106 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f0:	f7fd fa12 	bl	8002518 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fe:	4293      	cmp	r3, r2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e140      	b.n	8005388 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005106:	4b46      	ldr	r3, [pc, #280]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 8005108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0ed      	beq.n	80050f0 <HAL_RCC_OscConfig+0x388>
 8005114:	e015      	b.n	8005142 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005116:	f7fd f9ff 	bl	8002518 <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800511c:	e00a      	b.n	8005134 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800511e:	f7fd f9fb 	bl	8002518 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	f241 3288 	movw	r2, #5000	; 0x1388
 800512c:	4293      	cmp	r3, r2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e129      	b.n	8005388 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005134:	4b3a      	ldr	r3, [pc, #232]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 8005136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1ed      	bne.n	800511e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005142:	7ffb      	ldrb	r3, [r7, #31]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d105      	bne.n	8005154 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005148:	4b35      	ldr	r3, [pc, #212]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 800514a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514c:	4a34      	ldr	r2, [pc, #208]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 800514e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005152:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b00      	cmp	r3, #0
 800515e:	d03c      	beq.n	80051da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01c      	beq.n	80051a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005168:	4b2d      	ldr	r3, [pc, #180]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 800516a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800516e:	4a2c      	ldr	r2, [pc, #176]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 8005170:	f043 0301 	orr.w	r3, r3, #1
 8005174:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005178:	f7fd f9ce 	bl	8002518 <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005180:	f7fd f9ca 	bl	8002518 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e0fa      	b.n	8005388 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005192:	4b23      	ldr	r3, [pc, #140]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 8005194:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0ef      	beq.n	8005180 <HAL_RCC_OscConfig+0x418>
 80051a0:	e01b      	b.n	80051da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051a2:	4b1f      	ldr	r3, [pc, #124]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 80051a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051a8:	4a1d      	ldr	r2, [pc, #116]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 80051aa:	f023 0301 	bic.w	r3, r3, #1
 80051ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b2:	f7fd f9b1 	bl	8002518 <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051b8:	e008      	b.n	80051cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051ba:	f7fd f9ad 	bl	8002518 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e0dd      	b.n	8005388 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051cc:	4b14      	ldr	r3, [pc, #80]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 80051ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1ef      	bne.n	80051ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 80d1 	beq.w	8005386 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051e4:	4b0e      	ldr	r3, [pc, #56]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f003 030c 	and.w	r3, r3, #12
 80051ec:	2b0c      	cmp	r3, #12
 80051ee:	f000 808b 	beq.w	8005308 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d15e      	bne.n	80052b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051fa:	4b09      	ldr	r3, [pc, #36]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a08      	ldr	r2, [pc, #32]	; (8005220 <HAL_RCC_OscConfig+0x4b8>)
 8005200:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005206:	f7fd f987 	bl	8002518 <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800520c:	e00c      	b.n	8005228 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800520e:	f7fd f983 	bl	8002518 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d905      	bls.n	8005228 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e0b3      	b.n	8005388 <HAL_RCC_OscConfig+0x620>
 8005220:	40021000 	.word	0x40021000
 8005224:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005228:	4b59      	ldr	r3, [pc, #356]	; (8005390 <HAL_RCC_OscConfig+0x628>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1ec      	bne.n	800520e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005234:	4b56      	ldr	r3, [pc, #344]	; (8005390 <HAL_RCC_OscConfig+0x628>)
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	4b56      	ldr	r3, [pc, #344]	; (8005394 <HAL_RCC_OscConfig+0x62c>)
 800523a:	4013      	ands	r3, r2
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6a11      	ldr	r1, [r2, #32]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005244:	3a01      	subs	r2, #1
 8005246:	0112      	lsls	r2, r2, #4
 8005248:	4311      	orrs	r1, r2
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800524e:	0212      	lsls	r2, r2, #8
 8005250:	4311      	orrs	r1, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005256:	0852      	lsrs	r2, r2, #1
 8005258:	3a01      	subs	r2, #1
 800525a:	0552      	lsls	r2, r2, #21
 800525c:	4311      	orrs	r1, r2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005262:	0852      	lsrs	r2, r2, #1
 8005264:	3a01      	subs	r2, #1
 8005266:	0652      	lsls	r2, r2, #25
 8005268:	4311      	orrs	r1, r2
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800526e:	06d2      	lsls	r2, r2, #27
 8005270:	430a      	orrs	r2, r1
 8005272:	4947      	ldr	r1, [pc, #284]	; (8005390 <HAL_RCC_OscConfig+0x628>)
 8005274:	4313      	orrs	r3, r2
 8005276:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005278:	4b45      	ldr	r3, [pc, #276]	; (8005390 <HAL_RCC_OscConfig+0x628>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a44      	ldr	r2, [pc, #272]	; (8005390 <HAL_RCC_OscConfig+0x628>)
 800527e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005282:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005284:	4b42      	ldr	r3, [pc, #264]	; (8005390 <HAL_RCC_OscConfig+0x628>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	4a41      	ldr	r2, [pc, #260]	; (8005390 <HAL_RCC_OscConfig+0x628>)
 800528a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800528e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005290:	f7fd f942 	bl	8002518 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005298:	f7fd f93e 	bl	8002518 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e06e      	b.n	8005388 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052aa:	4b39      	ldr	r3, [pc, #228]	; (8005390 <HAL_RCC_OscConfig+0x628>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0f0      	beq.n	8005298 <HAL_RCC_OscConfig+0x530>
 80052b6:	e066      	b.n	8005386 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b8:	4b35      	ldr	r3, [pc, #212]	; (8005390 <HAL_RCC_OscConfig+0x628>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a34      	ldr	r2, [pc, #208]	; (8005390 <HAL_RCC_OscConfig+0x628>)
 80052be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052c2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80052c4:	4b32      	ldr	r3, [pc, #200]	; (8005390 <HAL_RCC_OscConfig+0x628>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	4a31      	ldr	r2, [pc, #196]	; (8005390 <HAL_RCC_OscConfig+0x628>)
 80052ca:	f023 0303 	bic.w	r3, r3, #3
 80052ce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80052d0:	4b2f      	ldr	r3, [pc, #188]	; (8005390 <HAL_RCC_OscConfig+0x628>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	4a2e      	ldr	r2, [pc, #184]	; (8005390 <HAL_RCC_OscConfig+0x628>)
 80052d6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80052da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e0:	f7fd f91a 	bl	8002518 <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e8:	f7fd f916 	bl	8002518 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e046      	b.n	8005388 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052fa:	4b25      	ldr	r3, [pc, #148]	; (8005390 <HAL_RCC_OscConfig+0x628>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f0      	bne.n	80052e8 <HAL_RCC_OscConfig+0x580>
 8005306:	e03e      	b.n	8005386 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e039      	b.n	8005388 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005314:	4b1e      	ldr	r3, [pc, #120]	; (8005390 <HAL_RCC_OscConfig+0x628>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f003 0203 	and.w	r2, r3, #3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	429a      	cmp	r2, r3
 8005326:	d12c      	bne.n	8005382 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	3b01      	subs	r3, #1
 8005334:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005336:	429a      	cmp	r2, r3
 8005338:	d123      	bne.n	8005382 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005346:	429a      	cmp	r2, r3
 8005348:	d11b      	bne.n	8005382 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005356:	429a      	cmp	r2, r3
 8005358:	d113      	bne.n	8005382 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005364:	085b      	lsrs	r3, r3, #1
 8005366:	3b01      	subs	r3, #1
 8005368:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800536a:	429a      	cmp	r2, r3
 800536c:	d109      	bne.n	8005382 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005378:	085b      	lsrs	r3, r3, #1
 800537a:	3b01      	subs	r3, #1
 800537c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800537e:	429a      	cmp	r2, r3
 8005380:	d001      	beq.n	8005386 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3720      	adds	r7, #32
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	40021000 	.word	0x40021000
 8005394:	019f800c 	.word	0x019f800c

08005398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80053a2:	2300      	movs	r3, #0
 80053a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e11e      	b.n	80055ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053b0:	4b91      	ldr	r3, [pc, #580]	; (80055f8 <HAL_RCC_ClockConfig+0x260>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 030f 	and.w	r3, r3, #15
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d910      	bls.n	80053e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053be:	4b8e      	ldr	r3, [pc, #568]	; (80055f8 <HAL_RCC_ClockConfig+0x260>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f023 020f 	bic.w	r2, r3, #15
 80053c6:	498c      	ldr	r1, [pc, #560]	; (80055f8 <HAL_RCC_ClockConfig+0x260>)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ce:	4b8a      	ldr	r3, [pc, #552]	; (80055f8 <HAL_RCC_ClockConfig+0x260>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d001      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e106      	b.n	80055ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d073      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b03      	cmp	r3, #3
 80053f2:	d129      	bne.n	8005448 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053f4:	4b81      	ldr	r3, [pc, #516]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e0f4      	b.n	80055ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005404:	f000 f99e 	bl	8005744 <RCC_GetSysClockFreqFromPLLSource>
 8005408:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	4a7c      	ldr	r2, [pc, #496]	; (8005600 <HAL_RCC_ClockConfig+0x268>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d93f      	bls.n	8005492 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005412:	4b7a      	ldr	r3, [pc, #488]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d009      	beq.n	8005432 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005426:	2b00      	cmp	r3, #0
 8005428:	d033      	beq.n	8005492 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800542e:	2b00      	cmp	r3, #0
 8005430:	d12f      	bne.n	8005492 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005432:	4b72      	ldr	r3, [pc, #456]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800543a:	4a70      	ldr	r2, [pc, #448]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 800543c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005440:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005442:	2380      	movs	r3, #128	; 0x80
 8005444:	617b      	str	r3, [r7, #20]
 8005446:	e024      	b.n	8005492 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d107      	bne.n	8005460 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005450:	4b6a      	ldr	r3, [pc, #424]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d109      	bne.n	8005470 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e0c6      	b.n	80055ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005460:	4b66      	ldr	r3, [pc, #408]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e0be      	b.n	80055ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005470:	f000 f8ce 	bl	8005610 <HAL_RCC_GetSysClockFreq>
 8005474:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	4a61      	ldr	r2, [pc, #388]	; (8005600 <HAL_RCC_ClockConfig+0x268>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d909      	bls.n	8005492 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800547e:	4b5f      	ldr	r3, [pc, #380]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005486:	4a5d      	ldr	r2, [pc, #372]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 8005488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800548c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800548e:	2380      	movs	r3, #128	; 0x80
 8005490:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005492:	4b5a      	ldr	r3, [pc, #360]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f023 0203 	bic.w	r2, r3, #3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	4957      	ldr	r1, [pc, #348]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a4:	f7fd f838 	bl	8002518 <HAL_GetTick>
 80054a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054aa:	e00a      	b.n	80054c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ac:	f7fd f834 	bl	8002518 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e095      	b.n	80055ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c2:	4b4e      	ldr	r3, [pc, #312]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 020c 	and.w	r2, r3, #12
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d1eb      	bne.n	80054ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d023      	beq.n	8005528 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d005      	beq.n	80054f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054ec:	4b43      	ldr	r3, [pc, #268]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	4a42      	ldr	r2, [pc, #264]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 80054f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0308 	and.w	r3, r3, #8
 8005500:	2b00      	cmp	r3, #0
 8005502:	d007      	beq.n	8005514 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005504:	4b3d      	ldr	r3, [pc, #244]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800550c:	4a3b      	ldr	r2, [pc, #236]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 800550e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005512:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005514:	4b39      	ldr	r3, [pc, #228]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	4936      	ldr	r1, [pc, #216]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 8005522:	4313      	orrs	r3, r2
 8005524:	608b      	str	r3, [r1, #8]
 8005526:	e008      	b.n	800553a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	2b80      	cmp	r3, #128	; 0x80
 800552c:	d105      	bne.n	800553a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800552e:	4b33      	ldr	r3, [pc, #204]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	4a32      	ldr	r2, [pc, #200]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 8005534:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005538:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800553a:	4b2f      	ldr	r3, [pc, #188]	; (80055f8 <HAL_RCC_ClockConfig+0x260>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d21d      	bcs.n	8005584 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005548:	4b2b      	ldr	r3, [pc, #172]	; (80055f8 <HAL_RCC_ClockConfig+0x260>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f023 020f 	bic.w	r2, r3, #15
 8005550:	4929      	ldr	r1, [pc, #164]	; (80055f8 <HAL_RCC_ClockConfig+0x260>)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	4313      	orrs	r3, r2
 8005556:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005558:	f7fc ffde 	bl	8002518 <HAL_GetTick>
 800555c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800555e:	e00a      	b.n	8005576 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005560:	f7fc ffda 	bl	8002518 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	f241 3288 	movw	r2, #5000	; 0x1388
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e03b      	b.n	80055ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005576:	4b20      	ldr	r3, [pc, #128]	; (80055f8 <HAL_RCC_ClockConfig+0x260>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	429a      	cmp	r2, r3
 8005582:	d1ed      	bne.n	8005560 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b00      	cmp	r3, #0
 800558e:	d008      	beq.n	80055a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005590:	4b1a      	ldr	r3, [pc, #104]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	4917      	ldr	r1, [pc, #92]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d009      	beq.n	80055c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055ae:	4b13      	ldr	r3, [pc, #76]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	490f      	ldr	r1, [pc, #60]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055c2:	f000 f825 	bl	8005610 <HAL_RCC_GetSysClockFreq>
 80055c6:	4602      	mov	r2, r0
 80055c8:	4b0c      	ldr	r3, [pc, #48]	; (80055fc <HAL_RCC_ClockConfig+0x264>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	091b      	lsrs	r3, r3, #4
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	490c      	ldr	r1, [pc, #48]	; (8005604 <HAL_RCC_ClockConfig+0x26c>)
 80055d4:	5ccb      	ldrb	r3, [r1, r3]
 80055d6:	f003 031f 	and.w	r3, r3, #31
 80055da:	fa22 f303 	lsr.w	r3, r2, r3
 80055de:	4a0a      	ldr	r2, [pc, #40]	; (8005608 <HAL_RCC_ClockConfig+0x270>)
 80055e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80055e2:	4b0a      	ldr	r3, [pc, #40]	; (800560c <HAL_RCC_ClockConfig+0x274>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fc ff4a 	bl	8002480 <HAL_InitTick>
 80055ec:	4603      	mov	r3, r0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3718      	adds	r7, #24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	40022000 	.word	0x40022000
 80055fc:	40021000 	.word	0x40021000
 8005600:	04c4b400 	.word	0x04c4b400
 8005604:	0800989c 	.word	0x0800989c
 8005608:	200001c8 	.word	0x200001c8
 800560c:	200001cc 	.word	0x200001cc

08005610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005616:	4b2c      	ldr	r3, [pc, #176]	; (80056c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 030c 	and.w	r3, r3, #12
 800561e:	2b04      	cmp	r3, #4
 8005620:	d102      	bne.n	8005628 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005622:	4b2a      	ldr	r3, [pc, #168]	; (80056cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	e047      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005628:	4b27      	ldr	r3, [pc, #156]	; (80056c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f003 030c 	and.w	r3, r3, #12
 8005630:	2b08      	cmp	r3, #8
 8005632:	d102      	bne.n	800563a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005634:	4b26      	ldr	r3, [pc, #152]	; (80056d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	e03e      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800563a:	4b23      	ldr	r3, [pc, #140]	; (80056c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 030c 	and.w	r3, r3, #12
 8005642:	2b0c      	cmp	r3, #12
 8005644:	d136      	bne.n	80056b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005646:	4b20      	ldr	r3, [pc, #128]	; (80056c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005650:	4b1d      	ldr	r3, [pc, #116]	; (80056c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	091b      	lsrs	r3, r3, #4
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	3301      	adds	r3, #1
 800565c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b03      	cmp	r3, #3
 8005662:	d10c      	bne.n	800567e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005664:	4a1a      	ldr	r2, [pc, #104]	; (80056d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	fbb2 f3f3 	udiv	r3, r2, r3
 800566c:	4a16      	ldr	r2, [pc, #88]	; (80056c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800566e:	68d2      	ldr	r2, [r2, #12]
 8005670:	0a12      	lsrs	r2, r2, #8
 8005672:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005676:	fb02 f303 	mul.w	r3, r2, r3
 800567a:	617b      	str	r3, [r7, #20]
      break;
 800567c:	e00c      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800567e:	4a13      	ldr	r2, [pc, #76]	; (80056cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	fbb2 f3f3 	udiv	r3, r2, r3
 8005686:	4a10      	ldr	r2, [pc, #64]	; (80056c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005688:	68d2      	ldr	r2, [r2, #12]
 800568a:	0a12      	lsrs	r2, r2, #8
 800568c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005690:	fb02 f303 	mul.w	r3, r2, r3
 8005694:	617b      	str	r3, [r7, #20]
      break;
 8005696:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005698:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	0e5b      	lsrs	r3, r3, #25
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	3301      	adds	r3, #1
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	e001      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80056b8:	693b      	ldr	r3, [r7, #16]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	371c      	adds	r7, #28
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40021000 	.word	0x40021000
 80056cc:	00f42400 	.word	0x00f42400
 80056d0:	016e3600 	.word	0x016e3600

080056d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056d8:	4b03      	ldr	r3, [pc, #12]	; (80056e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80056da:	681b      	ldr	r3, [r3, #0]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	200001c8 	.word	0x200001c8

080056ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80056f0:	f7ff fff0 	bl	80056d4 <HAL_RCC_GetHCLKFreq>
 80056f4:	4602      	mov	r2, r0
 80056f6:	4b06      	ldr	r3, [pc, #24]	; (8005710 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	0a1b      	lsrs	r3, r3, #8
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	4904      	ldr	r1, [pc, #16]	; (8005714 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005702:	5ccb      	ldrb	r3, [r1, r3]
 8005704:	f003 031f 	and.w	r3, r3, #31
 8005708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800570c:	4618      	mov	r0, r3
 800570e:	bd80      	pop	{r7, pc}
 8005710:	40021000 	.word	0x40021000
 8005714:	080098ac 	.word	0x080098ac

08005718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800571c:	f7ff ffda 	bl	80056d4 <HAL_RCC_GetHCLKFreq>
 8005720:	4602      	mov	r2, r0
 8005722:	4b06      	ldr	r3, [pc, #24]	; (800573c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	0adb      	lsrs	r3, r3, #11
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	4904      	ldr	r1, [pc, #16]	; (8005740 <HAL_RCC_GetPCLK2Freq+0x28>)
 800572e:	5ccb      	ldrb	r3, [r1, r3]
 8005730:	f003 031f 	and.w	r3, r3, #31
 8005734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005738:	4618      	mov	r0, r3
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40021000 	.word	0x40021000
 8005740:	080098ac 	.word	0x080098ac

08005744 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800574a:	4b1e      	ldr	r3, [pc, #120]	; (80057c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f003 0303 	and.w	r3, r3, #3
 8005752:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005754:	4b1b      	ldr	r3, [pc, #108]	; (80057c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	091b      	lsrs	r3, r3, #4
 800575a:	f003 030f 	and.w	r3, r3, #15
 800575e:	3301      	adds	r3, #1
 8005760:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b03      	cmp	r3, #3
 8005766:	d10c      	bne.n	8005782 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005768:	4a17      	ldr	r2, [pc, #92]	; (80057c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005770:	4a14      	ldr	r2, [pc, #80]	; (80057c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005772:	68d2      	ldr	r2, [r2, #12]
 8005774:	0a12      	lsrs	r2, r2, #8
 8005776:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800577a:	fb02 f303 	mul.w	r3, r2, r3
 800577e:	617b      	str	r3, [r7, #20]
    break;
 8005780:	e00c      	b.n	800579c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005782:	4a12      	ldr	r2, [pc, #72]	; (80057cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	fbb2 f3f3 	udiv	r3, r2, r3
 800578a:	4a0e      	ldr	r2, [pc, #56]	; (80057c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800578c:	68d2      	ldr	r2, [r2, #12]
 800578e:	0a12      	lsrs	r2, r2, #8
 8005790:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005794:	fb02 f303 	mul.w	r3, r2, r3
 8005798:	617b      	str	r3, [r7, #20]
    break;
 800579a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800579c:	4b09      	ldr	r3, [pc, #36]	; (80057c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	0e5b      	lsrs	r3, r3, #25
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	3301      	adds	r3, #1
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80057b6:	687b      	ldr	r3, [r7, #4]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	371c      	adds	r7, #28
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	40021000 	.word	0x40021000
 80057c8:	016e3600 	.word	0x016e3600
 80057cc:	00f42400 	.word	0x00f42400

080057d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057d8:	2300      	movs	r3, #0
 80057da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057dc:	2300      	movs	r3, #0
 80057de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 8098 	beq.w	800591e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ee:	2300      	movs	r3, #0
 80057f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057f2:	4b43      	ldr	r3, [pc, #268]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10d      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057fe:	4b40      	ldr	r3, [pc, #256]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005802:	4a3f      	ldr	r2, [pc, #252]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005808:	6593      	str	r3, [r2, #88]	; 0x58
 800580a:	4b3d      	ldr	r3, [pc, #244]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800580c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005812:	60bb      	str	r3, [r7, #8]
 8005814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005816:	2301      	movs	r3, #1
 8005818:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800581a:	4b3a      	ldr	r3, [pc, #232]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a39      	ldr	r2, [pc, #228]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005824:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005826:	f7fc fe77 	bl	8002518 <HAL_GetTick>
 800582a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800582c:	e009      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800582e:	f7fc fe73 	bl	8002518 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d902      	bls.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	74fb      	strb	r3, [r7, #19]
        break;
 8005840:	e005      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005842:	4b30      	ldr	r3, [pc, #192]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0ef      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800584e:	7cfb      	ldrb	r3, [r7, #19]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d159      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005854:	4b2a      	ldr	r3, [pc, #168]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800585e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d01e      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	429a      	cmp	r2, r3
 800586e:	d019      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005870:	4b23      	ldr	r3, [pc, #140]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800587a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800587c:	4b20      	ldr	r3, [pc, #128]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800587e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005882:	4a1f      	ldr	r2, [pc, #124]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800588c:	4b1c      	ldr	r3, [pc, #112]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800588e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005892:	4a1b      	ldr	r2, [pc, #108]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800589c:	4a18      	ldr	r2, [pc, #96]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d016      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ae:	f7fc fe33 	bl	8002518 <HAL_GetTick>
 80058b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058b4:	e00b      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058b6:	f7fc fe2f 	bl	8002518 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d902      	bls.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	74fb      	strb	r3, [r7, #19]
            break;
 80058cc:	e006      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ce:	4b0c      	ldr	r3, [pc, #48]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0ec      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80058dc:	7cfb      	ldrb	r3, [r7, #19]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10b      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058e2:	4b07      	ldr	r3, [pc, #28]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f0:	4903      	ldr	r1, [pc, #12]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058f8:	e008      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058fa:	7cfb      	ldrb	r3, [r7, #19]
 80058fc:	74bb      	strb	r3, [r7, #18]
 80058fe:	e005      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005900:	40021000 	.word	0x40021000
 8005904:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005908:	7cfb      	ldrb	r3, [r7, #19]
 800590a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800590c:	7c7b      	ldrb	r3, [r7, #17]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d105      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005912:	4ba7      	ldr	r3, [pc, #668]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005916:	4aa6      	ldr	r2, [pc, #664]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800591c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800592a:	4ba1      	ldr	r3, [pc, #644]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800592c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005930:	f023 0203 	bic.w	r2, r3, #3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	499d      	ldr	r1, [pc, #628]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800593a:	4313      	orrs	r3, r2
 800593c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00a      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800594c:	4b98      	ldr	r3, [pc, #608]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800594e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005952:	f023 020c 	bic.w	r2, r3, #12
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	4995      	ldr	r1, [pc, #596]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800595c:	4313      	orrs	r3, r2
 800595e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0304 	and.w	r3, r3, #4
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800596e:	4b90      	ldr	r3, [pc, #576]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005974:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	498c      	ldr	r1, [pc, #560]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800597e:	4313      	orrs	r3, r2
 8005980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0308 	and.w	r3, r3, #8
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00a      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005990:	4b87      	ldr	r3, [pc, #540]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005996:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	4984      	ldr	r1, [pc, #528]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0310 	and.w	r3, r3, #16
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059b2:	4b7f      	ldr	r3, [pc, #508]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	497b      	ldr	r1, [pc, #492]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0320 	and.w	r3, r3, #32
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00a      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059d4:	4b76      	ldr	r3, [pc, #472]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	4973      	ldr	r1, [pc, #460]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00a      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059f6:	4b6e      	ldr	r3, [pc, #440]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	496a      	ldr	r1, [pc, #424]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00a      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a18:	4b65      	ldr	r3, [pc, #404]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	4962      	ldr	r1, [pc, #392]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a3a:	4b5d      	ldr	r3, [pc, #372]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	4959      	ldr	r1, [pc, #356]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00a      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a5c:	4b54      	ldr	r3, [pc, #336]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a62:	f023 0203 	bic.w	r2, r3, #3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	4951      	ldr	r1, [pc, #324]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a7e:	4b4c      	ldr	r3, [pc, #304]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	4948      	ldr	r1, [pc, #288]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d015      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005aa0:	4b43      	ldr	r3, [pc, #268]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	4940      	ldr	r1, [pc, #256]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005abe:	d105      	bne.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ac0:	4b3b      	ldr	r3, [pc, #236]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	4a3a      	ldr	r2, [pc, #232]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d015      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ad8:	4b35      	ldr	r3, [pc, #212]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ade:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae6:	4932      	ldr	r1, [pc, #200]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005af6:	d105      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005af8:	4b2d      	ldr	r3, [pc, #180]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	4a2c      	ldr	r2, [pc, #176]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b02:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d015      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b10:	4b27      	ldr	r3, [pc, #156]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	4924      	ldr	r1, [pc, #144]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b2e:	d105      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b30:	4b1f      	ldr	r3, [pc, #124]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	4a1e      	ldr	r2, [pc, #120]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b3a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d015      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b48:	4b19      	ldr	r3, [pc, #100]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b56:	4916      	ldr	r1, [pc, #88]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b66:	d105      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b68:	4b11      	ldr	r3, [pc, #68]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	4a10      	ldr	r2, [pc, #64]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b72:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d019      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b80:	4b0b      	ldr	r3, [pc, #44]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	4908      	ldr	r1, [pc, #32]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b9e:	d109      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ba0:	4b03      	ldr	r3, [pc, #12]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	4a02      	ldr	r2, [pc, #8]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005baa:	60d3      	str	r3, [r2, #12]
 8005bac:	e002      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005bae:	bf00      	nop
 8005bb0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d015      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005bc0:	4b29      	ldr	r3, [pc, #164]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bce:	4926      	ldr	r1, [pc, #152]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bde:	d105      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005be0:	4b21      	ldr	r3, [pc, #132]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	4a20      	ldr	r2, [pc, #128]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d015      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005bf8:	4b1b      	ldr	r3, [pc, #108]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c06:	4918      	ldr	r1, [pc, #96]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c16:	d105      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c18:	4b13      	ldr	r3, [pc, #76]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	4a12      	ldr	r2, [pc, #72]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c22:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d015      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c30:	4b0d      	ldr	r3, [pc, #52]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c3e:	490a      	ldr	r1, [pc, #40]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c4e:	d105      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c50:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	4a04      	ldr	r2, [pc, #16]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005c5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	40021000 	.word	0x40021000

08005c6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e042      	b.n	8005d04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d106      	bne.n	8005c96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7fc fa3d 	bl	8002110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2224      	movs	r2, #36	; 0x24
 8005c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0201 	bic.w	r2, r2, #1
 8005cac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f8c2 	bl	8005e38 <UART_SetConfig>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e022      	b.n	8005d04 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d002      	beq.n	8005ccc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fbb2 	bl	8006430 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0201 	orr.w	r2, r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fc39 	bl	8006574 <UART_CheckIdleState>
 8005d02:	4603      	mov	r3, r0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08a      	sub	sp, #40	; 0x28
 8005d10:	af02      	add	r7, sp, #8
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d22:	2b20      	cmp	r3, #32
 8005d24:	f040 8083 	bne.w	8005e2e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <HAL_UART_Transmit+0x28>
 8005d2e:	88fb      	ldrh	r3, [r7, #6]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e07b      	b.n	8005e30 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_UART_Transmit+0x3a>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e074      	b.n	8005e30 <HAL_UART_Transmit+0x124>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2221      	movs	r2, #33	; 0x21
 8005d5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d5e:	f7fc fbdb 	bl	8002518 <HAL_GetTick>
 8005d62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	88fa      	ldrh	r2, [r7, #6]
 8005d68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	88fa      	ldrh	r2, [r7, #6]
 8005d70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7c:	d108      	bne.n	8005d90 <HAL_UART_Transmit+0x84>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d104      	bne.n	8005d90 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005d86:	2300      	movs	r3, #0
 8005d88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	61bb      	str	r3, [r7, #24]
 8005d8e:	e003      	b.n	8005d98 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d94:	2300      	movs	r3, #0
 8005d96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005da0:	e02c      	b.n	8005dfc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2200      	movs	r2, #0
 8005daa:	2180      	movs	r1, #128	; 0x80
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 fc2c 	bl	800660a <UART_WaitOnFlagUntilTimeout>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e039      	b.n	8005e30 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10b      	bne.n	8005dda <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dd0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	3302      	adds	r3, #2
 8005dd6:	61bb      	str	r3, [r7, #24]
 8005dd8:	e007      	b.n	8005dea <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	781a      	ldrb	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	3301      	adds	r3, #1
 8005de8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	3b01      	subs	r3, #1
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1cc      	bne.n	8005da2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	2140      	movs	r1, #64	; 0x40
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 fbf9 	bl	800660a <UART_WaitOnFlagUntilTimeout>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e006      	b.n	8005e30 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e000      	b.n	8005e30 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005e2e:	2302      	movs	r3, #2
  }
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e3c:	b08c      	sub	sp, #48	; 0x30
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	431a      	orrs	r2, r3
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	431a      	orrs	r2, r3
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	4baa      	ldr	r3, [pc, #680]	; (8006110 <UART_SetConfig+0x2d8>)
 8005e68:	4013      	ands	r3, r2
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	6812      	ldr	r2, [r2, #0]
 8005e6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e70:	430b      	orrs	r3, r1
 8005e72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	68da      	ldr	r2, [r3, #12]
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a9f      	ldr	r2, [pc, #636]	; (8006114 <UART_SetConfig+0x2dc>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d004      	beq.n	8005ea4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005eae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	6812      	ldr	r2, [r2, #0]
 8005eb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005eb8:	430b      	orrs	r3, r1
 8005eba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec2:	f023 010f 	bic.w	r1, r3, #15
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a90      	ldr	r2, [pc, #576]	; (8006118 <UART_SetConfig+0x2e0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d125      	bne.n	8005f28 <UART_SetConfig+0xf0>
 8005edc:	4b8f      	ldr	r3, [pc, #572]	; (800611c <UART_SetConfig+0x2e4>)
 8005ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d81a      	bhi.n	8005f20 <UART_SetConfig+0xe8>
 8005eea:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <UART_SetConfig+0xb8>)
 8005eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef0:	08005f01 	.word	0x08005f01
 8005ef4:	08005f11 	.word	0x08005f11
 8005ef8:	08005f09 	.word	0x08005f09
 8005efc:	08005f19 	.word	0x08005f19
 8005f00:	2301      	movs	r3, #1
 8005f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f06:	e116      	b.n	8006136 <UART_SetConfig+0x2fe>
 8005f08:	2302      	movs	r3, #2
 8005f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f0e:	e112      	b.n	8006136 <UART_SetConfig+0x2fe>
 8005f10:	2304      	movs	r3, #4
 8005f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f16:	e10e      	b.n	8006136 <UART_SetConfig+0x2fe>
 8005f18:	2308      	movs	r3, #8
 8005f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f1e:	e10a      	b.n	8006136 <UART_SetConfig+0x2fe>
 8005f20:	2310      	movs	r3, #16
 8005f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f26:	e106      	b.n	8006136 <UART_SetConfig+0x2fe>
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a7c      	ldr	r2, [pc, #496]	; (8006120 <UART_SetConfig+0x2e8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d138      	bne.n	8005fa4 <UART_SetConfig+0x16c>
 8005f32:	4b7a      	ldr	r3, [pc, #488]	; (800611c <UART_SetConfig+0x2e4>)
 8005f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f38:	f003 030c 	and.w	r3, r3, #12
 8005f3c:	2b0c      	cmp	r3, #12
 8005f3e:	d82d      	bhi.n	8005f9c <UART_SetConfig+0x164>
 8005f40:	a201      	add	r2, pc, #4	; (adr r2, 8005f48 <UART_SetConfig+0x110>)
 8005f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f46:	bf00      	nop
 8005f48:	08005f7d 	.word	0x08005f7d
 8005f4c:	08005f9d 	.word	0x08005f9d
 8005f50:	08005f9d 	.word	0x08005f9d
 8005f54:	08005f9d 	.word	0x08005f9d
 8005f58:	08005f8d 	.word	0x08005f8d
 8005f5c:	08005f9d 	.word	0x08005f9d
 8005f60:	08005f9d 	.word	0x08005f9d
 8005f64:	08005f9d 	.word	0x08005f9d
 8005f68:	08005f85 	.word	0x08005f85
 8005f6c:	08005f9d 	.word	0x08005f9d
 8005f70:	08005f9d 	.word	0x08005f9d
 8005f74:	08005f9d 	.word	0x08005f9d
 8005f78:	08005f95 	.word	0x08005f95
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f82:	e0d8      	b.n	8006136 <UART_SetConfig+0x2fe>
 8005f84:	2302      	movs	r3, #2
 8005f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f8a:	e0d4      	b.n	8006136 <UART_SetConfig+0x2fe>
 8005f8c:	2304      	movs	r3, #4
 8005f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f92:	e0d0      	b.n	8006136 <UART_SetConfig+0x2fe>
 8005f94:	2308      	movs	r3, #8
 8005f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f9a:	e0cc      	b.n	8006136 <UART_SetConfig+0x2fe>
 8005f9c:	2310      	movs	r3, #16
 8005f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fa2:	e0c8      	b.n	8006136 <UART_SetConfig+0x2fe>
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a5e      	ldr	r2, [pc, #376]	; (8006124 <UART_SetConfig+0x2ec>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d125      	bne.n	8005ffa <UART_SetConfig+0x1c2>
 8005fae:	4b5b      	ldr	r3, [pc, #364]	; (800611c <UART_SetConfig+0x2e4>)
 8005fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fb8:	2b30      	cmp	r3, #48	; 0x30
 8005fba:	d016      	beq.n	8005fea <UART_SetConfig+0x1b2>
 8005fbc:	2b30      	cmp	r3, #48	; 0x30
 8005fbe:	d818      	bhi.n	8005ff2 <UART_SetConfig+0x1ba>
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	d00a      	beq.n	8005fda <UART_SetConfig+0x1a2>
 8005fc4:	2b20      	cmp	r3, #32
 8005fc6:	d814      	bhi.n	8005ff2 <UART_SetConfig+0x1ba>
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <UART_SetConfig+0x19a>
 8005fcc:	2b10      	cmp	r3, #16
 8005fce:	d008      	beq.n	8005fe2 <UART_SetConfig+0x1aa>
 8005fd0:	e00f      	b.n	8005ff2 <UART_SetConfig+0x1ba>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fd8:	e0ad      	b.n	8006136 <UART_SetConfig+0x2fe>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fe0:	e0a9      	b.n	8006136 <UART_SetConfig+0x2fe>
 8005fe2:	2304      	movs	r3, #4
 8005fe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fe8:	e0a5      	b.n	8006136 <UART_SetConfig+0x2fe>
 8005fea:	2308      	movs	r3, #8
 8005fec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ff0:	e0a1      	b.n	8006136 <UART_SetConfig+0x2fe>
 8005ff2:	2310      	movs	r3, #16
 8005ff4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ff8:	e09d      	b.n	8006136 <UART_SetConfig+0x2fe>
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a4a      	ldr	r2, [pc, #296]	; (8006128 <UART_SetConfig+0x2f0>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d125      	bne.n	8006050 <UART_SetConfig+0x218>
 8006004:	4b45      	ldr	r3, [pc, #276]	; (800611c <UART_SetConfig+0x2e4>)
 8006006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800600a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800600e:	2bc0      	cmp	r3, #192	; 0xc0
 8006010:	d016      	beq.n	8006040 <UART_SetConfig+0x208>
 8006012:	2bc0      	cmp	r3, #192	; 0xc0
 8006014:	d818      	bhi.n	8006048 <UART_SetConfig+0x210>
 8006016:	2b80      	cmp	r3, #128	; 0x80
 8006018:	d00a      	beq.n	8006030 <UART_SetConfig+0x1f8>
 800601a:	2b80      	cmp	r3, #128	; 0x80
 800601c:	d814      	bhi.n	8006048 <UART_SetConfig+0x210>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <UART_SetConfig+0x1f0>
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d008      	beq.n	8006038 <UART_SetConfig+0x200>
 8006026:	e00f      	b.n	8006048 <UART_SetConfig+0x210>
 8006028:	2300      	movs	r3, #0
 800602a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800602e:	e082      	b.n	8006136 <UART_SetConfig+0x2fe>
 8006030:	2302      	movs	r3, #2
 8006032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006036:	e07e      	b.n	8006136 <UART_SetConfig+0x2fe>
 8006038:	2304      	movs	r3, #4
 800603a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800603e:	e07a      	b.n	8006136 <UART_SetConfig+0x2fe>
 8006040:	2308      	movs	r3, #8
 8006042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006046:	e076      	b.n	8006136 <UART_SetConfig+0x2fe>
 8006048:	2310      	movs	r3, #16
 800604a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800604e:	e072      	b.n	8006136 <UART_SetConfig+0x2fe>
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a35      	ldr	r2, [pc, #212]	; (800612c <UART_SetConfig+0x2f4>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d12a      	bne.n	80060b0 <UART_SetConfig+0x278>
 800605a:	4b30      	ldr	r3, [pc, #192]	; (800611c <UART_SetConfig+0x2e4>)
 800605c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006064:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006068:	d01a      	beq.n	80060a0 <UART_SetConfig+0x268>
 800606a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800606e:	d81b      	bhi.n	80060a8 <UART_SetConfig+0x270>
 8006070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006074:	d00c      	beq.n	8006090 <UART_SetConfig+0x258>
 8006076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800607a:	d815      	bhi.n	80060a8 <UART_SetConfig+0x270>
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <UART_SetConfig+0x250>
 8006080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006084:	d008      	beq.n	8006098 <UART_SetConfig+0x260>
 8006086:	e00f      	b.n	80060a8 <UART_SetConfig+0x270>
 8006088:	2300      	movs	r3, #0
 800608a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800608e:	e052      	b.n	8006136 <UART_SetConfig+0x2fe>
 8006090:	2302      	movs	r3, #2
 8006092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006096:	e04e      	b.n	8006136 <UART_SetConfig+0x2fe>
 8006098:	2304      	movs	r3, #4
 800609a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800609e:	e04a      	b.n	8006136 <UART_SetConfig+0x2fe>
 80060a0:	2308      	movs	r3, #8
 80060a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060a6:	e046      	b.n	8006136 <UART_SetConfig+0x2fe>
 80060a8:	2310      	movs	r3, #16
 80060aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ae:	e042      	b.n	8006136 <UART_SetConfig+0x2fe>
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a17      	ldr	r2, [pc, #92]	; (8006114 <UART_SetConfig+0x2dc>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d13a      	bne.n	8006130 <UART_SetConfig+0x2f8>
 80060ba:	4b18      	ldr	r3, [pc, #96]	; (800611c <UART_SetConfig+0x2e4>)
 80060bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060c8:	d01a      	beq.n	8006100 <UART_SetConfig+0x2c8>
 80060ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060ce:	d81b      	bhi.n	8006108 <UART_SetConfig+0x2d0>
 80060d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060d4:	d00c      	beq.n	80060f0 <UART_SetConfig+0x2b8>
 80060d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060da:	d815      	bhi.n	8006108 <UART_SetConfig+0x2d0>
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <UART_SetConfig+0x2b0>
 80060e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060e4:	d008      	beq.n	80060f8 <UART_SetConfig+0x2c0>
 80060e6:	e00f      	b.n	8006108 <UART_SetConfig+0x2d0>
 80060e8:	2300      	movs	r3, #0
 80060ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ee:	e022      	b.n	8006136 <UART_SetConfig+0x2fe>
 80060f0:	2302      	movs	r3, #2
 80060f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060f6:	e01e      	b.n	8006136 <UART_SetConfig+0x2fe>
 80060f8:	2304      	movs	r3, #4
 80060fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060fe:	e01a      	b.n	8006136 <UART_SetConfig+0x2fe>
 8006100:	2308      	movs	r3, #8
 8006102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006106:	e016      	b.n	8006136 <UART_SetConfig+0x2fe>
 8006108:	2310      	movs	r3, #16
 800610a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800610e:	e012      	b.n	8006136 <UART_SetConfig+0x2fe>
 8006110:	cfff69f3 	.word	0xcfff69f3
 8006114:	40008000 	.word	0x40008000
 8006118:	40013800 	.word	0x40013800
 800611c:	40021000 	.word	0x40021000
 8006120:	40004400 	.word	0x40004400
 8006124:	40004800 	.word	0x40004800
 8006128:	40004c00 	.word	0x40004c00
 800612c:	40005000 	.word	0x40005000
 8006130:	2310      	movs	r3, #16
 8006132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4aae      	ldr	r2, [pc, #696]	; (80063f4 <UART_SetConfig+0x5bc>)
 800613c:	4293      	cmp	r3, r2
 800613e:	f040 8097 	bne.w	8006270 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006142:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006146:	2b08      	cmp	r3, #8
 8006148:	d823      	bhi.n	8006192 <UART_SetConfig+0x35a>
 800614a:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <UART_SetConfig+0x318>)
 800614c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006150:	08006175 	.word	0x08006175
 8006154:	08006193 	.word	0x08006193
 8006158:	0800617d 	.word	0x0800617d
 800615c:	08006193 	.word	0x08006193
 8006160:	08006183 	.word	0x08006183
 8006164:	08006193 	.word	0x08006193
 8006168:	08006193 	.word	0x08006193
 800616c:	08006193 	.word	0x08006193
 8006170:	0800618b 	.word	0x0800618b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006174:	f7ff faba 	bl	80056ec <HAL_RCC_GetPCLK1Freq>
 8006178:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800617a:	e010      	b.n	800619e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800617c:	4b9e      	ldr	r3, [pc, #632]	; (80063f8 <UART_SetConfig+0x5c0>)
 800617e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006180:	e00d      	b.n	800619e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006182:	f7ff fa45 	bl	8005610 <HAL_RCC_GetSysClockFreq>
 8006186:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006188:	e009      	b.n	800619e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800618a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800618e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006190:	e005      	b.n	800619e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800619c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 8130 	beq.w	8006406 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	4a94      	ldr	r2, [pc, #592]	; (80063fc <UART_SetConfig+0x5c4>)
 80061ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061b0:	461a      	mov	r2, r3
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80061b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	4613      	mov	r3, r2
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	4413      	add	r3, r2
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d305      	bcc.n	80061d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d903      	bls.n	80061de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80061dc:	e113      	b.n	8006406 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	2200      	movs	r2, #0
 80061e2:	60bb      	str	r3, [r7, #8]
 80061e4:	60fa      	str	r2, [r7, #12]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	4a84      	ldr	r2, [pc, #528]	; (80063fc <UART_SetConfig+0x5c4>)
 80061ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	2200      	movs	r2, #0
 80061f4:	603b      	str	r3, [r7, #0]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006200:	f7fa fd4a 	bl	8000c98 <__aeabi_uldivmod>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4610      	mov	r0, r2
 800620a:	4619      	mov	r1, r3
 800620c:	f04f 0200 	mov.w	r2, #0
 8006210:	f04f 0300 	mov.w	r3, #0
 8006214:	020b      	lsls	r3, r1, #8
 8006216:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800621a:	0202      	lsls	r2, r0, #8
 800621c:	6979      	ldr	r1, [r7, #20]
 800621e:	6849      	ldr	r1, [r1, #4]
 8006220:	0849      	lsrs	r1, r1, #1
 8006222:	2000      	movs	r0, #0
 8006224:	460c      	mov	r4, r1
 8006226:	4605      	mov	r5, r0
 8006228:	eb12 0804 	adds.w	r8, r2, r4
 800622c:	eb43 0905 	adc.w	r9, r3, r5
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	469a      	mov	sl, r3
 8006238:	4693      	mov	fp, r2
 800623a:	4652      	mov	r2, sl
 800623c:	465b      	mov	r3, fp
 800623e:	4640      	mov	r0, r8
 8006240:	4649      	mov	r1, r9
 8006242:	f7fa fd29 	bl	8000c98 <__aeabi_uldivmod>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4613      	mov	r3, r2
 800624c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006254:	d308      	bcc.n	8006268 <UART_SetConfig+0x430>
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800625c:	d204      	bcs.n	8006268 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6a3a      	ldr	r2, [r7, #32]
 8006264:	60da      	str	r2, [r3, #12]
 8006266:	e0ce      	b.n	8006406 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800626e:	e0ca      	b.n	8006406 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006278:	d166      	bne.n	8006348 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800627a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800627e:	2b08      	cmp	r3, #8
 8006280:	d827      	bhi.n	80062d2 <UART_SetConfig+0x49a>
 8006282:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <UART_SetConfig+0x450>)
 8006284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006288:	080062ad 	.word	0x080062ad
 800628c:	080062b5 	.word	0x080062b5
 8006290:	080062bd 	.word	0x080062bd
 8006294:	080062d3 	.word	0x080062d3
 8006298:	080062c3 	.word	0x080062c3
 800629c:	080062d3 	.word	0x080062d3
 80062a0:	080062d3 	.word	0x080062d3
 80062a4:	080062d3 	.word	0x080062d3
 80062a8:	080062cb 	.word	0x080062cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062ac:	f7ff fa1e 	bl	80056ec <HAL_RCC_GetPCLK1Freq>
 80062b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062b2:	e014      	b.n	80062de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062b4:	f7ff fa30 	bl	8005718 <HAL_RCC_GetPCLK2Freq>
 80062b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062ba:	e010      	b.n	80062de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062bc:	4b4e      	ldr	r3, [pc, #312]	; (80063f8 <UART_SetConfig+0x5c0>)
 80062be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062c0:	e00d      	b.n	80062de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062c2:	f7ff f9a5 	bl	8005610 <HAL_RCC_GetSysClockFreq>
 80062c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062c8:	e009      	b.n	80062de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062d0:	e005      	b.n	80062de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80062dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 8090 	beq.w	8006406 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	4a44      	ldr	r2, [pc, #272]	; (80063fc <UART_SetConfig+0x5c4>)
 80062ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062f0:	461a      	mov	r2, r3
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80062f8:	005a      	lsls	r2, r3, #1
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	085b      	lsrs	r3, r3, #1
 8006300:	441a      	add	r2, r3
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	fbb2 f3f3 	udiv	r3, r2, r3
 800630a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	2b0f      	cmp	r3, #15
 8006310:	d916      	bls.n	8006340 <UART_SetConfig+0x508>
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006318:	d212      	bcs.n	8006340 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	b29b      	uxth	r3, r3
 800631e:	f023 030f 	bic.w	r3, r3, #15
 8006322:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	085b      	lsrs	r3, r3, #1
 8006328:	b29b      	uxth	r3, r3
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	b29a      	uxth	r2, r3
 8006330:	8bfb      	ldrh	r3, [r7, #30]
 8006332:	4313      	orrs	r3, r2
 8006334:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	8bfa      	ldrh	r2, [r7, #30]
 800633c:	60da      	str	r2, [r3, #12]
 800633e:	e062      	b.n	8006406 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006346:	e05e      	b.n	8006406 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006348:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800634c:	2b08      	cmp	r3, #8
 800634e:	d828      	bhi.n	80063a2 <UART_SetConfig+0x56a>
 8006350:	a201      	add	r2, pc, #4	; (adr r2, 8006358 <UART_SetConfig+0x520>)
 8006352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006356:	bf00      	nop
 8006358:	0800637d 	.word	0x0800637d
 800635c:	08006385 	.word	0x08006385
 8006360:	0800638d 	.word	0x0800638d
 8006364:	080063a3 	.word	0x080063a3
 8006368:	08006393 	.word	0x08006393
 800636c:	080063a3 	.word	0x080063a3
 8006370:	080063a3 	.word	0x080063a3
 8006374:	080063a3 	.word	0x080063a3
 8006378:	0800639b 	.word	0x0800639b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800637c:	f7ff f9b6 	bl	80056ec <HAL_RCC_GetPCLK1Freq>
 8006380:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006382:	e014      	b.n	80063ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006384:	f7ff f9c8 	bl	8005718 <HAL_RCC_GetPCLK2Freq>
 8006388:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800638a:	e010      	b.n	80063ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800638c:	4b1a      	ldr	r3, [pc, #104]	; (80063f8 <UART_SetConfig+0x5c0>)
 800638e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006390:	e00d      	b.n	80063ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006392:	f7ff f93d 	bl	8005610 <HAL_RCC_GetSysClockFreq>
 8006396:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006398:	e009      	b.n	80063ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800639a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800639e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063a0:	e005      	b.n	80063ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80063ac:	bf00      	nop
    }

    if (pclk != 0U)
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d028      	beq.n	8006406 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	4a10      	ldr	r2, [pc, #64]	; (80063fc <UART_SetConfig+0x5c4>)
 80063ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063be:	461a      	mov	r2, r3
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	085b      	lsrs	r3, r3, #1
 80063cc:	441a      	add	r2, r3
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	2b0f      	cmp	r3, #15
 80063dc:	d910      	bls.n	8006400 <UART_SetConfig+0x5c8>
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e4:	d20c      	bcs.n	8006400 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	60da      	str	r2, [r3, #12]
 80063f0:	e009      	b.n	8006406 <UART_SetConfig+0x5ce>
 80063f2:	bf00      	nop
 80063f4:	40008000 	.word	0x40008000
 80063f8:	00f42400 	.word	0x00f42400
 80063fc:	080098b4 	.word	0x080098b4
      }
      else
      {
        ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2201      	movs	r2, #1
 800640a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	2201      	movs	r2, #1
 8006412:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2200      	movs	r2, #0
 800641a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	2200      	movs	r2, #0
 8006420:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006422:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006426:	4618      	mov	r0, r3
 8006428:	3730      	adds	r7, #48	; 0x30
 800642a:	46bd      	mov	sp, r7
 800642c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00a      	beq.n	800645a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00a      	beq.n	800647c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	430a      	orrs	r2, r1
 800647a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00a      	beq.n	800649e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a2:	f003 0308 	and.w	r3, r3, #8
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c4:	f003 0310 	and.w	r3, r3, #16
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00a      	beq.n	80064e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e6:	f003 0320 	and.w	r3, r3, #32
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650c:	2b00      	cmp	r3, #0
 800650e:	d01a      	beq.n	8006546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800652e:	d10a      	bne.n	8006546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	605a      	str	r2, [r3, #4]
  }
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af02      	add	r7, sp, #8
 800657a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006584:	f7fb ffc8 	bl	8002518 <HAL_GetTick>
 8006588:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	2b08      	cmp	r3, #8
 8006596:	d10e      	bne.n	80065b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006598:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f82f 	bl	800660a <UART_WaitOnFlagUntilTimeout>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e025      	b.n	8006602 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0304 	and.w	r3, r3, #4
 80065c0:	2b04      	cmp	r3, #4
 80065c2:	d10e      	bne.n	80065e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f819 	bl	800660a <UART_WaitOnFlagUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e00f      	b.n	8006602 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2220      	movs	r2, #32
 80065e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b09c      	sub	sp, #112	; 0x70
 800660e:	af00      	add	r7, sp, #0
 8006610:	60f8      	str	r0, [r7, #12]
 8006612:	60b9      	str	r1, [r7, #8]
 8006614:	603b      	str	r3, [r7, #0]
 8006616:	4613      	mov	r3, r2
 8006618:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800661a:	e0a9      	b.n	8006770 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800661c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800661e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006622:	f000 80a5 	beq.w	8006770 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006626:	f7fb ff77 	bl	8002518 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006632:	429a      	cmp	r2, r3
 8006634:	d302      	bcc.n	800663c <UART_WaitOnFlagUntilTimeout+0x32>
 8006636:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006638:	2b00      	cmp	r3, #0
 800663a:	d140      	bne.n	80066be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800664a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800664c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006650:	667b      	str	r3, [r7, #100]	; 0x64
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800665a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800665c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006660:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006662:	e841 2300 	strex	r3, r2, [r1]
 8006666:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e6      	bne.n	800663c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3308      	adds	r3, #8
 8006674:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006678:	e853 3f00 	ldrex	r3, [r3]
 800667c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800667e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006680:	f023 0301 	bic.w	r3, r3, #1
 8006684:	663b      	str	r3, [r7, #96]	; 0x60
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3308      	adds	r3, #8
 800668c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800668e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006690:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006694:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800669c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1e5      	bne.n	800666e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e069      	b.n	8006792 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d051      	beq.n	8006770 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066da:	d149      	bne.n	8006770 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ee:	e853 3f00 	ldrex	r3, [r3]
 80066f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	461a      	mov	r2, r3
 8006702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006704:	637b      	str	r3, [r7, #52]	; 0x34
 8006706:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800670a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800670c:	e841 2300 	strex	r3, r2, [r1]
 8006710:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e6      	bne.n	80066e6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3308      	adds	r3, #8
 800671e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	613b      	str	r3, [r7, #16]
   return(result);
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f023 0301 	bic.w	r3, r3, #1
 800672e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3308      	adds	r3, #8
 8006736:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006738:	623a      	str	r2, [r7, #32]
 800673a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	69f9      	ldr	r1, [r7, #28]
 800673e:	6a3a      	ldr	r2, [r7, #32]
 8006740:	e841 2300 	strex	r3, r2, [r1]
 8006744:	61bb      	str	r3, [r7, #24]
   return(result);
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1e5      	bne.n	8006718 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2220      	movs	r2, #32
 8006750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2220      	movs	r2, #32
 8006758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2220      	movs	r2, #32
 8006760:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e010      	b.n	8006792 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	69da      	ldr	r2, [r3, #28]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	4013      	ands	r3, r2
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	429a      	cmp	r2, r3
 800677e:	bf0c      	ite	eq
 8006780:	2301      	moveq	r3, #1
 8006782:	2300      	movne	r3, #0
 8006784:	b2db      	uxtb	r3, r3
 8006786:	461a      	mov	r2, r3
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	429a      	cmp	r2, r3
 800678c:	f43f af46 	beq.w	800661c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3770      	adds	r7, #112	; 0x70
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800679a:	b480      	push	{r7}
 800679c:	b085      	sub	sp, #20
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d101      	bne.n	80067b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80067ac:	2302      	movs	r3, #2
 80067ae:	e027      	b.n	8006800 <HAL_UARTEx_DisableFifoMode+0x66>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2224      	movs	r2, #36	; 0x24
 80067bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0201 	bic.w	r2, r2, #1
 80067d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80067de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800681c:	2b01      	cmp	r3, #1
 800681e:	d101      	bne.n	8006824 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006820:	2302      	movs	r3, #2
 8006822:	e02d      	b.n	8006880 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2224      	movs	r2, #36	; 0x24
 8006830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 0201 	bic.w	r2, r2, #1
 800684a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f84f 	bl	8006904 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2220      	movs	r2, #32
 8006872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006898:	2b01      	cmp	r3, #1
 800689a:	d101      	bne.n	80068a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800689c:	2302      	movs	r3, #2
 800689e:	e02d      	b.n	80068fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2224      	movs	r2, #36	; 0x24
 80068ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 0201 	bic.w	r2, r2, #1
 80068c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f811 	bl	8006904 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2220      	movs	r2, #32
 80068ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006910:	2b00      	cmp	r3, #0
 8006912:	d108      	bne.n	8006926 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006924:	e031      	b.n	800698a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006926:	2308      	movs	r3, #8
 8006928:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800692a:	2308      	movs	r3, #8
 800692c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	0e5b      	lsrs	r3, r3, #25
 8006936:	b2db      	uxtb	r3, r3
 8006938:	f003 0307 	and.w	r3, r3, #7
 800693c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	0f5b      	lsrs	r3, r3, #29
 8006946:	b2db      	uxtb	r3, r3
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800694e:	7bbb      	ldrb	r3, [r7, #14]
 8006950:	7b3a      	ldrb	r2, [r7, #12]
 8006952:	4911      	ldr	r1, [pc, #68]	; (8006998 <UARTEx_SetNbDataToProcess+0x94>)
 8006954:	5c8a      	ldrb	r2, [r1, r2]
 8006956:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800695a:	7b3a      	ldrb	r2, [r7, #12]
 800695c:	490f      	ldr	r1, [pc, #60]	; (800699c <UARTEx_SetNbDataToProcess+0x98>)
 800695e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006960:	fb93 f3f2 	sdiv	r3, r3, r2
 8006964:	b29a      	uxth	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800696c:	7bfb      	ldrb	r3, [r7, #15]
 800696e:	7b7a      	ldrb	r2, [r7, #13]
 8006970:	4909      	ldr	r1, [pc, #36]	; (8006998 <UARTEx_SetNbDataToProcess+0x94>)
 8006972:	5c8a      	ldrb	r2, [r1, r2]
 8006974:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006978:	7b7a      	ldrb	r2, [r7, #13]
 800697a:	4908      	ldr	r1, [pc, #32]	; (800699c <UARTEx_SetNbDataToProcess+0x98>)
 800697c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800697e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006982:	b29a      	uxth	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800698a:	bf00      	nop
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	080098cc 	.word	0x080098cc
 800699c:	080098d4 	.word	0x080098d4

080069a0 <__cvt>:
 80069a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069a4:	ec55 4b10 	vmov	r4, r5, d0
 80069a8:	2d00      	cmp	r5, #0
 80069aa:	460e      	mov	r6, r1
 80069ac:	4619      	mov	r1, r3
 80069ae:	462b      	mov	r3, r5
 80069b0:	bfbb      	ittet	lt
 80069b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80069b6:	461d      	movlt	r5, r3
 80069b8:	2300      	movge	r3, #0
 80069ba:	232d      	movlt	r3, #45	; 0x2d
 80069bc:	700b      	strb	r3, [r1, #0]
 80069be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80069c4:	4691      	mov	r9, r2
 80069c6:	f023 0820 	bic.w	r8, r3, #32
 80069ca:	bfbc      	itt	lt
 80069cc:	4622      	movlt	r2, r4
 80069ce:	4614      	movlt	r4, r2
 80069d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069d4:	d005      	beq.n	80069e2 <__cvt+0x42>
 80069d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80069da:	d100      	bne.n	80069de <__cvt+0x3e>
 80069dc:	3601      	adds	r6, #1
 80069de:	2102      	movs	r1, #2
 80069e0:	e000      	b.n	80069e4 <__cvt+0x44>
 80069e2:	2103      	movs	r1, #3
 80069e4:	ab03      	add	r3, sp, #12
 80069e6:	9301      	str	r3, [sp, #4]
 80069e8:	ab02      	add	r3, sp, #8
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	ec45 4b10 	vmov	d0, r4, r5
 80069f0:	4653      	mov	r3, sl
 80069f2:	4632      	mov	r2, r6
 80069f4:	f000 fe7c 	bl	80076f0 <_dtoa_r>
 80069f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80069fc:	4607      	mov	r7, r0
 80069fe:	d102      	bne.n	8006a06 <__cvt+0x66>
 8006a00:	f019 0f01 	tst.w	r9, #1
 8006a04:	d022      	beq.n	8006a4c <__cvt+0xac>
 8006a06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a0a:	eb07 0906 	add.w	r9, r7, r6
 8006a0e:	d110      	bne.n	8006a32 <__cvt+0x92>
 8006a10:	783b      	ldrb	r3, [r7, #0]
 8006a12:	2b30      	cmp	r3, #48	; 0x30
 8006a14:	d10a      	bne.n	8006a2c <__cvt+0x8c>
 8006a16:	2200      	movs	r2, #0
 8006a18:	2300      	movs	r3, #0
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	f7fa f87b 	bl	8000b18 <__aeabi_dcmpeq>
 8006a22:	b918      	cbnz	r0, 8006a2c <__cvt+0x8c>
 8006a24:	f1c6 0601 	rsb	r6, r6, #1
 8006a28:	f8ca 6000 	str.w	r6, [sl]
 8006a2c:	f8da 3000 	ldr.w	r3, [sl]
 8006a30:	4499      	add	r9, r3
 8006a32:	2200      	movs	r2, #0
 8006a34:	2300      	movs	r3, #0
 8006a36:	4620      	mov	r0, r4
 8006a38:	4629      	mov	r1, r5
 8006a3a:	f7fa f86d 	bl	8000b18 <__aeabi_dcmpeq>
 8006a3e:	b108      	cbz	r0, 8006a44 <__cvt+0xa4>
 8006a40:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a44:	2230      	movs	r2, #48	; 0x30
 8006a46:	9b03      	ldr	r3, [sp, #12]
 8006a48:	454b      	cmp	r3, r9
 8006a4a:	d307      	bcc.n	8006a5c <__cvt+0xbc>
 8006a4c:	9b03      	ldr	r3, [sp, #12]
 8006a4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a50:	1bdb      	subs	r3, r3, r7
 8006a52:	4638      	mov	r0, r7
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	b004      	add	sp, #16
 8006a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a5c:	1c59      	adds	r1, r3, #1
 8006a5e:	9103      	str	r1, [sp, #12]
 8006a60:	701a      	strb	r2, [r3, #0]
 8006a62:	e7f0      	b.n	8006a46 <__cvt+0xa6>

08006a64 <__exponent>:
 8006a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a66:	4603      	mov	r3, r0
 8006a68:	2900      	cmp	r1, #0
 8006a6a:	bfb8      	it	lt
 8006a6c:	4249      	neglt	r1, r1
 8006a6e:	f803 2b02 	strb.w	r2, [r3], #2
 8006a72:	bfb4      	ite	lt
 8006a74:	222d      	movlt	r2, #45	; 0x2d
 8006a76:	222b      	movge	r2, #43	; 0x2b
 8006a78:	2909      	cmp	r1, #9
 8006a7a:	7042      	strb	r2, [r0, #1]
 8006a7c:	dd2a      	ble.n	8006ad4 <__exponent+0x70>
 8006a7e:	f10d 0207 	add.w	r2, sp, #7
 8006a82:	4617      	mov	r7, r2
 8006a84:	260a      	movs	r6, #10
 8006a86:	4694      	mov	ip, r2
 8006a88:	fb91 f5f6 	sdiv	r5, r1, r6
 8006a8c:	fb06 1415 	mls	r4, r6, r5, r1
 8006a90:	3430      	adds	r4, #48	; 0x30
 8006a92:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006a96:	460c      	mov	r4, r1
 8006a98:	2c63      	cmp	r4, #99	; 0x63
 8006a9a:	f102 32ff 	add.w	r2, r2, #4294967295
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	dcf1      	bgt.n	8006a86 <__exponent+0x22>
 8006aa2:	3130      	adds	r1, #48	; 0x30
 8006aa4:	f1ac 0402 	sub.w	r4, ip, #2
 8006aa8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006aac:	1c41      	adds	r1, r0, #1
 8006aae:	4622      	mov	r2, r4
 8006ab0:	42ba      	cmp	r2, r7
 8006ab2:	d30a      	bcc.n	8006aca <__exponent+0x66>
 8006ab4:	f10d 0209 	add.w	r2, sp, #9
 8006ab8:	eba2 020c 	sub.w	r2, r2, ip
 8006abc:	42bc      	cmp	r4, r7
 8006abe:	bf88      	it	hi
 8006ac0:	2200      	movhi	r2, #0
 8006ac2:	4413      	add	r3, r2
 8006ac4:	1a18      	subs	r0, r3, r0
 8006ac6:	b003      	add	sp, #12
 8006ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aca:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006ace:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006ad2:	e7ed      	b.n	8006ab0 <__exponent+0x4c>
 8006ad4:	2330      	movs	r3, #48	; 0x30
 8006ad6:	3130      	adds	r1, #48	; 0x30
 8006ad8:	7083      	strb	r3, [r0, #2]
 8006ada:	70c1      	strb	r1, [r0, #3]
 8006adc:	1d03      	adds	r3, r0, #4
 8006ade:	e7f1      	b.n	8006ac4 <__exponent+0x60>

08006ae0 <_printf_float>:
 8006ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	ed2d 8b02 	vpush	{d8}
 8006ae8:	b08d      	sub	sp, #52	; 0x34
 8006aea:	460c      	mov	r4, r1
 8006aec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006af0:	4616      	mov	r6, r2
 8006af2:	461f      	mov	r7, r3
 8006af4:	4605      	mov	r5, r0
 8006af6:	f000 fcf9 	bl	80074ec <_localeconv_r>
 8006afa:	f8d0 a000 	ldr.w	sl, [r0]
 8006afe:	4650      	mov	r0, sl
 8006b00:	f7f9 fbde 	bl	80002c0 <strlen>
 8006b04:	2300      	movs	r3, #0
 8006b06:	930a      	str	r3, [sp, #40]	; 0x28
 8006b08:	6823      	ldr	r3, [r4, #0]
 8006b0a:	9305      	str	r3, [sp, #20]
 8006b0c:	f8d8 3000 	ldr.w	r3, [r8]
 8006b10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b14:	3307      	adds	r3, #7
 8006b16:	f023 0307 	bic.w	r3, r3, #7
 8006b1a:	f103 0208 	add.w	r2, r3, #8
 8006b1e:	f8c8 2000 	str.w	r2, [r8]
 8006b22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b2a:	9307      	str	r3, [sp, #28]
 8006b2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b30:	ee08 0a10 	vmov	s16, r0
 8006b34:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006b38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b3c:	4b9e      	ldr	r3, [pc, #632]	; (8006db8 <_printf_float+0x2d8>)
 8006b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b42:	f7fa f81b 	bl	8000b7c <__aeabi_dcmpun>
 8006b46:	bb88      	cbnz	r0, 8006bac <_printf_float+0xcc>
 8006b48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b4c:	4b9a      	ldr	r3, [pc, #616]	; (8006db8 <_printf_float+0x2d8>)
 8006b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b52:	f7f9 fff5 	bl	8000b40 <__aeabi_dcmple>
 8006b56:	bb48      	cbnz	r0, 8006bac <_printf_float+0xcc>
 8006b58:	2200      	movs	r2, #0
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	4640      	mov	r0, r8
 8006b5e:	4649      	mov	r1, r9
 8006b60:	f7f9 ffe4 	bl	8000b2c <__aeabi_dcmplt>
 8006b64:	b110      	cbz	r0, 8006b6c <_printf_float+0x8c>
 8006b66:	232d      	movs	r3, #45	; 0x2d
 8006b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b6c:	4a93      	ldr	r2, [pc, #588]	; (8006dbc <_printf_float+0x2dc>)
 8006b6e:	4b94      	ldr	r3, [pc, #592]	; (8006dc0 <_printf_float+0x2e0>)
 8006b70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006b74:	bf94      	ite	ls
 8006b76:	4690      	movls	r8, r2
 8006b78:	4698      	movhi	r8, r3
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	6123      	str	r3, [r4, #16]
 8006b7e:	9b05      	ldr	r3, [sp, #20]
 8006b80:	f023 0304 	bic.w	r3, r3, #4
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	f04f 0900 	mov.w	r9, #0
 8006b8a:	9700      	str	r7, [sp, #0]
 8006b8c:	4633      	mov	r3, r6
 8006b8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b90:	4621      	mov	r1, r4
 8006b92:	4628      	mov	r0, r5
 8006b94:	f000 f9da 	bl	8006f4c <_printf_common>
 8006b98:	3001      	adds	r0, #1
 8006b9a:	f040 8090 	bne.w	8006cbe <_printf_float+0x1de>
 8006b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba2:	b00d      	add	sp, #52	; 0x34
 8006ba4:	ecbd 8b02 	vpop	{d8}
 8006ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bac:	4642      	mov	r2, r8
 8006bae:	464b      	mov	r3, r9
 8006bb0:	4640      	mov	r0, r8
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	f7f9 ffe2 	bl	8000b7c <__aeabi_dcmpun>
 8006bb8:	b140      	cbz	r0, 8006bcc <_printf_float+0xec>
 8006bba:	464b      	mov	r3, r9
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	bfbc      	itt	lt
 8006bc0:	232d      	movlt	r3, #45	; 0x2d
 8006bc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006bc6:	4a7f      	ldr	r2, [pc, #508]	; (8006dc4 <_printf_float+0x2e4>)
 8006bc8:	4b7f      	ldr	r3, [pc, #508]	; (8006dc8 <_printf_float+0x2e8>)
 8006bca:	e7d1      	b.n	8006b70 <_printf_float+0x90>
 8006bcc:	6863      	ldr	r3, [r4, #4]
 8006bce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006bd2:	9206      	str	r2, [sp, #24]
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	d13f      	bne.n	8006c58 <_printf_float+0x178>
 8006bd8:	2306      	movs	r3, #6
 8006bda:	6063      	str	r3, [r4, #4]
 8006bdc:	9b05      	ldr	r3, [sp, #20]
 8006bde:	6861      	ldr	r1, [r4, #4]
 8006be0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006be4:	2300      	movs	r3, #0
 8006be6:	9303      	str	r3, [sp, #12]
 8006be8:	ab0a      	add	r3, sp, #40	; 0x28
 8006bea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006bee:	ab09      	add	r3, sp, #36	; 0x24
 8006bf0:	ec49 8b10 	vmov	d0, r8, r9
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	6022      	str	r2, [r4, #0]
 8006bf8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	f7ff fecf 	bl	80069a0 <__cvt>
 8006c02:	9b06      	ldr	r3, [sp, #24]
 8006c04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c06:	2b47      	cmp	r3, #71	; 0x47
 8006c08:	4680      	mov	r8, r0
 8006c0a:	d108      	bne.n	8006c1e <_printf_float+0x13e>
 8006c0c:	1cc8      	adds	r0, r1, #3
 8006c0e:	db02      	blt.n	8006c16 <_printf_float+0x136>
 8006c10:	6863      	ldr	r3, [r4, #4]
 8006c12:	4299      	cmp	r1, r3
 8006c14:	dd41      	ble.n	8006c9a <_printf_float+0x1ba>
 8006c16:	f1ab 0302 	sub.w	r3, fp, #2
 8006c1a:	fa5f fb83 	uxtb.w	fp, r3
 8006c1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c22:	d820      	bhi.n	8006c66 <_printf_float+0x186>
 8006c24:	3901      	subs	r1, #1
 8006c26:	465a      	mov	r2, fp
 8006c28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c2c:	9109      	str	r1, [sp, #36]	; 0x24
 8006c2e:	f7ff ff19 	bl	8006a64 <__exponent>
 8006c32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c34:	1813      	adds	r3, r2, r0
 8006c36:	2a01      	cmp	r2, #1
 8006c38:	4681      	mov	r9, r0
 8006c3a:	6123      	str	r3, [r4, #16]
 8006c3c:	dc02      	bgt.n	8006c44 <_printf_float+0x164>
 8006c3e:	6822      	ldr	r2, [r4, #0]
 8006c40:	07d2      	lsls	r2, r2, #31
 8006c42:	d501      	bpl.n	8006c48 <_printf_float+0x168>
 8006c44:	3301      	adds	r3, #1
 8006c46:	6123      	str	r3, [r4, #16]
 8006c48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d09c      	beq.n	8006b8a <_printf_float+0xaa>
 8006c50:	232d      	movs	r3, #45	; 0x2d
 8006c52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c56:	e798      	b.n	8006b8a <_printf_float+0xaa>
 8006c58:	9a06      	ldr	r2, [sp, #24]
 8006c5a:	2a47      	cmp	r2, #71	; 0x47
 8006c5c:	d1be      	bne.n	8006bdc <_printf_float+0xfc>
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1bc      	bne.n	8006bdc <_printf_float+0xfc>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e7b9      	b.n	8006bda <_printf_float+0xfa>
 8006c66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006c6a:	d118      	bne.n	8006c9e <_printf_float+0x1be>
 8006c6c:	2900      	cmp	r1, #0
 8006c6e:	6863      	ldr	r3, [r4, #4]
 8006c70:	dd0b      	ble.n	8006c8a <_printf_float+0x1aa>
 8006c72:	6121      	str	r1, [r4, #16]
 8006c74:	b913      	cbnz	r3, 8006c7c <_printf_float+0x19c>
 8006c76:	6822      	ldr	r2, [r4, #0]
 8006c78:	07d0      	lsls	r0, r2, #31
 8006c7a:	d502      	bpl.n	8006c82 <_printf_float+0x1a2>
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	440b      	add	r3, r1
 8006c80:	6123      	str	r3, [r4, #16]
 8006c82:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c84:	f04f 0900 	mov.w	r9, #0
 8006c88:	e7de      	b.n	8006c48 <_printf_float+0x168>
 8006c8a:	b913      	cbnz	r3, 8006c92 <_printf_float+0x1b2>
 8006c8c:	6822      	ldr	r2, [r4, #0]
 8006c8e:	07d2      	lsls	r2, r2, #31
 8006c90:	d501      	bpl.n	8006c96 <_printf_float+0x1b6>
 8006c92:	3302      	adds	r3, #2
 8006c94:	e7f4      	b.n	8006c80 <_printf_float+0x1a0>
 8006c96:	2301      	movs	r3, #1
 8006c98:	e7f2      	b.n	8006c80 <_printf_float+0x1a0>
 8006c9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca0:	4299      	cmp	r1, r3
 8006ca2:	db05      	blt.n	8006cb0 <_printf_float+0x1d0>
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	6121      	str	r1, [r4, #16]
 8006ca8:	07d8      	lsls	r0, r3, #31
 8006caa:	d5ea      	bpl.n	8006c82 <_printf_float+0x1a2>
 8006cac:	1c4b      	adds	r3, r1, #1
 8006cae:	e7e7      	b.n	8006c80 <_printf_float+0x1a0>
 8006cb0:	2900      	cmp	r1, #0
 8006cb2:	bfd4      	ite	le
 8006cb4:	f1c1 0202 	rsble	r2, r1, #2
 8006cb8:	2201      	movgt	r2, #1
 8006cba:	4413      	add	r3, r2
 8006cbc:	e7e0      	b.n	8006c80 <_printf_float+0x1a0>
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	055a      	lsls	r2, r3, #21
 8006cc2:	d407      	bmi.n	8006cd4 <_printf_float+0x1f4>
 8006cc4:	6923      	ldr	r3, [r4, #16]
 8006cc6:	4642      	mov	r2, r8
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4628      	mov	r0, r5
 8006ccc:	47b8      	blx	r7
 8006cce:	3001      	adds	r0, #1
 8006cd0:	d12c      	bne.n	8006d2c <_printf_float+0x24c>
 8006cd2:	e764      	b.n	8006b9e <_printf_float+0xbe>
 8006cd4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006cd8:	f240 80e0 	bls.w	8006e9c <_printf_float+0x3bc>
 8006cdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f7f9 ff18 	bl	8000b18 <__aeabi_dcmpeq>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d034      	beq.n	8006d56 <_printf_float+0x276>
 8006cec:	4a37      	ldr	r2, [pc, #220]	; (8006dcc <_printf_float+0x2ec>)
 8006cee:	2301      	movs	r3, #1
 8006cf0:	4631      	mov	r1, r6
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	47b8      	blx	r7
 8006cf6:	3001      	adds	r0, #1
 8006cf8:	f43f af51 	beq.w	8006b9e <_printf_float+0xbe>
 8006cfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d00:	429a      	cmp	r2, r3
 8006d02:	db02      	blt.n	8006d0a <_printf_float+0x22a>
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	07d8      	lsls	r0, r3, #31
 8006d08:	d510      	bpl.n	8006d2c <_printf_float+0x24c>
 8006d0a:	ee18 3a10 	vmov	r3, s16
 8006d0e:	4652      	mov	r2, sl
 8006d10:	4631      	mov	r1, r6
 8006d12:	4628      	mov	r0, r5
 8006d14:	47b8      	blx	r7
 8006d16:	3001      	adds	r0, #1
 8006d18:	f43f af41 	beq.w	8006b9e <_printf_float+0xbe>
 8006d1c:	f04f 0800 	mov.w	r8, #0
 8006d20:	f104 091a 	add.w	r9, r4, #26
 8006d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d26:	3b01      	subs	r3, #1
 8006d28:	4543      	cmp	r3, r8
 8006d2a:	dc09      	bgt.n	8006d40 <_printf_float+0x260>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	079b      	lsls	r3, r3, #30
 8006d30:	f100 8107 	bmi.w	8006f42 <_printf_float+0x462>
 8006d34:	68e0      	ldr	r0, [r4, #12]
 8006d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d38:	4298      	cmp	r0, r3
 8006d3a:	bfb8      	it	lt
 8006d3c:	4618      	movlt	r0, r3
 8006d3e:	e730      	b.n	8006ba2 <_printf_float+0xc2>
 8006d40:	2301      	movs	r3, #1
 8006d42:	464a      	mov	r2, r9
 8006d44:	4631      	mov	r1, r6
 8006d46:	4628      	mov	r0, r5
 8006d48:	47b8      	blx	r7
 8006d4a:	3001      	adds	r0, #1
 8006d4c:	f43f af27 	beq.w	8006b9e <_printf_float+0xbe>
 8006d50:	f108 0801 	add.w	r8, r8, #1
 8006d54:	e7e6      	b.n	8006d24 <_printf_float+0x244>
 8006d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	dc39      	bgt.n	8006dd0 <_printf_float+0x2f0>
 8006d5c:	4a1b      	ldr	r2, [pc, #108]	; (8006dcc <_printf_float+0x2ec>)
 8006d5e:	2301      	movs	r3, #1
 8006d60:	4631      	mov	r1, r6
 8006d62:	4628      	mov	r0, r5
 8006d64:	47b8      	blx	r7
 8006d66:	3001      	adds	r0, #1
 8006d68:	f43f af19 	beq.w	8006b9e <_printf_float+0xbe>
 8006d6c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006d70:	4313      	orrs	r3, r2
 8006d72:	d102      	bne.n	8006d7a <_printf_float+0x29a>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	07d9      	lsls	r1, r3, #31
 8006d78:	d5d8      	bpl.n	8006d2c <_printf_float+0x24c>
 8006d7a:	ee18 3a10 	vmov	r3, s16
 8006d7e:	4652      	mov	r2, sl
 8006d80:	4631      	mov	r1, r6
 8006d82:	4628      	mov	r0, r5
 8006d84:	47b8      	blx	r7
 8006d86:	3001      	adds	r0, #1
 8006d88:	f43f af09 	beq.w	8006b9e <_printf_float+0xbe>
 8006d8c:	f04f 0900 	mov.w	r9, #0
 8006d90:	f104 0a1a 	add.w	sl, r4, #26
 8006d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d96:	425b      	negs	r3, r3
 8006d98:	454b      	cmp	r3, r9
 8006d9a:	dc01      	bgt.n	8006da0 <_printf_float+0x2c0>
 8006d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d9e:	e792      	b.n	8006cc6 <_printf_float+0x1e6>
 8006da0:	2301      	movs	r3, #1
 8006da2:	4652      	mov	r2, sl
 8006da4:	4631      	mov	r1, r6
 8006da6:	4628      	mov	r0, r5
 8006da8:	47b8      	blx	r7
 8006daa:	3001      	adds	r0, #1
 8006dac:	f43f aef7 	beq.w	8006b9e <_printf_float+0xbe>
 8006db0:	f109 0901 	add.w	r9, r9, #1
 8006db4:	e7ee      	b.n	8006d94 <_printf_float+0x2b4>
 8006db6:	bf00      	nop
 8006db8:	7fefffff 	.word	0x7fefffff
 8006dbc:	080098dc 	.word	0x080098dc
 8006dc0:	080098e0 	.word	0x080098e0
 8006dc4:	080098e4 	.word	0x080098e4
 8006dc8:	080098e8 	.word	0x080098e8
 8006dcc:	080098ec 	.word	0x080098ec
 8006dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	bfa8      	it	ge
 8006dd8:	461a      	movge	r2, r3
 8006dda:	2a00      	cmp	r2, #0
 8006ddc:	4691      	mov	r9, r2
 8006dde:	dc37      	bgt.n	8006e50 <_printf_float+0x370>
 8006de0:	f04f 0b00 	mov.w	fp, #0
 8006de4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006de8:	f104 021a 	add.w	r2, r4, #26
 8006dec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dee:	9305      	str	r3, [sp, #20]
 8006df0:	eba3 0309 	sub.w	r3, r3, r9
 8006df4:	455b      	cmp	r3, fp
 8006df6:	dc33      	bgt.n	8006e60 <_printf_float+0x380>
 8006df8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	db3b      	blt.n	8006e78 <_printf_float+0x398>
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	07da      	lsls	r2, r3, #31
 8006e04:	d438      	bmi.n	8006e78 <_printf_float+0x398>
 8006e06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006e0a:	eba2 0903 	sub.w	r9, r2, r3
 8006e0e:	9b05      	ldr	r3, [sp, #20]
 8006e10:	1ad2      	subs	r2, r2, r3
 8006e12:	4591      	cmp	r9, r2
 8006e14:	bfa8      	it	ge
 8006e16:	4691      	movge	r9, r2
 8006e18:	f1b9 0f00 	cmp.w	r9, #0
 8006e1c:	dc35      	bgt.n	8006e8a <_printf_float+0x3aa>
 8006e1e:	f04f 0800 	mov.w	r8, #0
 8006e22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e26:	f104 0a1a 	add.w	sl, r4, #26
 8006e2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e2e:	1a9b      	subs	r3, r3, r2
 8006e30:	eba3 0309 	sub.w	r3, r3, r9
 8006e34:	4543      	cmp	r3, r8
 8006e36:	f77f af79 	ble.w	8006d2c <_printf_float+0x24c>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	4652      	mov	r2, sl
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4628      	mov	r0, r5
 8006e42:	47b8      	blx	r7
 8006e44:	3001      	adds	r0, #1
 8006e46:	f43f aeaa 	beq.w	8006b9e <_printf_float+0xbe>
 8006e4a:	f108 0801 	add.w	r8, r8, #1
 8006e4e:	e7ec      	b.n	8006e2a <_printf_float+0x34a>
 8006e50:	4613      	mov	r3, r2
 8006e52:	4631      	mov	r1, r6
 8006e54:	4642      	mov	r2, r8
 8006e56:	4628      	mov	r0, r5
 8006e58:	47b8      	blx	r7
 8006e5a:	3001      	adds	r0, #1
 8006e5c:	d1c0      	bne.n	8006de0 <_printf_float+0x300>
 8006e5e:	e69e      	b.n	8006b9e <_printf_float+0xbe>
 8006e60:	2301      	movs	r3, #1
 8006e62:	4631      	mov	r1, r6
 8006e64:	4628      	mov	r0, r5
 8006e66:	9205      	str	r2, [sp, #20]
 8006e68:	47b8      	blx	r7
 8006e6a:	3001      	adds	r0, #1
 8006e6c:	f43f ae97 	beq.w	8006b9e <_printf_float+0xbe>
 8006e70:	9a05      	ldr	r2, [sp, #20]
 8006e72:	f10b 0b01 	add.w	fp, fp, #1
 8006e76:	e7b9      	b.n	8006dec <_printf_float+0x30c>
 8006e78:	ee18 3a10 	vmov	r3, s16
 8006e7c:	4652      	mov	r2, sl
 8006e7e:	4631      	mov	r1, r6
 8006e80:	4628      	mov	r0, r5
 8006e82:	47b8      	blx	r7
 8006e84:	3001      	adds	r0, #1
 8006e86:	d1be      	bne.n	8006e06 <_printf_float+0x326>
 8006e88:	e689      	b.n	8006b9e <_printf_float+0xbe>
 8006e8a:	9a05      	ldr	r2, [sp, #20]
 8006e8c:	464b      	mov	r3, r9
 8006e8e:	4442      	add	r2, r8
 8006e90:	4631      	mov	r1, r6
 8006e92:	4628      	mov	r0, r5
 8006e94:	47b8      	blx	r7
 8006e96:	3001      	adds	r0, #1
 8006e98:	d1c1      	bne.n	8006e1e <_printf_float+0x33e>
 8006e9a:	e680      	b.n	8006b9e <_printf_float+0xbe>
 8006e9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e9e:	2a01      	cmp	r2, #1
 8006ea0:	dc01      	bgt.n	8006ea6 <_printf_float+0x3c6>
 8006ea2:	07db      	lsls	r3, r3, #31
 8006ea4:	d53a      	bpl.n	8006f1c <_printf_float+0x43c>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	4642      	mov	r2, r8
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4628      	mov	r0, r5
 8006eae:	47b8      	blx	r7
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	f43f ae74 	beq.w	8006b9e <_printf_float+0xbe>
 8006eb6:	ee18 3a10 	vmov	r3, s16
 8006eba:	4652      	mov	r2, sl
 8006ebc:	4631      	mov	r1, r6
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	47b8      	blx	r7
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	f43f ae6b 	beq.w	8006b9e <_printf_float+0xbe>
 8006ec8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ecc:	2200      	movs	r2, #0
 8006ece:	2300      	movs	r3, #0
 8006ed0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006ed4:	f7f9 fe20 	bl	8000b18 <__aeabi_dcmpeq>
 8006ed8:	b9d8      	cbnz	r0, 8006f12 <_printf_float+0x432>
 8006eda:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006ede:	f108 0201 	add.w	r2, r8, #1
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	47b8      	blx	r7
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d10e      	bne.n	8006f0a <_printf_float+0x42a>
 8006eec:	e657      	b.n	8006b9e <_printf_float+0xbe>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	4652      	mov	r2, sl
 8006ef2:	4631      	mov	r1, r6
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	47b8      	blx	r7
 8006ef8:	3001      	adds	r0, #1
 8006efa:	f43f ae50 	beq.w	8006b9e <_printf_float+0xbe>
 8006efe:	f108 0801 	add.w	r8, r8, #1
 8006f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f04:	3b01      	subs	r3, #1
 8006f06:	4543      	cmp	r3, r8
 8006f08:	dcf1      	bgt.n	8006eee <_printf_float+0x40e>
 8006f0a:	464b      	mov	r3, r9
 8006f0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f10:	e6da      	b.n	8006cc8 <_printf_float+0x1e8>
 8006f12:	f04f 0800 	mov.w	r8, #0
 8006f16:	f104 0a1a 	add.w	sl, r4, #26
 8006f1a:	e7f2      	b.n	8006f02 <_printf_float+0x422>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	4642      	mov	r2, r8
 8006f20:	e7df      	b.n	8006ee2 <_printf_float+0x402>
 8006f22:	2301      	movs	r3, #1
 8006f24:	464a      	mov	r2, r9
 8006f26:	4631      	mov	r1, r6
 8006f28:	4628      	mov	r0, r5
 8006f2a:	47b8      	blx	r7
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	f43f ae36 	beq.w	8006b9e <_printf_float+0xbe>
 8006f32:	f108 0801 	add.w	r8, r8, #1
 8006f36:	68e3      	ldr	r3, [r4, #12]
 8006f38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f3a:	1a5b      	subs	r3, r3, r1
 8006f3c:	4543      	cmp	r3, r8
 8006f3e:	dcf0      	bgt.n	8006f22 <_printf_float+0x442>
 8006f40:	e6f8      	b.n	8006d34 <_printf_float+0x254>
 8006f42:	f04f 0800 	mov.w	r8, #0
 8006f46:	f104 0919 	add.w	r9, r4, #25
 8006f4a:	e7f4      	b.n	8006f36 <_printf_float+0x456>

08006f4c <_printf_common>:
 8006f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f50:	4616      	mov	r6, r2
 8006f52:	4699      	mov	r9, r3
 8006f54:	688a      	ldr	r2, [r1, #8]
 8006f56:	690b      	ldr	r3, [r1, #16]
 8006f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	bfb8      	it	lt
 8006f60:	4613      	movlt	r3, r2
 8006f62:	6033      	str	r3, [r6, #0]
 8006f64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f68:	4607      	mov	r7, r0
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	b10a      	cbz	r2, 8006f72 <_printf_common+0x26>
 8006f6e:	3301      	adds	r3, #1
 8006f70:	6033      	str	r3, [r6, #0]
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	0699      	lsls	r1, r3, #26
 8006f76:	bf42      	ittt	mi
 8006f78:	6833      	ldrmi	r3, [r6, #0]
 8006f7a:	3302      	addmi	r3, #2
 8006f7c:	6033      	strmi	r3, [r6, #0]
 8006f7e:	6825      	ldr	r5, [r4, #0]
 8006f80:	f015 0506 	ands.w	r5, r5, #6
 8006f84:	d106      	bne.n	8006f94 <_printf_common+0x48>
 8006f86:	f104 0a19 	add.w	sl, r4, #25
 8006f8a:	68e3      	ldr	r3, [r4, #12]
 8006f8c:	6832      	ldr	r2, [r6, #0]
 8006f8e:	1a9b      	subs	r3, r3, r2
 8006f90:	42ab      	cmp	r3, r5
 8006f92:	dc26      	bgt.n	8006fe2 <_printf_common+0x96>
 8006f94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f98:	1e13      	subs	r3, r2, #0
 8006f9a:	6822      	ldr	r2, [r4, #0]
 8006f9c:	bf18      	it	ne
 8006f9e:	2301      	movne	r3, #1
 8006fa0:	0692      	lsls	r2, r2, #26
 8006fa2:	d42b      	bmi.n	8006ffc <_printf_common+0xb0>
 8006fa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fa8:	4649      	mov	r1, r9
 8006faa:	4638      	mov	r0, r7
 8006fac:	47c0      	blx	r8
 8006fae:	3001      	adds	r0, #1
 8006fb0:	d01e      	beq.n	8006ff0 <_printf_common+0xa4>
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	6922      	ldr	r2, [r4, #16]
 8006fb6:	f003 0306 	and.w	r3, r3, #6
 8006fba:	2b04      	cmp	r3, #4
 8006fbc:	bf02      	ittt	eq
 8006fbe:	68e5      	ldreq	r5, [r4, #12]
 8006fc0:	6833      	ldreq	r3, [r6, #0]
 8006fc2:	1aed      	subeq	r5, r5, r3
 8006fc4:	68a3      	ldr	r3, [r4, #8]
 8006fc6:	bf0c      	ite	eq
 8006fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fcc:	2500      	movne	r5, #0
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	bfc4      	itt	gt
 8006fd2:	1a9b      	subgt	r3, r3, r2
 8006fd4:	18ed      	addgt	r5, r5, r3
 8006fd6:	2600      	movs	r6, #0
 8006fd8:	341a      	adds	r4, #26
 8006fda:	42b5      	cmp	r5, r6
 8006fdc:	d11a      	bne.n	8007014 <_printf_common+0xc8>
 8006fde:	2000      	movs	r0, #0
 8006fe0:	e008      	b.n	8006ff4 <_printf_common+0xa8>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	4652      	mov	r2, sl
 8006fe6:	4649      	mov	r1, r9
 8006fe8:	4638      	mov	r0, r7
 8006fea:	47c0      	blx	r8
 8006fec:	3001      	adds	r0, #1
 8006fee:	d103      	bne.n	8006ff8 <_printf_common+0xac>
 8006ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff8:	3501      	adds	r5, #1
 8006ffa:	e7c6      	b.n	8006f8a <_printf_common+0x3e>
 8006ffc:	18e1      	adds	r1, r4, r3
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	2030      	movs	r0, #48	; 0x30
 8007002:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007006:	4422      	add	r2, r4
 8007008:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800700c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007010:	3302      	adds	r3, #2
 8007012:	e7c7      	b.n	8006fa4 <_printf_common+0x58>
 8007014:	2301      	movs	r3, #1
 8007016:	4622      	mov	r2, r4
 8007018:	4649      	mov	r1, r9
 800701a:	4638      	mov	r0, r7
 800701c:	47c0      	blx	r8
 800701e:	3001      	adds	r0, #1
 8007020:	d0e6      	beq.n	8006ff0 <_printf_common+0xa4>
 8007022:	3601      	adds	r6, #1
 8007024:	e7d9      	b.n	8006fda <_printf_common+0x8e>
	...

08007028 <_printf_i>:
 8007028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800702c:	7e0f      	ldrb	r7, [r1, #24]
 800702e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007030:	2f78      	cmp	r7, #120	; 0x78
 8007032:	4691      	mov	r9, r2
 8007034:	4680      	mov	r8, r0
 8007036:	460c      	mov	r4, r1
 8007038:	469a      	mov	sl, r3
 800703a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800703e:	d807      	bhi.n	8007050 <_printf_i+0x28>
 8007040:	2f62      	cmp	r7, #98	; 0x62
 8007042:	d80a      	bhi.n	800705a <_printf_i+0x32>
 8007044:	2f00      	cmp	r7, #0
 8007046:	f000 80d4 	beq.w	80071f2 <_printf_i+0x1ca>
 800704a:	2f58      	cmp	r7, #88	; 0x58
 800704c:	f000 80c0 	beq.w	80071d0 <_printf_i+0x1a8>
 8007050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007054:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007058:	e03a      	b.n	80070d0 <_printf_i+0xa8>
 800705a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800705e:	2b15      	cmp	r3, #21
 8007060:	d8f6      	bhi.n	8007050 <_printf_i+0x28>
 8007062:	a101      	add	r1, pc, #4	; (adr r1, 8007068 <_printf_i+0x40>)
 8007064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007068:	080070c1 	.word	0x080070c1
 800706c:	080070d5 	.word	0x080070d5
 8007070:	08007051 	.word	0x08007051
 8007074:	08007051 	.word	0x08007051
 8007078:	08007051 	.word	0x08007051
 800707c:	08007051 	.word	0x08007051
 8007080:	080070d5 	.word	0x080070d5
 8007084:	08007051 	.word	0x08007051
 8007088:	08007051 	.word	0x08007051
 800708c:	08007051 	.word	0x08007051
 8007090:	08007051 	.word	0x08007051
 8007094:	080071d9 	.word	0x080071d9
 8007098:	08007101 	.word	0x08007101
 800709c:	08007193 	.word	0x08007193
 80070a0:	08007051 	.word	0x08007051
 80070a4:	08007051 	.word	0x08007051
 80070a8:	080071fb 	.word	0x080071fb
 80070ac:	08007051 	.word	0x08007051
 80070b0:	08007101 	.word	0x08007101
 80070b4:	08007051 	.word	0x08007051
 80070b8:	08007051 	.word	0x08007051
 80070bc:	0800719b 	.word	0x0800719b
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	1d1a      	adds	r2, r3, #4
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	602a      	str	r2, [r5, #0]
 80070c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070d0:	2301      	movs	r3, #1
 80070d2:	e09f      	b.n	8007214 <_printf_i+0x1ec>
 80070d4:	6820      	ldr	r0, [r4, #0]
 80070d6:	682b      	ldr	r3, [r5, #0]
 80070d8:	0607      	lsls	r7, r0, #24
 80070da:	f103 0104 	add.w	r1, r3, #4
 80070de:	6029      	str	r1, [r5, #0]
 80070e0:	d501      	bpl.n	80070e6 <_printf_i+0xbe>
 80070e2:	681e      	ldr	r6, [r3, #0]
 80070e4:	e003      	b.n	80070ee <_printf_i+0xc6>
 80070e6:	0646      	lsls	r6, r0, #25
 80070e8:	d5fb      	bpl.n	80070e2 <_printf_i+0xba>
 80070ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80070ee:	2e00      	cmp	r6, #0
 80070f0:	da03      	bge.n	80070fa <_printf_i+0xd2>
 80070f2:	232d      	movs	r3, #45	; 0x2d
 80070f4:	4276      	negs	r6, r6
 80070f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070fa:	485a      	ldr	r0, [pc, #360]	; (8007264 <_printf_i+0x23c>)
 80070fc:	230a      	movs	r3, #10
 80070fe:	e012      	b.n	8007126 <_printf_i+0xfe>
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	6820      	ldr	r0, [r4, #0]
 8007104:	1d19      	adds	r1, r3, #4
 8007106:	6029      	str	r1, [r5, #0]
 8007108:	0605      	lsls	r5, r0, #24
 800710a:	d501      	bpl.n	8007110 <_printf_i+0xe8>
 800710c:	681e      	ldr	r6, [r3, #0]
 800710e:	e002      	b.n	8007116 <_printf_i+0xee>
 8007110:	0641      	lsls	r1, r0, #25
 8007112:	d5fb      	bpl.n	800710c <_printf_i+0xe4>
 8007114:	881e      	ldrh	r6, [r3, #0]
 8007116:	4853      	ldr	r0, [pc, #332]	; (8007264 <_printf_i+0x23c>)
 8007118:	2f6f      	cmp	r7, #111	; 0x6f
 800711a:	bf0c      	ite	eq
 800711c:	2308      	moveq	r3, #8
 800711e:	230a      	movne	r3, #10
 8007120:	2100      	movs	r1, #0
 8007122:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007126:	6865      	ldr	r5, [r4, #4]
 8007128:	60a5      	str	r5, [r4, #8]
 800712a:	2d00      	cmp	r5, #0
 800712c:	bfa2      	ittt	ge
 800712e:	6821      	ldrge	r1, [r4, #0]
 8007130:	f021 0104 	bicge.w	r1, r1, #4
 8007134:	6021      	strge	r1, [r4, #0]
 8007136:	b90e      	cbnz	r6, 800713c <_printf_i+0x114>
 8007138:	2d00      	cmp	r5, #0
 800713a:	d04b      	beq.n	80071d4 <_printf_i+0x1ac>
 800713c:	4615      	mov	r5, r2
 800713e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007142:	fb03 6711 	mls	r7, r3, r1, r6
 8007146:	5dc7      	ldrb	r7, [r0, r7]
 8007148:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800714c:	4637      	mov	r7, r6
 800714e:	42bb      	cmp	r3, r7
 8007150:	460e      	mov	r6, r1
 8007152:	d9f4      	bls.n	800713e <_printf_i+0x116>
 8007154:	2b08      	cmp	r3, #8
 8007156:	d10b      	bne.n	8007170 <_printf_i+0x148>
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	07de      	lsls	r6, r3, #31
 800715c:	d508      	bpl.n	8007170 <_printf_i+0x148>
 800715e:	6923      	ldr	r3, [r4, #16]
 8007160:	6861      	ldr	r1, [r4, #4]
 8007162:	4299      	cmp	r1, r3
 8007164:	bfde      	ittt	le
 8007166:	2330      	movle	r3, #48	; 0x30
 8007168:	f805 3c01 	strble.w	r3, [r5, #-1]
 800716c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007170:	1b52      	subs	r2, r2, r5
 8007172:	6122      	str	r2, [r4, #16]
 8007174:	f8cd a000 	str.w	sl, [sp]
 8007178:	464b      	mov	r3, r9
 800717a:	aa03      	add	r2, sp, #12
 800717c:	4621      	mov	r1, r4
 800717e:	4640      	mov	r0, r8
 8007180:	f7ff fee4 	bl	8006f4c <_printf_common>
 8007184:	3001      	adds	r0, #1
 8007186:	d14a      	bne.n	800721e <_printf_i+0x1f6>
 8007188:	f04f 30ff 	mov.w	r0, #4294967295
 800718c:	b004      	add	sp, #16
 800718e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	f043 0320 	orr.w	r3, r3, #32
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	4833      	ldr	r0, [pc, #204]	; (8007268 <_printf_i+0x240>)
 800719c:	2778      	movs	r7, #120	; 0x78
 800719e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	6829      	ldr	r1, [r5, #0]
 80071a6:	061f      	lsls	r7, r3, #24
 80071a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80071ac:	d402      	bmi.n	80071b4 <_printf_i+0x18c>
 80071ae:	065f      	lsls	r7, r3, #25
 80071b0:	bf48      	it	mi
 80071b2:	b2b6      	uxthmi	r6, r6
 80071b4:	07df      	lsls	r7, r3, #31
 80071b6:	bf48      	it	mi
 80071b8:	f043 0320 	orrmi.w	r3, r3, #32
 80071bc:	6029      	str	r1, [r5, #0]
 80071be:	bf48      	it	mi
 80071c0:	6023      	strmi	r3, [r4, #0]
 80071c2:	b91e      	cbnz	r6, 80071cc <_printf_i+0x1a4>
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	f023 0320 	bic.w	r3, r3, #32
 80071ca:	6023      	str	r3, [r4, #0]
 80071cc:	2310      	movs	r3, #16
 80071ce:	e7a7      	b.n	8007120 <_printf_i+0xf8>
 80071d0:	4824      	ldr	r0, [pc, #144]	; (8007264 <_printf_i+0x23c>)
 80071d2:	e7e4      	b.n	800719e <_printf_i+0x176>
 80071d4:	4615      	mov	r5, r2
 80071d6:	e7bd      	b.n	8007154 <_printf_i+0x12c>
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	6826      	ldr	r6, [r4, #0]
 80071dc:	6961      	ldr	r1, [r4, #20]
 80071de:	1d18      	adds	r0, r3, #4
 80071e0:	6028      	str	r0, [r5, #0]
 80071e2:	0635      	lsls	r5, r6, #24
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	d501      	bpl.n	80071ec <_printf_i+0x1c4>
 80071e8:	6019      	str	r1, [r3, #0]
 80071ea:	e002      	b.n	80071f2 <_printf_i+0x1ca>
 80071ec:	0670      	lsls	r0, r6, #25
 80071ee:	d5fb      	bpl.n	80071e8 <_printf_i+0x1c0>
 80071f0:	8019      	strh	r1, [r3, #0]
 80071f2:	2300      	movs	r3, #0
 80071f4:	6123      	str	r3, [r4, #16]
 80071f6:	4615      	mov	r5, r2
 80071f8:	e7bc      	b.n	8007174 <_printf_i+0x14c>
 80071fa:	682b      	ldr	r3, [r5, #0]
 80071fc:	1d1a      	adds	r2, r3, #4
 80071fe:	602a      	str	r2, [r5, #0]
 8007200:	681d      	ldr	r5, [r3, #0]
 8007202:	6862      	ldr	r2, [r4, #4]
 8007204:	2100      	movs	r1, #0
 8007206:	4628      	mov	r0, r5
 8007208:	f7f9 f80a 	bl	8000220 <memchr>
 800720c:	b108      	cbz	r0, 8007212 <_printf_i+0x1ea>
 800720e:	1b40      	subs	r0, r0, r5
 8007210:	6060      	str	r0, [r4, #4]
 8007212:	6863      	ldr	r3, [r4, #4]
 8007214:	6123      	str	r3, [r4, #16]
 8007216:	2300      	movs	r3, #0
 8007218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800721c:	e7aa      	b.n	8007174 <_printf_i+0x14c>
 800721e:	6923      	ldr	r3, [r4, #16]
 8007220:	462a      	mov	r2, r5
 8007222:	4649      	mov	r1, r9
 8007224:	4640      	mov	r0, r8
 8007226:	47d0      	blx	sl
 8007228:	3001      	adds	r0, #1
 800722a:	d0ad      	beq.n	8007188 <_printf_i+0x160>
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	079b      	lsls	r3, r3, #30
 8007230:	d413      	bmi.n	800725a <_printf_i+0x232>
 8007232:	68e0      	ldr	r0, [r4, #12]
 8007234:	9b03      	ldr	r3, [sp, #12]
 8007236:	4298      	cmp	r0, r3
 8007238:	bfb8      	it	lt
 800723a:	4618      	movlt	r0, r3
 800723c:	e7a6      	b.n	800718c <_printf_i+0x164>
 800723e:	2301      	movs	r3, #1
 8007240:	4632      	mov	r2, r6
 8007242:	4649      	mov	r1, r9
 8007244:	4640      	mov	r0, r8
 8007246:	47d0      	blx	sl
 8007248:	3001      	adds	r0, #1
 800724a:	d09d      	beq.n	8007188 <_printf_i+0x160>
 800724c:	3501      	adds	r5, #1
 800724e:	68e3      	ldr	r3, [r4, #12]
 8007250:	9903      	ldr	r1, [sp, #12]
 8007252:	1a5b      	subs	r3, r3, r1
 8007254:	42ab      	cmp	r3, r5
 8007256:	dcf2      	bgt.n	800723e <_printf_i+0x216>
 8007258:	e7eb      	b.n	8007232 <_printf_i+0x20a>
 800725a:	2500      	movs	r5, #0
 800725c:	f104 0619 	add.w	r6, r4, #25
 8007260:	e7f5      	b.n	800724e <_printf_i+0x226>
 8007262:	bf00      	nop
 8007264:	080098ee 	.word	0x080098ee
 8007268:	080098ff 	.word	0x080098ff

0800726c <std>:
 800726c:	2300      	movs	r3, #0
 800726e:	b510      	push	{r4, lr}
 8007270:	4604      	mov	r4, r0
 8007272:	e9c0 3300 	strd	r3, r3, [r0]
 8007276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800727a:	6083      	str	r3, [r0, #8]
 800727c:	8181      	strh	r1, [r0, #12]
 800727e:	6643      	str	r3, [r0, #100]	; 0x64
 8007280:	81c2      	strh	r2, [r0, #14]
 8007282:	6183      	str	r3, [r0, #24]
 8007284:	4619      	mov	r1, r3
 8007286:	2208      	movs	r2, #8
 8007288:	305c      	adds	r0, #92	; 0x5c
 800728a:	f000 f914 	bl	80074b6 <memset>
 800728e:	4b0d      	ldr	r3, [pc, #52]	; (80072c4 <std+0x58>)
 8007290:	6263      	str	r3, [r4, #36]	; 0x24
 8007292:	4b0d      	ldr	r3, [pc, #52]	; (80072c8 <std+0x5c>)
 8007294:	62a3      	str	r3, [r4, #40]	; 0x28
 8007296:	4b0d      	ldr	r3, [pc, #52]	; (80072cc <std+0x60>)
 8007298:	62e3      	str	r3, [r4, #44]	; 0x2c
 800729a:	4b0d      	ldr	r3, [pc, #52]	; (80072d0 <std+0x64>)
 800729c:	6323      	str	r3, [r4, #48]	; 0x30
 800729e:	4b0d      	ldr	r3, [pc, #52]	; (80072d4 <std+0x68>)
 80072a0:	6224      	str	r4, [r4, #32]
 80072a2:	429c      	cmp	r4, r3
 80072a4:	d006      	beq.n	80072b4 <std+0x48>
 80072a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80072aa:	4294      	cmp	r4, r2
 80072ac:	d002      	beq.n	80072b4 <std+0x48>
 80072ae:	33d0      	adds	r3, #208	; 0xd0
 80072b0:	429c      	cmp	r4, r3
 80072b2:	d105      	bne.n	80072c0 <std+0x54>
 80072b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072bc:	f000 b98a 	b.w	80075d4 <__retarget_lock_init_recursive>
 80072c0:	bd10      	pop	{r4, pc}
 80072c2:	bf00      	nop
 80072c4:	08007431 	.word	0x08007431
 80072c8:	08007453 	.word	0x08007453
 80072cc:	0800748b 	.word	0x0800748b
 80072d0:	080074af 	.word	0x080074af
 80072d4:	20000628 	.word	0x20000628

080072d8 <stdio_exit_handler>:
 80072d8:	4a02      	ldr	r2, [pc, #8]	; (80072e4 <stdio_exit_handler+0xc>)
 80072da:	4903      	ldr	r1, [pc, #12]	; (80072e8 <stdio_exit_handler+0x10>)
 80072dc:	4803      	ldr	r0, [pc, #12]	; (80072ec <stdio_exit_handler+0x14>)
 80072de:	f000 b869 	b.w	80073b4 <_fwalk_sglue>
 80072e2:	bf00      	nop
 80072e4:	200001d4 	.word	0x200001d4
 80072e8:	08008f89 	.word	0x08008f89
 80072ec:	200001e0 	.word	0x200001e0

080072f0 <cleanup_stdio>:
 80072f0:	6841      	ldr	r1, [r0, #4]
 80072f2:	4b0c      	ldr	r3, [pc, #48]	; (8007324 <cleanup_stdio+0x34>)
 80072f4:	4299      	cmp	r1, r3
 80072f6:	b510      	push	{r4, lr}
 80072f8:	4604      	mov	r4, r0
 80072fa:	d001      	beq.n	8007300 <cleanup_stdio+0x10>
 80072fc:	f001 fe44 	bl	8008f88 <_fflush_r>
 8007300:	68a1      	ldr	r1, [r4, #8]
 8007302:	4b09      	ldr	r3, [pc, #36]	; (8007328 <cleanup_stdio+0x38>)
 8007304:	4299      	cmp	r1, r3
 8007306:	d002      	beq.n	800730e <cleanup_stdio+0x1e>
 8007308:	4620      	mov	r0, r4
 800730a:	f001 fe3d 	bl	8008f88 <_fflush_r>
 800730e:	68e1      	ldr	r1, [r4, #12]
 8007310:	4b06      	ldr	r3, [pc, #24]	; (800732c <cleanup_stdio+0x3c>)
 8007312:	4299      	cmp	r1, r3
 8007314:	d004      	beq.n	8007320 <cleanup_stdio+0x30>
 8007316:	4620      	mov	r0, r4
 8007318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800731c:	f001 be34 	b.w	8008f88 <_fflush_r>
 8007320:	bd10      	pop	{r4, pc}
 8007322:	bf00      	nop
 8007324:	20000628 	.word	0x20000628
 8007328:	20000690 	.word	0x20000690
 800732c:	200006f8 	.word	0x200006f8

08007330 <global_stdio_init.part.0>:
 8007330:	b510      	push	{r4, lr}
 8007332:	4b0b      	ldr	r3, [pc, #44]	; (8007360 <global_stdio_init.part.0+0x30>)
 8007334:	4c0b      	ldr	r4, [pc, #44]	; (8007364 <global_stdio_init.part.0+0x34>)
 8007336:	4a0c      	ldr	r2, [pc, #48]	; (8007368 <global_stdio_init.part.0+0x38>)
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	4620      	mov	r0, r4
 800733c:	2200      	movs	r2, #0
 800733e:	2104      	movs	r1, #4
 8007340:	f7ff ff94 	bl	800726c <std>
 8007344:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007348:	2201      	movs	r2, #1
 800734a:	2109      	movs	r1, #9
 800734c:	f7ff ff8e 	bl	800726c <std>
 8007350:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007354:	2202      	movs	r2, #2
 8007356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800735a:	2112      	movs	r1, #18
 800735c:	f7ff bf86 	b.w	800726c <std>
 8007360:	20000760 	.word	0x20000760
 8007364:	20000628 	.word	0x20000628
 8007368:	080072d9 	.word	0x080072d9

0800736c <__sfp_lock_acquire>:
 800736c:	4801      	ldr	r0, [pc, #4]	; (8007374 <__sfp_lock_acquire+0x8>)
 800736e:	f000 b932 	b.w	80075d6 <__retarget_lock_acquire_recursive>
 8007372:	bf00      	nop
 8007374:	20000769 	.word	0x20000769

08007378 <__sfp_lock_release>:
 8007378:	4801      	ldr	r0, [pc, #4]	; (8007380 <__sfp_lock_release+0x8>)
 800737a:	f000 b92d 	b.w	80075d8 <__retarget_lock_release_recursive>
 800737e:	bf00      	nop
 8007380:	20000769 	.word	0x20000769

08007384 <__sinit>:
 8007384:	b510      	push	{r4, lr}
 8007386:	4604      	mov	r4, r0
 8007388:	f7ff fff0 	bl	800736c <__sfp_lock_acquire>
 800738c:	6a23      	ldr	r3, [r4, #32]
 800738e:	b11b      	cbz	r3, 8007398 <__sinit+0x14>
 8007390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007394:	f7ff bff0 	b.w	8007378 <__sfp_lock_release>
 8007398:	4b04      	ldr	r3, [pc, #16]	; (80073ac <__sinit+0x28>)
 800739a:	6223      	str	r3, [r4, #32]
 800739c:	4b04      	ldr	r3, [pc, #16]	; (80073b0 <__sinit+0x2c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1f5      	bne.n	8007390 <__sinit+0xc>
 80073a4:	f7ff ffc4 	bl	8007330 <global_stdio_init.part.0>
 80073a8:	e7f2      	b.n	8007390 <__sinit+0xc>
 80073aa:	bf00      	nop
 80073ac:	080072f1 	.word	0x080072f1
 80073b0:	20000760 	.word	0x20000760

080073b4 <_fwalk_sglue>:
 80073b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b8:	4607      	mov	r7, r0
 80073ba:	4688      	mov	r8, r1
 80073bc:	4614      	mov	r4, r2
 80073be:	2600      	movs	r6, #0
 80073c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073c4:	f1b9 0901 	subs.w	r9, r9, #1
 80073c8:	d505      	bpl.n	80073d6 <_fwalk_sglue+0x22>
 80073ca:	6824      	ldr	r4, [r4, #0]
 80073cc:	2c00      	cmp	r4, #0
 80073ce:	d1f7      	bne.n	80073c0 <_fwalk_sglue+0xc>
 80073d0:	4630      	mov	r0, r6
 80073d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073d6:	89ab      	ldrh	r3, [r5, #12]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d907      	bls.n	80073ec <_fwalk_sglue+0x38>
 80073dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073e0:	3301      	adds	r3, #1
 80073e2:	d003      	beq.n	80073ec <_fwalk_sglue+0x38>
 80073e4:	4629      	mov	r1, r5
 80073e6:	4638      	mov	r0, r7
 80073e8:	47c0      	blx	r8
 80073ea:	4306      	orrs	r6, r0
 80073ec:	3568      	adds	r5, #104	; 0x68
 80073ee:	e7e9      	b.n	80073c4 <_fwalk_sglue+0x10>

080073f0 <siprintf>:
 80073f0:	b40e      	push	{r1, r2, r3}
 80073f2:	b500      	push	{lr}
 80073f4:	b09c      	sub	sp, #112	; 0x70
 80073f6:	ab1d      	add	r3, sp, #116	; 0x74
 80073f8:	9002      	str	r0, [sp, #8]
 80073fa:	9006      	str	r0, [sp, #24]
 80073fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007400:	4809      	ldr	r0, [pc, #36]	; (8007428 <siprintf+0x38>)
 8007402:	9107      	str	r1, [sp, #28]
 8007404:	9104      	str	r1, [sp, #16]
 8007406:	4909      	ldr	r1, [pc, #36]	; (800742c <siprintf+0x3c>)
 8007408:	f853 2b04 	ldr.w	r2, [r3], #4
 800740c:	9105      	str	r1, [sp, #20]
 800740e:	6800      	ldr	r0, [r0, #0]
 8007410:	9301      	str	r3, [sp, #4]
 8007412:	a902      	add	r1, sp, #8
 8007414:	f001 fc34 	bl	8008c80 <_svfiprintf_r>
 8007418:	9b02      	ldr	r3, [sp, #8]
 800741a:	2200      	movs	r2, #0
 800741c:	701a      	strb	r2, [r3, #0]
 800741e:	b01c      	add	sp, #112	; 0x70
 8007420:	f85d eb04 	ldr.w	lr, [sp], #4
 8007424:	b003      	add	sp, #12
 8007426:	4770      	bx	lr
 8007428:	2000022c 	.word	0x2000022c
 800742c:	ffff0208 	.word	0xffff0208

08007430 <__sread>:
 8007430:	b510      	push	{r4, lr}
 8007432:	460c      	mov	r4, r1
 8007434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007438:	f000 f87e 	bl	8007538 <_read_r>
 800743c:	2800      	cmp	r0, #0
 800743e:	bfab      	itete	ge
 8007440:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007442:	89a3      	ldrhlt	r3, [r4, #12]
 8007444:	181b      	addge	r3, r3, r0
 8007446:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800744a:	bfac      	ite	ge
 800744c:	6563      	strge	r3, [r4, #84]	; 0x54
 800744e:	81a3      	strhlt	r3, [r4, #12]
 8007450:	bd10      	pop	{r4, pc}

08007452 <__swrite>:
 8007452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007456:	461f      	mov	r7, r3
 8007458:	898b      	ldrh	r3, [r1, #12]
 800745a:	05db      	lsls	r3, r3, #23
 800745c:	4605      	mov	r5, r0
 800745e:	460c      	mov	r4, r1
 8007460:	4616      	mov	r6, r2
 8007462:	d505      	bpl.n	8007470 <__swrite+0x1e>
 8007464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007468:	2302      	movs	r3, #2
 800746a:	2200      	movs	r2, #0
 800746c:	f000 f852 	bl	8007514 <_lseek_r>
 8007470:	89a3      	ldrh	r3, [r4, #12]
 8007472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800747a:	81a3      	strh	r3, [r4, #12]
 800747c:	4632      	mov	r2, r6
 800747e:	463b      	mov	r3, r7
 8007480:	4628      	mov	r0, r5
 8007482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007486:	f000 b869 	b.w	800755c <_write_r>

0800748a <__sseek>:
 800748a:	b510      	push	{r4, lr}
 800748c:	460c      	mov	r4, r1
 800748e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007492:	f000 f83f 	bl	8007514 <_lseek_r>
 8007496:	1c43      	adds	r3, r0, #1
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	bf15      	itete	ne
 800749c:	6560      	strne	r0, [r4, #84]	; 0x54
 800749e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074a6:	81a3      	strheq	r3, [r4, #12]
 80074a8:	bf18      	it	ne
 80074aa:	81a3      	strhne	r3, [r4, #12]
 80074ac:	bd10      	pop	{r4, pc}

080074ae <__sclose>:
 80074ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b2:	f000 b81f 	b.w	80074f4 <_close_r>

080074b6 <memset>:
 80074b6:	4402      	add	r2, r0
 80074b8:	4603      	mov	r3, r0
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d100      	bne.n	80074c0 <memset+0xa>
 80074be:	4770      	bx	lr
 80074c0:	f803 1b01 	strb.w	r1, [r3], #1
 80074c4:	e7f9      	b.n	80074ba <memset+0x4>

080074c6 <strncat>:
 80074c6:	b530      	push	{r4, r5, lr}
 80074c8:	4604      	mov	r4, r0
 80074ca:	7825      	ldrb	r5, [r4, #0]
 80074cc:	4623      	mov	r3, r4
 80074ce:	3401      	adds	r4, #1
 80074d0:	2d00      	cmp	r5, #0
 80074d2:	d1fa      	bne.n	80074ca <strncat+0x4>
 80074d4:	3a01      	subs	r2, #1
 80074d6:	d304      	bcc.n	80074e2 <strncat+0x1c>
 80074d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074dc:	f803 4b01 	strb.w	r4, [r3], #1
 80074e0:	b904      	cbnz	r4, 80074e4 <strncat+0x1e>
 80074e2:	bd30      	pop	{r4, r5, pc}
 80074e4:	2a00      	cmp	r2, #0
 80074e6:	d1f5      	bne.n	80074d4 <strncat+0xe>
 80074e8:	701a      	strb	r2, [r3, #0]
 80074ea:	e7f3      	b.n	80074d4 <strncat+0xe>

080074ec <_localeconv_r>:
 80074ec:	4800      	ldr	r0, [pc, #0]	; (80074f0 <_localeconv_r+0x4>)
 80074ee:	4770      	bx	lr
 80074f0:	20000320 	.word	0x20000320

080074f4 <_close_r>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4d06      	ldr	r5, [pc, #24]	; (8007510 <_close_r+0x1c>)
 80074f8:	2300      	movs	r3, #0
 80074fa:	4604      	mov	r4, r0
 80074fc:	4608      	mov	r0, r1
 80074fe:	602b      	str	r3, [r5, #0]
 8007500:	f7fa feff 	bl	8002302 <_close>
 8007504:	1c43      	adds	r3, r0, #1
 8007506:	d102      	bne.n	800750e <_close_r+0x1a>
 8007508:	682b      	ldr	r3, [r5, #0]
 800750a:	b103      	cbz	r3, 800750e <_close_r+0x1a>
 800750c:	6023      	str	r3, [r4, #0]
 800750e:	bd38      	pop	{r3, r4, r5, pc}
 8007510:	20000764 	.word	0x20000764

08007514 <_lseek_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	4d07      	ldr	r5, [pc, #28]	; (8007534 <_lseek_r+0x20>)
 8007518:	4604      	mov	r4, r0
 800751a:	4608      	mov	r0, r1
 800751c:	4611      	mov	r1, r2
 800751e:	2200      	movs	r2, #0
 8007520:	602a      	str	r2, [r5, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	f7fa ff14 	bl	8002350 <_lseek>
 8007528:	1c43      	adds	r3, r0, #1
 800752a:	d102      	bne.n	8007532 <_lseek_r+0x1e>
 800752c:	682b      	ldr	r3, [r5, #0]
 800752e:	b103      	cbz	r3, 8007532 <_lseek_r+0x1e>
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	bd38      	pop	{r3, r4, r5, pc}
 8007534:	20000764 	.word	0x20000764

08007538 <_read_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	4d07      	ldr	r5, [pc, #28]	; (8007558 <_read_r+0x20>)
 800753c:	4604      	mov	r4, r0
 800753e:	4608      	mov	r0, r1
 8007540:	4611      	mov	r1, r2
 8007542:	2200      	movs	r2, #0
 8007544:	602a      	str	r2, [r5, #0]
 8007546:	461a      	mov	r2, r3
 8007548:	f7fa fea2 	bl	8002290 <_read>
 800754c:	1c43      	adds	r3, r0, #1
 800754e:	d102      	bne.n	8007556 <_read_r+0x1e>
 8007550:	682b      	ldr	r3, [r5, #0]
 8007552:	b103      	cbz	r3, 8007556 <_read_r+0x1e>
 8007554:	6023      	str	r3, [r4, #0]
 8007556:	bd38      	pop	{r3, r4, r5, pc}
 8007558:	20000764 	.word	0x20000764

0800755c <_write_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	4d07      	ldr	r5, [pc, #28]	; (800757c <_write_r+0x20>)
 8007560:	4604      	mov	r4, r0
 8007562:	4608      	mov	r0, r1
 8007564:	4611      	mov	r1, r2
 8007566:	2200      	movs	r2, #0
 8007568:	602a      	str	r2, [r5, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	f7fa fead 	bl	80022ca <_write>
 8007570:	1c43      	adds	r3, r0, #1
 8007572:	d102      	bne.n	800757a <_write_r+0x1e>
 8007574:	682b      	ldr	r3, [r5, #0]
 8007576:	b103      	cbz	r3, 800757a <_write_r+0x1e>
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	bd38      	pop	{r3, r4, r5, pc}
 800757c:	20000764 	.word	0x20000764

08007580 <__errno>:
 8007580:	4b01      	ldr	r3, [pc, #4]	; (8007588 <__errno+0x8>)
 8007582:	6818      	ldr	r0, [r3, #0]
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	2000022c 	.word	0x2000022c

0800758c <__libc_init_array>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	4d0d      	ldr	r5, [pc, #52]	; (80075c4 <__libc_init_array+0x38>)
 8007590:	4c0d      	ldr	r4, [pc, #52]	; (80075c8 <__libc_init_array+0x3c>)
 8007592:	1b64      	subs	r4, r4, r5
 8007594:	10a4      	asrs	r4, r4, #2
 8007596:	2600      	movs	r6, #0
 8007598:	42a6      	cmp	r6, r4
 800759a:	d109      	bne.n	80075b0 <__libc_init_array+0x24>
 800759c:	4d0b      	ldr	r5, [pc, #44]	; (80075cc <__libc_init_array+0x40>)
 800759e:	4c0c      	ldr	r4, [pc, #48]	; (80075d0 <__libc_init_array+0x44>)
 80075a0:	f002 f896 	bl	80096d0 <_init>
 80075a4:	1b64      	subs	r4, r4, r5
 80075a6:	10a4      	asrs	r4, r4, #2
 80075a8:	2600      	movs	r6, #0
 80075aa:	42a6      	cmp	r6, r4
 80075ac:	d105      	bne.n	80075ba <__libc_init_array+0x2e>
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
 80075b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b4:	4798      	blx	r3
 80075b6:	3601      	adds	r6, #1
 80075b8:	e7ee      	b.n	8007598 <__libc_init_array+0xc>
 80075ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80075be:	4798      	blx	r3
 80075c0:	3601      	adds	r6, #1
 80075c2:	e7f2      	b.n	80075aa <__libc_init_array+0x1e>
 80075c4:	08009c54 	.word	0x08009c54
 80075c8:	08009c54 	.word	0x08009c54
 80075cc:	08009c54 	.word	0x08009c54
 80075d0:	08009c58 	.word	0x08009c58

080075d4 <__retarget_lock_init_recursive>:
 80075d4:	4770      	bx	lr

080075d6 <__retarget_lock_acquire_recursive>:
 80075d6:	4770      	bx	lr

080075d8 <__retarget_lock_release_recursive>:
 80075d8:	4770      	bx	lr

080075da <quorem>:
 80075da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075de:	6903      	ldr	r3, [r0, #16]
 80075e0:	690c      	ldr	r4, [r1, #16]
 80075e2:	42a3      	cmp	r3, r4
 80075e4:	4607      	mov	r7, r0
 80075e6:	db7e      	blt.n	80076e6 <quorem+0x10c>
 80075e8:	3c01      	subs	r4, #1
 80075ea:	f101 0814 	add.w	r8, r1, #20
 80075ee:	f100 0514 	add.w	r5, r0, #20
 80075f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075f6:	9301      	str	r3, [sp, #4]
 80075f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007600:	3301      	adds	r3, #1
 8007602:	429a      	cmp	r2, r3
 8007604:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007608:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800760c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007610:	d331      	bcc.n	8007676 <quorem+0x9c>
 8007612:	f04f 0e00 	mov.w	lr, #0
 8007616:	4640      	mov	r0, r8
 8007618:	46ac      	mov	ip, r5
 800761a:	46f2      	mov	sl, lr
 800761c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007620:	b293      	uxth	r3, r2
 8007622:	fb06 e303 	mla	r3, r6, r3, lr
 8007626:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800762a:	0c1a      	lsrs	r2, r3, #16
 800762c:	b29b      	uxth	r3, r3
 800762e:	ebaa 0303 	sub.w	r3, sl, r3
 8007632:	f8dc a000 	ldr.w	sl, [ip]
 8007636:	fa13 f38a 	uxtah	r3, r3, sl
 800763a:	fb06 220e 	mla	r2, r6, lr, r2
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	9b00      	ldr	r3, [sp, #0]
 8007642:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007646:	b292      	uxth	r2, r2
 8007648:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800764c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007650:	f8bd 3000 	ldrh.w	r3, [sp]
 8007654:	4581      	cmp	r9, r0
 8007656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800765a:	f84c 3b04 	str.w	r3, [ip], #4
 800765e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007662:	d2db      	bcs.n	800761c <quorem+0x42>
 8007664:	f855 300b 	ldr.w	r3, [r5, fp]
 8007668:	b92b      	cbnz	r3, 8007676 <quorem+0x9c>
 800766a:	9b01      	ldr	r3, [sp, #4]
 800766c:	3b04      	subs	r3, #4
 800766e:	429d      	cmp	r5, r3
 8007670:	461a      	mov	r2, r3
 8007672:	d32c      	bcc.n	80076ce <quorem+0xf4>
 8007674:	613c      	str	r4, [r7, #16]
 8007676:	4638      	mov	r0, r7
 8007678:	f001 f9a8 	bl	80089cc <__mcmp>
 800767c:	2800      	cmp	r0, #0
 800767e:	db22      	blt.n	80076c6 <quorem+0xec>
 8007680:	3601      	adds	r6, #1
 8007682:	4629      	mov	r1, r5
 8007684:	2000      	movs	r0, #0
 8007686:	f858 2b04 	ldr.w	r2, [r8], #4
 800768a:	f8d1 c000 	ldr.w	ip, [r1]
 800768e:	b293      	uxth	r3, r2
 8007690:	1ac3      	subs	r3, r0, r3
 8007692:	0c12      	lsrs	r2, r2, #16
 8007694:	fa13 f38c 	uxtah	r3, r3, ip
 8007698:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800769c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076a6:	45c1      	cmp	r9, r8
 80076a8:	f841 3b04 	str.w	r3, [r1], #4
 80076ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076b0:	d2e9      	bcs.n	8007686 <quorem+0xac>
 80076b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076ba:	b922      	cbnz	r2, 80076c6 <quorem+0xec>
 80076bc:	3b04      	subs	r3, #4
 80076be:	429d      	cmp	r5, r3
 80076c0:	461a      	mov	r2, r3
 80076c2:	d30a      	bcc.n	80076da <quorem+0x100>
 80076c4:	613c      	str	r4, [r7, #16]
 80076c6:	4630      	mov	r0, r6
 80076c8:	b003      	add	sp, #12
 80076ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ce:	6812      	ldr	r2, [r2, #0]
 80076d0:	3b04      	subs	r3, #4
 80076d2:	2a00      	cmp	r2, #0
 80076d4:	d1ce      	bne.n	8007674 <quorem+0x9a>
 80076d6:	3c01      	subs	r4, #1
 80076d8:	e7c9      	b.n	800766e <quorem+0x94>
 80076da:	6812      	ldr	r2, [r2, #0]
 80076dc:	3b04      	subs	r3, #4
 80076de:	2a00      	cmp	r2, #0
 80076e0:	d1f0      	bne.n	80076c4 <quorem+0xea>
 80076e2:	3c01      	subs	r4, #1
 80076e4:	e7eb      	b.n	80076be <quorem+0xe4>
 80076e6:	2000      	movs	r0, #0
 80076e8:	e7ee      	b.n	80076c8 <quorem+0xee>
 80076ea:	0000      	movs	r0, r0
 80076ec:	0000      	movs	r0, r0
	...

080076f0 <_dtoa_r>:
 80076f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f4:	ed2d 8b04 	vpush	{d8-d9}
 80076f8:	69c5      	ldr	r5, [r0, #28]
 80076fa:	b093      	sub	sp, #76	; 0x4c
 80076fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007700:	ec57 6b10 	vmov	r6, r7, d0
 8007704:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007708:	9107      	str	r1, [sp, #28]
 800770a:	4604      	mov	r4, r0
 800770c:	920a      	str	r2, [sp, #40]	; 0x28
 800770e:	930d      	str	r3, [sp, #52]	; 0x34
 8007710:	b975      	cbnz	r5, 8007730 <_dtoa_r+0x40>
 8007712:	2010      	movs	r0, #16
 8007714:	f000 fe2a 	bl	800836c <malloc>
 8007718:	4602      	mov	r2, r0
 800771a:	61e0      	str	r0, [r4, #28]
 800771c:	b920      	cbnz	r0, 8007728 <_dtoa_r+0x38>
 800771e:	4bae      	ldr	r3, [pc, #696]	; (80079d8 <_dtoa_r+0x2e8>)
 8007720:	21ef      	movs	r1, #239	; 0xef
 8007722:	48ae      	ldr	r0, [pc, #696]	; (80079dc <_dtoa_r+0x2ec>)
 8007724:	f001 fc90 	bl	8009048 <__assert_func>
 8007728:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800772c:	6005      	str	r5, [r0, #0]
 800772e:	60c5      	str	r5, [r0, #12]
 8007730:	69e3      	ldr	r3, [r4, #28]
 8007732:	6819      	ldr	r1, [r3, #0]
 8007734:	b151      	cbz	r1, 800774c <_dtoa_r+0x5c>
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	604a      	str	r2, [r1, #4]
 800773a:	2301      	movs	r3, #1
 800773c:	4093      	lsls	r3, r2
 800773e:	608b      	str	r3, [r1, #8]
 8007740:	4620      	mov	r0, r4
 8007742:	f000 ff07 	bl	8008554 <_Bfree>
 8007746:	69e3      	ldr	r3, [r4, #28]
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	1e3b      	subs	r3, r7, #0
 800774e:	bfbb      	ittet	lt
 8007750:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007754:	9303      	strlt	r3, [sp, #12]
 8007756:	2300      	movge	r3, #0
 8007758:	2201      	movlt	r2, #1
 800775a:	bfac      	ite	ge
 800775c:	f8c8 3000 	strge.w	r3, [r8]
 8007760:	f8c8 2000 	strlt.w	r2, [r8]
 8007764:	4b9e      	ldr	r3, [pc, #632]	; (80079e0 <_dtoa_r+0x2f0>)
 8007766:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800776a:	ea33 0308 	bics.w	r3, r3, r8
 800776e:	d11b      	bne.n	80077a8 <_dtoa_r+0xb8>
 8007770:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007772:	f242 730f 	movw	r3, #9999	; 0x270f
 8007776:	6013      	str	r3, [r2, #0]
 8007778:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800777c:	4333      	orrs	r3, r6
 800777e:	f000 8593 	beq.w	80082a8 <_dtoa_r+0xbb8>
 8007782:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007784:	b963      	cbnz	r3, 80077a0 <_dtoa_r+0xb0>
 8007786:	4b97      	ldr	r3, [pc, #604]	; (80079e4 <_dtoa_r+0x2f4>)
 8007788:	e027      	b.n	80077da <_dtoa_r+0xea>
 800778a:	4b97      	ldr	r3, [pc, #604]	; (80079e8 <_dtoa_r+0x2f8>)
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	3308      	adds	r3, #8
 8007790:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007792:	6013      	str	r3, [r2, #0]
 8007794:	9800      	ldr	r0, [sp, #0]
 8007796:	b013      	add	sp, #76	; 0x4c
 8007798:	ecbd 8b04 	vpop	{d8-d9}
 800779c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a0:	4b90      	ldr	r3, [pc, #576]	; (80079e4 <_dtoa_r+0x2f4>)
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	3303      	adds	r3, #3
 80077a6:	e7f3      	b.n	8007790 <_dtoa_r+0xa0>
 80077a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077ac:	2200      	movs	r2, #0
 80077ae:	ec51 0b17 	vmov	r0, r1, d7
 80077b2:	eeb0 8a47 	vmov.f32	s16, s14
 80077b6:	eef0 8a67 	vmov.f32	s17, s15
 80077ba:	2300      	movs	r3, #0
 80077bc:	f7f9 f9ac 	bl	8000b18 <__aeabi_dcmpeq>
 80077c0:	4681      	mov	r9, r0
 80077c2:	b160      	cbz	r0, 80077de <_dtoa_r+0xee>
 80077c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077c6:	2301      	movs	r3, #1
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 8568 	beq.w	80082a2 <_dtoa_r+0xbb2>
 80077d2:	4b86      	ldr	r3, [pc, #536]	; (80079ec <_dtoa_r+0x2fc>)
 80077d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077d6:	6013      	str	r3, [r2, #0]
 80077d8:	3b01      	subs	r3, #1
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	e7da      	b.n	8007794 <_dtoa_r+0xa4>
 80077de:	aa10      	add	r2, sp, #64	; 0x40
 80077e0:	a911      	add	r1, sp, #68	; 0x44
 80077e2:	4620      	mov	r0, r4
 80077e4:	eeb0 0a48 	vmov.f32	s0, s16
 80077e8:	eef0 0a68 	vmov.f32	s1, s17
 80077ec:	f001 f994 	bl	8008b18 <__d2b>
 80077f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80077f4:	4682      	mov	sl, r0
 80077f6:	2d00      	cmp	r5, #0
 80077f8:	d07f      	beq.n	80078fa <_dtoa_r+0x20a>
 80077fa:	ee18 3a90 	vmov	r3, s17
 80077fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007802:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007806:	ec51 0b18 	vmov	r0, r1, d8
 800780a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800780e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007812:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007816:	4619      	mov	r1, r3
 8007818:	2200      	movs	r2, #0
 800781a:	4b75      	ldr	r3, [pc, #468]	; (80079f0 <_dtoa_r+0x300>)
 800781c:	f7f8 fd5c 	bl	80002d8 <__aeabi_dsub>
 8007820:	a367      	add	r3, pc, #412	; (adr r3, 80079c0 <_dtoa_r+0x2d0>)
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	f7f8 ff0f 	bl	8000648 <__aeabi_dmul>
 800782a:	a367      	add	r3, pc, #412	; (adr r3, 80079c8 <_dtoa_r+0x2d8>)
 800782c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007830:	f7f8 fd54 	bl	80002dc <__adddf3>
 8007834:	4606      	mov	r6, r0
 8007836:	4628      	mov	r0, r5
 8007838:	460f      	mov	r7, r1
 800783a:	f7f8 fe9b 	bl	8000574 <__aeabi_i2d>
 800783e:	a364      	add	r3, pc, #400	; (adr r3, 80079d0 <_dtoa_r+0x2e0>)
 8007840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007844:	f7f8 ff00 	bl	8000648 <__aeabi_dmul>
 8007848:	4602      	mov	r2, r0
 800784a:	460b      	mov	r3, r1
 800784c:	4630      	mov	r0, r6
 800784e:	4639      	mov	r1, r7
 8007850:	f7f8 fd44 	bl	80002dc <__adddf3>
 8007854:	4606      	mov	r6, r0
 8007856:	460f      	mov	r7, r1
 8007858:	f7f9 f9a6 	bl	8000ba8 <__aeabi_d2iz>
 800785c:	2200      	movs	r2, #0
 800785e:	4683      	mov	fp, r0
 8007860:	2300      	movs	r3, #0
 8007862:	4630      	mov	r0, r6
 8007864:	4639      	mov	r1, r7
 8007866:	f7f9 f961 	bl	8000b2c <__aeabi_dcmplt>
 800786a:	b148      	cbz	r0, 8007880 <_dtoa_r+0x190>
 800786c:	4658      	mov	r0, fp
 800786e:	f7f8 fe81 	bl	8000574 <__aeabi_i2d>
 8007872:	4632      	mov	r2, r6
 8007874:	463b      	mov	r3, r7
 8007876:	f7f9 f94f 	bl	8000b18 <__aeabi_dcmpeq>
 800787a:	b908      	cbnz	r0, 8007880 <_dtoa_r+0x190>
 800787c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007880:	f1bb 0f16 	cmp.w	fp, #22
 8007884:	d857      	bhi.n	8007936 <_dtoa_r+0x246>
 8007886:	4b5b      	ldr	r3, [pc, #364]	; (80079f4 <_dtoa_r+0x304>)
 8007888:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800788c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007890:	ec51 0b18 	vmov	r0, r1, d8
 8007894:	f7f9 f94a 	bl	8000b2c <__aeabi_dcmplt>
 8007898:	2800      	cmp	r0, #0
 800789a:	d04e      	beq.n	800793a <_dtoa_r+0x24a>
 800789c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078a0:	2300      	movs	r3, #0
 80078a2:	930c      	str	r3, [sp, #48]	; 0x30
 80078a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078a6:	1b5b      	subs	r3, r3, r5
 80078a8:	1e5a      	subs	r2, r3, #1
 80078aa:	bf45      	ittet	mi
 80078ac:	f1c3 0301 	rsbmi	r3, r3, #1
 80078b0:	9305      	strmi	r3, [sp, #20]
 80078b2:	2300      	movpl	r3, #0
 80078b4:	2300      	movmi	r3, #0
 80078b6:	9206      	str	r2, [sp, #24]
 80078b8:	bf54      	ite	pl
 80078ba:	9305      	strpl	r3, [sp, #20]
 80078bc:	9306      	strmi	r3, [sp, #24]
 80078be:	f1bb 0f00 	cmp.w	fp, #0
 80078c2:	db3c      	blt.n	800793e <_dtoa_r+0x24e>
 80078c4:	9b06      	ldr	r3, [sp, #24]
 80078c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80078ca:	445b      	add	r3, fp
 80078cc:	9306      	str	r3, [sp, #24]
 80078ce:	2300      	movs	r3, #0
 80078d0:	9308      	str	r3, [sp, #32]
 80078d2:	9b07      	ldr	r3, [sp, #28]
 80078d4:	2b09      	cmp	r3, #9
 80078d6:	d868      	bhi.n	80079aa <_dtoa_r+0x2ba>
 80078d8:	2b05      	cmp	r3, #5
 80078da:	bfc4      	itt	gt
 80078dc:	3b04      	subgt	r3, #4
 80078de:	9307      	strgt	r3, [sp, #28]
 80078e0:	9b07      	ldr	r3, [sp, #28]
 80078e2:	f1a3 0302 	sub.w	r3, r3, #2
 80078e6:	bfcc      	ite	gt
 80078e8:	2500      	movgt	r5, #0
 80078ea:	2501      	movle	r5, #1
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	f200 8085 	bhi.w	80079fc <_dtoa_r+0x30c>
 80078f2:	e8df f003 	tbb	[pc, r3]
 80078f6:	3b2e      	.short	0x3b2e
 80078f8:	5839      	.short	0x5839
 80078fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80078fe:	441d      	add	r5, r3
 8007900:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007904:	2b20      	cmp	r3, #32
 8007906:	bfc1      	itttt	gt
 8007908:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800790c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007910:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007914:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007918:	bfd6      	itet	le
 800791a:	f1c3 0320 	rsble	r3, r3, #32
 800791e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007922:	fa06 f003 	lslle.w	r0, r6, r3
 8007926:	f7f8 fe15 	bl	8000554 <__aeabi_ui2d>
 800792a:	2201      	movs	r2, #1
 800792c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007930:	3d01      	subs	r5, #1
 8007932:	920e      	str	r2, [sp, #56]	; 0x38
 8007934:	e76f      	b.n	8007816 <_dtoa_r+0x126>
 8007936:	2301      	movs	r3, #1
 8007938:	e7b3      	b.n	80078a2 <_dtoa_r+0x1b2>
 800793a:	900c      	str	r0, [sp, #48]	; 0x30
 800793c:	e7b2      	b.n	80078a4 <_dtoa_r+0x1b4>
 800793e:	9b05      	ldr	r3, [sp, #20]
 8007940:	eba3 030b 	sub.w	r3, r3, fp
 8007944:	9305      	str	r3, [sp, #20]
 8007946:	f1cb 0300 	rsb	r3, fp, #0
 800794a:	9308      	str	r3, [sp, #32]
 800794c:	2300      	movs	r3, #0
 800794e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007950:	e7bf      	b.n	80078d2 <_dtoa_r+0x1e2>
 8007952:	2300      	movs	r3, #0
 8007954:	9309      	str	r3, [sp, #36]	; 0x24
 8007956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007958:	2b00      	cmp	r3, #0
 800795a:	dc52      	bgt.n	8007a02 <_dtoa_r+0x312>
 800795c:	2301      	movs	r3, #1
 800795e:	9301      	str	r3, [sp, #4]
 8007960:	9304      	str	r3, [sp, #16]
 8007962:	461a      	mov	r2, r3
 8007964:	920a      	str	r2, [sp, #40]	; 0x28
 8007966:	e00b      	b.n	8007980 <_dtoa_r+0x290>
 8007968:	2301      	movs	r3, #1
 800796a:	e7f3      	b.n	8007954 <_dtoa_r+0x264>
 800796c:	2300      	movs	r3, #0
 800796e:	9309      	str	r3, [sp, #36]	; 0x24
 8007970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007972:	445b      	add	r3, fp
 8007974:	9301      	str	r3, [sp, #4]
 8007976:	3301      	adds	r3, #1
 8007978:	2b01      	cmp	r3, #1
 800797a:	9304      	str	r3, [sp, #16]
 800797c:	bfb8      	it	lt
 800797e:	2301      	movlt	r3, #1
 8007980:	69e0      	ldr	r0, [r4, #28]
 8007982:	2100      	movs	r1, #0
 8007984:	2204      	movs	r2, #4
 8007986:	f102 0614 	add.w	r6, r2, #20
 800798a:	429e      	cmp	r6, r3
 800798c:	d93d      	bls.n	8007a0a <_dtoa_r+0x31a>
 800798e:	6041      	str	r1, [r0, #4]
 8007990:	4620      	mov	r0, r4
 8007992:	f000 fd9f 	bl	80084d4 <_Balloc>
 8007996:	9000      	str	r0, [sp, #0]
 8007998:	2800      	cmp	r0, #0
 800799a:	d139      	bne.n	8007a10 <_dtoa_r+0x320>
 800799c:	4b16      	ldr	r3, [pc, #88]	; (80079f8 <_dtoa_r+0x308>)
 800799e:	4602      	mov	r2, r0
 80079a0:	f240 11af 	movw	r1, #431	; 0x1af
 80079a4:	e6bd      	b.n	8007722 <_dtoa_r+0x32>
 80079a6:	2301      	movs	r3, #1
 80079a8:	e7e1      	b.n	800796e <_dtoa_r+0x27e>
 80079aa:	2501      	movs	r5, #1
 80079ac:	2300      	movs	r3, #0
 80079ae:	9307      	str	r3, [sp, #28]
 80079b0:	9509      	str	r5, [sp, #36]	; 0x24
 80079b2:	f04f 33ff 	mov.w	r3, #4294967295
 80079b6:	9301      	str	r3, [sp, #4]
 80079b8:	9304      	str	r3, [sp, #16]
 80079ba:	2200      	movs	r2, #0
 80079bc:	2312      	movs	r3, #18
 80079be:	e7d1      	b.n	8007964 <_dtoa_r+0x274>
 80079c0:	636f4361 	.word	0x636f4361
 80079c4:	3fd287a7 	.word	0x3fd287a7
 80079c8:	8b60c8b3 	.word	0x8b60c8b3
 80079cc:	3fc68a28 	.word	0x3fc68a28
 80079d0:	509f79fb 	.word	0x509f79fb
 80079d4:	3fd34413 	.word	0x3fd34413
 80079d8:	0800991d 	.word	0x0800991d
 80079dc:	08009934 	.word	0x08009934
 80079e0:	7ff00000 	.word	0x7ff00000
 80079e4:	08009919 	.word	0x08009919
 80079e8:	08009910 	.word	0x08009910
 80079ec:	080098ed 	.word	0x080098ed
 80079f0:	3ff80000 	.word	0x3ff80000
 80079f4:	08009a20 	.word	0x08009a20
 80079f8:	0800998c 	.word	0x0800998c
 80079fc:	2301      	movs	r3, #1
 80079fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007a00:	e7d7      	b.n	80079b2 <_dtoa_r+0x2c2>
 8007a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a04:	9301      	str	r3, [sp, #4]
 8007a06:	9304      	str	r3, [sp, #16]
 8007a08:	e7ba      	b.n	8007980 <_dtoa_r+0x290>
 8007a0a:	3101      	adds	r1, #1
 8007a0c:	0052      	lsls	r2, r2, #1
 8007a0e:	e7ba      	b.n	8007986 <_dtoa_r+0x296>
 8007a10:	69e3      	ldr	r3, [r4, #28]
 8007a12:	9a00      	ldr	r2, [sp, #0]
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	9b04      	ldr	r3, [sp, #16]
 8007a18:	2b0e      	cmp	r3, #14
 8007a1a:	f200 80a8 	bhi.w	8007b6e <_dtoa_r+0x47e>
 8007a1e:	2d00      	cmp	r5, #0
 8007a20:	f000 80a5 	beq.w	8007b6e <_dtoa_r+0x47e>
 8007a24:	f1bb 0f00 	cmp.w	fp, #0
 8007a28:	dd38      	ble.n	8007a9c <_dtoa_r+0x3ac>
 8007a2a:	4bc0      	ldr	r3, [pc, #768]	; (8007d2c <_dtoa_r+0x63c>)
 8007a2c:	f00b 020f 	and.w	r2, fp, #15
 8007a30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a34:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007a38:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007a3c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007a40:	d019      	beq.n	8007a76 <_dtoa_r+0x386>
 8007a42:	4bbb      	ldr	r3, [pc, #748]	; (8007d30 <_dtoa_r+0x640>)
 8007a44:	ec51 0b18 	vmov	r0, r1, d8
 8007a48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a4c:	f7f8 ff26 	bl	800089c <__aeabi_ddiv>
 8007a50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a54:	f008 080f 	and.w	r8, r8, #15
 8007a58:	2503      	movs	r5, #3
 8007a5a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007d30 <_dtoa_r+0x640>
 8007a5e:	f1b8 0f00 	cmp.w	r8, #0
 8007a62:	d10a      	bne.n	8007a7a <_dtoa_r+0x38a>
 8007a64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a68:	4632      	mov	r2, r6
 8007a6a:	463b      	mov	r3, r7
 8007a6c:	f7f8 ff16 	bl	800089c <__aeabi_ddiv>
 8007a70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a74:	e02b      	b.n	8007ace <_dtoa_r+0x3de>
 8007a76:	2502      	movs	r5, #2
 8007a78:	e7ef      	b.n	8007a5a <_dtoa_r+0x36a>
 8007a7a:	f018 0f01 	tst.w	r8, #1
 8007a7e:	d008      	beq.n	8007a92 <_dtoa_r+0x3a2>
 8007a80:	4630      	mov	r0, r6
 8007a82:	4639      	mov	r1, r7
 8007a84:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007a88:	f7f8 fdde 	bl	8000648 <__aeabi_dmul>
 8007a8c:	3501      	adds	r5, #1
 8007a8e:	4606      	mov	r6, r0
 8007a90:	460f      	mov	r7, r1
 8007a92:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007a96:	f109 0908 	add.w	r9, r9, #8
 8007a9a:	e7e0      	b.n	8007a5e <_dtoa_r+0x36e>
 8007a9c:	f000 809f 	beq.w	8007bde <_dtoa_r+0x4ee>
 8007aa0:	f1cb 0600 	rsb	r6, fp, #0
 8007aa4:	4ba1      	ldr	r3, [pc, #644]	; (8007d2c <_dtoa_r+0x63c>)
 8007aa6:	4fa2      	ldr	r7, [pc, #648]	; (8007d30 <_dtoa_r+0x640>)
 8007aa8:	f006 020f 	and.w	r2, r6, #15
 8007aac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	ec51 0b18 	vmov	r0, r1, d8
 8007ab8:	f7f8 fdc6 	bl	8000648 <__aeabi_dmul>
 8007abc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ac0:	1136      	asrs	r6, r6, #4
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	2502      	movs	r5, #2
 8007ac6:	2e00      	cmp	r6, #0
 8007ac8:	d17e      	bne.n	8007bc8 <_dtoa_r+0x4d8>
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1d0      	bne.n	8007a70 <_dtoa_r+0x380>
 8007ace:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ad0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 8084 	beq.w	8007be2 <_dtoa_r+0x4f2>
 8007ada:	4b96      	ldr	r3, [pc, #600]	; (8007d34 <_dtoa_r+0x644>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	4640      	mov	r0, r8
 8007ae0:	4649      	mov	r1, r9
 8007ae2:	f7f9 f823 	bl	8000b2c <__aeabi_dcmplt>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d07b      	beq.n	8007be2 <_dtoa_r+0x4f2>
 8007aea:	9b04      	ldr	r3, [sp, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d078      	beq.n	8007be2 <_dtoa_r+0x4f2>
 8007af0:	9b01      	ldr	r3, [sp, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	dd39      	ble.n	8007b6a <_dtoa_r+0x47a>
 8007af6:	4b90      	ldr	r3, [pc, #576]	; (8007d38 <_dtoa_r+0x648>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	4640      	mov	r0, r8
 8007afc:	4649      	mov	r1, r9
 8007afe:	f7f8 fda3 	bl	8000648 <__aeabi_dmul>
 8007b02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b06:	9e01      	ldr	r6, [sp, #4]
 8007b08:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007b0c:	3501      	adds	r5, #1
 8007b0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b12:	4628      	mov	r0, r5
 8007b14:	f7f8 fd2e 	bl	8000574 <__aeabi_i2d>
 8007b18:	4642      	mov	r2, r8
 8007b1a:	464b      	mov	r3, r9
 8007b1c:	f7f8 fd94 	bl	8000648 <__aeabi_dmul>
 8007b20:	4b86      	ldr	r3, [pc, #536]	; (8007d3c <_dtoa_r+0x64c>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	f7f8 fbda 	bl	80002dc <__adddf3>
 8007b28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007b2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b30:	9303      	str	r3, [sp, #12]
 8007b32:	2e00      	cmp	r6, #0
 8007b34:	d158      	bne.n	8007be8 <_dtoa_r+0x4f8>
 8007b36:	4b82      	ldr	r3, [pc, #520]	; (8007d40 <_dtoa_r+0x650>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	4640      	mov	r0, r8
 8007b3c:	4649      	mov	r1, r9
 8007b3e:	f7f8 fbcb 	bl	80002d8 <__aeabi_dsub>
 8007b42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b46:	4680      	mov	r8, r0
 8007b48:	4689      	mov	r9, r1
 8007b4a:	f7f9 f80d 	bl	8000b68 <__aeabi_dcmpgt>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	f040 8296 	bne.w	8008080 <_dtoa_r+0x990>
 8007b54:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007b58:	4640      	mov	r0, r8
 8007b5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b5e:	4649      	mov	r1, r9
 8007b60:	f7f8 ffe4 	bl	8000b2c <__aeabi_dcmplt>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	f040 8289 	bne.w	800807c <_dtoa_r+0x98c>
 8007b6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007b6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f2c0 814e 	blt.w	8007e12 <_dtoa_r+0x722>
 8007b76:	f1bb 0f0e 	cmp.w	fp, #14
 8007b7a:	f300 814a 	bgt.w	8007e12 <_dtoa_r+0x722>
 8007b7e:	4b6b      	ldr	r3, [pc, #428]	; (8007d2c <_dtoa_r+0x63c>)
 8007b80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f280 80dc 	bge.w	8007d48 <_dtoa_r+0x658>
 8007b90:	9b04      	ldr	r3, [sp, #16]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f300 80d8 	bgt.w	8007d48 <_dtoa_r+0x658>
 8007b98:	f040 826f 	bne.w	800807a <_dtoa_r+0x98a>
 8007b9c:	4b68      	ldr	r3, [pc, #416]	; (8007d40 <_dtoa_r+0x650>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	4640      	mov	r0, r8
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	f7f8 fd50 	bl	8000648 <__aeabi_dmul>
 8007ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bac:	f7f8 ffd2 	bl	8000b54 <__aeabi_dcmpge>
 8007bb0:	9e04      	ldr	r6, [sp, #16]
 8007bb2:	4637      	mov	r7, r6
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	f040 8245 	bne.w	8008044 <_dtoa_r+0x954>
 8007bba:	9d00      	ldr	r5, [sp, #0]
 8007bbc:	2331      	movs	r3, #49	; 0x31
 8007bbe:	f805 3b01 	strb.w	r3, [r5], #1
 8007bc2:	f10b 0b01 	add.w	fp, fp, #1
 8007bc6:	e241      	b.n	800804c <_dtoa_r+0x95c>
 8007bc8:	07f2      	lsls	r2, r6, #31
 8007bca:	d505      	bpl.n	8007bd8 <_dtoa_r+0x4e8>
 8007bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bd0:	f7f8 fd3a 	bl	8000648 <__aeabi_dmul>
 8007bd4:	3501      	adds	r5, #1
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	1076      	asrs	r6, r6, #1
 8007bda:	3708      	adds	r7, #8
 8007bdc:	e773      	b.n	8007ac6 <_dtoa_r+0x3d6>
 8007bde:	2502      	movs	r5, #2
 8007be0:	e775      	b.n	8007ace <_dtoa_r+0x3de>
 8007be2:	9e04      	ldr	r6, [sp, #16]
 8007be4:	465f      	mov	r7, fp
 8007be6:	e792      	b.n	8007b0e <_dtoa_r+0x41e>
 8007be8:	9900      	ldr	r1, [sp, #0]
 8007bea:	4b50      	ldr	r3, [pc, #320]	; (8007d2c <_dtoa_r+0x63c>)
 8007bec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bf0:	4431      	add	r1, r6
 8007bf2:	9102      	str	r1, [sp, #8]
 8007bf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bf6:	eeb0 9a47 	vmov.f32	s18, s14
 8007bfa:	eef0 9a67 	vmov.f32	s19, s15
 8007bfe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c06:	2900      	cmp	r1, #0
 8007c08:	d044      	beq.n	8007c94 <_dtoa_r+0x5a4>
 8007c0a:	494e      	ldr	r1, [pc, #312]	; (8007d44 <_dtoa_r+0x654>)
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	f7f8 fe45 	bl	800089c <__aeabi_ddiv>
 8007c12:	ec53 2b19 	vmov	r2, r3, d9
 8007c16:	f7f8 fb5f 	bl	80002d8 <__aeabi_dsub>
 8007c1a:	9d00      	ldr	r5, [sp, #0]
 8007c1c:	ec41 0b19 	vmov	d9, r0, r1
 8007c20:	4649      	mov	r1, r9
 8007c22:	4640      	mov	r0, r8
 8007c24:	f7f8 ffc0 	bl	8000ba8 <__aeabi_d2iz>
 8007c28:	4606      	mov	r6, r0
 8007c2a:	f7f8 fca3 	bl	8000574 <__aeabi_i2d>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	4640      	mov	r0, r8
 8007c34:	4649      	mov	r1, r9
 8007c36:	f7f8 fb4f 	bl	80002d8 <__aeabi_dsub>
 8007c3a:	3630      	adds	r6, #48	; 0x30
 8007c3c:	f805 6b01 	strb.w	r6, [r5], #1
 8007c40:	ec53 2b19 	vmov	r2, r3, d9
 8007c44:	4680      	mov	r8, r0
 8007c46:	4689      	mov	r9, r1
 8007c48:	f7f8 ff70 	bl	8000b2c <__aeabi_dcmplt>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d164      	bne.n	8007d1a <_dtoa_r+0x62a>
 8007c50:	4642      	mov	r2, r8
 8007c52:	464b      	mov	r3, r9
 8007c54:	4937      	ldr	r1, [pc, #220]	; (8007d34 <_dtoa_r+0x644>)
 8007c56:	2000      	movs	r0, #0
 8007c58:	f7f8 fb3e 	bl	80002d8 <__aeabi_dsub>
 8007c5c:	ec53 2b19 	vmov	r2, r3, d9
 8007c60:	f7f8 ff64 	bl	8000b2c <__aeabi_dcmplt>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	f040 80b6 	bne.w	8007dd6 <_dtoa_r+0x6e6>
 8007c6a:	9b02      	ldr	r3, [sp, #8]
 8007c6c:	429d      	cmp	r5, r3
 8007c6e:	f43f af7c 	beq.w	8007b6a <_dtoa_r+0x47a>
 8007c72:	4b31      	ldr	r3, [pc, #196]	; (8007d38 <_dtoa_r+0x648>)
 8007c74:	ec51 0b19 	vmov	r0, r1, d9
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f7f8 fce5 	bl	8000648 <__aeabi_dmul>
 8007c7e:	4b2e      	ldr	r3, [pc, #184]	; (8007d38 <_dtoa_r+0x648>)
 8007c80:	ec41 0b19 	vmov	d9, r0, r1
 8007c84:	2200      	movs	r2, #0
 8007c86:	4640      	mov	r0, r8
 8007c88:	4649      	mov	r1, r9
 8007c8a:	f7f8 fcdd 	bl	8000648 <__aeabi_dmul>
 8007c8e:	4680      	mov	r8, r0
 8007c90:	4689      	mov	r9, r1
 8007c92:	e7c5      	b.n	8007c20 <_dtoa_r+0x530>
 8007c94:	ec51 0b17 	vmov	r0, r1, d7
 8007c98:	f7f8 fcd6 	bl	8000648 <__aeabi_dmul>
 8007c9c:	9b02      	ldr	r3, [sp, #8]
 8007c9e:	9d00      	ldr	r5, [sp, #0]
 8007ca0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ca2:	ec41 0b19 	vmov	d9, r0, r1
 8007ca6:	4649      	mov	r1, r9
 8007ca8:	4640      	mov	r0, r8
 8007caa:	f7f8 ff7d 	bl	8000ba8 <__aeabi_d2iz>
 8007cae:	4606      	mov	r6, r0
 8007cb0:	f7f8 fc60 	bl	8000574 <__aeabi_i2d>
 8007cb4:	3630      	adds	r6, #48	; 0x30
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	4640      	mov	r0, r8
 8007cbc:	4649      	mov	r1, r9
 8007cbe:	f7f8 fb0b 	bl	80002d8 <__aeabi_dsub>
 8007cc2:	f805 6b01 	strb.w	r6, [r5], #1
 8007cc6:	9b02      	ldr	r3, [sp, #8]
 8007cc8:	429d      	cmp	r5, r3
 8007cca:	4680      	mov	r8, r0
 8007ccc:	4689      	mov	r9, r1
 8007cce:	f04f 0200 	mov.w	r2, #0
 8007cd2:	d124      	bne.n	8007d1e <_dtoa_r+0x62e>
 8007cd4:	4b1b      	ldr	r3, [pc, #108]	; (8007d44 <_dtoa_r+0x654>)
 8007cd6:	ec51 0b19 	vmov	r0, r1, d9
 8007cda:	f7f8 faff 	bl	80002dc <__adddf3>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4640      	mov	r0, r8
 8007ce4:	4649      	mov	r1, r9
 8007ce6:	f7f8 ff3f 	bl	8000b68 <__aeabi_dcmpgt>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d173      	bne.n	8007dd6 <_dtoa_r+0x6e6>
 8007cee:	ec53 2b19 	vmov	r2, r3, d9
 8007cf2:	4914      	ldr	r1, [pc, #80]	; (8007d44 <_dtoa_r+0x654>)
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	f7f8 faef 	bl	80002d8 <__aeabi_dsub>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4640      	mov	r0, r8
 8007d00:	4649      	mov	r1, r9
 8007d02:	f7f8 ff13 	bl	8000b2c <__aeabi_dcmplt>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	f43f af2f 	beq.w	8007b6a <_dtoa_r+0x47a>
 8007d0c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d0e:	1e6b      	subs	r3, r5, #1
 8007d10:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d16:	2b30      	cmp	r3, #48	; 0x30
 8007d18:	d0f8      	beq.n	8007d0c <_dtoa_r+0x61c>
 8007d1a:	46bb      	mov	fp, r7
 8007d1c:	e04a      	b.n	8007db4 <_dtoa_r+0x6c4>
 8007d1e:	4b06      	ldr	r3, [pc, #24]	; (8007d38 <_dtoa_r+0x648>)
 8007d20:	f7f8 fc92 	bl	8000648 <__aeabi_dmul>
 8007d24:	4680      	mov	r8, r0
 8007d26:	4689      	mov	r9, r1
 8007d28:	e7bd      	b.n	8007ca6 <_dtoa_r+0x5b6>
 8007d2a:	bf00      	nop
 8007d2c:	08009a20 	.word	0x08009a20
 8007d30:	080099f8 	.word	0x080099f8
 8007d34:	3ff00000 	.word	0x3ff00000
 8007d38:	40240000 	.word	0x40240000
 8007d3c:	401c0000 	.word	0x401c0000
 8007d40:	40140000 	.word	0x40140000
 8007d44:	3fe00000 	.word	0x3fe00000
 8007d48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d4c:	9d00      	ldr	r5, [sp, #0]
 8007d4e:	4642      	mov	r2, r8
 8007d50:	464b      	mov	r3, r9
 8007d52:	4630      	mov	r0, r6
 8007d54:	4639      	mov	r1, r7
 8007d56:	f7f8 fda1 	bl	800089c <__aeabi_ddiv>
 8007d5a:	f7f8 ff25 	bl	8000ba8 <__aeabi_d2iz>
 8007d5e:	9001      	str	r0, [sp, #4]
 8007d60:	f7f8 fc08 	bl	8000574 <__aeabi_i2d>
 8007d64:	4642      	mov	r2, r8
 8007d66:	464b      	mov	r3, r9
 8007d68:	f7f8 fc6e 	bl	8000648 <__aeabi_dmul>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4630      	mov	r0, r6
 8007d72:	4639      	mov	r1, r7
 8007d74:	f7f8 fab0 	bl	80002d8 <__aeabi_dsub>
 8007d78:	9e01      	ldr	r6, [sp, #4]
 8007d7a:	9f04      	ldr	r7, [sp, #16]
 8007d7c:	3630      	adds	r6, #48	; 0x30
 8007d7e:	f805 6b01 	strb.w	r6, [r5], #1
 8007d82:	9e00      	ldr	r6, [sp, #0]
 8007d84:	1bae      	subs	r6, r5, r6
 8007d86:	42b7      	cmp	r7, r6
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	d134      	bne.n	8007df8 <_dtoa_r+0x708>
 8007d8e:	f7f8 faa5 	bl	80002dc <__adddf3>
 8007d92:	4642      	mov	r2, r8
 8007d94:	464b      	mov	r3, r9
 8007d96:	4606      	mov	r6, r0
 8007d98:	460f      	mov	r7, r1
 8007d9a:	f7f8 fee5 	bl	8000b68 <__aeabi_dcmpgt>
 8007d9e:	b9c8      	cbnz	r0, 8007dd4 <_dtoa_r+0x6e4>
 8007da0:	4642      	mov	r2, r8
 8007da2:	464b      	mov	r3, r9
 8007da4:	4630      	mov	r0, r6
 8007da6:	4639      	mov	r1, r7
 8007da8:	f7f8 feb6 	bl	8000b18 <__aeabi_dcmpeq>
 8007dac:	b110      	cbz	r0, 8007db4 <_dtoa_r+0x6c4>
 8007dae:	9b01      	ldr	r3, [sp, #4]
 8007db0:	07db      	lsls	r3, r3, #31
 8007db2:	d40f      	bmi.n	8007dd4 <_dtoa_r+0x6e4>
 8007db4:	4651      	mov	r1, sl
 8007db6:	4620      	mov	r0, r4
 8007db8:	f000 fbcc 	bl	8008554 <_Bfree>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dc0:	702b      	strb	r3, [r5, #0]
 8007dc2:	f10b 0301 	add.w	r3, fp, #1
 8007dc6:	6013      	str	r3, [r2, #0]
 8007dc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f43f ace2 	beq.w	8007794 <_dtoa_r+0xa4>
 8007dd0:	601d      	str	r5, [r3, #0]
 8007dd2:	e4df      	b.n	8007794 <_dtoa_r+0xa4>
 8007dd4:	465f      	mov	r7, fp
 8007dd6:	462b      	mov	r3, r5
 8007dd8:	461d      	mov	r5, r3
 8007dda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dde:	2a39      	cmp	r2, #57	; 0x39
 8007de0:	d106      	bne.n	8007df0 <_dtoa_r+0x700>
 8007de2:	9a00      	ldr	r2, [sp, #0]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d1f7      	bne.n	8007dd8 <_dtoa_r+0x6e8>
 8007de8:	9900      	ldr	r1, [sp, #0]
 8007dea:	2230      	movs	r2, #48	; 0x30
 8007dec:	3701      	adds	r7, #1
 8007dee:	700a      	strb	r2, [r1, #0]
 8007df0:	781a      	ldrb	r2, [r3, #0]
 8007df2:	3201      	adds	r2, #1
 8007df4:	701a      	strb	r2, [r3, #0]
 8007df6:	e790      	b.n	8007d1a <_dtoa_r+0x62a>
 8007df8:	4ba3      	ldr	r3, [pc, #652]	; (8008088 <_dtoa_r+0x998>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f7f8 fc24 	bl	8000648 <__aeabi_dmul>
 8007e00:	2200      	movs	r2, #0
 8007e02:	2300      	movs	r3, #0
 8007e04:	4606      	mov	r6, r0
 8007e06:	460f      	mov	r7, r1
 8007e08:	f7f8 fe86 	bl	8000b18 <__aeabi_dcmpeq>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d09e      	beq.n	8007d4e <_dtoa_r+0x65e>
 8007e10:	e7d0      	b.n	8007db4 <_dtoa_r+0x6c4>
 8007e12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e14:	2a00      	cmp	r2, #0
 8007e16:	f000 80ca 	beq.w	8007fae <_dtoa_r+0x8be>
 8007e1a:	9a07      	ldr	r2, [sp, #28]
 8007e1c:	2a01      	cmp	r2, #1
 8007e1e:	f300 80ad 	bgt.w	8007f7c <_dtoa_r+0x88c>
 8007e22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e24:	2a00      	cmp	r2, #0
 8007e26:	f000 80a5 	beq.w	8007f74 <_dtoa_r+0x884>
 8007e2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e2e:	9e08      	ldr	r6, [sp, #32]
 8007e30:	9d05      	ldr	r5, [sp, #20]
 8007e32:	9a05      	ldr	r2, [sp, #20]
 8007e34:	441a      	add	r2, r3
 8007e36:	9205      	str	r2, [sp, #20]
 8007e38:	9a06      	ldr	r2, [sp, #24]
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	441a      	add	r2, r3
 8007e3e:	4620      	mov	r0, r4
 8007e40:	9206      	str	r2, [sp, #24]
 8007e42:	f000 fc3d 	bl	80086c0 <__i2b>
 8007e46:	4607      	mov	r7, r0
 8007e48:	b165      	cbz	r5, 8007e64 <_dtoa_r+0x774>
 8007e4a:	9b06      	ldr	r3, [sp, #24]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	dd09      	ble.n	8007e64 <_dtoa_r+0x774>
 8007e50:	42ab      	cmp	r3, r5
 8007e52:	9a05      	ldr	r2, [sp, #20]
 8007e54:	bfa8      	it	ge
 8007e56:	462b      	movge	r3, r5
 8007e58:	1ad2      	subs	r2, r2, r3
 8007e5a:	9205      	str	r2, [sp, #20]
 8007e5c:	9a06      	ldr	r2, [sp, #24]
 8007e5e:	1aed      	subs	r5, r5, r3
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	9306      	str	r3, [sp, #24]
 8007e64:	9b08      	ldr	r3, [sp, #32]
 8007e66:	b1f3      	cbz	r3, 8007ea6 <_dtoa_r+0x7b6>
 8007e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f000 80a3 	beq.w	8007fb6 <_dtoa_r+0x8c6>
 8007e70:	2e00      	cmp	r6, #0
 8007e72:	dd10      	ble.n	8007e96 <_dtoa_r+0x7a6>
 8007e74:	4639      	mov	r1, r7
 8007e76:	4632      	mov	r2, r6
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f000 fce1 	bl	8008840 <__pow5mult>
 8007e7e:	4652      	mov	r2, sl
 8007e80:	4601      	mov	r1, r0
 8007e82:	4607      	mov	r7, r0
 8007e84:	4620      	mov	r0, r4
 8007e86:	f000 fc31 	bl	80086ec <__multiply>
 8007e8a:	4651      	mov	r1, sl
 8007e8c:	4680      	mov	r8, r0
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f000 fb60 	bl	8008554 <_Bfree>
 8007e94:	46c2      	mov	sl, r8
 8007e96:	9b08      	ldr	r3, [sp, #32]
 8007e98:	1b9a      	subs	r2, r3, r6
 8007e9a:	d004      	beq.n	8007ea6 <_dtoa_r+0x7b6>
 8007e9c:	4651      	mov	r1, sl
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f000 fcce 	bl	8008840 <__pow5mult>
 8007ea4:	4682      	mov	sl, r0
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f000 fc09 	bl	80086c0 <__i2b>
 8007eae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	4606      	mov	r6, r0
 8007eb4:	f340 8081 	ble.w	8007fba <_dtoa_r+0x8ca>
 8007eb8:	461a      	mov	r2, r3
 8007eba:	4601      	mov	r1, r0
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f000 fcbf 	bl	8008840 <__pow5mult>
 8007ec2:	9b07      	ldr	r3, [sp, #28]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	dd7a      	ble.n	8007fc0 <_dtoa_r+0x8d0>
 8007eca:	f04f 0800 	mov.w	r8, #0
 8007ece:	6933      	ldr	r3, [r6, #16]
 8007ed0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007ed4:	6918      	ldr	r0, [r3, #16]
 8007ed6:	f000 fba5 	bl	8008624 <__hi0bits>
 8007eda:	f1c0 0020 	rsb	r0, r0, #32
 8007ede:	9b06      	ldr	r3, [sp, #24]
 8007ee0:	4418      	add	r0, r3
 8007ee2:	f010 001f 	ands.w	r0, r0, #31
 8007ee6:	f000 8094 	beq.w	8008012 <_dtoa_r+0x922>
 8007eea:	f1c0 0320 	rsb	r3, r0, #32
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	f340 8085 	ble.w	8007ffe <_dtoa_r+0x90e>
 8007ef4:	9b05      	ldr	r3, [sp, #20]
 8007ef6:	f1c0 001c 	rsb	r0, r0, #28
 8007efa:	4403      	add	r3, r0
 8007efc:	9305      	str	r3, [sp, #20]
 8007efe:	9b06      	ldr	r3, [sp, #24]
 8007f00:	4403      	add	r3, r0
 8007f02:	4405      	add	r5, r0
 8007f04:	9306      	str	r3, [sp, #24]
 8007f06:	9b05      	ldr	r3, [sp, #20]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	dd05      	ble.n	8007f18 <_dtoa_r+0x828>
 8007f0c:	4651      	mov	r1, sl
 8007f0e:	461a      	mov	r2, r3
 8007f10:	4620      	mov	r0, r4
 8007f12:	f000 fcef 	bl	80088f4 <__lshift>
 8007f16:	4682      	mov	sl, r0
 8007f18:	9b06      	ldr	r3, [sp, #24]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	dd05      	ble.n	8007f2a <_dtoa_r+0x83a>
 8007f1e:	4631      	mov	r1, r6
 8007f20:	461a      	mov	r2, r3
 8007f22:	4620      	mov	r0, r4
 8007f24:	f000 fce6 	bl	80088f4 <__lshift>
 8007f28:	4606      	mov	r6, r0
 8007f2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d072      	beq.n	8008016 <_dtoa_r+0x926>
 8007f30:	4631      	mov	r1, r6
 8007f32:	4650      	mov	r0, sl
 8007f34:	f000 fd4a 	bl	80089cc <__mcmp>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	da6c      	bge.n	8008016 <_dtoa_r+0x926>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	4651      	mov	r1, sl
 8007f40:	220a      	movs	r2, #10
 8007f42:	4620      	mov	r0, r4
 8007f44:	f000 fb28 	bl	8008598 <__multadd>
 8007f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f4e:	4682      	mov	sl, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 81b0 	beq.w	80082b6 <_dtoa_r+0xbc6>
 8007f56:	2300      	movs	r3, #0
 8007f58:	4639      	mov	r1, r7
 8007f5a:	220a      	movs	r2, #10
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f000 fb1b 	bl	8008598 <__multadd>
 8007f62:	9b01      	ldr	r3, [sp, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	4607      	mov	r7, r0
 8007f68:	f300 8096 	bgt.w	8008098 <_dtoa_r+0x9a8>
 8007f6c:	9b07      	ldr	r3, [sp, #28]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	dc59      	bgt.n	8008026 <_dtoa_r+0x936>
 8007f72:	e091      	b.n	8008098 <_dtoa_r+0x9a8>
 8007f74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f7a:	e758      	b.n	8007e2e <_dtoa_r+0x73e>
 8007f7c:	9b04      	ldr	r3, [sp, #16]
 8007f7e:	1e5e      	subs	r6, r3, #1
 8007f80:	9b08      	ldr	r3, [sp, #32]
 8007f82:	42b3      	cmp	r3, r6
 8007f84:	bfbf      	itttt	lt
 8007f86:	9b08      	ldrlt	r3, [sp, #32]
 8007f88:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007f8a:	9608      	strlt	r6, [sp, #32]
 8007f8c:	1af3      	sublt	r3, r6, r3
 8007f8e:	bfb4      	ite	lt
 8007f90:	18d2      	addlt	r2, r2, r3
 8007f92:	1b9e      	subge	r6, r3, r6
 8007f94:	9b04      	ldr	r3, [sp, #16]
 8007f96:	bfbc      	itt	lt
 8007f98:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007f9a:	2600      	movlt	r6, #0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	bfb7      	itett	lt
 8007fa0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007fa4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007fa8:	1a9d      	sublt	r5, r3, r2
 8007faa:	2300      	movlt	r3, #0
 8007fac:	e741      	b.n	8007e32 <_dtoa_r+0x742>
 8007fae:	9e08      	ldr	r6, [sp, #32]
 8007fb0:	9d05      	ldr	r5, [sp, #20]
 8007fb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007fb4:	e748      	b.n	8007e48 <_dtoa_r+0x758>
 8007fb6:	9a08      	ldr	r2, [sp, #32]
 8007fb8:	e770      	b.n	8007e9c <_dtoa_r+0x7ac>
 8007fba:	9b07      	ldr	r3, [sp, #28]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	dc19      	bgt.n	8007ff4 <_dtoa_r+0x904>
 8007fc0:	9b02      	ldr	r3, [sp, #8]
 8007fc2:	b9bb      	cbnz	r3, 8007ff4 <_dtoa_r+0x904>
 8007fc4:	9b03      	ldr	r3, [sp, #12]
 8007fc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fca:	b99b      	cbnz	r3, 8007ff4 <_dtoa_r+0x904>
 8007fcc:	9b03      	ldr	r3, [sp, #12]
 8007fce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fd2:	0d1b      	lsrs	r3, r3, #20
 8007fd4:	051b      	lsls	r3, r3, #20
 8007fd6:	b183      	cbz	r3, 8007ffa <_dtoa_r+0x90a>
 8007fd8:	9b05      	ldr	r3, [sp, #20]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	9305      	str	r3, [sp, #20]
 8007fde:	9b06      	ldr	r3, [sp, #24]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	9306      	str	r3, [sp, #24]
 8007fe4:	f04f 0801 	mov.w	r8, #1
 8007fe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f47f af6f 	bne.w	8007ece <_dtoa_r+0x7de>
 8007ff0:	2001      	movs	r0, #1
 8007ff2:	e774      	b.n	8007ede <_dtoa_r+0x7ee>
 8007ff4:	f04f 0800 	mov.w	r8, #0
 8007ff8:	e7f6      	b.n	8007fe8 <_dtoa_r+0x8f8>
 8007ffa:	4698      	mov	r8, r3
 8007ffc:	e7f4      	b.n	8007fe8 <_dtoa_r+0x8f8>
 8007ffe:	d082      	beq.n	8007f06 <_dtoa_r+0x816>
 8008000:	9a05      	ldr	r2, [sp, #20]
 8008002:	331c      	adds	r3, #28
 8008004:	441a      	add	r2, r3
 8008006:	9205      	str	r2, [sp, #20]
 8008008:	9a06      	ldr	r2, [sp, #24]
 800800a:	441a      	add	r2, r3
 800800c:	441d      	add	r5, r3
 800800e:	9206      	str	r2, [sp, #24]
 8008010:	e779      	b.n	8007f06 <_dtoa_r+0x816>
 8008012:	4603      	mov	r3, r0
 8008014:	e7f4      	b.n	8008000 <_dtoa_r+0x910>
 8008016:	9b04      	ldr	r3, [sp, #16]
 8008018:	2b00      	cmp	r3, #0
 800801a:	dc37      	bgt.n	800808c <_dtoa_r+0x99c>
 800801c:	9b07      	ldr	r3, [sp, #28]
 800801e:	2b02      	cmp	r3, #2
 8008020:	dd34      	ble.n	800808c <_dtoa_r+0x99c>
 8008022:	9b04      	ldr	r3, [sp, #16]
 8008024:	9301      	str	r3, [sp, #4]
 8008026:	9b01      	ldr	r3, [sp, #4]
 8008028:	b963      	cbnz	r3, 8008044 <_dtoa_r+0x954>
 800802a:	4631      	mov	r1, r6
 800802c:	2205      	movs	r2, #5
 800802e:	4620      	mov	r0, r4
 8008030:	f000 fab2 	bl	8008598 <__multadd>
 8008034:	4601      	mov	r1, r0
 8008036:	4606      	mov	r6, r0
 8008038:	4650      	mov	r0, sl
 800803a:	f000 fcc7 	bl	80089cc <__mcmp>
 800803e:	2800      	cmp	r0, #0
 8008040:	f73f adbb 	bgt.w	8007bba <_dtoa_r+0x4ca>
 8008044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008046:	9d00      	ldr	r5, [sp, #0]
 8008048:	ea6f 0b03 	mvn.w	fp, r3
 800804c:	f04f 0800 	mov.w	r8, #0
 8008050:	4631      	mov	r1, r6
 8008052:	4620      	mov	r0, r4
 8008054:	f000 fa7e 	bl	8008554 <_Bfree>
 8008058:	2f00      	cmp	r7, #0
 800805a:	f43f aeab 	beq.w	8007db4 <_dtoa_r+0x6c4>
 800805e:	f1b8 0f00 	cmp.w	r8, #0
 8008062:	d005      	beq.n	8008070 <_dtoa_r+0x980>
 8008064:	45b8      	cmp	r8, r7
 8008066:	d003      	beq.n	8008070 <_dtoa_r+0x980>
 8008068:	4641      	mov	r1, r8
 800806a:	4620      	mov	r0, r4
 800806c:	f000 fa72 	bl	8008554 <_Bfree>
 8008070:	4639      	mov	r1, r7
 8008072:	4620      	mov	r0, r4
 8008074:	f000 fa6e 	bl	8008554 <_Bfree>
 8008078:	e69c      	b.n	8007db4 <_dtoa_r+0x6c4>
 800807a:	2600      	movs	r6, #0
 800807c:	4637      	mov	r7, r6
 800807e:	e7e1      	b.n	8008044 <_dtoa_r+0x954>
 8008080:	46bb      	mov	fp, r7
 8008082:	4637      	mov	r7, r6
 8008084:	e599      	b.n	8007bba <_dtoa_r+0x4ca>
 8008086:	bf00      	nop
 8008088:	40240000 	.word	0x40240000
 800808c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800808e:	2b00      	cmp	r3, #0
 8008090:	f000 80c8 	beq.w	8008224 <_dtoa_r+0xb34>
 8008094:	9b04      	ldr	r3, [sp, #16]
 8008096:	9301      	str	r3, [sp, #4]
 8008098:	2d00      	cmp	r5, #0
 800809a:	dd05      	ble.n	80080a8 <_dtoa_r+0x9b8>
 800809c:	4639      	mov	r1, r7
 800809e:	462a      	mov	r2, r5
 80080a0:	4620      	mov	r0, r4
 80080a2:	f000 fc27 	bl	80088f4 <__lshift>
 80080a6:	4607      	mov	r7, r0
 80080a8:	f1b8 0f00 	cmp.w	r8, #0
 80080ac:	d05b      	beq.n	8008166 <_dtoa_r+0xa76>
 80080ae:	6879      	ldr	r1, [r7, #4]
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 fa0f 	bl	80084d4 <_Balloc>
 80080b6:	4605      	mov	r5, r0
 80080b8:	b928      	cbnz	r0, 80080c6 <_dtoa_r+0x9d6>
 80080ba:	4b83      	ldr	r3, [pc, #524]	; (80082c8 <_dtoa_r+0xbd8>)
 80080bc:	4602      	mov	r2, r0
 80080be:	f240 21ef 	movw	r1, #751	; 0x2ef
 80080c2:	f7ff bb2e 	b.w	8007722 <_dtoa_r+0x32>
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	3202      	adds	r2, #2
 80080ca:	0092      	lsls	r2, r2, #2
 80080cc:	f107 010c 	add.w	r1, r7, #12
 80080d0:	300c      	adds	r0, #12
 80080d2:	f000 ffab 	bl	800902c <memcpy>
 80080d6:	2201      	movs	r2, #1
 80080d8:	4629      	mov	r1, r5
 80080da:	4620      	mov	r0, r4
 80080dc:	f000 fc0a 	bl	80088f4 <__lshift>
 80080e0:	9b00      	ldr	r3, [sp, #0]
 80080e2:	3301      	adds	r3, #1
 80080e4:	9304      	str	r3, [sp, #16]
 80080e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080ea:	4413      	add	r3, r2
 80080ec:	9308      	str	r3, [sp, #32]
 80080ee:	9b02      	ldr	r3, [sp, #8]
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	46b8      	mov	r8, r7
 80080f6:	9306      	str	r3, [sp, #24]
 80080f8:	4607      	mov	r7, r0
 80080fa:	9b04      	ldr	r3, [sp, #16]
 80080fc:	4631      	mov	r1, r6
 80080fe:	3b01      	subs	r3, #1
 8008100:	4650      	mov	r0, sl
 8008102:	9301      	str	r3, [sp, #4]
 8008104:	f7ff fa69 	bl	80075da <quorem>
 8008108:	4641      	mov	r1, r8
 800810a:	9002      	str	r0, [sp, #8]
 800810c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008110:	4650      	mov	r0, sl
 8008112:	f000 fc5b 	bl	80089cc <__mcmp>
 8008116:	463a      	mov	r2, r7
 8008118:	9005      	str	r0, [sp, #20]
 800811a:	4631      	mov	r1, r6
 800811c:	4620      	mov	r0, r4
 800811e:	f000 fc71 	bl	8008a04 <__mdiff>
 8008122:	68c2      	ldr	r2, [r0, #12]
 8008124:	4605      	mov	r5, r0
 8008126:	bb02      	cbnz	r2, 800816a <_dtoa_r+0xa7a>
 8008128:	4601      	mov	r1, r0
 800812a:	4650      	mov	r0, sl
 800812c:	f000 fc4e 	bl	80089cc <__mcmp>
 8008130:	4602      	mov	r2, r0
 8008132:	4629      	mov	r1, r5
 8008134:	4620      	mov	r0, r4
 8008136:	9209      	str	r2, [sp, #36]	; 0x24
 8008138:	f000 fa0c 	bl	8008554 <_Bfree>
 800813c:	9b07      	ldr	r3, [sp, #28]
 800813e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008140:	9d04      	ldr	r5, [sp, #16]
 8008142:	ea43 0102 	orr.w	r1, r3, r2
 8008146:	9b06      	ldr	r3, [sp, #24]
 8008148:	4319      	orrs	r1, r3
 800814a:	d110      	bne.n	800816e <_dtoa_r+0xa7e>
 800814c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008150:	d029      	beq.n	80081a6 <_dtoa_r+0xab6>
 8008152:	9b05      	ldr	r3, [sp, #20]
 8008154:	2b00      	cmp	r3, #0
 8008156:	dd02      	ble.n	800815e <_dtoa_r+0xa6e>
 8008158:	9b02      	ldr	r3, [sp, #8]
 800815a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800815e:	9b01      	ldr	r3, [sp, #4]
 8008160:	f883 9000 	strb.w	r9, [r3]
 8008164:	e774      	b.n	8008050 <_dtoa_r+0x960>
 8008166:	4638      	mov	r0, r7
 8008168:	e7ba      	b.n	80080e0 <_dtoa_r+0x9f0>
 800816a:	2201      	movs	r2, #1
 800816c:	e7e1      	b.n	8008132 <_dtoa_r+0xa42>
 800816e:	9b05      	ldr	r3, [sp, #20]
 8008170:	2b00      	cmp	r3, #0
 8008172:	db04      	blt.n	800817e <_dtoa_r+0xa8e>
 8008174:	9907      	ldr	r1, [sp, #28]
 8008176:	430b      	orrs	r3, r1
 8008178:	9906      	ldr	r1, [sp, #24]
 800817a:	430b      	orrs	r3, r1
 800817c:	d120      	bne.n	80081c0 <_dtoa_r+0xad0>
 800817e:	2a00      	cmp	r2, #0
 8008180:	dded      	ble.n	800815e <_dtoa_r+0xa6e>
 8008182:	4651      	mov	r1, sl
 8008184:	2201      	movs	r2, #1
 8008186:	4620      	mov	r0, r4
 8008188:	f000 fbb4 	bl	80088f4 <__lshift>
 800818c:	4631      	mov	r1, r6
 800818e:	4682      	mov	sl, r0
 8008190:	f000 fc1c 	bl	80089cc <__mcmp>
 8008194:	2800      	cmp	r0, #0
 8008196:	dc03      	bgt.n	80081a0 <_dtoa_r+0xab0>
 8008198:	d1e1      	bne.n	800815e <_dtoa_r+0xa6e>
 800819a:	f019 0f01 	tst.w	r9, #1
 800819e:	d0de      	beq.n	800815e <_dtoa_r+0xa6e>
 80081a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80081a4:	d1d8      	bne.n	8008158 <_dtoa_r+0xa68>
 80081a6:	9a01      	ldr	r2, [sp, #4]
 80081a8:	2339      	movs	r3, #57	; 0x39
 80081aa:	7013      	strb	r3, [r2, #0]
 80081ac:	462b      	mov	r3, r5
 80081ae:	461d      	mov	r5, r3
 80081b0:	3b01      	subs	r3, #1
 80081b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80081b6:	2a39      	cmp	r2, #57	; 0x39
 80081b8:	d06c      	beq.n	8008294 <_dtoa_r+0xba4>
 80081ba:	3201      	adds	r2, #1
 80081bc:	701a      	strb	r2, [r3, #0]
 80081be:	e747      	b.n	8008050 <_dtoa_r+0x960>
 80081c0:	2a00      	cmp	r2, #0
 80081c2:	dd07      	ble.n	80081d4 <_dtoa_r+0xae4>
 80081c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80081c8:	d0ed      	beq.n	80081a6 <_dtoa_r+0xab6>
 80081ca:	9a01      	ldr	r2, [sp, #4]
 80081cc:	f109 0301 	add.w	r3, r9, #1
 80081d0:	7013      	strb	r3, [r2, #0]
 80081d2:	e73d      	b.n	8008050 <_dtoa_r+0x960>
 80081d4:	9b04      	ldr	r3, [sp, #16]
 80081d6:	9a08      	ldr	r2, [sp, #32]
 80081d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80081dc:	4293      	cmp	r3, r2
 80081de:	d043      	beq.n	8008268 <_dtoa_r+0xb78>
 80081e0:	4651      	mov	r1, sl
 80081e2:	2300      	movs	r3, #0
 80081e4:	220a      	movs	r2, #10
 80081e6:	4620      	mov	r0, r4
 80081e8:	f000 f9d6 	bl	8008598 <__multadd>
 80081ec:	45b8      	cmp	r8, r7
 80081ee:	4682      	mov	sl, r0
 80081f0:	f04f 0300 	mov.w	r3, #0
 80081f4:	f04f 020a 	mov.w	r2, #10
 80081f8:	4641      	mov	r1, r8
 80081fa:	4620      	mov	r0, r4
 80081fc:	d107      	bne.n	800820e <_dtoa_r+0xb1e>
 80081fe:	f000 f9cb 	bl	8008598 <__multadd>
 8008202:	4680      	mov	r8, r0
 8008204:	4607      	mov	r7, r0
 8008206:	9b04      	ldr	r3, [sp, #16]
 8008208:	3301      	adds	r3, #1
 800820a:	9304      	str	r3, [sp, #16]
 800820c:	e775      	b.n	80080fa <_dtoa_r+0xa0a>
 800820e:	f000 f9c3 	bl	8008598 <__multadd>
 8008212:	4639      	mov	r1, r7
 8008214:	4680      	mov	r8, r0
 8008216:	2300      	movs	r3, #0
 8008218:	220a      	movs	r2, #10
 800821a:	4620      	mov	r0, r4
 800821c:	f000 f9bc 	bl	8008598 <__multadd>
 8008220:	4607      	mov	r7, r0
 8008222:	e7f0      	b.n	8008206 <_dtoa_r+0xb16>
 8008224:	9b04      	ldr	r3, [sp, #16]
 8008226:	9301      	str	r3, [sp, #4]
 8008228:	9d00      	ldr	r5, [sp, #0]
 800822a:	4631      	mov	r1, r6
 800822c:	4650      	mov	r0, sl
 800822e:	f7ff f9d4 	bl	80075da <quorem>
 8008232:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008236:	9b00      	ldr	r3, [sp, #0]
 8008238:	f805 9b01 	strb.w	r9, [r5], #1
 800823c:	1aea      	subs	r2, r5, r3
 800823e:	9b01      	ldr	r3, [sp, #4]
 8008240:	4293      	cmp	r3, r2
 8008242:	dd07      	ble.n	8008254 <_dtoa_r+0xb64>
 8008244:	4651      	mov	r1, sl
 8008246:	2300      	movs	r3, #0
 8008248:	220a      	movs	r2, #10
 800824a:	4620      	mov	r0, r4
 800824c:	f000 f9a4 	bl	8008598 <__multadd>
 8008250:	4682      	mov	sl, r0
 8008252:	e7ea      	b.n	800822a <_dtoa_r+0xb3a>
 8008254:	9b01      	ldr	r3, [sp, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	bfc8      	it	gt
 800825a:	461d      	movgt	r5, r3
 800825c:	9b00      	ldr	r3, [sp, #0]
 800825e:	bfd8      	it	le
 8008260:	2501      	movle	r5, #1
 8008262:	441d      	add	r5, r3
 8008264:	f04f 0800 	mov.w	r8, #0
 8008268:	4651      	mov	r1, sl
 800826a:	2201      	movs	r2, #1
 800826c:	4620      	mov	r0, r4
 800826e:	f000 fb41 	bl	80088f4 <__lshift>
 8008272:	4631      	mov	r1, r6
 8008274:	4682      	mov	sl, r0
 8008276:	f000 fba9 	bl	80089cc <__mcmp>
 800827a:	2800      	cmp	r0, #0
 800827c:	dc96      	bgt.n	80081ac <_dtoa_r+0xabc>
 800827e:	d102      	bne.n	8008286 <_dtoa_r+0xb96>
 8008280:	f019 0f01 	tst.w	r9, #1
 8008284:	d192      	bne.n	80081ac <_dtoa_r+0xabc>
 8008286:	462b      	mov	r3, r5
 8008288:	461d      	mov	r5, r3
 800828a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800828e:	2a30      	cmp	r2, #48	; 0x30
 8008290:	d0fa      	beq.n	8008288 <_dtoa_r+0xb98>
 8008292:	e6dd      	b.n	8008050 <_dtoa_r+0x960>
 8008294:	9a00      	ldr	r2, [sp, #0]
 8008296:	429a      	cmp	r2, r3
 8008298:	d189      	bne.n	80081ae <_dtoa_r+0xabe>
 800829a:	f10b 0b01 	add.w	fp, fp, #1
 800829e:	2331      	movs	r3, #49	; 0x31
 80082a0:	e796      	b.n	80081d0 <_dtoa_r+0xae0>
 80082a2:	4b0a      	ldr	r3, [pc, #40]	; (80082cc <_dtoa_r+0xbdc>)
 80082a4:	f7ff ba99 	b.w	80077da <_dtoa_r+0xea>
 80082a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f47f aa6d 	bne.w	800778a <_dtoa_r+0x9a>
 80082b0:	4b07      	ldr	r3, [pc, #28]	; (80082d0 <_dtoa_r+0xbe0>)
 80082b2:	f7ff ba92 	b.w	80077da <_dtoa_r+0xea>
 80082b6:	9b01      	ldr	r3, [sp, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	dcb5      	bgt.n	8008228 <_dtoa_r+0xb38>
 80082bc:	9b07      	ldr	r3, [sp, #28]
 80082be:	2b02      	cmp	r3, #2
 80082c0:	f73f aeb1 	bgt.w	8008026 <_dtoa_r+0x936>
 80082c4:	e7b0      	b.n	8008228 <_dtoa_r+0xb38>
 80082c6:	bf00      	nop
 80082c8:	0800998c 	.word	0x0800998c
 80082cc:	080098ec 	.word	0x080098ec
 80082d0:	08009910 	.word	0x08009910

080082d4 <_free_r>:
 80082d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082d6:	2900      	cmp	r1, #0
 80082d8:	d044      	beq.n	8008364 <_free_r+0x90>
 80082da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082de:	9001      	str	r0, [sp, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f1a1 0404 	sub.w	r4, r1, #4
 80082e6:	bfb8      	it	lt
 80082e8:	18e4      	addlt	r4, r4, r3
 80082ea:	f000 f8e7 	bl	80084bc <__malloc_lock>
 80082ee:	4a1e      	ldr	r2, [pc, #120]	; (8008368 <_free_r+0x94>)
 80082f0:	9801      	ldr	r0, [sp, #4]
 80082f2:	6813      	ldr	r3, [r2, #0]
 80082f4:	b933      	cbnz	r3, 8008304 <_free_r+0x30>
 80082f6:	6063      	str	r3, [r4, #4]
 80082f8:	6014      	str	r4, [r2, #0]
 80082fa:	b003      	add	sp, #12
 80082fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008300:	f000 b8e2 	b.w	80084c8 <__malloc_unlock>
 8008304:	42a3      	cmp	r3, r4
 8008306:	d908      	bls.n	800831a <_free_r+0x46>
 8008308:	6825      	ldr	r5, [r4, #0]
 800830a:	1961      	adds	r1, r4, r5
 800830c:	428b      	cmp	r3, r1
 800830e:	bf01      	itttt	eq
 8008310:	6819      	ldreq	r1, [r3, #0]
 8008312:	685b      	ldreq	r3, [r3, #4]
 8008314:	1949      	addeq	r1, r1, r5
 8008316:	6021      	streq	r1, [r4, #0]
 8008318:	e7ed      	b.n	80082f6 <_free_r+0x22>
 800831a:	461a      	mov	r2, r3
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	b10b      	cbz	r3, 8008324 <_free_r+0x50>
 8008320:	42a3      	cmp	r3, r4
 8008322:	d9fa      	bls.n	800831a <_free_r+0x46>
 8008324:	6811      	ldr	r1, [r2, #0]
 8008326:	1855      	adds	r5, r2, r1
 8008328:	42a5      	cmp	r5, r4
 800832a:	d10b      	bne.n	8008344 <_free_r+0x70>
 800832c:	6824      	ldr	r4, [r4, #0]
 800832e:	4421      	add	r1, r4
 8008330:	1854      	adds	r4, r2, r1
 8008332:	42a3      	cmp	r3, r4
 8008334:	6011      	str	r1, [r2, #0]
 8008336:	d1e0      	bne.n	80082fa <_free_r+0x26>
 8008338:	681c      	ldr	r4, [r3, #0]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	6053      	str	r3, [r2, #4]
 800833e:	440c      	add	r4, r1
 8008340:	6014      	str	r4, [r2, #0]
 8008342:	e7da      	b.n	80082fa <_free_r+0x26>
 8008344:	d902      	bls.n	800834c <_free_r+0x78>
 8008346:	230c      	movs	r3, #12
 8008348:	6003      	str	r3, [r0, #0]
 800834a:	e7d6      	b.n	80082fa <_free_r+0x26>
 800834c:	6825      	ldr	r5, [r4, #0]
 800834e:	1961      	adds	r1, r4, r5
 8008350:	428b      	cmp	r3, r1
 8008352:	bf04      	itt	eq
 8008354:	6819      	ldreq	r1, [r3, #0]
 8008356:	685b      	ldreq	r3, [r3, #4]
 8008358:	6063      	str	r3, [r4, #4]
 800835a:	bf04      	itt	eq
 800835c:	1949      	addeq	r1, r1, r5
 800835e:	6021      	streq	r1, [r4, #0]
 8008360:	6054      	str	r4, [r2, #4]
 8008362:	e7ca      	b.n	80082fa <_free_r+0x26>
 8008364:	b003      	add	sp, #12
 8008366:	bd30      	pop	{r4, r5, pc}
 8008368:	2000076c 	.word	0x2000076c

0800836c <malloc>:
 800836c:	4b02      	ldr	r3, [pc, #8]	; (8008378 <malloc+0xc>)
 800836e:	4601      	mov	r1, r0
 8008370:	6818      	ldr	r0, [r3, #0]
 8008372:	f000 b823 	b.w	80083bc <_malloc_r>
 8008376:	bf00      	nop
 8008378:	2000022c 	.word	0x2000022c

0800837c <sbrk_aligned>:
 800837c:	b570      	push	{r4, r5, r6, lr}
 800837e:	4e0e      	ldr	r6, [pc, #56]	; (80083b8 <sbrk_aligned+0x3c>)
 8008380:	460c      	mov	r4, r1
 8008382:	6831      	ldr	r1, [r6, #0]
 8008384:	4605      	mov	r5, r0
 8008386:	b911      	cbnz	r1, 800838e <sbrk_aligned+0x12>
 8008388:	f000 fe40 	bl	800900c <_sbrk_r>
 800838c:	6030      	str	r0, [r6, #0]
 800838e:	4621      	mov	r1, r4
 8008390:	4628      	mov	r0, r5
 8008392:	f000 fe3b 	bl	800900c <_sbrk_r>
 8008396:	1c43      	adds	r3, r0, #1
 8008398:	d00a      	beq.n	80083b0 <sbrk_aligned+0x34>
 800839a:	1cc4      	adds	r4, r0, #3
 800839c:	f024 0403 	bic.w	r4, r4, #3
 80083a0:	42a0      	cmp	r0, r4
 80083a2:	d007      	beq.n	80083b4 <sbrk_aligned+0x38>
 80083a4:	1a21      	subs	r1, r4, r0
 80083a6:	4628      	mov	r0, r5
 80083a8:	f000 fe30 	bl	800900c <_sbrk_r>
 80083ac:	3001      	adds	r0, #1
 80083ae:	d101      	bne.n	80083b4 <sbrk_aligned+0x38>
 80083b0:	f04f 34ff 	mov.w	r4, #4294967295
 80083b4:	4620      	mov	r0, r4
 80083b6:	bd70      	pop	{r4, r5, r6, pc}
 80083b8:	20000770 	.word	0x20000770

080083bc <_malloc_r>:
 80083bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083c0:	1ccd      	adds	r5, r1, #3
 80083c2:	f025 0503 	bic.w	r5, r5, #3
 80083c6:	3508      	adds	r5, #8
 80083c8:	2d0c      	cmp	r5, #12
 80083ca:	bf38      	it	cc
 80083cc:	250c      	movcc	r5, #12
 80083ce:	2d00      	cmp	r5, #0
 80083d0:	4607      	mov	r7, r0
 80083d2:	db01      	blt.n	80083d8 <_malloc_r+0x1c>
 80083d4:	42a9      	cmp	r1, r5
 80083d6:	d905      	bls.n	80083e4 <_malloc_r+0x28>
 80083d8:	230c      	movs	r3, #12
 80083da:	603b      	str	r3, [r7, #0]
 80083dc:	2600      	movs	r6, #0
 80083de:	4630      	mov	r0, r6
 80083e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80084b8 <_malloc_r+0xfc>
 80083e8:	f000 f868 	bl	80084bc <__malloc_lock>
 80083ec:	f8d8 3000 	ldr.w	r3, [r8]
 80083f0:	461c      	mov	r4, r3
 80083f2:	bb5c      	cbnz	r4, 800844c <_malloc_r+0x90>
 80083f4:	4629      	mov	r1, r5
 80083f6:	4638      	mov	r0, r7
 80083f8:	f7ff ffc0 	bl	800837c <sbrk_aligned>
 80083fc:	1c43      	adds	r3, r0, #1
 80083fe:	4604      	mov	r4, r0
 8008400:	d155      	bne.n	80084ae <_malloc_r+0xf2>
 8008402:	f8d8 4000 	ldr.w	r4, [r8]
 8008406:	4626      	mov	r6, r4
 8008408:	2e00      	cmp	r6, #0
 800840a:	d145      	bne.n	8008498 <_malloc_r+0xdc>
 800840c:	2c00      	cmp	r4, #0
 800840e:	d048      	beq.n	80084a2 <_malloc_r+0xe6>
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	4631      	mov	r1, r6
 8008414:	4638      	mov	r0, r7
 8008416:	eb04 0903 	add.w	r9, r4, r3
 800841a:	f000 fdf7 	bl	800900c <_sbrk_r>
 800841e:	4581      	cmp	r9, r0
 8008420:	d13f      	bne.n	80084a2 <_malloc_r+0xe6>
 8008422:	6821      	ldr	r1, [r4, #0]
 8008424:	1a6d      	subs	r5, r5, r1
 8008426:	4629      	mov	r1, r5
 8008428:	4638      	mov	r0, r7
 800842a:	f7ff ffa7 	bl	800837c <sbrk_aligned>
 800842e:	3001      	adds	r0, #1
 8008430:	d037      	beq.n	80084a2 <_malloc_r+0xe6>
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	442b      	add	r3, r5
 8008436:	6023      	str	r3, [r4, #0]
 8008438:	f8d8 3000 	ldr.w	r3, [r8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d038      	beq.n	80084b2 <_malloc_r+0xf6>
 8008440:	685a      	ldr	r2, [r3, #4]
 8008442:	42a2      	cmp	r2, r4
 8008444:	d12b      	bne.n	800849e <_malloc_r+0xe2>
 8008446:	2200      	movs	r2, #0
 8008448:	605a      	str	r2, [r3, #4]
 800844a:	e00f      	b.n	800846c <_malloc_r+0xb0>
 800844c:	6822      	ldr	r2, [r4, #0]
 800844e:	1b52      	subs	r2, r2, r5
 8008450:	d41f      	bmi.n	8008492 <_malloc_r+0xd6>
 8008452:	2a0b      	cmp	r2, #11
 8008454:	d917      	bls.n	8008486 <_malloc_r+0xca>
 8008456:	1961      	adds	r1, r4, r5
 8008458:	42a3      	cmp	r3, r4
 800845a:	6025      	str	r5, [r4, #0]
 800845c:	bf18      	it	ne
 800845e:	6059      	strne	r1, [r3, #4]
 8008460:	6863      	ldr	r3, [r4, #4]
 8008462:	bf08      	it	eq
 8008464:	f8c8 1000 	streq.w	r1, [r8]
 8008468:	5162      	str	r2, [r4, r5]
 800846a:	604b      	str	r3, [r1, #4]
 800846c:	4638      	mov	r0, r7
 800846e:	f104 060b 	add.w	r6, r4, #11
 8008472:	f000 f829 	bl	80084c8 <__malloc_unlock>
 8008476:	f026 0607 	bic.w	r6, r6, #7
 800847a:	1d23      	adds	r3, r4, #4
 800847c:	1af2      	subs	r2, r6, r3
 800847e:	d0ae      	beq.n	80083de <_malloc_r+0x22>
 8008480:	1b9b      	subs	r3, r3, r6
 8008482:	50a3      	str	r3, [r4, r2]
 8008484:	e7ab      	b.n	80083de <_malloc_r+0x22>
 8008486:	42a3      	cmp	r3, r4
 8008488:	6862      	ldr	r2, [r4, #4]
 800848a:	d1dd      	bne.n	8008448 <_malloc_r+0x8c>
 800848c:	f8c8 2000 	str.w	r2, [r8]
 8008490:	e7ec      	b.n	800846c <_malloc_r+0xb0>
 8008492:	4623      	mov	r3, r4
 8008494:	6864      	ldr	r4, [r4, #4]
 8008496:	e7ac      	b.n	80083f2 <_malloc_r+0x36>
 8008498:	4634      	mov	r4, r6
 800849a:	6876      	ldr	r6, [r6, #4]
 800849c:	e7b4      	b.n	8008408 <_malloc_r+0x4c>
 800849e:	4613      	mov	r3, r2
 80084a0:	e7cc      	b.n	800843c <_malloc_r+0x80>
 80084a2:	230c      	movs	r3, #12
 80084a4:	603b      	str	r3, [r7, #0]
 80084a6:	4638      	mov	r0, r7
 80084a8:	f000 f80e 	bl	80084c8 <__malloc_unlock>
 80084ac:	e797      	b.n	80083de <_malloc_r+0x22>
 80084ae:	6025      	str	r5, [r4, #0]
 80084b0:	e7dc      	b.n	800846c <_malloc_r+0xb0>
 80084b2:	605b      	str	r3, [r3, #4]
 80084b4:	deff      	udf	#255	; 0xff
 80084b6:	bf00      	nop
 80084b8:	2000076c 	.word	0x2000076c

080084bc <__malloc_lock>:
 80084bc:	4801      	ldr	r0, [pc, #4]	; (80084c4 <__malloc_lock+0x8>)
 80084be:	f7ff b88a 	b.w	80075d6 <__retarget_lock_acquire_recursive>
 80084c2:	bf00      	nop
 80084c4:	20000768 	.word	0x20000768

080084c8 <__malloc_unlock>:
 80084c8:	4801      	ldr	r0, [pc, #4]	; (80084d0 <__malloc_unlock+0x8>)
 80084ca:	f7ff b885 	b.w	80075d8 <__retarget_lock_release_recursive>
 80084ce:	bf00      	nop
 80084d0:	20000768 	.word	0x20000768

080084d4 <_Balloc>:
 80084d4:	b570      	push	{r4, r5, r6, lr}
 80084d6:	69c6      	ldr	r6, [r0, #28]
 80084d8:	4604      	mov	r4, r0
 80084da:	460d      	mov	r5, r1
 80084dc:	b976      	cbnz	r6, 80084fc <_Balloc+0x28>
 80084de:	2010      	movs	r0, #16
 80084e0:	f7ff ff44 	bl	800836c <malloc>
 80084e4:	4602      	mov	r2, r0
 80084e6:	61e0      	str	r0, [r4, #28]
 80084e8:	b920      	cbnz	r0, 80084f4 <_Balloc+0x20>
 80084ea:	4b18      	ldr	r3, [pc, #96]	; (800854c <_Balloc+0x78>)
 80084ec:	4818      	ldr	r0, [pc, #96]	; (8008550 <_Balloc+0x7c>)
 80084ee:	216b      	movs	r1, #107	; 0x6b
 80084f0:	f000 fdaa 	bl	8009048 <__assert_func>
 80084f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084f8:	6006      	str	r6, [r0, #0]
 80084fa:	60c6      	str	r6, [r0, #12]
 80084fc:	69e6      	ldr	r6, [r4, #28]
 80084fe:	68f3      	ldr	r3, [r6, #12]
 8008500:	b183      	cbz	r3, 8008524 <_Balloc+0x50>
 8008502:	69e3      	ldr	r3, [r4, #28]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800850a:	b9b8      	cbnz	r0, 800853c <_Balloc+0x68>
 800850c:	2101      	movs	r1, #1
 800850e:	fa01 f605 	lsl.w	r6, r1, r5
 8008512:	1d72      	adds	r2, r6, #5
 8008514:	0092      	lsls	r2, r2, #2
 8008516:	4620      	mov	r0, r4
 8008518:	f000 fdb4 	bl	8009084 <_calloc_r>
 800851c:	b160      	cbz	r0, 8008538 <_Balloc+0x64>
 800851e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008522:	e00e      	b.n	8008542 <_Balloc+0x6e>
 8008524:	2221      	movs	r2, #33	; 0x21
 8008526:	2104      	movs	r1, #4
 8008528:	4620      	mov	r0, r4
 800852a:	f000 fdab 	bl	8009084 <_calloc_r>
 800852e:	69e3      	ldr	r3, [r4, #28]
 8008530:	60f0      	str	r0, [r6, #12]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1e4      	bne.n	8008502 <_Balloc+0x2e>
 8008538:	2000      	movs	r0, #0
 800853a:	bd70      	pop	{r4, r5, r6, pc}
 800853c:	6802      	ldr	r2, [r0, #0]
 800853e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008542:	2300      	movs	r3, #0
 8008544:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008548:	e7f7      	b.n	800853a <_Balloc+0x66>
 800854a:	bf00      	nop
 800854c:	0800991d 	.word	0x0800991d
 8008550:	0800999d 	.word	0x0800999d

08008554 <_Bfree>:
 8008554:	b570      	push	{r4, r5, r6, lr}
 8008556:	69c6      	ldr	r6, [r0, #28]
 8008558:	4605      	mov	r5, r0
 800855a:	460c      	mov	r4, r1
 800855c:	b976      	cbnz	r6, 800857c <_Bfree+0x28>
 800855e:	2010      	movs	r0, #16
 8008560:	f7ff ff04 	bl	800836c <malloc>
 8008564:	4602      	mov	r2, r0
 8008566:	61e8      	str	r0, [r5, #28]
 8008568:	b920      	cbnz	r0, 8008574 <_Bfree+0x20>
 800856a:	4b09      	ldr	r3, [pc, #36]	; (8008590 <_Bfree+0x3c>)
 800856c:	4809      	ldr	r0, [pc, #36]	; (8008594 <_Bfree+0x40>)
 800856e:	218f      	movs	r1, #143	; 0x8f
 8008570:	f000 fd6a 	bl	8009048 <__assert_func>
 8008574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008578:	6006      	str	r6, [r0, #0]
 800857a:	60c6      	str	r6, [r0, #12]
 800857c:	b13c      	cbz	r4, 800858e <_Bfree+0x3a>
 800857e:	69eb      	ldr	r3, [r5, #28]
 8008580:	6862      	ldr	r2, [r4, #4]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008588:	6021      	str	r1, [r4, #0]
 800858a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800858e:	bd70      	pop	{r4, r5, r6, pc}
 8008590:	0800991d 	.word	0x0800991d
 8008594:	0800999d 	.word	0x0800999d

08008598 <__multadd>:
 8008598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800859c:	690d      	ldr	r5, [r1, #16]
 800859e:	4607      	mov	r7, r0
 80085a0:	460c      	mov	r4, r1
 80085a2:	461e      	mov	r6, r3
 80085a4:	f101 0c14 	add.w	ip, r1, #20
 80085a8:	2000      	movs	r0, #0
 80085aa:	f8dc 3000 	ldr.w	r3, [ip]
 80085ae:	b299      	uxth	r1, r3
 80085b0:	fb02 6101 	mla	r1, r2, r1, r6
 80085b4:	0c1e      	lsrs	r6, r3, #16
 80085b6:	0c0b      	lsrs	r3, r1, #16
 80085b8:	fb02 3306 	mla	r3, r2, r6, r3
 80085bc:	b289      	uxth	r1, r1
 80085be:	3001      	adds	r0, #1
 80085c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085c4:	4285      	cmp	r5, r0
 80085c6:	f84c 1b04 	str.w	r1, [ip], #4
 80085ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085ce:	dcec      	bgt.n	80085aa <__multadd+0x12>
 80085d0:	b30e      	cbz	r6, 8008616 <__multadd+0x7e>
 80085d2:	68a3      	ldr	r3, [r4, #8]
 80085d4:	42ab      	cmp	r3, r5
 80085d6:	dc19      	bgt.n	800860c <__multadd+0x74>
 80085d8:	6861      	ldr	r1, [r4, #4]
 80085da:	4638      	mov	r0, r7
 80085dc:	3101      	adds	r1, #1
 80085de:	f7ff ff79 	bl	80084d4 <_Balloc>
 80085e2:	4680      	mov	r8, r0
 80085e4:	b928      	cbnz	r0, 80085f2 <__multadd+0x5a>
 80085e6:	4602      	mov	r2, r0
 80085e8:	4b0c      	ldr	r3, [pc, #48]	; (800861c <__multadd+0x84>)
 80085ea:	480d      	ldr	r0, [pc, #52]	; (8008620 <__multadd+0x88>)
 80085ec:	21ba      	movs	r1, #186	; 0xba
 80085ee:	f000 fd2b 	bl	8009048 <__assert_func>
 80085f2:	6922      	ldr	r2, [r4, #16]
 80085f4:	3202      	adds	r2, #2
 80085f6:	f104 010c 	add.w	r1, r4, #12
 80085fa:	0092      	lsls	r2, r2, #2
 80085fc:	300c      	adds	r0, #12
 80085fe:	f000 fd15 	bl	800902c <memcpy>
 8008602:	4621      	mov	r1, r4
 8008604:	4638      	mov	r0, r7
 8008606:	f7ff ffa5 	bl	8008554 <_Bfree>
 800860a:	4644      	mov	r4, r8
 800860c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008610:	3501      	adds	r5, #1
 8008612:	615e      	str	r6, [r3, #20]
 8008614:	6125      	str	r5, [r4, #16]
 8008616:	4620      	mov	r0, r4
 8008618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800861c:	0800998c 	.word	0x0800998c
 8008620:	0800999d 	.word	0x0800999d

08008624 <__hi0bits>:
 8008624:	0c03      	lsrs	r3, r0, #16
 8008626:	041b      	lsls	r3, r3, #16
 8008628:	b9d3      	cbnz	r3, 8008660 <__hi0bits+0x3c>
 800862a:	0400      	lsls	r0, r0, #16
 800862c:	2310      	movs	r3, #16
 800862e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008632:	bf04      	itt	eq
 8008634:	0200      	lsleq	r0, r0, #8
 8008636:	3308      	addeq	r3, #8
 8008638:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800863c:	bf04      	itt	eq
 800863e:	0100      	lsleq	r0, r0, #4
 8008640:	3304      	addeq	r3, #4
 8008642:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008646:	bf04      	itt	eq
 8008648:	0080      	lsleq	r0, r0, #2
 800864a:	3302      	addeq	r3, #2
 800864c:	2800      	cmp	r0, #0
 800864e:	db05      	blt.n	800865c <__hi0bits+0x38>
 8008650:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008654:	f103 0301 	add.w	r3, r3, #1
 8008658:	bf08      	it	eq
 800865a:	2320      	moveq	r3, #32
 800865c:	4618      	mov	r0, r3
 800865e:	4770      	bx	lr
 8008660:	2300      	movs	r3, #0
 8008662:	e7e4      	b.n	800862e <__hi0bits+0xa>

08008664 <__lo0bits>:
 8008664:	6803      	ldr	r3, [r0, #0]
 8008666:	f013 0207 	ands.w	r2, r3, #7
 800866a:	d00c      	beq.n	8008686 <__lo0bits+0x22>
 800866c:	07d9      	lsls	r1, r3, #31
 800866e:	d422      	bmi.n	80086b6 <__lo0bits+0x52>
 8008670:	079a      	lsls	r2, r3, #30
 8008672:	bf49      	itett	mi
 8008674:	085b      	lsrmi	r3, r3, #1
 8008676:	089b      	lsrpl	r3, r3, #2
 8008678:	6003      	strmi	r3, [r0, #0]
 800867a:	2201      	movmi	r2, #1
 800867c:	bf5c      	itt	pl
 800867e:	6003      	strpl	r3, [r0, #0]
 8008680:	2202      	movpl	r2, #2
 8008682:	4610      	mov	r0, r2
 8008684:	4770      	bx	lr
 8008686:	b299      	uxth	r1, r3
 8008688:	b909      	cbnz	r1, 800868e <__lo0bits+0x2a>
 800868a:	0c1b      	lsrs	r3, r3, #16
 800868c:	2210      	movs	r2, #16
 800868e:	b2d9      	uxtb	r1, r3
 8008690:	b909      	cbnz	r1, 8008696 <__lo0bits+0x32>
 8008692:	3208      	adds	r2, #8
 8008694:	0a1b      	lsrs	r3, r3, #8
 8008696:	0719      	lsls	r1, r3, #28
 8008698:	bf04      	itt	eq
 800869a:	091b      	lsreq	r3, r3, #4
 800869c:	3204      	addeq	r2, #4
 800869e:	0799      	lsls	r1, r3, #30
 80086a0:	bf04      	itt	eq
 80086a2:	089b      	lsreq	r3, r3, #2
 80086a4:	3202      	addeq	r2, #2
 80086a6:	07d9      	lsls	r1, r3, #31
 80086a8:	d403      	bmi.n	80086b2 <__lo0bits+0x4e>
 80086aa:	085b      	lsrs	r3, r3, #1
 80086ac:	f102 0201 	add.w	r2, r2, #1
 80086b0:	d003      	beq.n	80086ba <__lo0bits+0x56>
 80086b2:	6003      	str	r3, [r0, #0]
 80086b4:	e7e5      	b.n	8008682 <__lo0bits+0x1e>
 80086b6:	2200      	movs	r2, #0
 80086b8:	e7e3      	b.n	8008682 <__lo0bits+0x1e>
 80086ba:	2220      	movs	r2, #32
 80086bc:	e7e1      	b.n	8008682 <__lo0bits+0x1e>
	...

080086c0 <__i2b>:
 80086c0:	b510      	push	{r4, lr}
 80086c2:	460c      	mov	r4, r1
 80086c4:	2101      	movs	r1, #1
 80086c6:	f7ff ff05 	bl	80084d4 <_Balloc>
 80086ca:	4602      	mov	r2, r0
 80086cc:	b928      	cbnz	r0, 80086da <__i2b+0x1a>
 80086ce:	4b05      	ldr	r3, [pc, #20]	; (80086e4 <__i2b+0x24>)
 80086d0:	4805      	ldr	r0, [pc, #20]	; (80086e8 <__i2b+0x28>)
 80086d2:	f240 1145 	movw	r1, #325	; 0x145
 80086d6:	f000 fcb7 	bl	8009048 <__assert_func>
 80086da:	2301      	movs	r3, #1
 80086dc:	6144      	str	r4, [r0, #20]
 80086de:	6103      	str	r3, [r0, #16]
 80086e0:	bd10      	pop	{r4, pc}
 80086e2:	bf00      	nop
 80086e4:	0800998c 	.word	0x0800998c
 80086e8:	0800999d 	.word	0x0800999d

080086ec <__multiply>:
 80086ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f0:	4691      	mov	r9, r2
 80086f2:	690a      	ldr	r2, [r1, #16]
 80086f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	bfb8      	it	lt
 80086fc:	460b      	movlt	r3, r1
 80086fe:	460c      	mov	r4, r1
 8008700:	bfbc      	itt	lt
 8008702:	464c      	movlt	r4, r9
 8008704:	4699      	movlt	r9, r3
 8008706:	6927      	ldr	r7, [r4, #16]
 8008708:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800870c:	68a3      	ldr	r3, [r4, #8]
 800870e:	6861      	ldr	r1, [r4, #4]
 8008710:	eb07 060a 	add.w	r6, r7, sl
 8008714:	42b3      	cmp	r3, r6
 8008716:	b085      	sub	sp, #20
 8008718:	bfb8      	it	lt
 800871a:	3101      	addlt	r1, #1
 800871c:	f7ff feda 	bl	80084d4 <_Balloc>
 8008720:	b930      	cbnz	r0, 8008730 <__multiply+0x44>
 8008722:	4602      	mov	r2, r0
 8008724:	4b44      	ldr	r3, [pc, #272]	; (8008838 <__multiply+0x14c>)
 8008726:	4845      	ldr	r0, [pc, #276]	; (800883c <__multiply+0x150>)
 8008728:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800872c:	f000 fc8c 	bl	8009048 <__assert_func>
 8008730:	f100 0514 	add.w	r5, r0, #20
 8008734:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008738:	462b      	mov	r3, r5
 800873a:	2200      	movs	r2, #0
 800873c:	4543      	cmp	r3, r8
 800873e:	d321      	bcc.n	8008784 <__multiply+0x98>
 8008740:	f104 0314 	add.w	r3, r4, #20
 8008744:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008748:	f109 0314 	add.w	r3, r9, #20
 800874c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008750:	9202      	str	r2, [sp, #8]
 8008752:	1b3a      	subs	r2, r7, r4
 8008754:	3a15      	subs	r2, #21
 8008756:	f022 0203 	bic.w	r2, r2, #3
 800875a:	3204      	adds	r2, #4
 800875c:	f104 0115 	add.w	r1, r4, #21
 8008760:	428f      	cmp	r7, r1
 8008762:	bf38      	it	cc
 8008764:	2204      	movcc	r2, #4
 8008766:	9201      	str	r2, [sp, #4]
 8008768:	9a02      	ldr	r2, [sp, #8]
 800876a:	9303      	str	r3, [sp, #12]
 800876c:	429a      	cmp	r2, r3
 800876e:	d80c      	bhi.n	800878a <__multiply+0x9e>
 8008770:	2e00      	cmp	r6, #0
 8008772:	dd03      	ble.n	800877c <__multiply+0x90>
 8008774:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008778:	2b00      	cmp	r3, #0
 800877a:	d05b      	beq.n	8008834 <__multiply+0x148>
 800877c:	6106      	str	r6, [r0, #16]
 800877e:	b005      	add	sp, #20
 8008780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008784:	f843 2b04 	str.w	r2, [r3], #4
 8008788:	e7d8      	b.n	800873c <__multiply+0x50>
 800878a:	f8b3 a000 	ldrh.w	sl, [r3]
 800878e:	f1ba 0f00 	cmp.w	sl, #0
 8008792:	d024      	beq.n	80087de <__multiply+0xf2>
 8008794:	f104 0e14 	add.w	lr, r4, #20
 8008798:	46a9      	mov	r9, r5
 800879a:	f04f 0c00 	mov.w	ip, #0
 800879e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80087a2:	f8d9 1000 	ldr.w	r1, [r9]
 80087a6:	fa1f fb82 	uxth.w	fp, r2
 80087aa:	b289      	uxth	r1, r1
 80087ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80087b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80087b4:	f8d9 2000 	ldr.w	r2, [r9]
 80087b8:	4461      	add	r1, ip
 80087ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087be:	fb0a c20b 	mla	r2, sl, fp, ip
 80087c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087c6:	b289      	uxth	r1, r1
 80087c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087cc:	4577      	cmp	r7, lr
 80087ce:	f849 1b04 	str.w	r1, [r9], #4
 80087d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087d6:	d8e2      	bhi.n	800879e <__multiply+0xb2>
 80087d8:	9a01      	ldr	r2, [sp, #4]
 80087da:	f845 c002 	str.w	ip, [r5, r2]
 80087de:	9a03      	ldr	r2, [sp, #12]
 80087e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087e4:	3304      	adds	r3, #4
 80087e6:	f1b9 0f00 	cmp.w	r9, #0
 80087ea:	d021      	beq.n	8008830 <__multiply+0x144>
 80087ec:	6829      	ldr	r1, [r5, #0]
 80087ee:	f104 0c14 	add.w	ip, r4, #20
 80087f2:	46ae      	mov	lr, r5
 80087f4:	f04f 0a00 	mov.w	sl, #0
 80087f8:	f8bc b000 	ldrh.w	fp, [ip]
 80087fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008800:	fb09 220b 	mla	r2, r9, fp, r2
 8008804:	4452      	add	r2, sl
 8008806:	b289      	uxth	r1, r1
 8008808:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800880c:	f84e 1b04 	str.w	r1, [lr], #4
 8008810:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008814:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008818:	f8be 1000 	ldrh.w	r1, [lr]
 800881c:	fb09 110a 	mla	r1, r9, sl, r1
 8008820:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008824:	4567      	cmp	r7, ip
 8008826:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800882a:	d8e5      	bhi.n	80087f8 <__multiply+0x10c>
 800882c:	9a01      	ldr	r2, [sp, #4]
 800882e:	50a9      	str	r1, [r5, r2]
 8008830:	3504      	adds	r5, #4
 8008832:	e799      	b.n	8008768 <__multiply+0x7c>
 8008834:	3e01      	subs	r6, #1
 8008836:	e79b      	b.n	8008770 <__multiply+0x84>
 8008838:	0800998c 	.word	0x0800998c
 800883c:	0800999d 	.word	0x0800999d

08008840 <__pow5mult>:
 8008840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008844:	4615      	mov	r5, r2
 8008846:	f012 0203 	ands.w	r2, r2, #3
 800884a:	4606      	mov	r6, r0
 800884c:	460f      	mov	r7, r1
 800884e:	d007      	beq.n	8008860 <__pow5mult+0x20>
 8008850:	4c25      	ldr	r4, [pc, #148]	; (80088e8 <__pow5mult+0xa8>)
 8008852:	3a01      	subs	r2, #1
 8008854:	2300      	movs	r3, #0
 8008856:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800885a:	f7ff fe9d 	bl	8008598 <__multadd>
 800885e:	4607      	mov	r7, r0
 8008860:	10ad      	asrs	r5, r5, #2
 8008862:	d03d      	beq.n	80088e0 <__pow5mult+0xa0>
 8008864:	69f4      	ldr	r4, [r6, #28]
 8008866:	b97c      	cbnz	r4, 8008888 <__pow5mult+0x48>
 8008868:	2010      	movs	r0, #16
 800886a:	f7ff fd7f 	bl	800836c <malloc>
 800886e:	4602      	mov	r2, r0
 8008870:	61f0      	str	r0, [r6, #28]
 8008872:	b928      	cbnz	r0, 8008880 <__pow5mult+0x40>
 8008874:	4b1d      	ldr	r3, [pc, #116]	; (80088ec <__pow5mult+0xac>)
 8008876:	481e      	ldr	r0, [pc, #120]	; (80088f0 <__pow5mult+0xb0>)
 8008878:	f240 11b3 	movw	r1, #435	; 0x1b3
 800887c:	f000 fbe4 	bl	8009048 <__assert_func>
 8008880:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008884:	6004      	str	r4, [r0, #0]
 8008886:	60c4      	str	r4, [r0, #12]
 8008888:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800888c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008890:	b94c      	cbnz	r4, 80088a6 <__pow5mult+0x66>
 8008892:	f240 2171 	movw	r1, #625	; 0x271
 8008896:	4630      	mov	r0, r6
 8008898:	f7ff ff12 	bl	80086c0 <__i2b>
 800889c:	2300      	movs	r3, #0
 800889e:	f8c8 0008 	str.w	r0, [r8, #8]
 80088a2:	4604      	mov	r4, r0
 80088a4:	6003      	str	r3, [r0, #0]
 80088a6:	f04f 0900 	mov.w	r9, #0
 80088aa:	07eb      	lsls	r3, r5, #31
 80088ac:	d50a      	bpl.n	80088c4 <__pow5mult+0x84>
 80088ae:	4639      	mov	r1, r7
 80088b0:	4622      	mov	r2, r4
 80088b2:	4630      	mov	r0, r6
 80088b4:	f7ff ff1a 	bl	80086ec <__multiply>
 80088b8:	4639      	mov	r1, r7
 80088ba:	4680      	mov	r8, r0
 80088bc:	4630      	mov	r0, r6
 80088be:	f7ff fe49 	bl	8008554 <_Bfree>
 80088c2:	4647      	mov	r7, r8
 80088c4:	106d      	asrs	r5, r5, #1
 80088c6:	d00b      	beq.n	80088e0 <__pow5mult+0xa0>
 80088c8:	6820      	ldr	r0, [r4, #0]
 80088ca:	b938      	cbnz	r0, 80088dc <__pow5mult+0x9c>
 80088cc:	4622      	mov	r2, r4
 80088ce:	4621      	mov	r1, r4
 80088d0:	4630      	mov	r0, r6
 80088d2:	f7ff ff0b 	bl	80086ec <__multiply>
 80088d6:	6020      	str	r0, [r4, #0]
 80088d8:	f8c0 9000 	str.w	r9, [r0]
 80088dc:	4604      	mov	r4, r0
 80088de:	e7e4      	b.n	80088aa <__pow5mult+0x6a>
 80088e0:	4638      	mov	r0, r7
 80088e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088e6:	bf00      	nop
 80088e8:	08009ae8 	.word	0x08009ae8
 80088ec:	0800991d 	.word	0x0800991d
 80088f0:	0800999d 	.word	0x0800999d

080088f4 <__lshift>:
 80088f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f8:	460c      	mov	r4, r1
 80088fa:	6849      	ldr	r1, [r1, #4]
 80088fc:	6923      	ldr	r3, [r4, #16]
 80088fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008902:	68a3      	ldr	r3, [r4, #8]
 8008904:	4607      	mov	r7, r0
 8008906:	4691      	mov	r9, r2
 8008908:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800890c:	f108 0601 	add.w	r6, r8, #1
 8008910:	42b3      	cmp	r3, r6
 8008912:	db0b      	blt.n	800892c <__lshift+0x38>
 8008914:	4638      	mov	r0, r7
 8008916:	f7ff fddd 	bl	80084d4 <_Balloc>
 800891a:	4605      	mov	r5, r0
 800891c:	b948      	cbnz	r0, 8008932 <__lshift+0x3e>
 800891e:	4602      	mov	r2, r0
 8008920:	4b28      	ldr	r3, [pc, #160]	; (80089c4 <__lshift+0xd0>)
 8008922:	4829      	ldr	r0, [pc, #164]	; (80089c8 <__lshift+0xd4>)
 8008924:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008928:	f000 fb8e 	bl	8009048 <__assert_func>
 800892c:	3101      	adds	r1, #1
 800892e:	005b      	lsls	r3, r3, #1
 8008930:	e7ee      	b.n	8008910 <__lshift+0x1c>
 8008932:	2300      	movs	r3, #0
 8008934:	f100 0114 	add.w	r1, r0, #20
 8008938:	f100 0210 	add.w	r2, r0, #16
 800893c:	4618      	mov	r0, r3
 800893e:	4553      	cmp	r3, sl
 8008940:	db33      	blt.n	80089aa <__lshift+0xb6>
 8008942:	6920      	ldr	r0, [r4, #16]
 8008944:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008948:	f104 0314 	add.w	r3, r4, #20
 800894c:	f019 091f 	ands.w	r9, r9, #31
 8008950:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008954:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008958:	d02b      	beq.n	80089b2 <__lshift+0xbe>
 800895a:	f1c9 0e20 	rsb	lr, r9, #32
 800895e:	468a      	mov	sl, r1
 8008960:	2200      	movs	r2, #0
 8008962:	6818      	ldr	r0, [r3, #0]
 8008964:	fa00 f009 	lsl.w	r0, r0, r9
 8008968:	4310      	orrs	r0, r2
 800896a:	f84a 0b04 	str.w	r0, [sl], #4
 800896e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008972:	459c      	cmp	ip, r3
 8008974:	fa22 f20e 	lsr.w	r2, r2, lr
 8008978:	d8f3      	bhi.n	8008962 <__lshift+0x6e>
 800897a:	ebac 0304 	sub.w	r3, ip, r4
 800897e:	3b15      	subs	r3, #21
 8008980:	f023 0303 	bic.w	r3, r3, #3
 8008984:	3304      	adds	r3, #4
 8008986:	f104 0015 	add.w	r0, r4, #21
 800898a:	4584      	cmp	ip, r0
 800898c:	bf38      	it	cc
 800898e:	2304      	movcc	r3, #4
 8008990:	50ca      	str	r2, [r1, r3]
 8008992:	b10a      	cbz	r2, 8008998 <__lshift+0xa4>
 8008994:	f108 0602 	add.w	r6, r8, #2
 8008998:	3e01      	subs	r6, #1
 800899a:	4638      	mov	r0, r7
 800899c:	612e      	str	r6, [r5, #16]
 800899e:	4621      	mov	r1, r4
 80089a0:	f7ff fdd8 	bl	8008554 <_Bfree>
 80089a4:	4628      	mov	r0, r5
 80089a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80089ae:	3301      	adds	r3, #1
 80089b0:	e7c5      	b.n	800893e <__lshift+0x4a>
 80089b2:	3904      	subs	r1, #4
 80089b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80089b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80089bc:	459c      	cmp	ip, r3
 80089be:	d8f9      	bhi.n	80089b4 <__lshift+0xc0>
 80089c0:	e7ea      	b.n	8008998 <__lshift+0xa4>
 80089c2:	bf00      	nop
 80089c4:	0800998c 	.word	0x0800998c
 80089c8:	0800999d 	.word	0x0800999d

080089cc <__mcmp>:
 80089cc:	b530      	push	{r4, r5, lr}
 80089ce:	6902      	ldr	r2, [r0, #16]
 80089d0:	690c      	ldr	r4, [r1, #16]
 80089d2:	1b12      	subs	r2, r2, r4
 80089d4:	d10e      	bne.n	80089f4 <__mcmp+0x28>
 80089d6:	f100 0314 	add.w	r3, r0, #20
 80089da:	3114      	adds	r1, #20
 80089dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80089e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80089e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80089e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80089ec:	42a5      	cmp	r5, r4
 80089ee:	d003      	beq.n	80089f8 <__mcmp+0x2c>
 80089f0:	d305      	bcc.n	80089fe <__mcmp+0x32>
 80089f2:	2201      	movs	r2, #1
 80089f4:	4610      	mov	r0, r2
 80089f6:	bd30      	pop	{r4, r5, pc}
 80089f8:	4283      	cmp	r3, r0
 80089fa:	d3f3      	bcc.n	80089e4 <__mcmp+0x18>
 80089fc:	e7fa      	b.n	80089f4 <__mcmp+0x28>
 80089fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008a02:	e7f7      	b.n	80089f4 <__mcmp+0x28>

08008a04 <__mdiff>:
 8008a04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a08:	460c      	mov	r4, r1
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	4611      	mov	r1, r2
 8008a0e:	4620      	mov	r0, r4
 8008a10:	4690      	mov	r8, r2
 8008a12:	f7ff ffdb 	bl	80089cc <__mcmp>
 8008a16:	1e05      	subs	r5, r0, #0
 8008a18:	d110      	bne.n	8008a3c <__mdiff+0x38>
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f7ff fd59 	bl	80084d4 <_Balloc>
 8008a22:	b930      	cbnz	r0, 8008a32 <__mdiff+0x2e>
 8008a24:	4b3a      	ldr	r3, [pc, #232]	; (8008b10 <__mdiff+0x10c>)
 8008a26:	4602      	mov	r2, r0
 8008a28:	f240 2137 	movw	r1, #567	; 0x237
 8008a2c:	4839      	ldr	r0, [pc, #228]	; (8008b14 <__mdiff+0x110>)
 8008a2e:	f000 fb0b 	bl	8009048 <__assert_func>
 8008a32:	2301      	movs	r3, #1
 8008a34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a3c:	bfa4      	itt	ge
 8008a3e:	4643      	movge	r3, r8
 8008a40:	46a0      	movge	r8, r4
 8008a42:	4630      	mov	r0, r6
 8008a44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a48:	bfa6      	itte	ge
 8008a4a:	461c      	movge	r4, r3
 8008a4c:	2500      	movge	r5, #0
 8008a4e:	2501      	movlt	r5, #1
 8008a50:	f7ff fd40 	bl	80084d4 <_Balloc>
 8008a54:	b920      	cbnz	r0, 8008a60 <__mdiff+0x5c>
 8008a56:	4b2e      	ldr	r3, [pc, #184]	; (8008b10 <__mdiff+0x10c>)
 8008a58:	4602      	mov	r2, r0
 8008a5a:	f240 2145 	movw	r1, #581	; 0x245
 8008a5e:	e7e5      	b.n	8008a2c <__mdiff+0x28>
 8008a60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008a64:	6926      	ldr	r6, [r4, #16]
 8008a66:	60c5      	str	r5, [r0, #12]
 8008a68:	f104 0914 	add.w	r9, r4, #20
 8008a6c:	f108 0514 	add.w	r5, r8, #20
 8008a70:	f100 0e14 	add.w	lr, r0, #20
 8008a74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a7c:	f108 0210 	add.w	r2, r8, #16
 8008a80:	46f2      	mov	sl, lr
 8008a82:	2100      	movs	r1, #0
 8008a84:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a8c:	fa11 f88b 	uxtah	r8, r1, fp
 8008a90:	b299      	uxth	r1, r3
 8008a92:	0c1b      	lsrs	r3, r3, #16
 8008a94:	eba8 0801 	sub.w	r8, r8, r1
 8008a98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a9c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008aa0:	fa1f f888 	uxth.w	r8, r8
 8008aa4:	1419      	asrs	r1, r3, #16
 8008aa6:	454e      	cmp	r6, r9
 8008aa8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008aac:	f84a 3b04 	str.w	r3, [sl], #4
 8008ab0:	d8e8      	bhi.n	8008a84 <__mdiff+0x80>
 8008ab2:	1b33      	subs	r3, r6, r4
 8008ab4:	3b15      	subs	r3, #21
 8008ab6:	f023 0303 	bic.w	r3, r3, #3
 8008aba:	3304      	adds	r3, #4
 8008abc:	3415      	adds	r4, #21
 8008abe:	42a6      	cmp	r6, r4
 8008ac0:	bf38      	it	cc
 8008ac2:	2304      	movcc	r3, #4
 8008ac4:	441d      	add	r5, r3
 8008ac6:	4473      	add	r3, lr
 8008ac8:	469e      	mov	lr, r3
 8008aca:	462e      	mov	r6, r5
 8008acc:	4566      	cmp	r6, ip
 8008ace:	d30e      	bcc.n	8008aee <__mdiff+0xea>
 8008ad0:	f10c 0203 	add.w	r2, ip, #3
 8008ad4:	1b52      	subs	r2, r2, r5
 8008ad6:	f022 0203 	bic.w	r2, r2, #3
 8008ada:	3d03      	subs	r5, #3
 8008adc:	45ac      	cmp	ip, r5
 8008ade:	bf38      	it	cc
 8008ae0:	2200      	movcc	r2, #0
 8008ae2:	4413      	add	r3, r2
 8008ae4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008ae8:	b17a      	cbz	r2, 8008b0a <__mdiff+0x106>
 8008aea:	6107      	str	r7, [r0, #16]
 8008aec:	e7a4      	b.n	8008a38 <__mdiff+0x34>
 8008aee:	f856 8b04 	ldr.w	r8, [r6], #4
 8008af2:	fa11 f288 	uxtah	r2, r1, r8
 8008af6:	1414      	asrs	r4, r2, #16
 8008af8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008afc:	b292      	uxth	r2, r2
 8008afe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b02:	f84e 2b04 	str.w	r2, [lr], #4
 8008b06:	1421      	asrs	r1, r4, #16
 8008b08:	e7e0      	b.n	8008acc <__mdiff+0xc8>
 8008b0a:	3f01      	subs	r7, #1
 8008b0c:	e7ea      	b.n	8008ae4 <__mdiff+0xe0>
 8008b0e:	bf00      	nop
 8008b10:	0800998c 	.word	0x0800998c
 8008b14:	0800999d 	.word	0x0800999d

08008b18 <__d2b>:
 8008b18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b1c:	460f      	mov	r7, r1
 8008b1e:	2101      	movs	r1, #1
 8008b20:	ec59 8b10 	vmov	r8, r9, d0
 8008b24:	4616      	mov	r6, r2
 8008b26:	f7ff fcd5 	bl	80084d4 <_Balloc>
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	b930      	cbnz	r0, 8008b3c <__d2b+0x24>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	4b24      	ldr	r3, [pc, #144]	; (8008bc4 <__d2b+0xac>)
 8008b32:	4825      	ldr	r0, [pc, #148]	; (8008bc8 <__d2b+0xb0>)
 8008b34:	f240 310f 	movw	r1, #783	; 0x30f
 8008b38:	f000 fa86 	bl	8009048 <__assert_func>
 8008b3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b44:	bb2d      	cbnz	r5, 8008b92 <__d2b+0x7a>
 8008b46:	9301      	str	r3, [sp, #4]
 8008b48:	f1b8 0300 	subs.w	r3, r8, #0
 8008b4c:	d026      	beq.n	8008b9c <__d2b+0x84>
 8008b4e:	4668      	mov	r0, sp
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	f7ff fd87 	bl	8008664 <__lo0bits>
 8008b56:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b5a:	b1e8      	cbz	r0, 8008b98 <__d2b+0x80>
 8008b5c:	f1c0 0320 	rsb	r3, r0, #32
 8008b60:	fa02 f303 	lsl.w	r3, r2, r3
 8008b64:	430b      	orrs	r3, r1
 8008b66:	40c2      	lsrs	r2, r0
 8008b68:	6163      	str	r3, [r4, #20]
 8008b6a:	9201      	str	r2, [sp, #4]
 8008b6c:	9b01      	ldr	r3, [sp, #4]
 8008b6e:	61a3      	str	r3, [r4, #24]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	bf14      	ite	ne
 8008b74:	2202      	movne	r2, #2
 8008b76:	2201      	moveq	r2, #1
 8008b78:	6122      	str	r2, [r4, #16]
 8008b7a:	b1bd      	cbz	r5, 8008bac <__d2b+0x94>
 8008b7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b80:	4405      	add	r5, r0
 8008b82:	603d      	str	r5, [r7, #0]
 8008b84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b88:	6030      	str	r0, [r6, #0]
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	b003      	add	sp, #12
 8008b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b96:	e7d6      	b.n	8008b46 <__d2b+0x2e>
 8008b98:	6161      	str	r1, [r4, #20]
 8008b9a:	e7e7      	b.n	8008b6c <__d2b+0x54>
 8008b9c:	a801      	add	r0, sp, #4
 8008b9e:	f7ff fd61 	bl	8008664 <__lo0bits>
 8008ba2:	9b01      	ldr	r3, [sp, #4]
 8008ba4:	6163      	str	r3, [r4, #20]
 8008ba6:	3020      	adds	r0, #32
 8008ba8:	2201      	movs	r2, #1
 8008baa:	e7e5      	b.n	8008b78 <__d2b+0x60>
 8008bac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008bb4:	6038      	str	r0, [r7, #0]
 8008bb6:	6918      	ldr	r0, [r3, #16]
 8008bb8:	f7ff fd34 	bl	8008624 <__hi0bits>
 8008bbc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bc0:	e7e2      	b.n	8008b88 <__d2b+0x70>
 8008bc2:	bf00      	nop
 8008bc4:	0800998c 	.word	0x0800998c
 8008bc8:	0800999d 	.word	0x0800999d

08008bcc <__ssputs_r>:
 8008bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd0:	688e      	ldr	r6, [r1, #8]
 8008bd2:	461f      	mov	r7, r3
 8008bd4:	42be      	cmp	r6, r7
 8008bd6:	680b      	ldr	r3, [r1, #0]
 8008bd8:	4682      	mov	sl, r0
 8008bda:	460c      	mov	r4, r1
 8008bdc:	4690      	mov	r8, r2
 8008bde:	d82c      	bhi.n	8008c3a <__ssputs_r+0x6e>
 8008be0:	898a      	ldrh	r2, [r1, #12]
 8008be2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008be6:	d026      	beq.n	8008c36 <__ssputs_r+0x6a>
 8008be8:	6965      	ldr	r5, [r4, #20]
 8008bea:	6909      	ldr	r1, [r1, #16]
 8008bec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bf0:	eba3 0901 	sub.w	r9, r3, r1
 8008bf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bf8:	1c7b      	adds	r3, r7, #1
 8008bfa:	444b      	add	r3, r9
 8008bfc:	106d      	asrs	r5, r5, #1
 8008bfe:	429d      	cmp	r5, r3
 8008c00:	bf38      	it	cc
 8008c02:	461d      	movcc	r5, r3
 8008c04:	0553      	lsls	r3, r2, #21
 8008c06:	d527      	bpl.n	8008c58 <__ssputs_r+0x8c>
 8008c08:	4629      	mov	r1, r5
 8008c0a:	f7ff fbd7 	bl	80083bc <_malloc_r>
 8008c0e:	4606      	mov	r6, r0
 8008c10:	b360      	cbz	r0, 8008c6c <__ssputs_r+0xa0>
 8008c12:	6921      	ldr	r1, [r4, #16]
 8008c14:	464a      	mov	r2, r9
 8008c16:	f000 fa09 	bl	800902c <memcpy>
 8008c1a:	89a3      	ldrh	r3, [r4, #12]
 8008c1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c24:	81a3      	strh	r3, [r4, #12]
 8008c26:	6126      	str	r6, [r4, #16]
 8008c28:	6165      	str	r5, [r4, #20]
 8008c2a:	444e      	add	r6, r9
 8008c2c:	eba5 0509 	sub.w	r5, r5, r9
 8008c30:	6026      	str	r6, [r4, #0]
 8008c32:	60a5      	str	r5, [r4, #8]
 8008c34:	463e      	mov	r6, r7
 8008c36:	42be      	cmp	r6, r7
 8008c38:	d900      	bls.n	8008c3c <__ssputs_r+0x70>
 8008c3a:	463e      	mov	r6, r7
 8008c3c:	6820      	ldr	r0, [r4, #0]
 8008c3e:	4632      	mov	r2, r6
 8008c40:	4641      	mov	r1, r8
 8008c42:	f000 f9c9 	bl	8008fd8 <memmove>
 8008c46:	68a3      	ldr	r3, [r4, #8]
 8008c48:	1b9b      	subs	r3, r3, r6
 8008c4a:	60a3      	str	r3, [r4, #8]
 8008c4c:	6823      	ldr	r3, [r4, #0]
 8008c4e:	4433      	add	r3, r6
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	2000      	movs	r0, #0
 8008c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c58:	462a      	mov	r2, r5
 8008c5a:	f000 fa3b 	bl	80090d4 <_realloc_r>
 8008c5e:	4606      	mov	r6, r0
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d1e0      	bne.n	8008c26 <__ssputs_r+0x5a>
 8008c64:	6921      	ldr	r1, [r4, #16]
 8008c66:	4650      	mov	r0, sl
 8008c68:	f7ff fb34 	bl	80082d4 <_free_r>
 8008c6c:	230c      	movs	r3, #12
 8008c6e:	f8ca 3000 	str.w	r3, [sl]
 8008c72:	89a3      	ldrh	r3, [r4, #12]
 8008c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c78:	81a3      	strh	r3, [r4, #12]
 8008c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7e:	e7e9      	b.n	8008c54 <__ssputs_r+0x88>

08008c80 <_svfiprintf_r>:
 8008c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c84:	4698      	mov	r8, r3
 8008c86:	898b      	ldrh	r3, [r1, #12]
 8008c88:	061b      	lsls	r3, r3, #24
 8008c8a:	b09d      	sub	sp, #116	; 0x74
 8008c8c:	4607      	mov	r7, r0
 8008c8e:	460d      	mov	r5, r1
 8008c90:	4614      	mov	r4, r2
 8008c92:	d50e      	bpl.n	8008cb2 <_svfiprintf_r+0x32>
 8008c94:	690b      	ldr	r3, [r1, #16]
 8008c96:	b963      	cbnz	r3, 8008cb2 <_svfiprintf_r+0x32>
 8008c98:	2140      	movs	r1, #64	; 0x40
 8008c9a:	f7ff fb8f 	bl	80083bc <_malloc_r>
 8008c9e:	6028      	str	r0, [r5, #0]
 8008ca0:	6128      	str	r0, [r5, #16]
 8008ca2:	b920      	cbnz	r0, 8008cae <_svfiprintf_r+0x2e>
 8008ca4:	230c      	movs	r3, #12
 8008ca6:	603b      	str	r3, [r7, #0]
 8008ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cac:	e0d0      	b.n	8008e50 <_svfiprintf_r+0x1d0>
 8008cae:	2340      	movs	r3, #64	; 0x40
 8008cb0:	616b      	str	r3, [r5, #20]
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb6:	2320      	movs	r3, #32
 8008cb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cc0:	2330      	movs	r3, #48	; 0x30
 8008cc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008e68 <_svfiprintf_r+0x1e8>
 8008cc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cca:	f04f 0901 	mov.w	r9, #1
 8008cce:	4623      	mov	r3, r4
 8008cd0:	469a      	mov	sl, r3
 8008cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cd6:	b10a      	cbz	r2, 8008cdc <_svfiprintf_r+0x5c>
 8008cd8:	2a25      	cmp	r2, #37	; 0x25
 8008cda:	d1f9      	bne.n	8008cd0 <_svfiprintf_r+0x50>
 8008cdc:	ebba 0b04 	subs.w	fp, sl, r4
 8008ce0:	d00b      	beq.n	8008cfa <_svfiprintf_r+0x7a>
 8008ce2:	465b      	mov	r3, fp
 8008ce4:	4622      	mov	r2, r4
 8008ce6:	4629      	mov	r1, r5
 8008ce8:	4638      	mov	r0, r7
 8008cea:	f7ff ff6f 	bl	8008bcc <__ssputs_r>
 8008cee:	3001      	adds	r0, #1
 8008cf0:	f000 80a9 	beq.w	8008e46 <_svfiprintf_r+0x1c6>
 8008cf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cf6:	445a      	add	r2, fp
 8008cf8:	9209      	str	r2, [sp, #36]	; 0x24
 8008cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f000 80a1 	beq.w	8008e46 <_svfiprintf_r+0x1c6>
 8008d04:	2300      	movs	r3, #0
 8008d06:	f04f 32ff 	mov.w	r2, #4294967295
 8008d0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d0e:	f10a 0a01 	add.w	sl, sl, #1
 8008d12:	9304      	str	r3, [sp, #16]
 8008d14:	9307      	str	r3, [sp, #28]
 8008d16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d1a:	931a      	str	r3, [sp, #104]	; 0x68
 8008d1c:	4654      	mov	r4, sl
 8008d1e:	2205      	movs	r2, #5
 8008d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d24:	4850      	ldr	r0, [pc, #320]	; (8008e68 <_svfiprintf_r+0x1e8>)
 8008d26:	f7f7 fa7b 	bl	8000220 <memchr>
 8008d2a:	9a04      	ldr	r2, [sp, #16]
 8008d2c:	b9d8      	cbnz	r0, 8008d66 <_svfiprintf_r+0xe6>
 8008d2e:	06d0      	lsls	r0, r2, #27
 8008d30:	bf44      	itt	mi
 8008d32:	2320      	movmi	r3, #32
 8008d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d38:	0711      	lsls	r1, r2, #28
 8008d3a:	bf44      	itt	mi
 8008d3c:	232b      	movmi	r3, #43	; 0x2b
 8008d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d42:	f89a 3000 	ldrb.w	r3, [sl]
 8008d46:	2b2a      	cmp	r3, #42	; 0x2a
 8008d48:	d015      	beq.n	8008d76 <_svfiprintf_r+0xf6>
 8008d4a:	9a07      	ldr	r2, [sp, #28]
 8008d4c:	4654      	mov	r4, sl
 8008d4e:	2000      	movs	r0, #0
 8008d50:	f04f 0c0a 	mov.w	ip, #10
 8008d54:	4621      	mov	r1, r4
 8008d56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d5a:	3b30      	subs	r3, #48	; 0x30
 8008d5c:	2b09      	cmp	r3, #9
 8008d5e:	d94d      	bls.n	8008dfc <_svfiprintf_r+0x17c>
 8008d60:	b1b0      	cbz	r0, 8008d90 <_svfiprintf_r+0x110>
 8008d62:	9207      	str	r2, [sp, #28]
 8008d64:	e014      	b.n	8008d90 <_svfiprintf_r+0x110>
 8008d66:	eba0 0308 	sub.w	r3, r0, r8
 8008d6a:	fa09 f303 	lsl.w	r3, r9, r3
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	9304      	str	r3, [sp, #16]
 8008d72:	46a2      	mov	sl, r4
 8008d74:	e7d2      	b.n	8008d1c <_svfiprintf_r+0x9c>
 8008d76:	9b03      	ldr	r3, [sp, #12]
 8008d78:	1d19      	adds	r1, r3, #4
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	9103      	str	r1, [sp, #12]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	bfbb      	ittet	lt
 8008d82:	425b      	neglt	r3, r3
 8008d84:	f042 0202 	orrlt.w	r2, r2, #2
 8008d88:	9307      	strge	r3, [sp, #28]
 8008d8a:	9307      	strlt	r3, [sp, #28]
 8008d8c:	bfb8      	it	lt
 8008d8e:	9204      	strlt	r2, [sp, #16]
 8008d90:	7823      	ldrb	r3, [r4, #0]
 8008d92:	2b2e      	cmp	r3, #46	; 0x2e
 8008d94:	d10c      	bne.n	8008db0 <_svfiprintf_r+0x130>
 8008d96:	7863      	ldrb	r3, [r4, #1]
 8008d98:	2b2a      	cmp	r3, #42	; 0x2a
 8008d9a:	d134      	bne.n	8008e06 <_svfiprintf_r+0x186>
 8008d9c:	9b03      	ldr	r3, [sp, #12]
 8008d9e:	1d1a      	adds	r2, r3, #4
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	9203      	str	r2, [sp, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	bfb8      	it	lt
 8008da8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dac:	3402      	adds	r4, #2
 8008dae:	9305      	str	r3, [sp, #20]
 8008db0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008e78 <_svfiprintf_r+0x1f8>
 8008db4:	7821      	ldrb	r1, [r4, #0]
 8008db6:	2203      	movs	r2, #3
 8008db8:	4650      	mov	r0, sl
 8008dba:	f7f7 fa31 	bl	8000220 <memchr>
 8008dbe:	b138      	cbz	r0, 8008dd0 <_svfiprintf_r+0x150>
 8008dc0:	9b04      	ldr	r3, [sp, #16]
 8008dc2:	eba0 000a 	sub.w	r0, r0, sl
 8008dc6:	2240      	movs	r2, #64	; 0x40
 8008dc8:	4082      	lsls	r2, r0
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	3401      	adds	r4, #1
 8008dce:	9304      	str	r3, [sp, #16]
 8008dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd4:	4825      	ldr	r0, [pc, #148]	; (8008e6c <_svfiprintf_r+0x1ec>)
 8008dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dda:	2206      	movs	r2, #6
 8008ddc:	f7f7 fa20 	bl	8000220 <memchr>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d038      	beq.n	8008e56 <_svfiprintf_r+0x1d6>
 8008de4:	4b22      	ldr	r3, [pc, #136]	; (8008e70 <_svfiprintf_r+0x1f0>)
 8008de6:	bb1b      	cbnz	r3, 8008e30 <_svfiprintf_r+0x1b0>
 8008de8:	9b03      	ldr	r3, [sp, #12]
 8008dea:	3307      	adds	r3, #7
 8008dec:	f023 0307 	bic.w	r3, r3, #7
 8008df0:	3308      	adds	r3, #8
 8008df2:	9303      	str	r3, [sp, #12]
 8008df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df6:	4433      	add	r3, r6
 8008df8:	9309      	str	r3, [sp, #36]	; 0x24
 8008dfa:	e768      	b.n	8008cce <_svfiprintf_r+0x4e>
 8008dfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e00:	460c      	mov	r4, r1
 8008e02:	2001      	movs	r0, #1
 8008e04:	e7a6      	b.n	8008d54 <_svfiprintf_r+0xd4>
 8008e06:	2300      	movs	r3, #0
 8008e08:	3401      	adds	r4, #1
 8008e0a:	9305      	str	r3, [sp, #20]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	f04f 0c0a 	mov.w	ip, #10
 8008e12:	4620      	mov	r0, r4
 8008e14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e18:	3a30      	subs	r2, #48	; 0x30
 8008e1a:	2a09      	cmp	r2, #9
 8008e1c:	d903      	bls.n	8008e26 <_svfiprintf_r+0x1a6>
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d0c6      	beq.n	8008db0 <_svfiprintf_r+0x130>
 8008e22:	9105      	str	r1, [sp, #20]
 8008e24:	e7c4      	b.n	8008db0 <_svfiprintf_r+0x130>
 8008e26:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e7f0      	b.n	8008e12 <_svfiprintf_r+0x192>
 8008e30:	ab03      	add	r3, sp, #12
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	462a      	mov	r2, r5
 8008e36:	4b0f      	ldr	r3, [pc, #60]	; (8008e74 <_svfiprintf_r+0x1f4>)
 8008e38:	a904      	add	r1, sp, #16
 8008e3a:	4638      	mov	r0, r7
 8008e3c:	f7fd fe50 	bl	8006ae0 <_printf_float>
 8008e40:	1c42      	adds	r2, r0, #1
 8008e42:	4606      	mov	r6, r0
 8008e44:	d1d6      	bne.n	8008df4 <_svfiprintf_r+0x174>
 8008e46:	89ab      	ldrh	r3, [r5, #12]
 8008e48:	065b      	lsls	r3, r3, #25
 8008e4a:	f53f af2d 	bmi.w	8008ca8 <_svfiprintf_r+0x28>
 8008e4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e50:	b01d      	add	sp, #116	; 0x74
 8008e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e56:	ab03      	add	r3, sp, #12
 8008e58:	9300      	str	r3, [sp, #0]
 8008e5a:	462a      	mov	r2, r5
 8008e5c:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <_svfiprintf_r+0x1f4>)
 8008e5e:	a904      	add	r1, sp, #16
 8008e60:	4638      	mov	r0, r7
 8008e62:	f7fe f8e1 	bl	8007028 <_printf_i>
 8008e66:	e7eb      	b.n	8008e40 <_svfiprintf_r+0x1c0>
 8008e68:	08009af4 	.word	0x08009af4
 8008e6c:	08009afe 	.word	0x08009afe
 8008e70:	08006ae1 	.word	0x08006ae1
 8008e74:	08008bcd 	.word	0x08008bcd
 8008e78:	08009afa 	.word	0x08009afa

08008e7c <__sflush_r>:
 8008e7c:	898a      	ldrh	r2, [r1, #12]
 8008e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e82:	4605      	mov	r5, r0
 8008e84:	0710      	lsls	r0, r2, #28
 8008e86:	460c      	mov	r4, r1
 8008e88:	d458      	bmi.n	8008f3c <__sflush_r+0xc0>
 8008e8a:	684b      	ldr	r3, [r1, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	dc05      	bgt.n	8008e9c <__sflush_r+0x20>
 8008e90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	dc02      	bgt.n	8008e9c <__sflush_r+0x20>
 8008e96:	2000      	movs	r0, #0
 8008e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e9e:	2e00      	cmp	r6, #0
 8008ea0:	d0f9      	beq.n	8008e96 <__sflush_r+0x1a>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ea8:	682f      	ldr	r7, [r5, #0]
 8008eaa:	6a21      	ldr	r1, [r4, #32]
 8008eac:	602b      	str	r3, [r5, #0]
 8008eae:	d032      	beq.n	8008f16 <__sflush_r+0x9a>
 8008eb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	075a      	lsls	r2, r3, #29
 8008eb6:	d505      	bpl.n	8008ec4 <__sflush_r+0x48>
 8008eb8:	6863      	ldr	r3, [r4, #4]
 8008eba:	1ac0      	subs	r0, r0, r3
 8008ebc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ebe:	b10b      	cbz	r3, 8008ec4 <__sflush_r+0x48>
 8008ec0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ec2:	1ac0      	subs	r0, r0, r3
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008eca:	6a21      	ldr	r1, [r4, #32]
 8008ecc:	4628      	mov	r0, r5
 8008ece:	47b0      	blx	r6
 8008ed0:	1c43      	adds	r3, r0, #1
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	d106      	bne.n	8008ee4 <__sflush_r+0x68>
 8008ed6:	6829      	ldr	r1, [r5, #0]
 8008ed8:	291d      	cmp	r1, #29
 8008eda:	d82b      	bhi.n	8008f34 <__sflush_r+0xb8>
 8008edc:	4a29      	ldr	r2, [pc, #164]	; (8008f84 <__sflush_r+0x108>)
 8008ede:	410a      	asrs	r2, r1
 8008ee0:	07d6      	lsls	r6, r2, #31
 8008ee2:	d427      	bmi.n	8008f34 <__sflush_r+0xb8>
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	6062      	str	r2, [r4, #4]
 8008ee8:	04d9      	lsls	r1, r3, #19
 8008eea:	6922      	ldr	r2, [r4, #16]
 8008eec:	6022      	str	r2, [r4, #0]
 8008eee:	d504      	bpl.n	8008efa <__sflush_r+0x7e>
 8008ef0:	1c42      	adds	r2, r0, #1
 8008ef2:	d101      	bne.n	8008ef8 <__sflush_r+0x7c>
 8008ef4:	682b      	ldr	r3, [r5, #0]
 8008ef6:	b903      	cbnz	r3, 8008efa <__sflush_r+0x7e>
 8008ef8:	6560      	str	r0, [r4, #84]	; 0x54
 8008efa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008efc:	602f      	str	r7, [r5, #0]
 8008efe:	2900      	cmp	r1, #0
 8008f00:	d0c9      	beq.n	8008e96 <__sflush_r+0x1a>
 8008f02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f06:	4299      	cmp	r1, r3
 8008f08:	d002      	beq.n	8008f10 <__sflush_r+0x94>
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f7ff f9e2 	bl	80082d4 <_free_r>
 8008f10:	2000      	movs	r0, #0
 8008f12:	6360      	str	r0, [r4, #52]	; 0x34
 8008f14:	e7c0      	b.n	8008e98 <__sflush_r+0x1c>
 8008f16:	2301      	movs	r3, #1
 8008f18:	4628      	mov	r0, r5
 8008f1a:	47b0      	blx	r6
 8008f1c:	1c41      	adds	r1, r0, #1
 8008f1e:	d1c8      	bne.n	8008eb2 <__sflush_r+0x36>
 8008f20:	682b      	ldr	r3, [r5, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d0c5      	beq.n	8008eb2 <__sflush_r+0x36>
 8008f26:	2b1d      	cmp	r3, #29
 8008f28:	d001      	beq.n	8008f2e <__sflush_r+0xb2>
 8008f2a:	2b16      	cmp	r3, #22
 8008f2c:	d101      	bne.n	8008f32 <__sflush_r+0xb6>
 8008f2e:	602f      	str	r7, [r5, #0]
 8008f30:	e7b1      	b.n	8008e96 <__sflush_r+0x1a>
 8008f32:	89a3      	ldrh	r3, [r4, #12]
 8008f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f38:	81a3      	strh	r3, [r4, #12]
 8008f3a:	e7ad      	b.n	8008e98 <__sflush_r+0x1c>
 8008f3c:	690f      	ldr	r7, [r1, #16]
 8008f3e:	2f00      	cmp	r7, #0
 8008f40:	d0a9      	beq.n	8008e96 <__sflush_r+0x1a>
 8008f42:	0793      	lsls	r3, r2, #30
 8008f44:	680e      	ldr	r6, [r1, #0]
 8008f46:	bf08      	it	eq
 8008f48:	694b      	ldreq	r3, [r1, #20]
 8008f4a:	600f      	str	r7, [r1, #0]
 8008f4c:	bf18      	it	ne
 8008f4e:	2300      	movne	r3, #0
 8008f50:	eba6 0807 	sub.w	r8, r6, r7
 8008f54:	608b      	str	r3, [r1, #8]
 8008f56:	f1b8 0f00 	cmp.w	r8, #0
 8008f5a:	dd9c      	ble.n	8008e96 <__sflush_r+0x1a>
 8008f5c:	6a21      	ldr	r1, [r4, #32]
 8008f5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f60:	4643      	mov	r3, r8
 8008f62:	463a      	mov	r2, r7
 8008f64:	4628      	mov	r0, r5
 8008f66:	47b0      	blx	r6
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	dc06      	bgt.n	8008f7a <__sflush_r+0xfe>
 8008f6c:	89a3      	ldrh	r3, [r4, #12]
 8008f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f72:	81a3      	strh	r3, [r4, #12]
 8008f74:	f04f 30ff 	mov.w	r0, #4294967295
 8008f78:	e78e      	b.n	8008e98 <__sflush_r+0x1c>
 8008f7a:	4407      	add	r7, r0
 8008f7c:	eba8 0800 	sub.w	r8, r8, r0
 8008f80:	e7e9      	b.n	8008f56 <__sflush_r+0xda>
 8008f82:	bf00      	nop
 8008f84:	dfbffffe 	.word	0xdfbffffe

08008f88 <_fflush_r>:
 8008f88:	b538      	push	{r3, r4, r5, lr}
 8008f8a:	690b      	ldr	r3, [r1, #16]
 8008f8c:	4605      	mov	r5, r0
 8008f8e:	460c      	mov	r4, r1
 8008f90:	b913      	cbnz	r3, 8008f98 <_fflush_r+0x10>
 8008f92:	2500      	movs	r5, #0
 8008f94:	4628      	mov	r0, r5
 8008f96:	bd38      	pop	{r3, r4, r5, pc}
 8008f98:	b118      	cbz	r0, 8008fa2 <_fflush_r+0x1a>
 8008f9a:	6a03      	ldr	r3, [r0, #32]
 8008f9c:	b90b      	cbnz	r3, 8008fa2 <_fflush_r+0x1a>
 8008f9e:	f7fe f9f1 	bl	8007384 <__sinit>
 8008fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d0f3      	beq.n	8008f92 <_fflush_r+0xa>
 8008faa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fac:	07d0      	lsls	r0, r2, #31
 8008fae:	d404      	bmi.n	8008fba <_fflush_r+0x32>
 8008fb0:	0599      	lsls	r1, r3, #22
 8008fb2:	d402      	bmi.n	8008fba <_fflush_r+0x32>
 8008fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fb6:	f7fe fb0e 	bl	80075d6 <__retarget_lock_acquire_recursive>
 8008fba:	4628      	mov	r0, r5
 8008fbc:	4621      	mov	r1, r4
 8008fbe:	f7ff ff5d 	bl	8008e7c <__sflush_r>
 8008fc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fc4:	07da      	lsls	r2, r3, #31
 8008fc6:	4605      	mov	r5, r0
 8008fc8:	d4e4      	bmi.n	8008f94 <_fflush_r+0xc>
 8008fca:	89a3      	ldrh	r3, [r4, #12]
 8008fcc:	059b      	lsls	r3, r3, #22
 8008fce:	d4e1      	bmi.n	8008f94 <_fflush_r+0xc>
 8008fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fd2:	f7fe fb01 	bl	80075d8 <__retarget_lock_release_recursive>
 8008fd6:	e7dd      	b.n	8008f94 <_fflush_r+0xc>

08008fd8 <memmove>:
 8008fd8:	4288      	cmp	r0, r1
 8008fda:	b510      	push	{r4, lr}
 8008fdc:	eb01 0402 	add.w	r4, r1, r2
 8008fe0:	d902      	bls.n	8008fe8 <memmove+0x10>
 8008fe2:	4284      	cmp	r4, r0
 8008fe4:	4623      	mov	r3, r4
 8008fe6:	d807      	bhi.n	8008ff8 <memmove+0x20>
 8008fe8:	1e43      	subs	r3, r0, #1
 8008fea:	42a1      	cmp	r1, r4
 8008fec:	d008      	beq.n	8009000 <memmove+0x28>
 8008fee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ff2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ff6:	e7f8      	b.n	8008fea <memmove+0x12>
 8008ff8:	4402      	add	r2, r0
 8008ffa:	4601      	mov	r1, r0
 8008ffc:	428a      	cmp	r2, r1
 8008ffe:	d100      	bne.n	8009002 <memmove+0x2a>
 8009000:	bd10      	pop	{r4, pc}
 8009002:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009006:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800900a:	e7f7      	b.n	8008ffc <memmove+0x24>

0800900c <_sbrk_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	4d06      	ldr	r5, [pc, #24]	; (8009028 <_sbrk_r+0x1c>)
 8009010:	2300      	movs	r3, #0
 8009012:	4604      	mov	r4, r0
 8009014:	4608      	mov	r0, r1
 8009016:	602b      	str	r3, [r5, #0]
 8009018:	f7f9 f9a8 	bl	800236c <_sbrk>
 800901c:	1c43      	adds	r3, r0, #1
 800901e:	d102      	bne.n	8009026 <_sbrk_r+0x1a>
 8009020:	682b      	ldr	r3, [r5, #0]
 8009022:	b103      	cbz	r3, 8009026 <_sbrk_r+0x1a>
 8009024:	6023      	str	r3, [r4, #0]
 8009026:	bd38      	pop	{r3, r4, r5, pc}
 8009028:	20000764 	.word	0x20000764

0800902c <memcpy>:
 800902c:	440a      	add	r2, r1
 800902e:	4291      	cmp	r1, r2
 8009030:	f100 33ff 	add.w	r3, r0, #4294967295
 8009034:	d100      	bne.n	8009038 <memcpy+0xc>
 8009036:	4770      	bx	lr
 8009038:	b510      	push	{r4, lr}
 800903a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800903e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009042:	4291      	cmp	r1, r2
 8009044:	d1f9      	bne.n	800903a <memcpy+0xe>
 8009046:	bd10      	pop	{r4, pc}

08009048 <__assert_func>:
 8009048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800904a:	4614      	mov	r4, r2
 800904c:	461a      	mov	r2, r3
 800904e:	4b09      	ldr	r3, [pc, #36]	; (8009074 <__assert_func+0x2c>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4605      	mov	r5, r0
 8009054:	68d8      	ldr	r0, [r3, #12]
 8009056:	b14c      	cbz	r4, 800906c <__assert_func+0x24>
 8009058:	4b07      	ldr	r3, [pc, #28]	; (8009078 <__assert_func+0x30>)
 800905a:	9100      	str	r1, [sp, #0]
 800905c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009060:	4906      	ldr	r1, [pc, #24]	; (800907c <__assert_func+0x34>)
 8009062:	462b      	mov	r3, r5
 8009064:	f000 f872 	bl	800914c <fiprintf>
 8009068:	f000 f882 	bl	8009170 <abort>
 800906c:	4b04      	ldr	r3, [pc, #16]	; (8009080 <__assert_func+0x38>)
 800906e:	461c      	mov	r4, r3
 8009070:	e7f3      	b.n	800905a <__assert_func+0x12>
 8009072:	bf00      	nop
 8009074:	2000022c 	.word	0x2000022c
 8009078:	08009b0f 	.word	0x08009b0f
 800907c:	08009b1c 	.word	0x08009b1c
 8009080:	08009b4a 	.word	0x08009b4a

08009084 <_calloc_r>:
 8009084:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009086:	fba1 2402 	umull	r2, r4, r1, r2
 800908a:	b94c      	cbnz	r4, 80090a0 <_calloc_r+0x1c>
 800908c:	4611      	mov	r1, r2
 800908e:	9201      	str	r2, [sp, #4]
 8009090:	f7ff f994 	bl	80083bc <_malloc_r>
 8009094:	9a01      	ldr	r2, [sp, #4]
 8009096:	4605      	mov	r5, r0
 8009098:	b930      	cbnz	r0, 80090a8 <_calloc_r+0x24>
 800909a:	4628      	mov	r0, r5
 800909c:	b003      	add	sp, #12
 800909e:	bd30      	pop	{r4, r5, pc}
 80090a0:	220c      	movs	r2, #12
 80090a2:	6002      	str	r2, [r0, #0]
 80090a4:	2500      	movs	r5, #0
 80090a6:	e7f8      	b.n	800909a <_calloc_r+0x16>
 80090a8:	4621      	mov	r1, r4
 80090aa:	f7fe fa04 	bl	80074b6 <memset>
 80090ae:	e7f4      	b.n	800909a <_calloc_r+0x16>

080090b0 <__ascii_mbtowc>:
 80090b0:	b082      	sub	sp, #8
 80090b2:	b901      	cbnz	r1, 80090b6 <__ascii_mbtowc+0x6>
 80090b4:	a901      	add	r1, sp, #4
 80090b6:	b142      	cbz	r2, 80090ca <__ascii_mbtowc+0x1a>
 80090b8:	b14b      	cbz	r3, 80090ce <__ascii_mbtowc+0x1e>
 80090ba:	7813      	ldrb	r3, [r2, #0]
 80090bc:	600b      	str	r3, [r1, #0]
 80090be:	7812      	ldrb	r2, [r2, #0]
 80090c0:	1e10      	subs	r0, r2, #0
 80090c2:	bf18      	it	ne
 80090c4:	2001      	movne	r0, #1
 80090c6:	b002      	add	sp, #8
 80090c8:	4770      	bx	lr
 80090ca:	4610      	mov	r0, r2
 80090cc:	e7fb      	b.n	80090c6 <__ascii_mbtowc+0x16>
 80090ce:	f06f 0001 	mvn.w	r0, #1
 80090d2:	e7f8      	b.n	80090c6 <__ascii_mbtowc+0x16>

080090d4 <_realloc_r>:
 80090d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090d8:	4680      	mov	r8, r0
 80090da:	4614      	mov	r4, r2
 80090dc:	460e      	mov	r6, r1
 80090de:	b921      	cbnz	r1, 80090ea <_realloc_r+0x16>
 80090e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090e4:	4611      	mov	r1, r2
 80090e6:	f7ff b969 	b.w	80083bc <_malloc_r>
 80090ea:	b92a      	cbnz	r2, 80090f8 <_realloc_r+0x24>
 80090ec:	f7ff f8f2 	bl	80082d4 <_free_r>
 80090f0:	4625      	mov	r5, r4
 80090f2:	4628      	mov	r0, r5
 80090f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090f8:	f000 f841 	bl	800917e <_malloc_usable_size_r>
 80090fc:	4284      	cmp	r4, r0
 80090fe:	4607      	mov	r7, r0
 8009100:	d802      	bhi.n	8009108 <_realloc_r+0x34>
 8009102:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009106:	d812      	bhi.n	800912e <_realloc_r+0x5a>
 8009108:	4621      	mov	r1, r4
 800910a:	4640      	mov	r0, r8
 800910c:	f7ff f956 	bl	80083bc <_malloc_r>
 8009110:	4605      	mov	r5, r0
 8009112:	2800      	cmp	r0, #0
 8009114:	d0ed      	beq.n	80090f2 <_realloc_r+0x1e>
 8009116:	42bc      	cmp	r4, r7
 8009118:	4622      	mov	r2, r4
 800911a:	4631      	mov	r1, r6
 800911c:	bf28      	it	cs
 800911e:	463a      	movcs	r2, r7
 8009120:	f7ff ff84 	bl	800902c <memcpy>
 8009124:	4631      	mov	r1, r6
 8009126:	4640      	mov	r0, r8
 8009128:	f7ff f8d4 	bl	80082d4 <_free_r>
 800912c:	e7e1      	b.n	80090f2 <_realloc_r+0x1e>
 800912e:	4635      	mov	r5, r6
 8009130:	e7df      	b.n	80090f2 <_realloc_r+0x1e>

08009132 <__ascii_wctomb>:
 8009132:	b149      	cbz	r1, 8009148 <__ascii_wctomb+0x16>
 8009134:	2aff      	cmp	r2, #255	; 0xff
 8009136:	bf85      	ittet	hi
 8009138:	238a      	movhi	r3, #138	; 0x8a
 800913a:	6003      	strhi	r3, [r0, #0]
 800913c:	700a      	strbls	r2, [r1, #0]
 800913e:	f04f 30ff 	movhi.w	r0, #4294967295
 8009142:	bf98      	it	ls
 8009144:	2001      	movls	r0, #1
 8009146:	4770      	bx	lr
 8009148:	4608      	mov	r0, r1
 800914a:	4770      	bx	lr

0800914c <fiprintf>:
 800914c:	b40e      	push	{r1, r2, r3}
 800914e:	b503      	push	{r0, r1, lr}
 8009150:	4601      	mov	r1, r0
 8009152:	ab03      	add	r3, sp, #12
 8009154:	4805      	ldr	r0, [pc, #20]	; (800916c <fiprintf+0x20>)
 8009156:	f853 2b04 	ldr.w	r2, [r3], #4
 800915a:	6800      	ldr	r0, [r0, #0]
 800915c:	9301      	str	r3, [sp, #4]
 800915e:	f000 f83f 	bl	80091e0 <_vfiprintf_r>
 8009162:	b002      	add	sp, #8
 8009164:	f85d eb04 	ldr.w	lr, [sp], #4
 8009168:	b003      	add	sp, #12
 800916a:	4770      	bx	lr
 800916c:	2000022c 	.word	0x2000022c

08009170 <abort>:
 8009170:	b508      	push	{r3, lr}
 8009172:	2006      	movs	r0, #6
 8009174:	f000 fa0c 	bl	8009590 <raise>
 8009178:	2001      	movs	r0, #1
 800917a:	f7f9 f87f 	bl	800227c <_exit>

0800917e <_malloc_usable_size_r>:
 800917e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009182:	1f18      	subs	r0, r3, #4
 8009184:	2b00      	cmp	r3, #0
 8009186:	bfbc      	itt	lt
 8009188:	580b      	ldrlt	r3, [r1, r0]
 800918a:	18c0      	addlt	r0, r0, r3
 800918c:	4770      	bx	lr

0800918e <__sfputc_r>:
 800918e:	6893      	ldr	r3, [r2, #8]
 8009190:	3b01      	subs	r3, #1
 8009192:	2b00      	cmp	r3, #0
 8009194:	b410      	push	{r4}
 8009196:	6093      	str	r3, [r2, #8]
 8009198:	da08      	bge.n	80091ac <__sfputc_r+0x1e>
 800919a:	6994      	ldr	r4, [r2, #24]
 800919c:	42a3      	cmp	r3, r4
 800919e:	db01      	blt.n	80091a4 <__sfputc_r+0x16>
 80091a0:	290a      	cmp	r1, #10
 80091a2:	d103      	bne.n	80091ac <__sfputc_r+0x1e>
 80091a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091a8:	f000 b934 	b.w	8009414 <__swbuf_r>
 80091ac:	6813      	ldr	r3, [r2, #0]
 80091ae:	1c58      	adds	r0, r3, #1
 80091b0:	6010      	str	r0, [r2, #0]
 80091b2:	7019      	strb	r1, [r3, #0]
 80091b4:	4608      	mov	r0, r1
 80091b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <__sfputs_r>:
 80091bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091be:	4606      	mov	r6, r0
 80091c0:	460f      	mov	r7, r1
 80091c2:	4614      	mov	r4, r2
 80091c4:	18d5      	adds	r5, r2, r3
 80091c6:	42ac      	cmp	r4, r5
 80091c8:	d101      	bne.n	80091ce <__sfputs_r+0x12>
 80091ca:	2000      	movs	r0, #0
 80091cc:	e007      	b.n	80091de <__sfputs_r+0x22>
 80091ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d2:	463a      	mov	r2, r7
 80091d4:	4630      	mov	r0, r6
 80091d6:	f7ff ffda 	bl	800918e <__sfputc_r>
 80091da:	1c43      	adds	r3, r0, #1
 80091dc:	d1f3      	bne.n	80091c6 <__sfputs_r+0xa>
 80091de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080091e0 <_vfiprintf_r>:
 80091e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e4:	460d      	mov	r5, r1
 80091e6:	b09d      	sub	sp, #116	; 0x74
 80091e8:	4614      	mov	r4, r2
 80091ea:	4698      	mov	r8, r3
 80091ec:	4606      	mov	r6, r0
 80091ee:	b118      	cbz	r0, 80091f8 <_vfiprintf_r+0x18>
 80091f0:	6a03      	ldr	r3, [r0, #32]
 80091f2:	b90b      	cbnz	r3, 80091f8 <_vfiprintf_r+0x18>
 80091f4:	f7fe f8c6 	bl	8007384 <__sinit>
 80091f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091fa:	07d9      	lsls	r1, r3, #31
 80091fc:	d405      	bmi.n	800920a <_vfiprintf_r+0x2a>
 80091fe:	89ab      	ldrh	r3, [r5, #12]
 8009200:	059a      	lsls	r2, r3, #22
 8009202:	d402      	bmi.n	800920a <_vfiprintf_r+0x2a>
 8009204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009206:	f7fe f9e6 	bl	80075d6 <__retarget_lock_acquire_recursive>
 800920a:	89ab      	ldrh	r3, [r5, #12]
 800920c:	071b      	lsls	r3, r3, #28
 800920e:	d501      	bpl.n	8009214 <_vfiprintf_r+0x34>
 8009210:	692b      	ldr	r3, [r5, #16]
 8009212:	b99b      	cbnz	r3, 800923c <_vfiprintf_r+0x5c>
 8009214:	4629      	mov	r1, r5
 8009216:	4630      	mov	r0, r6
 8009218:	f000 f93a 	bl	8009490 <__swsetup_r>
 800921c:	b170      	cbz	r0, 800923c <_vfiprintf_r+0x5c>
 800921e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009220:	07dc      	lsls	r4, r3, #31
 8009222:	d504      	bpl.n	800922e <_vfiprintf_r+0x4e>
 8009224:	f04f 30ff 	mov.w	r0, #4294967295
 8009228:	b01d      	add	sp, #116	; 0x74
 800922a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800922e:	89ab      	ldrh	r3, [r5, #12]
 8009230:	0598      	lsls	r0, r3, #22
 8009232:	d4f7      	bmi.n	8009224 <_vfiprintf_r+0x44>
 8009234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009236:	f7fe f9cf 	bl	80075d8 <__retarget_lock_release_recursive>
 800923a:	e7f3      	b.n	8009224 <_vfiprintf_r+0x44>
 800923c:	2300      	movs	r3, #0
 800923e:	9309      	str	r3, [sp, #36]	; 0x24
 8009240:	2320      	movs	r3, #32
 8009242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009246:	f8cd 800c 	str.w	r8, [sp, #12]
 800924a:	2330      	movs	r3, #48	; 0x30
 800924c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009400 <_vfiprintf_r+0x220>
 8009250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009254:	f04f 0901 	mov.w	r9, #1
 8009258:	4623      	mov	r3, r4
 800925a:	469a      	mov	sl, r3
 800925c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009260:	b10a      	cbz	r2, 8009266 <_vfiprintf_r+0x86>
 8009262:	2a25      	cmp	r2, #37	; 0x25
 8009264:	d1f9      	bne.n	800925a <_vfiprintf_r+0x7a>
 8009266:	ebba 0b04 	subs.w	fp, sl, r4
 800926a:	d00b      	beq.n	8009284 <_vfiprintf_r+0xa4>
 800926c:	465b      	mov	r3, fp
 800926e:	4622      	mov	r2, r4
 8009270:	4629      	mov	r1, r5
 8009272:	4630      	mov	r0, r6
 8009274:	f7ff ffa2 	bl	80091bc <__sfputs_r>
 8009278:	3001      	adds	r0, #1
 800927a:	f000 80a9 	beq.w	80093d0 <_vfiprintf_r+0x1f0>
 800927e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009280:	445a      	add	r2, fp
 8009282:	9209      	str	r2, [sp, #36]	; 0x24
 8009284:	f89a 3000 	ldrb.w	r3, [sl]
 8009288:	2b00      	cmp	r3, #0
 800928a:	f000 80a1 	beq.w	80093d0 <_vfiprintf_r+0x1f0>
 800928e:	2300      	movs	r3, #0
 8009290:	f04f 32ff 	mov.w	r2, #4294967295
 8009294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009298:	f10a 0a01 	add.w	sl, sl, #1
 800929c:	9304      	str	r3, [sp, #16]
 800929e:	9307      	str	r3, [sp, #28]
 80092a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092a4:	931a      	str	r3, [sp, #104]	; 0x68
 80092a6:	4654      	mov	r4, sl
 80092a8:	2205      	movs	r2, #5
 80092aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ae:	4854      	ldr	r0, [pc, #336]	; (8009400 <_vfiprintf_r+0x220>)
 80092b0:	f7f6 ffb6 	bl	8000220 <memchr>
 80092b4:	9a04      	ldr	r2, [sp, #16]
 80092b6:	b9d8      	cbnz	r0, 80092f0 <_vfiprintf_r+0x110>
 80092b8:	06d1      	lsls	r1, r2, #27
 80092ba:	bf44      	itt	mi
 80092bc:	2320      	movmi	r3, #32
 80092be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092c2:	0713      	lsls	r3, r2, #28
 80092c4:	bf44      	itt	mi
 80092c6:	232b      	movmi	r3, #43	; 0x2b
 80092c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092cc:	f89a 3000 	ldrb.w	r3, [sl]
 80092d0:	2b2a      	cmp	r3, #42	; 0x2a
 80092d2:	d015      	beq.n	8009300 <_vfiprintf_r+0x120>
 80092d4:	9a07      	ldr	r2, [sp, #28]
 80092d6:	4654      	mov	r4, sl
 80092d8:	2000      	movs	r0, #0
 80092da:	f04f 0c0a 	mov.w	ip, #10
 80092de:	4621      	mov	r1, r4
 80092e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092e4:	3b30      	subs	r3, #48	; 0x30
 80092e6:	2b09      	cmp	r3, #9
 80092e8:	d94d      	bls.n	8009386 <_vfiprintf_r+0x1a6>
 80092ea:	b1b0      	cbz	r0, 800931a <_vfiprintf_r+0x13a>
 80092ec:	9207      	str	r2, [sp, #28]
 80092ee:	e014      	b.n	800931a <_vfiprintf_r+0x13a>
 80092f0:	eba0 0308 	sub.w	r3, r0, r8
 80092f4:	fa09 f303 	lsl.w	r3, r9, r3
 80092f8:	4313      	orrs	r3, r2
 80092fa:	9304      	str	r3, [sp, #16]
 80092fc:	46a2      	mov	sl, r4
 80092fe:	e7d2      	b.n	80092a6 <_vfiprintf_r+0xc6>
 8009300:	9b03      	ldr	r3, [sp, #12]
 8009302:	1d19      	adds	r1, r3, #4
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	9103      	str	r1, [sp, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	bfbb      	ittet	lt
 800930c:	425b      	neglt	r3, r3
 800930e:	f042 0202 	orrlt.w	r2, r2, #2
 8009312:	9307      	strge	r3, [sp, #28]
 8009314:	9307      	strlt	r3, [sp, #28]
 8009316:	bfb8      	it	lt
 8009318:	9204      	strlt	r2, [sp, #16]
 800931a:	7823      	ldrb	r3, [r4, #0]
 800931c:	2b2e      	cmp	r3, #46	; 0x2e
 800931e:	d10c      	bne.n	800933a <_vfiprintf_r+0x15a>
 8009320:	7863      	ldrb	r3, [r4, #1]
 8009322:	2b2a      	cmp	r3, #42	; 0x2a
 8009324:	d134      	bne.n	8009390 <_vfiprintf_r+0x1b0>
 8009326:	9b03      	ldr	r3, [sp, #12]
 8009328:	1d1a      	adds	r2, r3, #4
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	9203      	str	r2, [sp, #12]
 800932e:	2b00      	cmp	r3, #0
 8009330:	bfb8      	it	lt
 8009332:	f04f 33ff 	movlt.w	r3, #4294967295
 8009336:	3402      	adds	r4, #2
 8009338:	9305      	str	r3, [sp, #20]
 800933a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009410 <_vfiprintf_r+0x230>
 800933e:	7821      	ldrb	r1, [r4, #0]
 8009340:	2203      	movs	r2, #3
 8009342:	4650      	mov	r0, sl
 8009344:	f7f6 ff6c 	bl	8000220 <memchr>
 8009348:	b138      	cbz	r0, 800935a <_vfiprintf_r+0x17a>
 800934a:	9b04      	ldr	r3, [sp, #16]
 800934c:	eba0 000a 	sub.w	r0, r0, sl
 8009350:	2240      	movs	r2, #64	; 0x40
 8009352:	4082      	lsls	r2, r0
 8009354:	4313      	orrs	r3, r2
 8009356:	3401      	adds	r4, #1
 8009358:	9304      	str	r3, [sp, #16]
 800935a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800935e:	4829      	ldr	r0, [pc, #164]	; (8009404 <_vfiprintf_r+0x224>)
 8009360:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009364:	2206      	movs	r2, #6
 8009366:	f7f6 ff5b 	bl	8000220 <memchr>
 800936a:	2800      	cmp	r0, #0
 800936c:	d03f      	beq.n	80093ee <_vfiprintf_r+0x20e>
 800936e:	4b26      	ldr	r3, [pc, #152]	; (8009408 <_vfiprintf_r+0x228>)
 8009370:	bb1b      	cbnz	r3, 80093ba <_vfiprintf_r+0x1da>
 8009372:	9b03      	ldr	r3, [sp, #12]
 8009374:	3307      	adds	r3, #7
 8009376:	f023 0307 	bic.w	r3, r3, #7
 800937a:	3308      	adds	r3, #8
 800937c:	9303      	str	r3, [sp, #12]
 800937e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009380:	443b      	add	r3, r7
 8009382:	9309      	str	r3, [sp, #36]	; 0x24
 8009384:	e768      	b.n	8009258 <_vfiprintf_r+0x78>
 8009386:	fb0c 3202 	mla	r2, ip, r2, r3
 800938a:	460c      	mov	r4, r1
 800938c:	2001      	movs	r0, #1
 800938e:	e7a6      	b.n	80092de <_vfiprintf_r+0xfe>
 8009390:	2300      	movs	r3, #0
 8009392:	3401      	adds	r4, #1
 8009394:	9305      	str	r3, [sp, #20]
 8009396:	4619      	mov	r1, r3
 8009398:	f04f 0c0a 	mov.w	ip, #10
 800939c:	4620      	mov	r0, r4
 800939e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093a2:	3a30      	subs	r2, #48	; 0x30
 80093a4:	2a09      	cmp	r2, #9
 80093a6:	d903      	bls.n	80093b0 <_vfiprintf_r+0x1d0>
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d0c6      	beq.n	800933a <_vfiprintf_r+0x15a>
 80093ac:	9105      	str	r1, [sp, #20]
 80093ae:	e7c4      	b.n	800933a <_vfiprintf_r+0x15a>
 80093b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80093b4:	4604      	mov	r4, r0
 80093b6:	2301      	movs	r3, #1
 80093b8:	e7f0      	b.n	800939c <_vfiprintf_r+0x1bc>
 80093ba:	ab03      	add	r3, sp, #12
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	462a      	mov	r2, r5
 80093c0:	4b12      	ldr	r3, [pc, #72]	; (800940c <_vfiprintf_r+0x22c>)
 80093c2:	a904      	add	r1, sp, #16
 80093c4:	4630      	mov	r0, r6
 80093c6:	f7fd fb8b 	bl	8006ae0 <_printf_float>
 80093ca:	4607      	mov	r7, r0
 80093cc:	1c78      	adds	r0, r7, #1
 80093ce:	d1d6      	bne.n	800937e <_vfiprintf_r+0x19e>
 80093d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093d2:	07d9      	lsls	r1, r3, #31
 80093d4:	d405      	bmi.n	80093e2 <_vfiprintf_r+0x202>
 80093d6:	89ab      	ldrh	r3, [r5, #12]
 80093d8:	059a      	lsls	r2, r3, #22
 80093da:	d402      	bmi.n	80093e2 <_vfiprintf_r+0x202>
 80093dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093de:	f7fe f8fb 	bl	80075d8 <__retarget_lock_release_recursive>
 80093e2:	89ab      	ldrh	r3, [r5, #12]
 80093e4:	065b      	lsls	r3, r3, #25
 80093e6:	f53f af1d 	bmi.w	8009224 <_vfiprintf_r+0x44>
 80093ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093ec:	e71c      	b.n	8009228 <_vfiprintf_r+0x48>
 80093ee:	ab03      	add	r3, sp, #12
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	462a      	mov	r2, r5
 80093f4:	4b05      	ldr	r3, [pc, #20]	; (800940c <_vfiprintf_r+0x22c>)
 80093f6:	a904      	add	r1, sp, #16
 80093f8:	4630      	mov	r0, r6
 80093fa:	f7fd fe15 	bl	8007028 <_printf_i>
 80093fe:	e7e4      	b.n	80093ca <_vfiprintf_r+0x1ea>
 8009400:	08009af4 	.word	0x08009af4
 8009404:	08009afe 	.word	0x08009afe
 8009408:	08006ae1 	.word	0x08006ae1
 800940c:	080091bd 	.word	0x080091bd
 8009410:	08009afa 	.word	0x08009afa

08009414 <__swbuf_r>:
 8009414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009416:	460e      	mov	r6, r1
 8009418:	4614      	mov	r4, r2
 800941a:	4605      	mov	r5, r0
 800941c:	b118      	cbz	r0, 8009426 <__swbuf_r+0x12>
 800941e:	6a03      	ldr	r3, [r0, #32]
 8009420:	b90b      	cbnz	r3, 8009426 <__swbuf_r+0x12>
 8009422:	f7fd ffaf 	bl	8007384 <__sinit>
 8009426:	69a3      	ldr	r3, [r4, #24]
 8009428:	60a3      	str	r3, [r4, #8]
 800942a:	89a3      	ldrh	r3, [r4, #12]
 800942c:	071a      	lsls	r2, r3, #28
 800942e:	d525      	bpl.n	800947c <__swbuf_r+0x68>
 8009430:	6923      	ldr	r3, [r4, #16]
 8009432:	b31b      	cbz	r3, 800947c <__swbuf_r+0x68>
 8009434:	6823      	ldr	r3, [r4, #0]
 8009436:	6922      	ldr	r2, [r4, #16]
 8009438:	1a98      	subs	r0, r3, r2
 800943a:	6963      	ldr	r3, [r4, #20]
 800943c:	b2f6      	uxtb	r6, r6
 800943e:	4283      	cmp	r3, r0
 8009440:	4637      	mov	r7, r6
 8009442:	dc04      	bgt.n	800944e <__swbuf_r+0x3a>
 8009444:	4621      	mov	r1, r4
 8009446:	4628      	mov	r0, r5
 8009448:	f7ff fd9e 	bl	8008f88 <_fflush_r>
 800944c:	b9e0      	cbnz	r0, 8009488 <__swbuf_r+0x74>
 800944e:	68a3      	ldr	r3, [r4, #8]
 8009450:	3b01      	subs	r3, #1
 8009452:	60a3      	str	r3, [r4, #8]
 8009454:	6823      	ldr	r3, [r4, #0]
 8009456:	1c5a      	adds	r2, r3, #1
 8009458:	6022      	str	r2, [r4, #0]
 800945a:	701e      	strb	r6, [r3, #0]
 800945c:	6962      	ldr	r2, [r4, #20]
 800945e:	1c43      	adds	r3, r0, #1
 8009460:	429a      	cmp	r2, r3
 8009462:	d004      	beq.n	800946e <__swbuf_r+0x5a>
 8009464:	89a3      	ldrh	r3, [r4, #12]
 8009466:	07db      	lsls	r3, r3, #31
 8009468:	d506      	bpl.n	8009478 <__swbuf_r+0x64>
 800946a:	2e0a      	cmp	r6, #10
 800946c:	d104      	bne.n	8009478 <__swbuf_r+0x64>
 800946e:	4621      	mov	r1, r4
 8009470:	4628      	mov	r0, r5
 8009472:	f7ff fd89 	bl	8008f88 <_fflush_r>
 8009476:	b938      	cbnz	r0, 8009488 <__swbuf_r+0x74>
 8009478:	4638      	mov	r0, r7
 800947a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800947c:	4621      	mov	r1, r4
 800947e:	4628      	mov	r0, r5
 8009480:	f000 f806 	bl	8009490 <__swsetup_r>
 8009484:	2800      	cmp	r0, #0
 8009486:	d0d5      	beq.n	8009434 <__swbuf_r+0x20>
 8009488:	f04f 37ff 	mov.w	r7, #4294967295
 800948c:	e7f4      	b.n	8009478 <__swbuf_r+0x64>
	...

08009490 <__swsetup_r>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	4b2a      	ldr	r3, [pc, #168]	; (800953c <__swsetup_r+0xac>)
 8009494:	4605      	mov	r5, r0
 8009496:	6818      	ldr	r0, [r3, #0]
 8009498:	460c      	mov	r4, r1
 800949a:	b118      	cbz	r0, 80094a4 <__swsetup_r+0x14>
 800949c:	6a03      	ldr	r3, [r0, #32]
 800949e:	b90b      	cbnz	r3, 80094a4 <__swsetup_r+0x14>
 80094a0:	f7fd ff70 	bl	8007384 <__sinit>
 80094a4:	89a3      	ldrh	r3, [r4, #12]
 80094a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094aa:	0718      	lsls	r0, r3, #28
 80094ac:	d422      	bmi.n	80094f4 <__swsetup_r+0x64>
 80094ae:	06d9      	lsls	r1, r3, #27
 80094b0:	d407      	bmi.n	80094c2 <__swsetup_r+0x32>
 80094b2:	2309      	movs	r3, #9
 80094b4:	602b      	str	r3, [r5, #0]
 80094b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80094ba:	81a3      	strh	r3, [r4, #12]
 80094bc:	f04f 30ff 	mov.w	r0, #4294967295
 80094c0:	e034      	b.n	800952c <__swsetup_r+0x9c>
 80094c2:	0758      	lsls	r0, r3, #29
 80094c4:	d512      	bpl.n	80094ec <__swsetup_r+0x5c>
 80094c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094c8:	b141      	cbz	r1, 80094dc <__swsetup_r+0x4c>
 80094ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094ce:	4299      	cmp	r1, r3
 80094d0:	d002      	beq.n	80094d8 <__swsetup_r+0x48>
 80094d2:	4628      	mov	r0, r5
 80094d4:	f7fe fefe 	bl	80082d4 <_free_r>
 80094d8:	2300      	movs	r3, #0
 80094da:	6363      	str	r3, [r4, #52]	; 0x34
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094e2:	81a3      	strh	r3, [r4, #12]
 80094e4:	2300      	movs	r3, #0
 80094e6:	6063      	str	r3, [r4, #4]
 80094e8:	6923      	ldr	r3, [r4, #16]
 80094ea:	6023      	str	r3, [r4, #0]
 80094ec:	89a3      	ldrh	r3, [r4, #12]
 80094ee:	f043 0308 	orr.w	r3, r3, #8
 80094f2:	81a3      	strh	r3, [r4, #12]
 80094f4:	6923      	ldr	r3, [r4, #16]
 80094f6:	b94b      	cbnz	r3, 800950c <__swsetup_r+0x7c>
 80094f8:	89a3      	ldrh	r3, [r4, #12]
 80094fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009502:	d003      	beq.n	800950c <__swsetup_r+0x7c>
 8009504:	4621      	mov	r1, r4
 8009506:	4628      	mov	r0, r5
 8009508:	f000 f884 	bl	8009614 <__smakebuf_r>
 800950c:	89a0      	ldrh	r0, [r4, #12]
 800950e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009512:	f010 0301 	ands.w	r3, r0, #1
 8009516:	d00a      	beq.n	800952e <__swsetup_r+0x9e>
 8009518:	2300      	movs	r3, #0
 800951a:	60a3      	str	r3, [r4, #8]
 800951c:	6963      	ldr	r3, [r4, #20]
 800951e:	425b      	negs	r3, r3
 8009520:	61a3      	str	r3, [r4, #24]
 8009522:	6923      	ldr	r3, [r4, #16]
 8009524:	b943      	cbnz	r3, 8009538 <__swsetup_r+0xa8>
 8009526:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800952a:	d1c4      	bne.n	80094b6 <__swsetup_r+0x26>
 800952c:	bd38      	pop	{r3, r4, r5, pc}
 800952e:	0781      	lsls	r1, r0, #30
 8009530:	bf58      	it	pl
 8009532:	6963      	ldrpl	r3, [r4, #20]
 8009534:	60a3      	str	r3, [r4, #8]
 8009536:	e7f4      	b.n	8009522 <__swsetup_r+0x92>
 8009538:	2000      	movs	r0, #0
 800953a:	e7f7      	b.n	800952c <__swsetup_r+0x9c>
 800953c:	2000022c 	.word	0x2000022c

08009540 <_raise_r>:
 8009540:	291f      	cmp	r1, #31
 8009542:	b538      	push	{r3, r4, r5, lr}
 8009544:	4604      	mov	r4, r0
 8009546:	460d      	mov	r5, r1
 8009548:	d904      	bls.n	8009554 <_raise_r+0x14>
 800954a:	2316      	movs	r3, #22
 800954c:	6003      	str	r3, [r0, #0]
 800954e:	f04f 30ff 	mov.w	r0, #4294967295
 8009552:	bd38      	pop	{r3, r4, r5, pc}
 8009554:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009556:	b112      	cbz	r2, 800955e <_raise_r+0x1e>
 8009558:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800955c:	b94b      	cbnz	r3, 8009572 <_raise_r+0x32>
 800955e:	4620      	mov	r0, r4
 8009560:	f000 f830 	bl	80095c4 <_getpid_r>
 8009564:	462a      	mov	r2, r5
 8009566:	4601      	mov	r1, r0
 8009568:	4620      	mov	r0, r4
 800956a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800956e:	f000 b817 	b.w	80095a0 <_kill_r>
 8009572:	2b01      	cmp	r3, #1
 8009574:	d00a      	beq.n	800958c <_raise_r+0x4c>
 8009576:	1c59      	adds	r1, r3, #1
 8009578:	d103      	bne.n	8009582 <_raise_r+0x42>
 800957a:	2316      	movs	r3, #22
 800957c:	6003      	str	r3, [r0, #0]
 800957e:	2001      	movs	r0, #1
 8009580:	e7e7      	b.n	8009552 <_raise_r+0x12>
 8009582:	2400      	movs	r4, #0
 8009584:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009588:	4628      	mov	r0, r5
 800958a:	4798      	blx	r3
 800958c:	2000      	movs	r0, #0
 800958e:	e7e0      	b.n	8009552 <_raise_r+0x12>

08009590 <raise>:
 8009590:	4b02      	ldr	r3, [pc, #8]	; (800959c <raise+0xc>)
 8009592:	4601      	mov	r1, r0
 8009594:	6818      	ldr	r0, [r3, #0]
 8009596:	f7ff bfd3 	b.w	8009540 <_raise_r>
 800959a:	bf00      	nop
 800959c:	2000022c 	.word	0x2000022c

080095a0 <_kill_r>:
 80095a0:	b538      	push	{r3, r4, r5, lr}
 80095a2:	4d07      	ldr	r5, [pc, #28]	; (80095c0 <_kill_r+0x20>)
 80095a4:	2300      	movs	r3, #0
 80095a6:	4604      	mov	r4, r0
 80095a8:	4608      	mov	r0, r1
 80095aa:	4611      	mov	r1, r2
 80095ac:	602b      	str	r3, [r5, #0]
 80095ae:	f7f8 fe55 	bl	800225c <_kill>
 80095b2:	1c43      	adds	r3, r0, #1
 80095b4:	d102      	bne.n	80095bc <_kill_r+0x1c>
 80095b6:	682b      	ldr	r3, [r5, #0]
 80095b8:	b103      	cbz	r3, 80095bc <_kill_r+0x1c>
 80095ba:	6023      	str	r3, [r4, #0]
 80095bc:	bd38      	pop	{r3, r4, r5, pc}
 80095be:	bf00      	nop
 80095c0:	20000764 	.word	0x20000764

080095c4 <_getpid_r>:
 80095c4:	f7f8 be42 	b.w	800224c <_getpid>

080095c8 <__swhatbuf_r>:
 80095c8:	b570      	push	{r4, r5, r6, lr}
 80095ca:	460c      	mov	r4, r1
 80095cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095d0:	2900      	cmp	r1, #0
 80095d2:	b096      	sub	sp, #88	; 0x58
 80095d4:	4615      	mov	r5, r2
 80095d6:	461e      	mov	r6, r3
 80095d8:	da0d      	bge.n	80095f6 <__swhatbuf_r+0x2e>
 80095da:	89a3      	ldrh	r3, [r4, #12]
 80095dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80095e0:	f04f 0100 	mov.w	r1, #0
 80095e4:	bf0c      	ite	eq
 80095e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80095ea:	2340      	movne	r3, #64	; 0x40
 80095ec:	2000      	movs	r0, #0
 80095ee:	6031      	str	r1, [r6, #0]
 80095f0:	602b      	str	r3, [r5, #0]
 80095f2:	b016      	add	sp, #88	; 0x58
 80095f4:	bd70      	pop	{r4, r5, r6, pc}
 80095f6:	466a      	mov	r2, sp
 80095f8:	f000 f848 	bl	800968c <_fstat_r>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	dbec      	blt.n	80095da <__swhatbuf_r+0x12>
 8009600:	9901      	ldr	r1, [sp, #4]
 8009602:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009606:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800960a:	4259      	negs	r1, r3
 800960c:	4159      	adcs	r1, r3
 800960e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009612:	e7eb      	b.n	80095ec <__swhatbuf_r+0x24>

08009614 <__smakebuf_r>:
 8009614:	898b      	ldrh	r3, [r1, #12]
 8009616:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009618:	079d      	lsls	r5, r3, #30
 800961a:	4606      	mov	r6, r0
 800961c:	460c      	mov	r4, r1
 800961e:	d507      	bpl.n	8009630 <__smakebuf_r+0x1c>
 8009620:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009624:	6023      	str	r3, [r4, #0]
 8009626:	6123      	str	r3, [r4, #16]
 8009628:	2301      	movs	r3, #1
 800962a:	6163      	str	r3, [r4, #20]
 800962c:	b002      	add	sp, #8
 800962e:	bd70      	pop	{r4, r5, r6, pc}
 8009630:	ab01      	add	r3, sp, #4
 8009632:	466a      	mov	r2, sp
 8009634:	f7ff ffc8 	bl	80095c8 <__swhatbuf_r>
 8009638:	9900      	ldr	r1, [sp, #0]
 800963a:	4605      	mov	r5, r0
 800963c:	4630      	mov	r0, r6
 800963e:	f7fe febd 	bl	80083bc <_malloc_r>
 8009642:	b948      	cbnz	r0, 8009658 <__smakebuf_r+0x44>
 8009644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009648:	059a      	lsls	r2, r3, #22
 800964a:	d4ef      	bmi.n	800962c <__smakebuf_r+0x18>
 800964c:	f023 0303 	bic.w	r3, r3, #3
 8009650:	f043 0302 	orr.w	r3, r3, #2
 8009654:	81a3      	strh	r3, [r4, #12]
 8009656:	e7e3      	b.n	8009620 <__smakebuf_r+0xc>
 8009658:	89a3      	ldrh	r3, [r4, #12]
 800965a:	6020      	str	r0, [r4, #0]
 800965c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009660:	81a3      	strh	r3, [r4, #12]
 8009662:	9b00      	ldr	r3, [sp, #0]
 8009664:	6163      	str	r3, [r4, #20]
 8009666:	9b01      	ldr	r3, [sp, #4]
 8009668:	6120      	str	r0, [r4, #16]
 800966a:	b15b      	cbz	r3, 8009684 <__smakebuf_r+0x70>
 800966c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009670:	4630      	mov	r0, r6
 8009672:	f000 f81d 	bl	80096b0 <_isatty_r>
 8009676:	b128      	cbz	r0, 8009684 <__smakebuf_r+0x70>
 8009678:	89a3      	ldrh	r3, [r4, #12]
 800967a:	f023 0303 	bic.w	r3, r3, #3
 800967e:	f043 0301 	orr.w	r3, r3, #1
 8009682:	81a3      	strh	r3, [r4, #12]
 8009684:	89a3      	ldrh	r3, [r4, #12]
 8009686:	431d      	orrs	r5, r3
 8009688:	81a5      	strh	r5, [r4, #12]
 800968a:	e7cf      	b.n	800962c <__smakebuf_r+0x18>

0800968c <_fstat_r>:
 800968c:	b538      	push	{r3, r4, r5, lr}
 800968e:	4d07      	ldr	r5, [pc, #28]	; (80096ac <_fstat_r+0x20>)
 8009690:	2300      	movs	r3, #0
 8009692:	4604      	mov	r4, r0
 8009694:	4608      	mov	r0, r1
 8009696:	4611      	mov	r1, r2
 8009698:	602b      	str	r3, [r5, #0]
 800969a:	f7f8 fe3e 	bl	800231a <_fstat>
 800969e:	1c43      	adds	r3, r0, #1
 80096a0:	d102      	bne.n	80096a8 <_fstat_r+0x1c>
 80096a2:	682b      	ldr	r3, [r5, #0]
 80096a4:	b103      	cbz	r3, 80096a8 <_fstat_r+0x1c>
 80096a6:	6023      	str	r3, [r4, #0]
 80096a8:	bd38      	pop	{r3, r4, r5, pc}
 80096aa:	bf00      	nop
 80096ac:	20000764 	.word	0x20000764

080096b0 <_isatty_r>:
 80096b0:	b538      	push	{r3, r4, r5, lr}
 80096b2:	4d06      	ldr	r5, [pc, #24]	; (80096cc <_isatty_r+0x1c>)
 80096b4:	2300      	movs	r3, #0
 80096b6:	4604      	mov	r4, r0
 80096b8:	4608      	mov	r0, r1
 80096ba:	602b      	str	r3, [r5, #0]
 80096bc:	f7f8 fe3d 	bl	800233a <_isatty>
 80096c0:	1c43      	adds	r3, r0, #1
 80096c2:	d102      	bne.n	80096ca <_isatty_r+0x1a>
 80096c4:	682b      	ldr	r3, [r5, #0]
 80096c6:	b103      	cbz	r3, 80096ca <_isatty_r+0x1a>
 80096c8:	6023      	str	r3, [r4, #0]
 80096ca:	bd38      	pop	{r3, r4, r5, pc}
 80096cc:	20000764 	.word	0x20000764

080096d0 <_init>:
 80096d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d2:	bf00      	nop
 80096d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096d6:	bc08      	pop	{r3}
 80096d8:	469e      	mov	lr, r3
 80096da:	4770      	bx	lr

080096dc <_fini>:
 80096dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096de:	bf00      	nop
 80096e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096e2:	bc08      	pop	{r3}
 80096e4:	469e      	mov	lr, r3
 80096e6:	4770      	bx	lr
