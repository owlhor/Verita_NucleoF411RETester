
F411_Verita_Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008890  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08008a30  08008a30  00018a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e9c  08008e9c  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  08008e9c  08008e9c  00018e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ea4  08008ea4  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ea4  08008ea4  00018ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ea8  08008ea8  00018ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08008eac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000234  080090e0  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  080090e0  0002053c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105a3  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002452  00000000  00000000  00030807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00032c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00033af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a03  00000000  00000000  000348c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011225  00000000  00000000  0004d2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b9a0  00000000  00000000  0005e4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9e90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f30  00000000  00000000  000f9ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000234 	.word	0x20000234
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a18 	.word	0x08008a18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000238 	.word	0x20000238
 80001dc:	08008a18 	.word	0x08008a18

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <Rx_Verita_engine>:
  */


static enum {init, unpack, decode}verita_engine;

VRTPTC_StatusTypedef Rx_Verita_engine(uint8_t *Rxbffr, Verita_Register_Bank *regisk){ //uint32_t *regisk
 8000f5c:	b490      	push	{r4, r7}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
	 * @param Rxbffr - input uart buffer
	 * @param regisk - register need the result be stored
	 */
	static uint8_t logger[12] = {0}; /// log Rxbffr without head packet
	static uint8_t index = 0; // use in case the start of verita is not at Rxbffr[0]
	uint8_t chksum[2]  = {0};
 8000f66:	2300      	movs	r3, #0
 8000f68:	81bb      	strh	r3, [r7, #12]
		uint8_t  U8[4];
		uint32_t U32;
	}logu;


	switch (verita_engine){
 8000f6a:	4b85      	ldr	r3, [pc, #532]	; (8001180 <Rx_Verita_engine+0x224>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d023      	beq.n	8000fba <Rx_Verita_engine+0x5e>
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	f000 8082 	beq.w	800107c <Rx_Verita_engine+0x120>
	default:
	case init:

		if(Rxbffr[0 + index] == 0x56){ //flag_vrt_en ||
 8000f78:	4b82      	ldr	r3, [pc, #520]	; (8001184 <Rx_Verita_engine+0x228>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b56      	cmp	r3, #86	; 0x56
 8000f86:	d103      	bne.n	8000f90 <Rx_Verita_engine+0x34>
			verita_engine = unpack;
 8000f88:	4b7d      	ldr	r3, [pc, #500]	; (8001180 <Rx_Verita_engine+0x224>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
		}else{
		//// go to next index if head not found
		index += Framesize_VRT;
		index %= RxbufferSize_VRT; // overflow
		}
		break; //// init
 8000f8e:	e0f1      	b.n	8001174 <Rx_Verita_engine+0x218>
		index += Framesize_VRT;
 8000f90:	4b7c      	ldr	r3, [pc, #496]	; (8001184 <Rx_Verita_engine+0x228>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	3309      	adds	r3, #9
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b7a      	ldr	r3, [pc, #488]	; (8001184 <Rx_Verita_engine+0x228>)
 8000f9a:	701a      	strb	r2, [r3, #0]
		index %= RxbufferSize_VRT; // overflow
 8000f9c:	4b79      	ldr	r3, [pc, #484]	; (8001184 <Rx_Verita_engine+0x228>)
 8000f9e:	781a      	ldrb	r2, [r3, #0]
 8000fa0:	4b79      	ldr	r3, [pc, #484]	; (8001188 <Rx_Verita_engine+0x22c>)
 8000fa2:	fba3 1302 	umull	r1, r3, r3, r2
 8000fa6:	08d9      	lsrs	r1, r3, #3
 8000fa8:	460b      	mov	r3, r1
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	440b      	add	r3, r1
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b73      	ldr	r3, [pc, #460]	; (8001184 <Rx_Verita_engine+0x228>)
 8000fb6:	701a      	strb	r2, [r3, #0]
		break; //// init
 8000fb8:	e0dc      	b.n	8001174 <Rx_Verita_engine+0x218>


	case unpack:

		//// [] Header Check ------------------------------------------------------------------
		if(Rxbffr[index + 0] == 0x56 && Rxbffr[index + 1] == 0x52 && Rxbffr[index + 2] == 0x54){
 8000fba:	4b72      	ldr	r3, [pc, #456]	; (8001184 <Rx_Verita_engine+0x228>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b56      	cmp	r3, #86	; 0x56
 8000fc8:	d13f      	bne.n	800104a <Rx_Verita_engine+0xee>
 8000fca:	4b6e      	ldr	r3, [pc, #440]	; (8001184 <Rx_Verita_engine+0x228>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b52      	cmp	r3, #82	; 0x52
 8000fd8:	d137      	bne.n	800104a <Rx_Verita_engine+0xee>
 8000fda:	4b6a      	ldr	r3, [pc, #424]	; (8001184 <Rx_Verita_engine+0x228>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	3302      	adds	r3, #2
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b54      	cmp	r3, #84	; 0x54
 8000fe8:	d12f      	bne.n	800104a <Rx_Verita_engine+0xee>

			//// log data first / prevent overwrite
			for(register int k = 0; k < 7; k++){
 8000fea:	2400      	movs	r4, #0
 8000fec:	e009      	b.n	8001002 <Rx_Verita_engine+0xa6>
				logger[k] = Rxbffr[index + k + 3];
 8000fee:	4b65      	ldr	r3, [pc, #404]	; (8001184 <Rx_Verita_engine+0x228>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4423      	add	r3, r4
 8000ff4:	3303      	adds	r3, #3
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	781a      	ldrb	r2, [r3, #0]
 8000ffc:	4b63      	ldr	r3, [pc, #396]	; (800118c <Rx_Verita_engine+0x230>)
 8000ffe:	551a      	strb	r2, [r3, r4]
			for(register int k = 0; k < 7; k++){
 8001000:	3401      	adds	r4, #1
 8001002:	2c06      	cmp	r4, #6
 8001004:	ddf3      	ble.n	8000fee <Rx_Verita_engine+0x92>
			}

			//// checksum here
			for(register int i = 0;i < 5; i++){
 8001006:	2400      	movs	r4, #0
 8001008:	e006      	b.n	8001018 <Rx_Verita_engine+0xbc>
				chksum[0] += logger[i];
 800100a:	7b3a      	ldrb	r2, [r7, #12]
 800100c:	4b5f      	ldr	r3, [pc, #380]	; (800118c <Rx_Verita_engine+0x230>)
 800100e:	5d1b      	ldrb	r3, [r3, r4]
 8001010:	4413      	add	r3, r2
 8001012:	b2db      	uxtb	r3, r3
 8001014:	733b      	strb	r3, [r7, #12]
			for(register int i = 0;i < 5; i++){
 8001016:	3401      	adds	r4, #1
 8001018:	2c04      	cmp	r4, #4
 800101a:	ddf6      	ble.n	800100a <Rx_Verita_engine+0xae>
			}
			chksum[1] = ~chksum[0];
 800101c:	7b3b      	ldrb	r3, [r7, #12]
 800101e:	43db      	mvns	r3, r3
 8001020:	b2db      	uxtb	r3, r3
 8001022:	737b      	strb	r3, [r7, #13]
			if( chksum[1] == logger[5]){
 8001024:	7b7a      	ldrb	r2, [r7, #13]
 8001026:	4b59      	ldr	r3, [pc, #356]	; (800118c <Rx_Verita_engine+0x230>)
 8001028:	795b      	ldrb	r3, [r3, #5]
 800102a:	429a      	cmp	r2, r3
 800102c:	d10b      	bne.n	8001046 <Rx_Verita_engine+0xea>
				// pass
				//// mark that this data is already read
				Rxbffr[0 + index] = 0xFF;
 800102e:	4b55      	ldr	r3, [pc, #340]	; (8001184 <Rx_Verita_engine+0x228>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	22ff      	movs	r2, #255	; 0xff
 800103a:	701a      	strb	r2, [r3, #0]
				verita_engine = decode;
 800103c:	4b50      	ldr	r3, [pc, #320]	; (8001180 <Rx_Verita_engine+0x224>)
 800103e:	2202      	movs	r2, #2
 8001040:	701a      	strb	r2, [r3, #0]
			if( chksum[1] == logger[5]){
 8001042:	bf00      	nop
//				Rxbffr[i] = 0x00;
//			}
			return VRT_UnEnc;

		}
		break; //// unpack
 8001044:	e096      	b.n	8001174 <Rx_Verita_engine+0x218>
				return VRT_DataLoss;}
 8001046:	2393      	movs	r3, #147	; 0x93
 8001048:	e095      	b.n	8001176 <Rx_Verita_engine+0x21a>
			verita_engine = init;
 800104a:	4b4d      	ldr	r3, [pc, #308]	; (8001180 <Rx_Verita_engine+0x224>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
			index += Framesize_VRT; // 9
 8001050:	4b4c      	ldr	r3, [pc, #304]	; (8001184 <Rx_Verita_engine+0x228>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	3309      	adds	r3, #9
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b4a      	ldr	r3, [pc, #296]	; (8001184 <Rx_Verita_engine+0x228>)
 800105a:	701a      	strb	r2, [r3, #0]
			index %= RxbufferSize_VRT; // overflow
 800105c:	4b49      	ldr	r3, [pc, #292]	; (8001184 <Rx_Verita_engine+0x228>)
 800105e:	781a      	ldrb	r2, [r3, #0]
 8001060:	4b49      	ldr	r3, [pc, #292]	; (8001188 <Rx_Verita_engine+0x22c>)
 8001062:	fba3 1302 	umull	r1, r3, r3, r2
 8001066:	08d9      	lsrs	r1, r3, #3
 8001068:	460b      	mov	r3, r1
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	440b      	add	r3, r1
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b43      	ldr	r3, [pc, #268]	; (8001184 <Rx_Verita_engine+0x228>)
 8001076:	701a      	strb	r2, [r3, #0]
			return VRT_UnEnc;
 8001078:	2394      	movs	r3, #148	; 0x94
 800107a:	e07c      	b.n	8001176 <Rx_Verita_engine+0x21a>

	case decode:
		verita_engine = init;
 800107c:	4b40      	ldr	r3, [pc, #256]	; (8001180 <Rx_Verita_engine+0x224>)
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
		index += Framesize_VRT;
 8001082:	4b40      	ldr	r3, [pc, #256]	; (8001184 <Rx_Verita_engine+0x228>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	3309      	adds	r3, #9
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b3e      	ldr	r3, [pc, #248]	; (8001184 <Rx_Verita_engine+0x228>)
 800108c:	701a      	strb	r2, [r3, #0]
		index %= RxbufferSize_VRT; // overflow
 800108e:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <Rx_Verita_engine+0x228>)
 8001090:	781a      	ldrb	r2, [r3, #0]
 8001092:	4b3d      	ldr	r3, [pc, #244]	; (8001188 <Rx_Verita_engine+0x22c>)
 8001094:	fba3 1302 	umull	r1, r3, r3, r2
 8001098:	08d9      	lsrs	r1, r3, #3
 800109a:	460b      	mov	r3, r1
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	440b      	add	r3, r1
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4b37      	ldr	r3, [pc, #220]	; (8001184 <Rx_Verita_engine+0x228>)
 80010a8:	701a      	strb	r2, [r3, #0]
		logu.U8[2] = logger[2];
		logu.U8[1] = logger[3];
		logu.U8[0] = logger[4];
#else
		//// Little endian
		logu.U8[0] = logger[1];
 80010aa:	4b38      	ldr	r3, [pc, #224]	; (800118c <Rx_Verita_engine+0x230>)
 80010ac:	785b      	ldrb	r3, [r3, #1]
 80010ae:	723b      	strb	r3, [r7, #8]
		logu.U8[1] = logger[2];
 80010b0:	4b36      	ldr	r3, [pc, #216]	; (800118c <Rx_Verita_engine+0x230>)
 80010b2:	789b      	ldrb	r3, [r3, #2]
 80010b4:	727b      	strb	r3, [r7, #9]
		logu.U8[2] = logger[3];
 80010b6:	4b35      	ldr	r3, [pc, #212]	; (800118c <Rx_Verita_engine+0x230>)
 80010b8:	78db      	ldrb	r3, [r3, #3]
 80010ba:	72bb      	strb	r3, [r7, #10]
		logu.U8[3] = logger[4];
 80010bc:	4b33      	ldr	r3, [pc, #204]	; (800118c <Rx_Verita_engine+0x230>)
 80010be:	791b      	ldrb	r3, [r3, #4]
 80010c0:	72fb      	strb	r3, [r7, #11]
#endif

		//// DATA phase, insert 32bit data into register box =================================
		if(logger[0] <= 0x20){
 80010c2:	4b32      	ldr	r3, [pc, #200]	; (800118c <Rx_Verita_engine+0x230>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b20      	cmp	r3, #32
 80010c8:	d808      	bhi.n	80010dc <Rx_Verita_engine+0x180>

			// place data into the request register
			regisk->U32[logger[0]] = logu.U32;
 80010ca:	4b30      	ldr	r3, [pc, #192]	; (800118c <Rx_Verita_engine+0x230>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	4619      	mov	r1, r3
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]


			return VRT_OK;
 80010d8:	2391      	movs	r3, #145	; 0x91
 80010da:	e04c      	b.n	8001176 <Rx_Verita_engine+0x21a>
		} //// -------------------------------------------------------------------------------

		//// CMD phase, return recieved Command =========================================
		if(logger[0] >= 0x90){
 80010dc:	4b2b      	ldr	r3, [pc, #172]	; (800118c <Rx_Verita_engine+0x230>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b8f      	cmp	r3, #143	; 0x8f
 80010e2:	d946      	bls.n	8001172 <Rx_Verita_engine+0x216>
			switch(logger[0]){
 80010e4:	4b29      	ldr	r3, [pc, #164]	; (800118c <Rx_Verita_engine+0x230>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	3b91      	subs	r3, #145	; 0x91
 80010ea:	2b11      	cmp	r3, #17
 80010ec:	d826      	bhi.n	800113c <Rx_Verita_engine+0x1e0>
 80010ee:	a201      	add	r2, pc, #4	; (adr r2, 80010f4 <Rx_Verita_engine+0x198>)
 80010f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f4:	08001141 	.word	0x08001141
 80010f8:	08001145 	.word	0x08001145
 80010fc:	08001149 	.word	0x08001149
 8001100:	0800114d 	.word	0x0800114d
 8001104:	0800113d 	.word	0x0800113d
 8001108:	0800113d 	.word	0x0800113d
 800110c:	0800113d 	.word	0x0800113d
 8001110:	0800113d 	.word	0x0800113d
 8001114:	0800113d 	.word	0x0800113d
 8001118:	0800113d 	.word	0x0800113d
 800111c:	0800113d 	.word	0x0800113d
 8001120:	0800113d 	.word	0x0800113d
 8001124:	0800113d 	.word	0x0800113d
 8001128:	0800113d 	.word	0x0800113d
 800112c:	0800113d 	.word	0x0800113d
 8001130:	08001151 	.word	0x08001151
 8001134:	0800115b 	.word	0x0800115b
 8001138:	08001167 	.word	0x08001167
				//// Status -------
				default:
				case 0x90:
					return VRT_ERROR;
 800113c:	2390      	movs	r3, #144	; 0x90
 800113e:	e01a      	b.n	8001176 <Rx_Verita_engine+0x21a>
				case 0x91:
					return VRT_OK;
 8001140:	2391      	movs	r3, #145	; 0x91
 8001142:	e018      	b.n	8001176 <Rx_Verita_engine+0x21a>
				case 0x92:
					return VRT_Busy;
 8001144:	2392      	movs	r3, #146	; 0x92
 8001146:	e016      	b.n	8001176 <Rx_Verita_engine+0x21a>
				case 0x93:
					return VRT_DataLoss;
 8001148:	2393      	movs	r3, #147	; 0x93
 800114a:	e014      	b.n	8001176 <Rx_Verita_engine+0x21a>
				case 0x94:
					return VRT_UnEnc;
 800114c:	2394      	movs	r3, #148	; 0x94
 800114e:	e012      	b.n	8001176 <Rx_Verita_engine+0x21a>

				//// Command -------------
				case VRC_Request:
					//// place Regis request & FlagRQ for Tx_RQ_Engine
					regisk->U32[VR_DataReq] = logu.U32;
 8001150:	68ba      	ldr	r2, [r7, #8]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	601a      	str	r2, [r3, #0]
					return VRT_OK;
 8001156:	2391      	movs	r3, #145	; 0x91
 8001158:	e00d      	b.n	8001176 <Rx_Verita_engine+0x21a>
				case VRC_Next:

					regisk->Mark.Flag_next = 0xFF;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	22ff      	movs	r2, #255	; 0xff
 800115e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
					return VRC_Next;
 8001162:	23a1      	movs	r3, #161	; 0xa1
 8001164:	e007      	b.n	8001176 <Rx_Verita_engine+0x21a>
				case VRC_Flag_1:
					regisk->Mark.Flag_ger = logu.U8[0];
 8001166:	7a3a      	ldrb	r2, [r7, #8]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
					return VRT_OK;
 800116e:	2391      	movs	r3, #145	; 0x91
 8001170:	e001      	b.n	8001176 <Rx_Verita_engine+0x21a>
			}
		}

		//// -------------------------------------------------------------------------------

		break; // decode
 8001172:	bf00      	nop
	} // end switch


	return VRT_ERROR;
 8001174:	2390      	movs	r3, #144	; 0x90
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bc90      	pop	{r4, r7}
 800117e:	4770      	bx	lr
 8001180:	20000250 	.word	0x20000250
 8001184:	20000251 	.word	0x20000251
 8001188:	38e38e39 	.word	0x38e38e39
 800118c:	20000254 	.word	0x20000254

08001190 <Tx_Rq_Verita_engine>:


	return VRT_ERROR;
}

VRTPTC_StatusTypedef Tx_Rq_Verita_engine(UART_HandleTypeDef *huart, Verita_Register_Bank *vrg_intn){
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	/* @brief Send data back when request is flagged , recommend for client's use
	 * @param vrg_intn - Bank which collect request register & Flag // internal regis
	 * @param regist - databank array collect data to send
	 * */

	if(vrg_intn->Mark.flag_dataREQ){ // if flag is up
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	885b      	ldrh	r3, [r3, #2]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d011      	beq.n	80011c6 <Tx_Rq_Verita_engine+0x36>

		uint8_t regis_RQ = (uint8_t)vrg_intn->Mark.DataReq;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	73fb      	strb	r3, [r7, #15]
		//uint32_t data_reg = vrg_intn->U32[regis_RQ];

		//// send data
		Tx_UART_Verita_Packet_u32(huart, regis_RQ, vrg_intn->U32[regis_RQ]);
 80011a8:	7bfa      	ldrb	r2, [r7, #15]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	4619      	mov	r1, r3
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f86a 	bl	800128e <Tx_UART_Verita_Packet_u32>
		//// erase flag
		//vrg_intn->U32[VR_DataReq] = 0x00;
		vrg_intn->Mark.DataReq = 0x00;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	2200      	movs	r2, #0
 80011be:	801a      	strh	r2, [r3, #0]
		vrg_intn->Mark.flag_dataREQ = 0x00;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	2200      	movs	r2, #0
 80011c4:	805a      	strh	r2, [r3, #2]
	}

	return VRT_OK;
 80011c6:	2391      	movs	r3, #145	; 0x91
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <Tx_UART_Verita_Packet_u8>:
//	} // end switch
//	return VRT_ERROR;
//}


void Tx_UART_Verita_Packet_u8(UART_HandleTypeDef *huart, uint8_t regis,uint8_t *pdata, uint8_t size){
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b08b      	sub	sp, #44	; 0x2c
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	461a      	mov	r2, r3
 80011dc:	460b      	mov	r3, r1
 80011de:	72fb      	strb	r3, [r7, #11]
 80011e0:	4613      	mov	r3, r2
 80011e2:	72bb      	strb	r3, [r7, #10]
	 * @param pdata - Pointer to data buffer (u8 or u16 data elements).
	 * @param size  - Amount of data elements (u8 or u16) to be received.
	 *
	 * */

	uint8_t posit = 4; // start new position
 80011e4:	2304      	movs	r3, #4
 80011e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t pack[16] = {0x56, 0x52, 0x54, regis};
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	2356      	movs	r3, #86	; 0x56
 80011fa:	753b      	strb	r3, [r7, #20]
 80011fc:	2352      	movs	r3, #82	; 0x52
 80011fe:	757b      	strb	r3, [r7, #21]
 8001200:	2354      	movs	r3, #84	; 0x54
 8001202:	75bb      	strb	r3, [r7, #22]
 8001204:	7afb      	ldrb	r3, [r7, #11]
 8001206:	75fb      	strb	r3, [r7, #23]
	uint8_t chksum = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	//// add data to packet
	for(register int j = 4; j < 4 + size ;j++){
 800120e:	2404      	movs	r4, #4
 8001210:	e00f      	b.n	8001232 <Tx_UART_Verita_Packet_u8+0x62>
			pack[j] = pdata[j-4];
 8001212:	4623      	mov	r3, r4
 8001214:	3b04      	subs	r3, #4
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	781a      	ldrb	r2, [r3, #0]
 800121c:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8001220:	443b      	add	r3, r7
 8001222:	f803 2c14 	strb.w	r2, [r3, #-20]
			posit++;
 8001226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800122a:	3301      	adds	r3, #1
 800122c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(register int j = 4; j < 4 + size ;j++){
 8001230:	3401      	adds	r4, #1
 8001232:	7abb      	ldrb	r3, [r7, #10]
 8001234:	3303      	adds	r3, #3
 8001236:	429c      	cmp	r4, r3
 8001238:	ddeb      	ble.n	8001212 <Tx_UART_Verita_Packet_u8+0x42>
		}
	//// Checksum generate , +4 means +3 start pack & +1 regis
	for(register int j = 3; j < size + 4;j++){
 800123a:	2403      	movs	r4, #3
 800123c:	e00a      	b.n	8001254 <Tx_UART_Verita_Packet_u8+0x84>
		chksum += pack[j];
 800123e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8001242:	443b      	add	r3, r7
 8001244:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001248:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800124c:	4413      	add	r3, r2
 800124e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for(register int j = 3; j < size + 4;j++){
 8001252:	3401      	adds	r4, #1
 8001254:	7abb      	ldrb	r3, [r7, #10]
 8001256:	3303      	adds	r3, #3
 8001258:	429c      	cmp	r4, r3
 800125a:	ddf0      	ble.n	800123e <Tx_UART_Verita_Packet_u8+0x6e>
	}
	pack[posit] = ~chksum;
 800125c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001260:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001264:	43d2      	mvns	r2, r2
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	3328      	adds	r3, #40	; 0x28
 800126a:	443b      	add	r3, r7
 800126c:	f803 2c14 	strb.w	r2, [r3, #-20]


	HAL_UART_Transmit(huart, (uint8_t*)pack, posit+1, 40);
 8001270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001274:	b29b      	uxth	r3, r3
 8001276:	3301      	adds	r3, #1
 8001278:	b29a      	uxth	r2, r3
 800127a:	f107 0114 	add.w	r1, r7, #20
 800127e:	2328      	movs	r3, #40	; 0x28
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	f003 feb0 	bl	8004fe6 <HAL_UART_Transmit>
}
 8001286:	bf00      	nop
 8001288:	372c      	adds	r7, #44	; 0x2c
 800128a:	46bd      	mov	sp, r7
 800128c:	bd90      	pop	{r4, r7, pc}

0800128e <Tx_UART_Verita_Packet_u32>:

void Tx_UART_Verita_Packet_u32(UART_HandleTypeDef *huart, uint8_t regis,uint32_t pdata){
 800128e:	b590      	push	{r4, r7, lr}
 8001290:	b08b      	sub	sp, #44	; 0x2c
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	460b      	mov	r3, r1
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	72fb      	strb	r3, [r7, #11]
	 * @param size  - Amount of data elements (u8 or u16) to be received.
	 *
	 * */

	//// Verita Header ////
	uint8_t pack[16] = {0x56, 0x52, 0x54, regis};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	2356      	movs	r3, #86	; 0x56
 80012ac:	753b      	strb	r3, [r7, #20]
 80012ae:	2352      	movs	r3, #82	; 0x52
 80012b0:	757b      	strb	r3, [r7, #21]
 80012b2:	2354      	movs	r3, #84	; 0x54
 80012b4:	75bb      	strb	r3, [r7, #22]
 80012b6:	7afb      	ldrb	r3, [r7, #11]
 80012b8:	75fb      	strb	r3, [r7, #23]

	uint8_t posit = 4; // start new position
 80012ba:	2304      	movs	r3, #4
 80012bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t chksum = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t  U8[4];
		uint32_t U32;
	}logu;

	//// add data to packet
	logu.U32 = pdata;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	613b      	str	r3, [r7, #16]
	for(register int j = 4; j < 8; j++){
 80012ca:	2404      	movs	r4, #4
 80012cc:	e00f      	b.n	80012ee <Tx_UART_Verita_Packet_u32+0x60>
			pack[j] = logu.U8[j-4];
 80012ce:	1f23      	subs	r3, r4, #4
 80012d0:	3328      	adds	r3, #40	; 0x28
 80012d2:	443b      	add	r3, r7
 80012d4:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80012d8:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80012dc:	443b      	add	r3, r7
 80012de:	f803 2c14 	strb.w	r2, [r3, #-20]
			posit++;
 80012e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e6:	3301      	adds	r3, #1
 80012e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(register int j = 4; j < 8; j++){
 80012ec:	3401      	adds	r4, #1
 80012ee:	2c07      	cmp	r4, #7
 80012f0:	dded      	ble.n	80012ce <Tx_UART_Verita_Packet_u32+0x40>
		}
	//// Checksum generate , +4 means +3 start pack & +1 regis
	for(register int j = 3; j < 8; j++){
 80012f2:	2403      	movs	r4, #3
 80012f4:	e00a      	b.n	800130c <Tx_UART_Verita_Packet_u32+0x7e>
		chksum += pack[j];
 80012f6:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80012fa:	443b      	add	r3, r7
 80012fc:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001300:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001304:	4413      	add	r3, r2
 8001306:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for(register int j = 3; j < 8; j++){
 800130a:	3401      	adds	r4, #1
 800130c:	2c07      	cmp	r4, #7
 800130e:	ddf2      	ble.n	80012f6 <Tx_UART_Verita_Packet_u32+0x68>
	}
	pack[posit] = ~chksum;
 8001310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001314:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001318:	43d2      	mvns	r2, r2
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	3328      	adds	r3, #40	; 0x28
 800131e:	443b      	add	r3, r7
 8001320:	f803 2c14 	strb.w	r2, [r3, #-20]


	HAL_UART_Transmit(huart, (uint8_t*)pack, posit+1, 50);
 8001324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001328:	b29b      	uxth	r3, r3
 800132a:	3301      	adds	r3, #1
 800132c:	b29a      	uxth	r2, r3
 800132e:	f107 0114 	add.w	r1, r7, #20
 8001332:	2332      	movs	r3, #50	; 0x32
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f003 fe56 	bl	8004fe6 <HAL_UART_Transmit>
}
 800133a:	bf00      	nop
 800133c:	372c      	adds	r7, #44	; 0x2c
 800133e:	46bd      	mov	sp, r7
 8001340:	bd90      	pop	{r4, r7, pc}

08001342 <Tx_UART_Verita_Command>:

void Tx_UART_Verita_Command(UART_HandleTypeDef *huart, VRTPTC_CMDef cmd, uint8_t regis){
 8001342:	b590      	push	{r4, r7, lr}
 8001344:	b089      	sub	sp, #36	; 0x24
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	70fb      	strb	r3, [r7, #3]
 800134e:	4613      	mov	r3, r2
 8001350:	70bb      	strb	r3, [r7, #2]
	 * 				  [VRC_Request] destination register need to request
	 * */

	//// Verita Header ////
	//// Send data request & Flag
	uint8_t pack[16] = {0x56, 0x52, 0x54, cmd, regis, 0x00, 0xFF, 0xAA};
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	2356      	movs	r3, #86	; 0x56
 8001362:	733b      	strb	r3, [r7, #12]
 8001364:	2352      	movs	r3, #82	; 0x52
 8001366:	737b      	strb	r3, [r7, #13]
 8001368:	2354      	movs	r3, #84	; 0x54
 800136a:	73bb      	strb	r3, [r7, #14]
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	78bb      	ldrb	r3, [r7, #2]
 8001372:	743b      	strb	r3, [r7, #16]
 8001374:	23ff      	movs	r3, #255	; 0xff
 8001376:	74bb      	strb	r3, [r7, #18]
 8001378:	23aa      	movs	r3, #170	; 0xaa
 800137a:	74fb      	strb	r3, [r7, #19]

	//uint8_t posit = 4; // start new position
	uint8_t chksum = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	77fb      	strb	r3, [r7, #31]

	//if(cmd == VRC_Request){}

	//// Checksum generate , +4 means +3 start pack & +1 regis
	for(register int j = 3; j < 8; j++){
 8001380:	2403      	movs	r4, #3
 8001382:	e008      	b.n	8001396 <Tx_UART_Verita_Command+0x54>
		chksum += pack[j];
 8001384:	f104 0320 	add.w	r3, r4, #32
 8001388:	443b      	add	r3, r7
 800138a:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800138e:	7ffb      	ldrb	r3, [r7, #31]
 8001390:	4413      	add	r3, r2
 8001392:	77fb      	strb	r3, [r7, #31]
	for(register int j = 3; j < 8; j++){
 8001394:	3401      	adds	r4, #1
 8001396:	2c07      	cmp	r4, #7
 8001398:	ddf4      	ble.n	8001384 <Tx_UART_Verita_Command+0x42>
	}
	pack[8] = ~chksum;
 800139a:	7ffb      	ldrb	r3, [r7, #31]
 800139c:	43db      	mvns	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	753b      	strb	r3, [r7, #20]

	HAL_UART_Transmit(huart, (uint8_t*)pack, 9, 30);
 80013a2:	f107 010c 	add.w	r1, r7, #12
 80013a6:	231e      	movs	r3, #30
 80013a8:	2209      	movs	r2, #9
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f003 fe1b 	bl	8004fe6 <HAL_UART_Transmit>
}
 80013b0:	bf00      	nop
 80013b2:	3724      	adds	r7, #36	; 0x24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd90      	pop	{r4, r7, pc}

080013b8 <gpio_selftest_input_pupdr_1>:
//// lists All port - pin to inspect first // avoid special pin like osilators / UART
//// GPIO_PIN_x is in bit position format (0 2 4 8 16 ...) which loss if stored in that form and log2() to calculate back
//uint16_t List_GPIOC[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13};


uint32_t gpio_selftest_input_pupdr_1(GPIO_TypeDef* GPIOx,uint16_t *Lista_GPIOx){
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b087      	sub	sp, #28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]

	uint32_t result = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]

	uint32_t temp_mode = GPIOx->MODER;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	617b      	str	r3, [r7, #20]
	uint32_t temp_pupdr = GPIOx->PUPDR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	613b      	str	r3, [r7, #16]

	//uint16_t sizearr = sizeof(Lista_GPIOx); // / sizeof(List_GPIOC[0])
	//// use instead of sizeof which return array length input into function as 4
	uint16_t sizearr = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	81fb      	strh	r3, [r7, #14]
	for(register int i = 0; i <= 17 ;i++){
 80013d6:	2400      	movs	r4, #0
 80013d8:	e00a      	b.n	80013f0 <gpio_selftest_input_pupdr_1+0x38>
		if(Lista_GPIOx[i] == 20){
 80013da:	4623      	mov	r3, r4
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	4413      	add	r3, r2
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	2b14      	cmp	r3, #20
 80013e6:	d006      	beq.n	80013f6 <gpio_selftest_input_pupdr_1+0x3e>
			break;
		}else{
			sizearr++;
 80013e8:	89fb      	ldrh	r3, [r7, #14]
 80013ea:	3301      	adds	r3, #1
 80013ec:	81fb      	strh	r3, [r7, #14]
	for(register int i = 0; i <= 17 ;i++){
 80013ee:	3401      	adds	r4, #1
 80013f0:	2c11      	cmp	r4, #17
 80013f2:	ddf2      	ble.n	80013da <gpio_selftest_input_pupdr_1+0x22>
 80013f4:	e000      	b.n	80013f8 <gpio_selftest_input_pupdr_1+0x40>
			break;
 80013f6:	bf00      	nop
		}
	}


	//// ------------------ Input PULLUP ------------------------------
	for(register int i = 0;i < sizearr; i++){
 80013f8:	2400      	movs	r4, #0
 80013fa:	e00e      	b.n	800141a <gpio_selftest_input_pupdr_1+0x62>
		temp_mode &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 80013fc:	4623      	mov	r3, r4
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	4413      	add	r3, r2
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	2203      	movs	r2, #3
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	461a      	mov	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	4013      	ands	r3, r2
 8001416:	617b      	str	r3, [r7, #20]
	for(register int i = 0;i < sizearr; i++){
 8001418:	3401      	adds	r4, #1
 800141a:	89fb      	ldrh	r3, [r7, #14]
 800141c:	429c      	cmp	r4, r3
 800141e:	dbed      	blt.n	80013fc <gpio_selftest_input_pupdr_1+0x44>
		temp_mode |= ( GPIO_MODE_INPUT << (Lista_GPIOx[i] * 2U));
	}
	GPIOx->MODER = temp_mode;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	601a      	str	r2, [r3, #0]


	for(register int i = 0;i < sizearr; i++){
 8001426:	2400      	movs	r4, #0
 8001428:	e01a      	b.n	8001460 <gpio_selftest_input_pupdr_1+0xa8>
		temp_pupdr &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 800142a:	4623      	mov	r3, r4
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	4413      	add	r3, r2
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	461a      	mov	r2, r3
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
		temp_pupdr |= ( GPIO_PULLUP << (Lista_GPIOx[i] * 2U));
 8001446:	4623      	mov	r3, r4
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	4413      	add	r3, r2
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2201      	movs	r2, #1
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
	for(register int i = 0;i < sizearr; i++){
 800145e:	3401      	adds	r4, #1
 8001460:	89fb      	ldrh	r3, [r7, #14]
 8001462:	429c      	cmp	r4, r3
 8001464:	dbe1      	blt.n	800142a <gpio_selftest_input_pupdr_1+0x72>
	}
	GPIOx->PUPDR = temp_pupdr;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	60da      	str	r2, [r3, #12]
	HAL_Delay(1);
 800146c:	2001      	movs	r0, #1
 800146e:	f001 f927 	bl	80026c0 <HAL_Delay>
	result |= (GPIOx->IDR) << 16;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	041b      	lsls	r3, r3, #16
 8001478:	68ba      	ldr	r2, [r7, #8]
 800147a:	4313      	orrs	r3, r2
 800147c:	60bb      	str	r3, [r7, #8]

	//// ------------------ Input PULLDOWN ------------------------------
	for(register int i = 0;i < sizearr; i++){
 800147e:	2400      	movs	r4, #0
 8001480:	e01a      	b.n	80014b8 <gpio_selftest_input_pupdr_1+0x100>
		temp_pupdr &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 8001482:	4623      	mov	r3, r4
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	4413      	add	r3, r2
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	461a      	mov	r2, r3
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
		temp_pupdr |= ( GPIO_PULLDOWN << (Lista_GPIOx[i] * 2U));
 800149e:	4623      	mov	r3, r4
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	4413      	add	r3, r2
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2202      	movs	r2, #2
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
	for(register int i = 0;i < sizearr; i++){
 80014b6:	3401      	adds	r4, #1
 80014b8:	89fb      	ldrh	r3, [r7, #14]
 80014ba:	429c      	cmp	r4, r3
 80014bc:	dbe1      	blt.n	8001482 <gpio_selftest_input_pupdr_1+0xca>
	}
	GPIOx->PUPDR = temp_pupdr;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	60da      	str	r2, [r3, #12]
	HAL_Delay(5);
 80014c4:	2005      	movs	r0, #5
 80014c6:	f001 f8fb 	bl	80026c0 <HAL_Delay>
	result |= GPIOx->IDR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	60bb      	str	r3, [r7, #8]

	return result;
 80014d4:	68bb      	ldr	r3, [r7, #8]

	}
 80014d6:	4618      	mov	r0, r3
 80014d8:	371c      	adds	r7, #28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd90      	pop	{r4, r7, pc}

080014de <gpio_selftest_output_pp_1>:

//// output pushpull
uint32_t gpio_selftest_output_pp_1(GPIO_TypeDef* GPIOx,uint16_t *Lista_GPIOx){
 80014de:	b590      	push	{r4, r7, lr}
 80014e0:	b087      	sub	sp, #28
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
	uint32_t temp_mode = GPIOx->MODER;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	617b      	str	r3, [r7, #20]
	uint32_t temp_bsrr = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
	uint32_t result = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]

	uint16_t sizearr = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	81fb      	strh	r3, [r7, #14]
	//// use instead of sizeof
	for(register int i = 0; i <= 17 ;i++){
 80014fa:	2400      	movs	r4, #0
 80014fc:	e00a      	b.n	8001514 <gpio_selftest_output_pp_1+0x36>
		if(Lista_GPIOx[i] == 20){
 80014fe:	4623      	mov	r3, r4
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	4413      	add	r3, r2
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	2b14      	cmp	r3, #20
 800150a:	d006      	beq.n	800151a <gpio_selftest_output_pp_1+0x3c>
			break;
		}else{
			sizearr++;
 800150c:	89fb      	ldrh	r3, [r7, #14]
 800150e:	3301      	adds	r3, #1
 8001510:	81fb      	strh	r3, [r7, #14]
	for(register int i = 0; i <= 17 ;i++){
 8001512:	3401      	adds	r4, #1
 8001514:	2c11      	cmp	r4, #17
 8001516:	ddf2      	ble.n	80014fe <gpio_selftest_output_pp_1+0x20>
 8001518:	e000      	b.n	800151c <gpio_selftest_output_pp_1+0x3e>
			break;
 800151a:	bf00      	nop
		}
	}

	///// -------------- Set Output Pushpull ---------------------
	for(register int i = 0;i < sizearr; i++){
 800151c:	2400      	movs	r4, #0
 800151e:	e01a      	b.n	8001556 <gpio_selftest_output_pp_1+0x78>
			temp_mode &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 8001520:	4623      	mov	r3, r4
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	4413      	add	r3, r2
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	2203      	movs	r2, #3
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	4013      	ands	r3, r2
 800153a:	617b      	str	r3, [r7, #20]
			temp_mode |= ( GPIO_MODE_OUTPUT_PP << (Lista_GPIOx[i] * 2U));
 800153c:	4623      	mov	r3, r4
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	4413      	add	r3, r2
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	2201      	movs	r2, #1
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	4313      	orrs	r3, r2
 8001552:	617b      	str	r3, [r7, #20]
	for(register int i = 0;i < sizearr; i++){
 8001554:	3401      	adds	r4, #1
 8001556:	89fb      	ldrh	r3, [r7, #14]
 8001558:	429c      	cmp	r4, r3
 800155a:	dbe1      	blt.n	8001520 <gpio_selftest_output_pp_1+0x42>
		}
	GPIOx->MODER = temp_mode;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	601a      	str	r2, [r3, #0]

	//// write SET to BSRR
	for(register int i = 0;i < sizearr; i++){
 8001562:	2400      	movs	r4, #0
 8001564:	e019      	b.n	800159a <gpio_selftest_output_pp_1+0xbc>
			temp_bsrr &= ~( 0b1 << Lista_GPIOx[i]); // clear only register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 8001566:	4623      	mov	r3, r4
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	4413      	add	r3, r2
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	2301      	movs	r3, #1
 8001574:	4093      	lsls	r3, r2
 8001576:	43db      	mvns	r3, r3
 8001578:	461a      	mov	r2, r3
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
			temp_bsrr |= ( GPIO_PIN_SET << Lista_GPIOx[i]);
 8001580:	4623      	mov	r3, r4
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	4413      	add	r3, r2
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	2301      	movs	r3, #1
 800158e:	4093      	lsls	r3, r2
 8001590:	461a      	mov	r2, r3
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
	for(register int i = 0;i < sizearr; i++){
 8001598:	3401      	adds	r4, #1
 800159a:	89fb      	ldrh	r3, [r7, #14]
 800159c:	429c      	cmp	r4, r3
 800159e:	dbe2      	blt.n	8001566 <gpio_selftest_output_pp_1+0x88>
		}
	GPIOx->BSRR = temp_bsrr; // insert 1 into SET position
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	619a      	str	r2, [r3, #24]

	//// Read Back #1 get set
	HAL_Delay(1);
 80015a6:	2001      	movs	r0, #1
 80015a8:	f001 f88a 	bl	80026c0 <HAL_Delay>
	result |= (GPIOx->IDR) << 16;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	041b      	lsls	r3, r3, #16
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	60bb      	str	r3, [r7, #8]
	HAL_Delay(1);
 80015b8:	2001      	movs	r0, #1
 80015ba:	f001 f881 	bl	80026c0 <HAL_Delay>

	//// write RESET to BSRR
	GPIOx->BSRR = temp_bsrr << 16; // insert 1 into RESET position << 16
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	041a      	lsls	r2, r3, #16
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	619a      	str	r2, [r3, #24]
	//// Read Back #2 get Reset
	HAL_Delay(1);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f001 f87a 	bl	80026c0 <HAL_Delay>
	result |= GPIOx->IDR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	60bb      	str	r3, [r7, #8]

	return result;
 80015d6:	68bb      	ldr	r3, [r7, #8]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd90      	pop	{r4, r7, pc}

080015e0 <gpio_selftest_output_od_1>:

//// output opendrain
/* Open drain mode: A “0” in the Output register activates the N-MOS whereas a “1”
 * in the Output register leaves the port in Hi-Z (the P-MOS is never activated)
 * */
uint32_t gpio_selftest_output_od_1(GPIO_TypeDef* GPIOx,uint16_t *Lista_GPIOx){
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
	uint32_t temp_mode = GPIOx->MODER;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	61fb      	str	r3, [r7, #28]
	uint32_t temp_bsrr = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61bb      	str	r3, [r7, #24]
	uint32_t temp_pupdr = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
	uint32_t result = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]

	uint16_t sizearr = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	827b      	strh	r3, [r7, #18]
	//// use instead of sizeof
	for(register int i = 0; i <= 17 ;i++){
 8001600:	2400      	movs	r4, #0
 8001602:	e00a      	b.n	800161a <gpio_selftest_output_od_1+0x3a>
		if(Lista_GPIOx[i] == 20){
 8001604:	4623      	mov	r3, r4
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	4413      	add	r3, r2
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	2b14      	cmp	r3, #20
 8001610:	d006      	beq.n	8001620 <gpio_selftest_output_od_1+0x40>
			break;
		}else{
			sizearr++;
 8001612:	8a7b      	ldrh	r3, [r7, #18]
 8001614:	3301      	adds	r3, #1
 8001616:	827b      	strh	r3, [r7, #18]
	for(register int i = 0; i <= 17 ;i++){
 8001618:	3401      	adds	r4, #1
 800161a:	2c11      	cmp	r4, #17
 800161c:	ddf2      	ble.n	8001604 <gpio_selftest_output_od_1+0x24>
 800161e:	e000      	b.n	8001622 <gpio_selftest_output_od_1+0x42>
			break;
 8001620:	bf00      	nop
		}
	}

	///// -------------- Set Output  opendrain ---------------------
	for(register int i = 0;i < sizearr; i++){
 8001622:	2400      	movs	r4, #0
 8001624:	e01a      	b.n	800165c <gpio_selftest_output_od_1+0x7c>
			temp_mode &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 8001626:	4623      	mov	r3, r4
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	4413      	add	r3, r2
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2203      	movs	r2, #3
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	461a      	mov	r2, r3
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	4013      	ands	r3, r2
 8001640:	61fb      	str	r3, [r7, #28]
			temp_mode |= ( GPIO_MODE_OUTPUT_OD << (Lista_GPIOx[i] * 2U));
 8001642:	4623      	mov	r3, r4
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	4413      	add	r3, r2
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2211      	movs	r2, #17
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	69fa      	ldr	r2, [r7, #28]
 8001656:	4313      	orrs	r3, r2
 8001658:	61fb      	str	r3, [r7, #28]
	for(register int i = 0;i < sizearr; i++){
 800165a:	3401      	adds	r4, #1
 800165c:	8a7b      	ldrh	r3, [r7, #18]
 800165e:	429c      	cmp	r4, r3
 8001660:	dbe1      	blt.n	8001626 <gpio_selftest_output_od_1+0x46>
		}
	GPIOx->MODER = temp_mode;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69fa      	ldr	r2, [r7, #28]
 8001666:	601a      	str	r2, [r3, #0]

	//// Set Pullup for Hi-Z State read
	for(register int i = 0;i < sizearr; i++){
 8001668:	2400      	movs	r4, #0
 800166a:	e01a      	b.n	80016a2 <gpio_selftest_output_od_1+0xc2>
		temp_pupdr &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 800166c:	4623      	mov	r3, r4
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	4413      	add	r3, r2
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	2203      	movs	r2, #3
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	461a      	mov	r2, r3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	4013      	ands	r3, r2
 8001686:	617b      	str	r3, [r7, #20]
		temp_pupdr |= ( GPIO_PULLUP << (Lista_GPIOx[i] * 2U));
 8001688:	4623      	mov	r3, r4
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	4413      	add	r3, r2
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2201      	movs	r2, #1
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	4313      	orrs	r3, r2
 800169e:	617b      	str	r3, [r7, #20]
	for(register int i = 0;i < sizearr; i++){
 80016a0:	3401      	adds	r4, #1
 80016a2:	8a7b      	ldrh	r3, [r7, #18]
 80016a4:	429c      	cmp	r4, r3
 80016a6:	dbe1      	blt.n	800166c <gpio_selftest_output_od_1+0x8c>
	}
	GPIOx->PUPDR = temp_pupdr;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	60da      	str	r2, [r3, #12]

	//// write SET to BSRR
	for(register int i = 0;i < sizearr; i++){
 80016ae:	2400      	movs	r4, #0
 80016b0:	e019      	b.n	80016e6 <gpio_selftest_output_od_1+0x106>
			temp_bsrr &= ~( 0b1 << Lista_GPIOx[i]); // clear only register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 80016b2:	4623      	mov	r3, r4
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	4413      	add	r3, r2
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	2301      	movs	r3, #1
 80016c0:	4093      	lsls	r3, r2
 80016c2:	43db      	mvns	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
			temp_bsrr |= ( GPIO_PIN_SET << Lista_GPIOx[i]);
 80016cc:	4623      	mov	r3, r4
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	2301      	movs	r3, #1
 80016da:	4093      	lsls	r3, r2
 80016dc:	461a      	mov	r2, r3
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
	for(register int i = 0;i < sizearr; i++){
 80016e4:	3401      	adds	r4, #1
 80016e6:	8a7b      	ldrh	r3, [r7, #18]
 80016e8:	429c      	cmp	r4, r3
 80016ea:	dbe2      	blt.n	80016b2 <gpio_selftest_output_od_1+0xd2>
		}
	GPIOx->BSRR = temp_bsrr; // insert 1 into SET position
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	619a      	str	r2, [r3, #24]

	//// Read Back #1 get set
	HAL_Delay(1);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f000 ffe4 	bl	80026c0 <HAL_Delay>
	result |= (GPIOx->IDR) << 16;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	041b      	lsls	r3, r3, #16
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	4313      	orrs	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]
	HAL_Delay(1);
 8001704:	2001      	movs	r0, #1
 8001706:	f000 ffdb 	bl	80026c0 <HAL_Delay>

	//// write RESET to BSRR
	GPIOx->BSRR = temp_bsrr << 16; // insert 1 into RESET position << 16
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	041a      	lsls	r2, r3, #16
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	619a      	str	r2, [r3, #24]
	//// Read Back #2 get Reset
	HAL_Delay(1);
 8001712:	2001      	movs	r0, #1
 8001714:	f000 ffd4 	bl	80026c0 <HAL_Delay>
	result |= GPIOx->IDR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	4313      	orrs	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]

	return result;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3724      	adds	r7, #36	; 0x24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd90      	pop	{r4, r7, pc}

0800172c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800172c:	b5b0      	push	{r4, r5, r7, lr}
 800172e:	b094      	sub	sp, #80	; 0x50
 8001730:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001732:	f000 ff53 	bl	80025dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001736:	f000 f96f 	bl	8001a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800173a:	f000 fb15 	bl	8001d68 <MX_GPIO_Init>
  MX_DMA_Init();
 800173e:	f000 faf3 	bl	8001d28 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001742:	f000 fa9d 	bl	8001c80 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001746:	f000 f9cf 	bl	8001ae8 <MX_ADC1_Init>
  MX_TIM3_Init();
 800174a:	f000 fa21 	bl	8001b90 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 800174e:	f000 fac1 	bl	8001cd4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  CPUTemprdINIT();
 8001752:	f000 fb8f 	bl	8001e74 <CPUTemprdINIT>

  char temp[]="----------------- F411_Verita_Client --------------------\r\n";
 8001756:	4b97      	ldr	r3, [pc, #604]	; (80019b4 <main+0x288>)
 8001758:	f107 0408 	add.w	r4, r7, #8
 800175c:	461d      	mov	r5, r3
 800175e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800176a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800176e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001772:	f107 0308 	add.w	r3, r7, #8
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fd32 	bl	80001e0 <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	b29a      	uxth	r2, r3
 8001780:	f107 0108 	add.w	r1, r7, #8
 8001784:	230a      	movs	r3, #10
 8001786:	488c      	ldr	r0, [pc, #560]	; (80019b8 <main+0x28c>)
 8001788:	f003 fc2d 	bl	8004fe6 <HAL_UART_Transmit>

  ////  ------------- UART Recieve --------------------------
  HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], RxbufferSize_VRT);
 800178c:	2224      	movs	r2, #36	; 0x24
 800178e:	498b      	ldr	r1, [pc, #556]	; (80019bc <main+0x290>)
 8001790:	488b      	ldr	r0, [pc, #556]	; (80019c0 <main+0x294>)
 8001792:	f003 fcba 	bl	800510a <HAL_UART_Receive_DMA>

  VR_Cli.Mark.FirmwareVer = FIRMWARE_VER;
 8001796:	4b8b      	ldr	r3, [pc, #556]	; (80019c4 <main+0x298>)
 8001798:	4a8b      	ldr	r2, [pc, #556]	; (80019c8 <main+0x29c>)
 800179a:	649a      	str	r2, [r3, #72]	; 0x48
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //
	  Rx_Verita_engine(RxBufferMtCl, &VR_Cli);
 800179c:	4989      	ldr	r1, [pc, #548]	; (80019c4 <main+0x298>)
 800179e:	4887      	ldr	r0, [pc, #540]	; (80019bc <main+0x290>)
 80017a0:	f7ff fbdc 	bl	8000f5c <Rx_Verita_engine>
	  Tx_Rq_Verita_engine(&huart6, &VR_Cli);
 80017a4:	4987      	ldr	r1, [pc, #540]	; (80019c4 <main+0x298>)
 80017a6:	4886      	ldr	r0, [pc, #536]	; (80019c0 <main+0x294>)
 80017a8:	f7ff fcf2 	bl	8001190 <Tx_Rq_Verita_engine>

	  if(HAL_GetTick() >= timestamp_one){
 80017ac:	f000 ff7c 	bl	80026a8 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	4b86      	ldr	r3, [pc, #536]	; (80019cc <main+0x2a0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d341      	bcc.n	800183e <main+0x112>
		  timestamp_one += 300;
 80017ba:	4b84      	ldr	r3, [pc, #528]	; (80019cc <main+0x2a0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80017c2:	4a82      	ldr	r2, [pc, #520]	; (80019cc <main+0x2a0>)
 80017c4:	6013      	str	r3, [r2, #0]

		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80017c6:	2120      	movs	r1, #32
 80017c8:	4881      	ldr	r0, [pc, #516]	; (80019d0 <main+0x2a4>)
 80017ca:	f002 f9ae 	bl	8003b2a <HAL_GPIO_TogglePin>

		  cputmpraw = CPUTempread();
 80017ce:	f000 fb65 	bl	8001e9c <CPUTempread>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b7f      	ldr	r3, [pc, #508]	; (80019d4 <main+0x2a8>)
 80017d8:	801a      	strh	r2, [r3, #0]
		  VR_Cli.Mark.cputemp = CPUTempread();
 80017da:	f000 fb5f 	bl	8001e9c <CPUTempread>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b78      	ldr	r3, [pc, #480]	; (80019c4 <main+0x298>)
 80017e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

		  cputempCC = TempEquat(ADCTVolta(cputmpraw));
 80017e8:	4b7a      	ldr	r3, [pc, #488]	; (80019d4 <main+0x2a8>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 fb77 	bl	8001ee0 <ADCTVolta>
 80017f2:	eef0 7a40 	vmov.f32	s15, s0
 80017f6:	eeb0 0a67 	vmov.f32	s0, s15
 80017fa:	f000 fba1 	bl	8001f40 <TempEquat>
 80017fe:	eef0 7a40 	vmov.f32	s15, s0
 8001802:	4b75      	ldr	r3, [pc, #468]	; (80019d8 <main+0x2ac>)
 8001804:	edc3 7a00 	vstr	s15, [r3]

		  sprintf(uartTXBf, "cpuraw = %d  => %.3f C\r\n ",
 8001808:	4b72      	ldr	r3, [pc, #456]	; (80019d4 <main+0x2a8>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	461c      	mov	r4, r3
 800180e:	4b72      	ldr	r3, [pc, #456]	; (80019d8 <main+0x2ac>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fea0 	bl	8000558 <__aeabi_f2d>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	e9cd 2300 	strd	r2, r3, [sp]
 8001820:	4622      	mov	r2, r4
 8001822:	496e      	ldr	r1, [pc, #440]	; (80019dc <main+0x2b0>)
 8001824:	486e      	ldr	r0, [pc, #440]	; (80019e0 <main+0x2b4>)
 8001826:	f004 fe6b 	bl	8006500 <siprintf>
				  cputmpraw,
				  cputempCC);
		  HAL_UART_Transmit(&huart2, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 800182a:	486d      	ldr	r0, [pc, #436]	; (80019e0 <main+0x2b4>)
 800182c:	f7fe fcd8 	bl	80001e0 <strlen>
 8001830:	4603      	mov	r3, r0
 8001832:	b29a      	uxth	r2, r3
 8001834:	230a      	movs	r3, #10
 8001836:	496a      	ldr	r1, [pc, #424]	; (80019e0 <main+0x2b4>)
 8001838:	485f      	ldr	r0, [pc, #380]	; (80019b8 <main+0x28c>)
 800183a:	f003 fbd4 	bl	8004fe6 <HAL_UART_Transmit>
//		  gpio_C_rd[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
		  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);

	  }

	  if(flag_gpioselftest){
 800183e:	4b69      	ldr	r3, [pc, #420]	; (80019e4 <main+0x2b8>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d031      	beq.n	80018aa <main+0x17e>

		  //// ---------- Verita send 1 set --------------------------
		  static uint8_t gg = 0x66;
		  static uint8_t rg = 0x03;
		  uint8_t ggg[4] = {0x00, 0x11, 0x33, gg};
 8001846:	2300      	movs	r3, #0
 8001848:	713b      	strb	r3, [r7, #4]
 800184a:	2311      	movs	r3, #17
 800184c:	717b      	strb	r3, [r7, #5]
 800184e:	2333      	movs	r3, #51	; 0x33
 8001850:	71bb      	strb	r3, [r7, #6]
 8001852:	4b65      	ldr	r3, [pc, #404]	; (80019e8 <main+0x2bc>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
		  Tx_UART_Verita_Packet_u8(&huart6, rg, ggg, sizeof(ggg));
 8001858:	4b64      	ldr	r3, [pc, #400]	; (80019ec <main+0x2c0>)
 800185a:	7819      	ldrb	r1, [r3, #0]
 800185c:	1d3a      	adds	r2, r7, #4
 800185e:	2304      	movs	r3, #4
 8001860:	4857      	ldr	r0, [pc, #348]	; (80019c0 <main+0x294>)
 8001862:	f7ff fcb5 	bl	80011d0 <Tx_UART_Verita_Packet_u8>

		  gg++; rg++;
 8001866:	4b60      	ldr	r3, [pc, #384]	; (80019e8 <main+0x2bc>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	3301      	adds	r3, #1
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4b5e      	ldr	r3, [pc, #376]	; (80019e8 <main+0x2bc>)
 8001870:	701a      	strb	r2, [r3, #0]
 8001872:	4b5e      	ldr	r3, [pc, #376]	; (80019ec <main+0x2c0>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b5c      	ldr	r3, [pc, #368]	; (80019ec <main+0x2c0>)
 800187c:	701a      	strb	r2, [r3, #0]

		  Tx_UART_Verita_Packet_u32(&huart6, VR_FWID, (uint32_t)FIRMWARE_VER);
 800187e:	4a52      	ldr	r2, [pc, #328]	; (80019c8 <main+0x29c>)
 8001880:	2112      	movs	r1, #18
 8001882:	484f      	ldr	r0, [pc, #316]	; (80019c0 <main+0x294>)
 8001884:	f7ff fd03 	bl	800128e <Tx_UART_Verita_Packet_u32>

		  Tx_UART_Verita_Packet_u32(&huart6, 0x92, (uint32_t)0x00FF00AA);
 8001888:	4a59      	ldr	r2, [pc, #356]	; (80019f0 <main+0x2c4>)
 800188a:	2192      	movs	r1, #146	; 0x92
 800188c:	484c      	ldr	r0, [pc, #304]	; (80019c0 <main+0x294>)
 800188e:	f7ff fcfe 	bl	800128e <Tx_UART_Verita_Packet_u32>
		  Tx_UART_Verita_Packet_u32(&huart6, 0x13, 0x12); //// data request
 8001892:	2212      	movs	r2, #18
 8001894:	2113      	movs	r1, #19
 8001896:	484a      	ldr	r0, [pc, #296]	; (80019c0 <main+0x294>)
 8001898:	f7ff fcf9 	bl	800128e <Tx_UART_Verita_Packet_u32>

		  VR_Cli.Mark.Flag_ger = 0x02;
 800189c:	4b49      	ldr	r3, [pc, #292]	; (80019c4 <main+0x298>)
 800189e:	2202      	movs	r2, #2
 80018a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

		  flag_gpioselftest = 0;
 80018a4:	4b4f      	ldr	r3, [pc, #316]	; (80019e4 <main+0x2b8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
	  }

	  //// Flag test
	  if(VR_Cli.Mark.Flag_ger == 0x02){
 80018aa:	4b46      	ldr	r3, [pc, #280]	; (80019c4 <main+0x298>)
 80018ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	f47f af73 	bne.w	800179c <main+0x70>

		  ////record default GPIO setup before modified in testscript
		  gpio_rec_mode[0] = GPIOA->MODER;
 80018b6:	4b46      	ldr	r3, [pc, #280]	; (80019d0 <main+0x2a4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a4e      	ldr	r2, [pc, #312]	; (80019f4 <main+0x2c8>)
 80018bc:	6013      	str	r3, [r2, #0]
		  gpio_rec_pupdr[0] = GPIOA->PUPDR;
 80018be:	4b44      	ldr	r3, [pc, #272]	; (80019d0 <main+0x2a4>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	4a4d      	ldr	r2, [pc, #308]	; (80019f8 <main+0x2cc>)
 80018c4:	6013      	str	r3, [r2, #0]

		  //// Run GPIO Testscript all here or run before While
		  VR_Cli.Mark.PA_PUPDR = gpio_selftest_input_pupdr_1(GPIOA, List_GPIOA);
 80018c6:	494d      	ldr	r1, [pc, #308]	; (80019fc <main+0x2d0>)
 80018c8:	4841      	ldr	r0, [pc, #260]	; (80019d0 <main+0x2a4>)
 80018ca:	f7ff fd75 	bl	80013b8 <gpio_selftest_input_pupdr_1>
 80018ce:	4603      	mov	r3, r0
 80018d0:	4a3c      	ldr	r2, [pc, #240]	; (80019c4 <main+0x298>)
 80018d2:	6053      	str	r3, [r2, #4]
		  VR_Cli.Mark.PB_PUPDR = gpio_selftest_input_pupdr_1(GPIOB, List_GPIOB);
 80018d4:	494a      	ldr	r1, [pc, #296]	; (8001a00 <main+0x2d4>)
 80018d6:	484b      	ldr	r0, [pc, #300]	; (8001a04 <main+0x2d8>)
 80018d8:	f7ff fd6e 	bl	80013b8 <gpio_selftest_input_pupdr_1>
 80018dc:	4603      	mov	r3, r0
 80018de:	4a39      	ldr	r2, [pc, #228]	; (80019c4 <main+0x298>)
 80018e0:	6113      	str	r3, [r2, #16]
		  VR_Cli.Mark.PC_PUPDR = gpio_selftest_input_pupdr_1(GPIOC, List_GPIOC);
 80018e2:	4949      	ldr	r1, [pc, #292]	; (8001a08 <main+0x2dc>)
 80018e4:	4849      	ldr	r0, [pc, #292]	; (8001a0c <main+0x2e0>)
 80018e6:	f7ff fd67 	bl	80013b8 <gpio_selftest_input_pupdr_1>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4a35      	ldr	r2, [pc, #212]	; (80019c4 <main+0x298>)
 80018ee:	61d3      	str	r3, [r2, #28]

		  HAL_Delay(5);
 80018f0:	2005      	movs	r0, #5
 80018f2:	f000 fee5 	bl	80026c0 <HAL_Delay>

		  VR_Cli.Mark.PA_OUT_PP = gpio_selftest_output_pp_1(GPIOA, List_GPIOA);
 80018f6:	4941      	ldr	r1, [pc, #260]	; (80019fc <main+0x2d0>)
 80018f8:	4835      	ldr	r0, [pc, #212]	; (80019d0 <main+0x2a4>)
 80018fa:	f7ff fdf0 	bl	80014de <gpio_selftest_output_pp_1>
 80018fe:	4603      	mov	r3, r0
 8001900:	4a30      	ldr	r2, [pc, #192]	; (80019c4 <main+0x298>)
 8001902:	6093      	str	r3, [r2, #8]
		  VR_Cli.Mark.PB_OUT_PP = gpio_selftest_output_pp_1(GPIOB, List_GPIOB);
 8001904:	493e      	ldr	r1, [pc, #248]	; (8001a00 <main+0x2d4>)
 8001906:	483f      	ldr	r0, [pc, #252]	; (8001a04 <main+0x2d8>)
 8001908:	f7ff fde9 	bl	80014de <gpio_selftest_output_pp_1>
 800190c:	4603      	mov	r3, r0
 800190e:	4a2d      	ldr	r2, [pc, #180]	; (80019c4 <main+0x298>)
 8001910:	6153      	str	r3, [r2, #20]
		  VR_Cli.Mark.PC_OUT_PP = gpio_selftest_output_pp_1(GPIOC, List_GPIOC);
 8001912:	493d      	ldr	r1, [pc, #244]	; (8001a08 <main+0x2dc>)
 8001914:	483d      	ldr	r0, [pc, #244]	; (8001a0c <main+0x2e0>)
 8001916:	f7ff fde2 	bl	80014de <gpio_selftest_output_pp_1>
 800191a:	4603      	mov	r3, r0
 800191c:	4a29      	ldr	r2, [pc, #164]	; (80019c4 <main+0x298>)
 800191e:	6213      	str	r3, [r2, #32]

		  HAL_Delay(5);
 8001920:	2005      	movs	r0, #5
 8001922:	f000 fecd 	bl	80026c0 <HAL_Delay>

		  VR_Cli.Mark.PA_OUT_OD = gpio_selftest_output_od_1(GPIOA, List_GPIOA);
 8001926:	4935      	ldr	r1, [pc, #212]	; (80019fc <main+0x2d0>)
 8001928:	4829      	ldr	r0, [pc, #164]	; (80019d0 <main+0x2a4>)
 800192a:	f7ff fe59 	bl	80015e0 <gpio_selftest_output_od_1>
 800192e:	4603      	mov	r3, r0
 8001930:	4a24      	ldr	r2, [pc, #144]	; (80019c4 <main+0x298>)
 8001932:	60d3      	str	r3, [r2, #12]
		  VR_Cli.Mark.PB_OUT_OD = gpio_selftest_output_od_1(GPIOB, List_GPIOB);
 8001934:	4932      	ldr	r1, [pc, #200]	; (8001a00 <main+0x2d4>)
 8001936:	4833      	ldr	r0, [pc, #204]	; (8001a04 <main+0x2d8>)
 8001938:	f7ff fe52 	bl	80015e0 <gpio_selftest_output_od_1>
 800193c:	4603      	mov	r3, r0
 800193e:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <main+0x298>)
 8001940:	6193      	str	r3, [r2, #24]
		  VR_Cli.Mark.PC_OUT_OD = gpio_selftest_output_od_1(GPIOC, List_GPIOC);
 8001942:	4931      	ldr	r1, [pc, #196]	; (8001a08 <main+0x2dc>)
 8001944:	4831      	ldr	r0, [pc, #196]	; (8001a0c <main+0x2e0>)
 8001946:	f7ff fe4b 	bl	80015e0 <gpio_selftest_output_od_1>
 800194a:	4603      	mov	r3, r0
 800194c:	4a1d      	ldr	r2, [pc, #116]	; (80019c4 <main+0x298>)
 800194e:	6253      	str	r3, [r2, #36]	; 0x24

		  //// revert back, enable to send UART again after crashed in testscript
		  GPIOA->MODER = gpio_rec_mode[0] ;
 8001950:	4a1f      	ldr	r2, [pc, #124]	; (80019d0 <main+0x2a4>)
 8001952:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <main+0x2c8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6013      	str	r3, [r2, #0]
		  GPIOA->PUPDR = gpio_rec_pupdr[0] ;
 8001958:	4a1d      	ldr	r2, [pc, #116]	; (80019d0 <main+0x2a4>)
 800195a:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <main+0x2cc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	60d3      	str	r3, [r2, #12]

		  Compare_pin();
 8001960:	f000 fb28 	bl	8001fb4 <Compare_pin>
		  //Compare_pin_32(VR_Cli.Mark.PA_PUPDR, List_GPIOA, 0, WR_A_PUPDR);
		  //Compare_pin_32(VR_Cli.Mark.PA_OUT_PP, List_GPIOA, 0, WR_A_OPP);

		  sprintf(uartTXBf, WR_A_PUPDR);
 8001964:	492a      	ldr	r1, [pc, #168]	; (8001a10 <main+0x2e4>)
 8001966:	481e      	ldr	r0, [pc, #120]	; (80019e0 <main+0x2b4>)
 8001968:	f004 fdca 	bl	8006500 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 800196c:	481c      	ldr	r0, [pc, #112]	; (80019e0 <main+0x2b4>)
 800196e:	f7fe fc37 	bl	80001e0 <strlen>
 8001972:	4603      	mov	r3, r0
 8001974:	b29a      	uxth	r2, r3
 8001976:	230a      	movs	r3, #10
 8001978:	4919      	ldr	r1, [pc, #100]	; (80019e0 <main+0x2b4>)
 800197a:	480f      	ldr	r0, [pc, #60]	; (80019b8 <main+0x28c>)
 800197c:	f003 fb33 	bl	8004fe6 <HAL_UART_Transmit>

		  uint32_t bbb = 0x12123333;
 8001980:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <main+0x2e8>)
 8001982:	647b      	str	r3, [r7, #68]	; 0x44
		  for(register int i = 1;i < 9;i++){
 8001984:	2401      	movs	r4, #1
 8001986:	e009      	b.n	800199c <main+0x270>
			  Tx_UART_Verita_Packet_u32(&huart6, i, bbb);
 8001988:	b2e3      	uxtb	r3, r4
 800198a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800198c:	4619      	mov	r1, r3
 800198e:	480c      	ldr	r0, [pc, #48]	; (80019c0 <main+0x294>)
 8001990:	f7ff fc7d 	bl	800128e <Tx_UART_Verita_Packet_u32>
			  bbb += 0xFF;
 8001994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001996:	33ff      	adds	r3, #255	; 0xff
 8001998:	647b      	str	r3, [r7, #68]	; 0x44
		  for(register int i = 1;i < 9;i++){
 800199a:	3401      	adds	r4, #1
 800199c:	2c08      	cmp	r4, #8
 800199e:	ddf3      	ble.n	8001988 <main+0x25c>
		  }

		  Tx_UART_Verita_Command(&huart6, VRC_Next, 0x00);
 80019a0:	2200      	movs	r2, #0
 80019a2:	21a1      	movs	r1, #161	; 0xa1
 80019a4:	4806      	ldr	r0, [pc, #24]	; (80019c0 <main+0x294>)
 80019a6:	f7ff fccc 	bl	8001342 <Tx_UART_Verita_Command>

		  VR_Cli.Mark.Flag_ger = 0;
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <main+0x298>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	  Rx_Verita_engine(RxBufferMtCl, &VR_Cli);
 80019b2:	e6f3      	b.n	800179c <main+0x70>
 80019b4:	08008a4c 	.word	0x08008a4c
 80019b8:	200002f0 	.word	0x200002f0
 80019bc:	2000049c 	.word	0x2000049c
 80019c0:	20000334 	.word	0x20000334
 80019c4:	20000438 	.word	0x20000438
 80019c8:	02240323 	.word	0x02240323
 80019cc:	200003f8 	.word	0x200003f8
 80019d0:	40020000 	.word	0x40020000
 80019d4:	200003ec 	.word	0x200003ec
 80019d8:	200003f0 	.word	0x200003f0
 80019dc:	08008a30 	.word	0x08008a30
 80019e0:	200004c0 	.word	0x200004c0
 80019e4:	20000414 	.word	0x20000414
 80019e8:	20000056 	.word	0x20000056
 80019ec:	20000057 	.word	0x20000057
 80019f0:	00ff00aa 	.word	0x00ff00aa
 80019f4:	200003fc 	.word	0x200003fc
 80019f8:	20000408 	.word	0x20000408
 80019fc:	20000000 	.word	0x20000000
 8001a00:	20000018 	.word	0x20000018
 8001a04:	40020400 	.word	0x40020400
 8001a08:	20000038 	.word	0x20000038
 8001a0c:	40020800 	.word	0x40020800
 8001a10:	20000418 	.word	0x20000418
 8001a14:	12123333 	.word	0x12123333

08001a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b094      	sub	sp, #80	; 0x50
 8001a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a1e:	f107 0320 	add.w	r3, r7, #32
 8001a22:	2230      	movs	r2, #48	; 0x30
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f004 f8f8 	bl	8005c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <SystemClock_Config+0xc8>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	4a26      	ldr	r2, [pc, #152]	; (8001ae0 <SystemClock_Config+0xc8>)
 8001a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4c:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <SystemClock_Config+0xc8>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a58:	2300      	movs	r3, #0
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <SystemClock_Config+0xcc>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a20      	ldr	r2, [pc, #128]	; (8001ae4 <SystemClock_Config+0xcc>)
 8001a62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <SystemClock_Config+0xcc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a74:	2302      	movs	r3, #2
 8001a76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a7c:	2310      	movs	r3, #16
 8001a7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a80:	2302      	movs	r3, #2
 8001a82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a84:	2300      	movs	r3, #0
 8001a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a88:	2308      	movs	r3, #8
 8001a8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001a8c:	2364      	movs	r3, #100	; 0x64
 8001a8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a90:	2302      	movs	r3, #2
 8001a92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a94:	2304      	movs	r3, #4
 8001a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a98:	f107 0320 	add.w	r3, r7, #32
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f002 f877 	bl	8003b90 <HAL_RCC_OscConfig>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001aa8:	f000 fafe 	bl	80020a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aac:	230f      	movs	r3, #15
 8001aae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001abc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ac2:	f107 030c 	add.w	r3, r7, #12
 8001ac6:	2103      	movs	r1, #3
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f002 fad9 	bl	8004080 <HAL_RCC_ClockConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ad4:	f000 fae8 	bl	80020a8 <Error_Handler>
  }
}
 8001ad8:	bf00      	nop
 8001ada:	3750      	adds	r7, #80	; 0x50
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40007000 	.word	0x40007000

08001ae8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aee:	463b      	mov	r3, r7
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001afc:	4a21      	ldr	r2, [pc, #132]	; (8001b84 <MX_ADC1_Init+0x9c>)
 8001afe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b02:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b2a:	4a17      	ldr	r2, [pc, #92]	; (8001b88 <MX_ADC1_Init+0xa0>)
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b48:	480d      	ldr	r0, [pc, #52]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b4a:	f000 fddd 	bl	8002708 <HAL_ADC_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b54:	f000 faa8 	bl	80020a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <MX_ADC1_Init+0xa4>)
 8001b5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001b60:	2307      	movs	r3, #7
 8001b62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b64:	463b      	mov	r3, r7
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b6a:	f000 ff91 	bl	8002a90 <HAL_ADC_ConfigChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b74:	f000 fa98 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000260 	.word	0x20000260
 8001b84:	40012000 	.word	0x40012000
 8001b88:	0f000001 	.word	0x0f000001
 8001b8c:	10000012 	.word	0x10000012

08001b90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08e      	sub	sp, #56	; 0x38
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba4:	f107 0320 	add.w	r3, r7, #32
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
 8001bbc:	615a      	str	r2, [r3, #20]
 8001bbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <MX_TIM3_Init+0xe8>)
 8001bc2:	4a2e      	ldr	r2, [pc, #184]	; (8001c7c <MX_TIM3_Init+0xec>)
 8001bc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8001bc6:	4b2c      	ldr	r3, [pc, #176]	; (8001c78 <MX_TIM3_Init+0xe8>)
 8001bc8:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bcc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bce:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <MX_TIM3_Init+0xe8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001bd4:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <MX_TIM3_Init+0xe8>)
 8001bd6:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bdc:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <MX_TIM3_Init+0xe8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001be2:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <MX_TIM3_Init+0xe8>)
 8001be4:	2280      	movs	r2, #128	; 0x80
 8001be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001be8:	4823      	ldr	r0, [pc, #140]	; (8001c78 <MX_TIM3_Init+0xe8>)
 8001bea:	f002 fc69 	bl	80044c0 <HAL_TIM_Base_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001bf4:	f000 fa58 	bl	80020a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c02:	4619      	mov	r1, r3
 8001c04:	481c      	ldr	r0, [pc, #112]	; (8001c78 <MX_TIM3_Init+0xe8>)
 8001c06:	f002 fdc5 	bl	8004794 <HAL_TIM_ConfigClockSource>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001c10:	f000 fa4a 	bl	80020a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c14:	4818      	ldr	r0, [pc, #96]	; (8001c78 <MX_TIM3_Init+0xe8>)
 8001c16:	f002 fca2 	bl	800455e <HAL_TIM_PWM_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001c20:	f000 fa42 	bl	80020a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c2c:	f107 0320 	add.w	r3, r7, #32
 8001c30:	4619      	mov	r1, r3
 8001c32:	4811      	ldr	r0, [pc, #68]	; (8001c78 <MX_TIM3_Init+0xe8>)
 8001c34:	f003 f91c 	bl	8004e70 <HAL_TIMEx_MasterConfigSynchronization>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c3e:	f000 fa33 	bl	80020a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c42:	2360      	movs	r3, #96	; 0x60
 8001c44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 8001c46:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	2200      	movs	r2, #0
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4807      	ldr	r0, [pc, #28]	; (8001c78 <MX_TIM3_Init+0xe8>)
 8001c5c:	f002 fcd8 	bl	8004610 <HAL_TIM_PWM_ConfigChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001c66:	f000 fa1f 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c6a:	4803      	ldr	r0, [pc, #12]	; (8001c78 <MX_TIM3_Init+0xe8>)
 8001c6c:	f000 fa8e 	bl	800218c <HAL_TIM_MspPostInit>

}
 8001c70:	bf00      	nop
 8001c72:	3738      	adds	r7, #56	; 0x38
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	200002a8 	.word	0x200002a8
 8001c7c:	40000400 	.word	0x40000400

08001c80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <MX_USART2_UART_Init+0x4c>)
 8001c86:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <MX_USART2_UART_Init+0x50>)
 8001c88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <MX_USART2_UART_Init+0x4c>)
 8001c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c92:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <MX_USART2_UART_Init+0x4c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <MX_USART2_UART_Init+0x4c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <MX_USART2_UART_Init+0x4c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <MX_USART2_UART_Init+0x4c>)
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <MX_USART2_UART_Init+0x4c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <MX_USART2_UART_Init+0x4c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cb6:	4805      	ldr	r0, [pc, #20]	; (8001ccc <MX_USART2_UART_Init+0x4c>)
 8001cb8:	f003 f948 	bl	8004f4c <HAL_UART_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cc2:	f000 f9f1 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200002f0 	.word	0x200002f0
 8001cd0:	40004400 	.word	0x40004400

08001cd4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <MX_USART6_UART_Init+0x4c>)
 8001cda:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <MX_USART6_UART_Init+0x50>)
 8001cdc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <MX_USART6_UART_Init+0x4c>)
 8001ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ce4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <MX_USART6_UART_Init+0x4c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <MX_USART6_UART_Init+0x4c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <MX_USART6_UART_Init+0x4c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <MX_USART6_UART_Init+0x4c>)
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfe:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <MX_USART6_UART_Init+0x4c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <MX_USART6_UART_Init+0x4c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001d0a:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_USART6_UART_Init+0x4c>)
 8001d0c:	f003 f91e 	bl	8004f4c <HAL_UART_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001d16:	f000 f9c7 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000334 	.word	0x20000334
 8001d24:	40011400 	.word	0x40011400

08001d28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <MX_DMA_Init+0x3c>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a0b      	ldr	r2, [pc, #44]	; (8001d64 <MX_DMA_Init+0x3c>)
 8001d38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_DMA_Init+0x3c>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2039      	movs	r0, #57	; 0x39
 8001d50:	f001 f9a7 	bl	80030a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001d54:	2039      	movs	r0, #57	; 0x39
 8001d56:	f001 f9c0 	bl	80030da <HAL_NVIC_EnableIRQ>

}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800

08001d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
 8001d7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <MX_GPIO_Init+0xfc>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a37      	ldr	r2, [pc, #220]	; (8001e64 <MX_GPIO_Init+0xfc>)
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b35      	ldr	r3, [pc, #212]	; (8001e64 <MX_GPIO_Init+0xfc>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <MX_GPIO_Init+0xfc>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a30      	ldr	r2, [pc, #192]	; (8001e64 <MX_GPIO_Init+0xfc>)
 8001da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <MX_GPIO_Init+0xfc>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <MX_GPIO_Init+0xfc>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a29      	ldr	r2, [pc, #164]	; (8001e64 <MX_GPIO_Init+0xfc>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <MX_GPIO_Init+0xfc>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <MX_GPIO_Init+0xfc>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a22      	ldr	r2, [pc, #136]	; (8001e64 <MX_GPIO_Init+0xfc>)
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <MX_GPIO_Init+0xfc>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001dee:	2200      	movs	r2, #0
 8001df0:	2120      	movs	r1, #32
 8001df2:	481d      	ldr	r0, [pc, #116]	; (8001e68 <MX_GPIO_Init+0x100>)
 8001df4:	f001 fe80 	bl	8003af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001df8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dfe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4817      	ldr	r0, [pc, #92]	; (8001e6c <MX_GPIO_Init+0x104>)
 8001e10:	f001 fcee 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e14:	2320      	movs	r3, #32
 8001e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	4619      	mov	r1, r3
 8001e2a:	480f      	ldr	r0, [pc, #60]	; (8001e68 <MX_GPIO_Init+0x100>)
 8001e2c:	f001 fce0 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	480a      	ldr	r0, [pc, #40]	; (8001e70 <MX_GPIO_Init+0x108>)
 8001e46:	f001 fcd3 	bl	80037f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2028      	movs	r0, #40	; 0x28
 8001e50:	f001 f927 	bl	80030a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e54:	2028      	movs	r0, #40	; 0x28
 8001e56:	f001 f940 	bl	80030da <HAL_NVIC_EnableIRQ>

}
 8001e5a:	bf00      	nop
 8001e5c:	3728      	adds	r7, #40	; 0x28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40020000 	.word	0x40020000
 8001e6c:	40020800 	.word	0x40020800
 8001e70:	40020400 	.word	0x40020400

08001e74 <CPUTemprdINIT>:

/* USER CODE BEGIN 4 */
void CPUTemprdINIT(){
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
	ADCChannell[0].Confix.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <CPUTemprdINIT+0x20>)
 8001e7a:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <CPUTemprdINIT+0x24>)
 8001e7c:	601a      	str	r2, [r3, #0]
	ADCChannell[0].Confix.Rank = 1;
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <CPUTemprdINIT+0x20>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	605a      	str	r2, [r3, #4]
	ADCChannell[0].Confix.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <CPUTemprdINIT+0x20>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	200003d8 	.word	0x200003d8
 8001e98:	10000012 	.word	0x10000012

08001e9c <CPUTempread>:

uint16_t CPUTempread(){
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
	uint16_t tmpbf;

	HAL_ADC_ConfigChannel(&hadc1, &ADCChannell[0].Confix); //
 8001ea2:	490d      	ldr	r1, [pc, #52]	; (8001ed8 <CPUTempread+0x3c>)
 8001ea4:	480d      	ldr	r0, [pc, #52]	; (8001edc <CPUTempread+0x40>)
 8001ea6:	f000 fdf3 	bl	8002a90 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&hadc1);
 8001eaa:	480c      	ldr	r0, [pc, #48]	; (8001edc <CPUTempread+0x40>)
 8001eac:	f000 fc70 	bl	8002790 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1, 10)==HAL_OK) //10mSec timeout
 8001eb0:	210a      	movs	r1, #10
 8001eb2:	480a      	ldr	r0, [pc, #40]	; (8001edc <CPUTempread+0x40>)
 8001eb4:	f000 fd53 	bl	800295e <HAL_ADC_PollForConversion>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d104      	bne.n	8001ec8 <CPUTempread+0x2c>
		{
			//ReadData to confix channel
			tmpbf = HAL_ADC_GetValue(&hadc1);
 8001ebe:	4807      	ldr	r0, [pc, #28]	; (8001edc <CPUTempread+0x40>)
 8001ec0:	f000 fdd8 	bl	8002a74 <HAL_ADC_GetValue>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	80fb      	strh	r3, [r7, #6]
		}

	HAL_ADC_Stop(&hadc1);
 8001ec8:	4804      	ldr	r0, [pc, #16]	; (8001edc <CPUTempread+0x40>)
 8001eca:	f000 fd15 	bl	80028f8 <HAL_ADC_Stop>

	return tmpbf;
 8001ece:	88fb      	ldrh	r3, [r7, #6]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	200003d8 	.word	0x200003d8
 8001edc:	20000260 	.word	0x20000260

08001ee0 <ADCTVolta>:

float ADCTVolta(uint16_t btt){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	80fb      	strh	r3, [r7, #6]
	// convert 0-4096 ADC bit -> 0-3.3V
	return (btt /4096.0) * 3.3;
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fb21 	bl	8000534 <__aeabi_i2d>
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <ADCTVolta+0x58>)
 8001ef8:	f7fe fcb0 	bl	800085c <__aeabi_ddiv>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	a30a      	add	r3, pc, #40	; (adr r3, 8001f30 <ADCTVolta+0x50>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	f7fe fb7d 	bl	8000608 <__aeabi_dmul>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	f7fe fe4f 	bl	8000bb8 <__aeabi_d2f>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	ee07 3a90 	vmov	s15, r3
}
 8001f20:	eeb0 0a67 	vmov.f32	s0, s15
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	f3af 8000 	nop.w
 8001f30:	66666666 	.word	0x66666666
 8001f34:	400a6666 	.word	0x400a6666
 8001f38:	40b00000 	.word	0x40b00000
 8001f3c:	00000000 	.word	0x00000000

08001f40 <TempEquat>:

float TempEquat(float Vs){
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	ed87 0a01 	vstr	s0, [r7, #4]
	//Vs = V tmp read , V25= 0.76V, Avg_slope = 2.5 mV
	return ((Vs - 0.76)/(0.0025)) + 25.0; //2.5*0.001
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe fb04 	bl	8000558 <__aeabi_f2d>
 8001f50:	a314      	add	r3, pc, #80	; (adr r3, 8001fa4 <TempEquat+0x64>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	f7fe f99f 	bl	8000298 <__aeabi_dsub>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4610      	mov	r0, r2
 8001f60:	4619      	mov	r1, r3
 8001f62:	a312      	add	r3, pc, #72	; (adr r3, 8001fac <TempEquat+0x6c>)
 8001f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f68:	f7fe fc78 	bl	800085c <__aeabi_ddiv>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4610      	mov	r0, r2
 8001f72:	4619      	mov	r1, r3
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <TempEquat+0x60>)
 8001f7a:	f7fe f98f 	bl	800029c <__adddf3>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	f7fe fe17 	bl	8000bb8 <__aeabi_d2f>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	ee07 3a90 	vmov	s15, r3
}
 8001f90:	eeb0 0a67 	vmov.f32	s0, s15
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	f3af 8000 	nop.w
 8001fa0:	40390000 	.word	0x40390000
 8001fa4:	851eb852 	.word	0x851eb852
 8001fa8:	3fe851eb 	.word	0x3fe851eb
 8001fac:	47ae147b 	.word	0x47ae147b
 8001fb0:	3f647ae1 	.word	0x3f647ae1

08001fb4 <Compare_pin>:

void Compare_pin(){
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
	uint16_t A_PUPDR_N = VR_Cli.Mark.PA_PUPDR & 0xFFFF;
 8001fba:	4b24      	ldr	r3, [pc, #144]	; (800204c <Compare_pin+0x98>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	81fb      	strh	r3, [r7, #14]
	uint16_t A_PUPDR_P = (VR_Cli.Mark.PA_PUPDR >> 16) & 0xFFFF;
 8001fc0:	4b22      	ldr	r3, [pc, #136]	; (800204c <Compare_pin+0x98>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	0c1b      	lsrs	r3, r3, #16
 8001fc6:	81bb      	strh	r3, [r7, #12]
	uint8_t iaa, iab;
	char aadd[4];

	//// A
	for(register int i = 0;i < sizeof(List_GPIOA);i++){
 8001fc8:	2400      	movs	r4, #0
 8001fca:	e036      	b.n	800203a <Compare_pin+0x86>
		if(List_GPIOA[i] >= 20){break;}
 8001fcc:	4b20      	ldr	r3, [pc, #128]	; (8002050 <Compare_pin+0x9c>)
 8001fce:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8001fd2:	2b13      	cmp	r3, #19
 8001fd4:	d835      	bhi.n	8002042 <Compare_pin+0x8e>

		iaa = (A_PUPDR_N >> List_GPIOA[i]) & 0x01;
 8001fd6:	89fb      	ldrh	r3, [r7, #14]
 8001fd8:	4a1d      	ldr	r2, [pc, #116]	; (8002050 <Compare_pin+0x9c>)
 8001fda:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
 8001fde:	4113      	asrs	r3, r2
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	72fb      	strb	r3, [r7, #11]
		iab = (A_PUPDR_P >> List_GPIOA[i]) & 0x01;
 8001fe8:	89bb      	ldrh	r3, [r7, #12]
 8001fea:	4a19      	ldr	r2, [pc, #100]	; (8002050 <Compare_pin+0x9c>)
 8001fec:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
 8001ff0:	4113      	asrs	r3, r2
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	72bb      	strb	r3, [r7, #10]
		 if(iaa == iab){
 8001ffa:	7afa      	ldrb	r2, [r7, #11]
 8001ffc:	7abb      	ldrb	r3, [r7, #10]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d11a      	bne.n	8002038 <Compare_pin+0x84>
			 //
			 //char aadd[4] = " PA";
			 //char aade =  List_GPIOA[i] + '0';
			 //strncat(aadd, &aade, 2)
			 sprintf(aadd, "PA%d", (uint8_t)List_GPIOA[i]); //
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <Compare_pin+0x9c>)
 8002004:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	461a      	mov	r2, r3
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	4911      	ldr	r1, [pc, #68]	; (8002054 <Compare_pin+0xa0>)
 8002010:	4618      	mov	r0, r3
 8002012:	f004 fa75 	bl	8006500 <siprintf>
			 strncat(WR_A_PUPDR, aadd, 4);
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	2204      	movs	r2, #4
 800201a:	4619      	mov	r1, r3
 800201c:	480e      	ldr	r0, [pc, #56]	; (8002058 <Compare_pin+0xa4>)
 800201e:	f004 fa8f 	bl	8006540 <strncat>
			 sprintf(aadd, " ");
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	490d      	ldr	r1, [pc, #52]	; (800205c <Compare_pin+0xa8>)
 8002026:	4618      	mov	r0, r3
 8002028:	f004 fa6a 	bl	8006500 <siprintf>
			 strncat(WR_A_PUPDR, aadd, 1);
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	2201      	movs	r2, #1
 8002030:	4619      	mov	r1, r3
 8002032:	4809      	ldr	r0, [pc, #36]	; (8002058 <Compare_pin+0xa4>)
 8002034:	f004 fa84 	bl	8006540 <strncat>
	for(register int i = 0;i < sizeof(List_GPIOA);i++){
 8002038:	3401      	adds	r4, #1
 800203a:	4623      	mov	r3, r4
 800203c:	2b15      	cmp	r3, #21
 800203e:	d9c5      	bls.n	8001fcc <Compare_pin+0x18>
		 }

	}
}
 8002040:	e000      	b.n	8002044 <Compare_pin+0x90>
		if(List_GPIOA[i] >= 20){break;}
 8002042:	bf00      	nop
}
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	bd90      	pop	{r4, r7, pc}
 800204c:	20000438 	.word	0x20000438
 8002050:	20000000 	.word	0x20000000
 8002054:	08008a88 	.word	0x08008a88
 8002058:	20000418 	.word	0x20000418
 800205c:	08008a90 	.word	0x08008a90

08002060 <HAL_GPIO_EXTI_Callback>:



//// ----------------GPIO_EXTI_Callback-----------------------------------------

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002070:	d10f      	bne.n	8002092 <HAL_GPIO_EXTI_Callback+0x32>
		bluecounter++;
 8002072:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x40>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	3301      	adds	r3, #1
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x40>)
 800207c:	701a      	strb	r2, [r3, #0]
		bluecounter%=4;
 800207e:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x40>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	b2da      	uxtb	r2, r3
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x40>)
 800208a:	701a      	strb	r2, [r3, #0]

		flag_gpioselftest = 1;
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <HAL_GPIO_EXTI_Callback+0x44>)
 800208e:	2201      	movs	r2, #1
 8002090:	701a      	strb	r2, [r3, #0]
		}
#endif


		}
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	200003f4 	.word	0x200003f4
 80020a4:	20000414 	.word	0x20000414

080020a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020ac:	b672      	cpsid	i
}
 80020ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <Error_Handler+0x8>
	...

080020b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_MspInit+0x4c>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	4a0f      	ldr	r2, [pc, #60]	; (8002100 <HAL_MspInit+0x4c>)
 80020c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ca:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <HAL_MspInit+0x4c>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	603b      	str	r3, [r7, #0]
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_MspInit+0x4c>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	4a08      	ldr	r2, [pc, #32]	; (8002100 <HAL_MspInit+0x4c>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e4:	6413      	str	r3, [r2, #64]	; 0x40
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_MspInit+0x4c>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020f2:	2007      	movs	r0, #7
 80020f4:	f000 ffca 	bl	800308c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40023800 	.word	0x40023800

08002104 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0b      	ldr	r2, [pc, #44]	; (8002140 <HAL_ADC_MspInit+0x3c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d10d      	bne.n	8002132 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_ADC_MspInit+0x40>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	4a09      	ldr	r2, [pc, #36]	; (8002144 <HAL_ADC_MspInit+0x40>)
 8002120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002124:	6453      	str	r3, [r2, #68]	; 0x44
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <HAL_ADC_MspInit+0x40>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40012000 	.word	0x40012000
 8002144:	40023800 	.word	0x40023800

08002148 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <HAL_TIM_Base_MspInit+0x3c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d10d      	bne.n	8002176 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_TIM_Base_MspInit+0x40>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4a09      	ldr	r2, [pc, #36]	; (8002188 <HAL_TIM_Base_MspInit+0x40>)
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	6413      	str	r3, [r2, #64]	; 0x40
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <HAL_TIM_Base_MspInit+0x40>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40000400 	.word	0x40000400
 8002188:	40023800 	.word	0x40023800

0800218c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a12      	ldr	r2, [pc, #72]	; (80021f4 <HAL_TIM_MspPostInit+0x68>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d11d      	bne.n	80021ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <HAL_TIM_MspPostInit+0x6c>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <HAL_TIM_MspPostInit+0x6c>)
 80021b8:	f043 0302 	orr.w	r3, r3, #2
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <HAL_TIM_MspPostInit+0x6c>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021ca:	2310      	movs	r3, #16
 80021cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021da:	2302      	movs	r3, #2
 80021dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021de:	f107 030c 	add.w	r3, r7, #12
 80021e2:	4619      	mov	r1, r3
 80021e4:	4805      	ldr	r0, [pc, #20]	; (80021fc <HAL_TIM_MspPostInit+0x70>)
 80021e6:	f001 fb03 	bl	80037f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021ea:	bf00      	nop
 80021ec:	3720      	adds	r7, #32
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40000400 	.word	0x40000400
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40020400 	.word	0x40020400

08002200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08c      	sub	sp, #48	; 0x30
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 031c 	add.w	r3, r7, #28
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a4a      	ldr	r2, [pc, #296]	; (8002348 <HAL_UART_MspInit+0x148>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d12c      	bne.n	800227c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	4b49      	ldr	r3, [pc, #292]	; (800234c <HAL_UART_MspInit+0x14c>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4a48      	ldr	r2, [pc, #288]	; (800234c <HAL_UART_MspInit+0x14c>)
 800222c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002230:	6413      	str	r3, [r2, #64]	; 0x40
 8002232:	4b46      	ldr	r3, [pc, #280]	; (800234c <HAL_UART_MspInit+0x14c>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	61bb      	str	r3, [r7, #24]
 800223c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	4b42      	ldr	r3, [pc, #264]	; (800234c <HAL_UART_MspInit+0x14c>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a41      	ldr	r2, [pc, #260]	; (800234c <HAL_UART_MspInit+0x14c>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b3f      	ldr	r3, [pc, #252]	; (800234c <HAL_UART_MspInit+0x14c>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800225a:	230c      	movs	r3, #12
 800225c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002266:	2303      	movs	r3, #3
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800226a:	2307      	movs	r3, #7
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226e:	f107 031c 	add.w	r3, r7, #28
 8002272:	4619      	mov	r1, r3
 8002274:	4836      	ldr	r0, [pc, #216]	; (8002350 <HAL_UART_MspInit+0x150>)
 8002276:	f001 fabb 	bl	80037f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800227a:	e060      	b.n	800233e <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART6)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a34      	ldr	r2, [pc, #208]	; (8002354 <HAL_UART_MspInit+0x154>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d15b      	bne.n	800233e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	4b30      	ldr	r3, [pc, #192]	; (800234c <HAL_UART_MspInit+0x14c>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	4a2f      	ldr	r2, [pc, #188]	; (800234c <HAL_UART_MspInit+0x14c>)
 8002290:	f043 0320 	orr.w	r3, r3, #32
 8002294:	6453      	str	r3, [r2, #68]	; 0x44
 8002296:	4b2d      	ldr	r3, [pc, #180]	; (800234c <HAL_UART_MspInit+0x14c>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	4b29      	ldr	r3, [pc, #164]	; (800234c <HAL_UART_MspInit+0x14c>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a28      	ldr	r2, [pc, #160]	; (800234c <HAL_UART_MspInit+0x14c>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b26      	ldr	r3, [pc, #152]	; (800234c <HAL_UART_MspInit+0x14c>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80022be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80022c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c4:	2302      	movs	r3, #2
 80022c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022cc:	2303      	movs	r3, #3
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80022d0:	2308      	movs	r3, #8
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d4:	f107 031c 	add.w	r3, r7, #28
 80022d8:	4619      	mov	r1, r3
 80022da:	481d      	ldr	r0, [pc, #116]	; (8002350 <HAL_UART_MspInit+0x150>)
 80022dc:	f001 fa88 	bl	80037f0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80022e0:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <HAL_UART_MspInit+0x158>)
 80022e2:	4a1e      	ldr	r2, [pc, #120]	; (800235c <HAL_UART_MspInit+0x15c>)
 80022e4:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80022e6:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <HAL_UART_MspInit+0x158>)
 80022e8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80022ec:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022ee:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <HAL_UART_MspInit+0x158>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022f4:	4b18      	ldr	r3, [pc, #96]	; (8002358 <HAL_UART_MspInit+0x158>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022fa:	4b17      	ldr	r3, [pc, #92]	; (8002358 <HAL_UART_MspInit+0x158>)
 80022fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002300:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <HAL_UART_MspInit+0x158>)
 8002304:	2200      	movs	r2, #0
 8002306:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002308:	4b13      	ldr	r3, [pc, #76]	; (8002358 <HAL_UART_MspInit+0x158>)
 800230a:	2200      	movs	r2, #0
 800230c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_UART_MspInit+0x158>)
 8002310:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002314:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002316:	4b10      	ldr	r3, [pc, #64]	; (8002358 <HAL_UART_MspInit+0x158>)
 8002318:	2200      	movs	r2, #0
 800231a:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800231c:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <HAL_UART_MspInit+0x158>)
 800231e:	2200      	movs	r2, #0
 8002320:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002322:	480d      	ldr	r0, [pc, #52]	; (8002358 <HAL_UART_MspInit+0x158>)
 8002324:	f000 fef4 	bl	8003110 <HAL_DMA_Init>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_UART_MspInit+0x132>
      Error_Handler();
 800232e:	f7ff febb 	bl	80020a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a08      	ldr	r2, [pc, #32]	; (8002358 <HAL_UART_MspInit+0x158>)
 8002336:	639a      	str	r2, [r3, #56]	; 0x38
 8002338:	4a07      	ldr	r2, [pc, #28]	; (8002358 <HAL_UART_MspInit+0x158>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800233e:	bf00      	nop
 8002340:	3730      	adds	r7, #48	; 0x30
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40004400 	.word	0x40004400
 800234c:	40023800 	.word	0x40023800
 8002350:	40020000 	.word	0x40020000
 8002354:	40011400 	.word	0x40011400
 8002358:	20000378 	.word	0x20000378
 800235c:	40026428 	.word	0x40026428

08002360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <NMI_Handler+0x4>

08002366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236a:	e7fe      	b.n	800236a <HardFault_Handler+0x4>

0800236c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <MemManage_Handler+0x4>

08002372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002376:	e7fe      	b.n	8002376 <BusFault_Handler+0x4>

08002378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800237c:	e7fe      	b.n	800237c <UsageFault_Handler+0x4>

0800237e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ac:	f000 f968 	bl	8002680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80023b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023bc:	f001 fbd0 	bl	8003b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80023c8:	4802      	ldr	r0, [pc, #8]	; (80023d4 <DMA2_Stream1_IRQHandler+0x10>)
 80023ca:	f000 ffa7 	bl	800331c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000378 	.word	0x20000378

080023d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
	return 1;
 80023dc:	2301      	movs	r3, #1
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <_kill>:

int _kill(int pid, int sig)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023f2:	f003 fbe9 	bl	8005bc8 <__errno>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2216      	movs	r2, #22
 80023fa:	601a      	str	r2, [r3, #0]
	return -1;
 80023fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_exit>:

void _exit (int status)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002410:	f04f 31ff 	mov.w	r1, #4294967295
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff ffe7 	bl	80023e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800241a:	e7fe      	b.n	800241a <_exit+0x12>

0800241c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	e00a      	b.n	8002444 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800242e:	f3af 8000 	nop.w
 8002432:	4601      	mov	r1, r0
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	60ba      	str	r2, [r7, #8]
 800243a:	b2ca      	uxtb	r2, r1
 800243c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	3301      	adds	r3, #1
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	429a      	cmp	r2, r3
 800244a:	dbf0      	blt.n	800242e <_read+0x12>
	}

return len;
 800244c:	687b      	ldr	r3, [r7, #4]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b086      	sub	sp, #24
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	e009      	b.n	800247c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	60ba      	str	r2, [r7, #8]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	3301      	adds	r3, #1
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	429a      	cmp	r2, r3
 8002482:	dbf1      	blt.n	8002468 <_write+0x12>
	}
	return len;
 8002484:	687b      	ldr	r3, [r7, #4]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <_close>:

int _close(int file)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
	return -1;
 8002496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024b6:	605a      	str	r2, [r3, #4]
	return 0;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <_isatty>:

int _isatty(int file)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
	return 1;
 80024ce:	2301      	movs	r3, #1
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
	return 0;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002500:	4a14      	ldr	r2, [pc, #80]	; (8002554 <_sbrk+0x5c>)
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <_sbrk+0x60>)
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800250c:	4b13      	ldr	r3, [pc, #76]	; (800255c <_sbrk+0x64>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d102      	bne.n	800251a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <_sbrk+0x64>)
 8002516:	4a12      	ldr	r2, [pc, #72]	; (8002560 <_sbrk+0x68>)
 8002518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <_sbrk+0x64>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	429a      	cmp	r2, r3
 8002526:	d207      	bcs.n	8002538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002528:	f003 fb4e 	bl	8005bc8 <__errno>
 800252c:	4603      	mov	r3, r0
 800252e:	220c      	movs	r2, #12
 8002530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002532:	f04f 33ff 	mov.w	r3, #4294967295
 8002536:	e009      	b.n	800254c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <_sbrk+0x64>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800253e:	4b07      	ldr	r3, [pc, #28]	; (800255c <_sbrk+0x64>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	4a05      	ldr	r2, [pc, #20]	; (800255c <_sbrk+0x64>)
 8002548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800254a:	68fb      	ldr	r3, [r7, #12]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20020000 	.word	0x20020000
 8002558:	00000400 	.word	0x00000400
 800255c:	20000524 	.word	0x20000524
 8002560:	20000540 	.word	0x20000540

08002564 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <SystemInit+0x20>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	4a05      	ldr	r2, [pc, #20]	; (8002584 <SystemInit+0x20>)
 8002570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800258c:	480d      	ldr	r0, [pc, #52]	; (80025c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800258e:	490e      	ldr	r1, [pc, #56]	; (80025c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002590:	4a0e      	ldr	r2, [pc, #56]	; (80025cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002594:	e002      	b.n	800259c <LoopCopyDataInit>

08002596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800259a:	3304      	adds	r3, #4

0800259c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800259c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800259e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a0:	d3f9      	bcc.n	8002596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025a2:	4a0b      	ldr	r2, [pc, #44]	; (80025d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025a4:	4c0b      	ldr	r4, [pc, #44]	; (80025d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025a8:	e001      	b.n	80025ae <LoopFillZerobss>

080025aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025ac:	3204      	adds	r2, #4

080025ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b0:	d3fb      	bcc.n	80025aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025b2:	f7ff ffd7 	bl	8002564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025b6:	f003 fb0d 	bl	8005bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ba:	f7ff f8b7 	bl	800172c <main>
  bx  lr    
 80025be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c8:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 80025cc:	08008eac 	.word	0x08008eac
  ldr r2, =_sbss
 80025d0:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 80025d4:	2000053c 	.word	0x2000053c

080025d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025d8:	e7fe      	b.n	80025d8 <ADC_IRQHandler>
	...

080025dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025e0:	4b0e      	ldr	r3, [pc, #56]	; (800261c <HAL_Init+0x40>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0d      	ldr	r2, [pc, #52]	; (800261c <HAL_Init+0x40>)
 80025e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_Init+0x40>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a0a      	ldr	r2, [pc, #40]	; (800261c <HAL_Init+0x40>)
 80025f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <HAL_Init+0x40>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a07      	ldr	r2, [pc, #28]	; (800261c <HAL_Init+0x40>)
 80025fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002602:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002604:	2003      	movs	r0, #3
 8002606:	f000 fd41 	bl	800308c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800260a:	2000      	movs	r0, #0
 800260c:	f000 f808 	bl	8002620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002610:	f7ff fd50 	bl	80020b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40023c00 	.word	0x40023c00

08002620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <HAL_InitTick+0x54>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_InitTick+0x58>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	4619      	mov	r1, r3
 8002632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002636:	fbb3 f3f1 	udiv	r3, r3, r1
 800263a:	fbb2 f3f3 	udiv	r3, r2, r3
 800263e:	4618      	mov	r0, r3
 8002640:	f000 fd59 	bl	80030f6 <HAL_SYSTICK_Config>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e00e      	b.n	800266c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b0f      	cmp	r3, #15
 8002652:	d80a      	bhi.n	800266a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002654:	2200      	movs	r2, #0
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	f04f 30ff 	mov.w	r0, #4294967295
 800265c:	f000 fd21 	bl	80030a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002660:	4a06      	ldr	r2, [pc, #24]	; (800267c <HAL_InitTick+0x5c>)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	e000      	b.n	800266c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000058 	.word	0x20000058
 8002678:	20000060 	.word	0x20000060
 800267c:	2000005c 	.word	0x2000005c

08002680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_IncTick+0x20>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_IncTick+0x24>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4413      	add	r3, r2
 8002690:	4a04      	ldr	r2, [pc, #16]	; (80026a4 <HAL_IncTick+0x24>)
 8002692:	6013      	str	r3, [r2, #0]
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000060 	.word	0x20000060
 80026a4:	20000528 	.word	0x20000528

080026a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return uwTick;
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <HAL_GetTick+0x14>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	20000528 	.word	0x20000528

080026c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026c8:	f7ff ffee 	bl	80026a8 <HAL_GetTick>
 80026cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d8:	d005      	beq.n	80026e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <HAL_Delay+0x44>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026e6:	bf00      	nop
 80026e8:	f7ff ffde 	bl	80026a8 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d8f7      	bhi.n	80026e8 <HAL_Delay+0x28>
  {
  }
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000060 	.word	0x20000060

08002708 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e033      	b.n	8002786 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff fcec 	bl	8002104 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b00      	cmp	r3, #0
 8002744:	d118      	bne.n	8002778 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800274e:	f023 0302 	bic.w	r3, r3, #2
 8002752:	f043 0202 	orr.w	r2, r3, #2
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 faca 	bl	8002cf4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f023 0303 	bic.w	r3, r3, #3
 800276e:	f043 0201 	orr.w	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	641a      	str	r2, [r3, #64]	; 0x40
 8002776:	e001      	b.n	800277c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002784:	7bfb      	ldrb	r3, [r7, #15]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_ADC_Start+0x1a>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e097      	b.n	80028da <HAL_ADC_Start+0x14a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d018      	beq.n	80027f2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0201 	orr.w	r2, r2, #1
 80027ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027d0:	4b45      	ldr	r3, [pc, #276]	; (80028e8 <HAL_ADC_Start+0x158>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a45      	ldr	r2, [pc, #276]	; (80028ec <HAL_ADC_Start+0x15c>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	0c9a      	lsrs	r2, r3, #18
 80027dc:	4613      	mov	r3, r2
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	4413      	add	r3, r2
 80027e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80027e4:	e002      	b.n	80027ec <HAL_ADC_Start+0x5c>
    {
      counter--;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	3b01      	subs	r3, #1
 80027ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f9      	bne.n	80027e6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d15f      	bne.n	80028c0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281e:	2b00      	cmp	r3, #0
 8002820:	d007      	beq.n	8002832 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800282a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800283a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283e:	d106      	bne.n	800284e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002844:	f023 0206 	bic.w	r2, r3, #6
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	645a      	str	r2, [r3, #68]	; 0x44
 800284c:	e002      	b.n	8002854 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800285c:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <HAL_ADC_Start+0x160>)
 800285e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002868:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10f      	bne.n	8002896 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d129      	bne.n	80028d8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	e020      	b.n	80028d8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a16      	ldr	r2, [pc, #88]	; (80028f4 <HAL_ADC_Start+0x164>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d11b      	bne.n	80028d8 <HAL_ADC_Start+0x148>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d114      	bne.n	80028d8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028bc:	609a      	str	r2, [r3, #8]
 80028be:	e00b      	b.n	80028d8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	f043 0210 	orr.w	r2, r3, #16
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	f043 0201 	orr.w	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20000058 	.word	0x20000058
 80028ec:	431bde83 	.word	0x431bde83
 80028f0:	40012300 	.word	0x40012300
 80028f4:	40012000 	.word	0x40012000

080028f8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_ADC_Stop+0x16>
 800290a:	2302      	movs	r3, #2
 800290c:	e021      	b.n	8002952 <HAL_ADC_Stop+0x5a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0201 	bic.w	r2, r2, #1
 8002924:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d109      	bne.n	8002948 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	f043 0201 	orr.w	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b084      	sub	sp, #16
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297a:	d113      	bne.n	80029a4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298a:	d10b      	bne.n	80029a4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	f043 0220 	orr.w	r2, r3, #32
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e063      	b.n	8002a6c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80029a4:	f7ff fe80 	bl	80026a8 <HAL_GetTick>
 80029a8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029aa:	e021      	b.n	80029f0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b2:	d01d      	beq.n	80029f0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_ADC_PollForConversion+0x6c>
 80029ba:	f7ff fe75 	bl	80026a8 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d212      	bcs.n	80029f0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d00b      	beq.n	80029f0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	f043 0204 	orr.w	r2, r3, #4
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e03d      	b.n	8002a6c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d1d6      	bne.n	80029ac <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f06f 0212 	mvn.w	r2, #18
 8002a06:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d123      	bne.n	8002a6a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d11f      	bne.n	8002a6a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d006      	beq.n	8002a46 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d111      	bne.n	8002a6a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d105      	bne.n	8002a6a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f043 0201 	orr.w	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x1c>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e113      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x244>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b09      	cmp	r3, #9
 8002aba:	d925      	bls.n	8002b08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68d9      	ldr	r1, [r3, #12]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4613      	mov	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4413      	add	r3, r2
 8002ad0:	3b1e      	subs	r3, #30
 8002ad2:	2207      	movs	r2, #7
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43da      	mvns	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	400a      	ands	r2, r1
 8002ae0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68d9      	ldr	r1, [r3, #12]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	4618      	mov	r0, r3
 8002af4:	4603      	mov	r3, r0
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4403      	add	r3, r0
 8002afa:	3b1e      	subs	r3, #30
 8002afc:	409a      	lsls	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	e022      	b.n	8002b4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6919      	ldr	r1, [r3, #16]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	4613      	mov	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4413      	add	r3, r2
 8002b1c:	2207      	movs	r2, #7
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43da      	mvns	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	400a      	ands	r2, r1
 8002b2a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6919      	ldr	r1, [r3, #16]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	4603      	mov	r3, r0
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	4403      	add	r3, r0
 8002b44:	409a      	lsls	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d824      	bhi.n	8002ba0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	3b05      	subs	r3, #5
 8002b68:	221f      	movs	r2, #31
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	400a      	ands	r2, r1
 8002b76:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	4618      	mov	r0, r3
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	3b05      	subs	r3, #5
 8002b92:	fa00 f203 	lsl.w	r2, r0, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b9e:	e04c      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b0c      	cmp	r3, #12
 8002ba6:	d824      	bhi.n	8002bf2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3b23      	subs	r3, #35	; 0x23
 8002bba:	221f      	movs	r2, #31
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	400a      	ands	r2, r1
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	3b23      	subs	r3, #35	; 0x23
 8002be4:	fa00 f203 	lsl.w	r2, r0, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
 8002bf0:	e023      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	3b41      	subs	r3, #65	; 0x41
 8002c04:	221f      	movs	r2, #31
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	400a      	ands	r2, r1
 8002c12:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	4618      	mov	r0, r3
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3b41      	subs	r3, #65	; 0x41
 8002c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c3a:	4b29      	ldr	r3, [pc, #164]	; (8002ce0 <HAL_ADC_ConfigChannel+0x250>)
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a28      	ldr	r2, [pc, #160]	; (8002ce4 <HAL_ADC_ConfigChannel+0x254>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d10f      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x1d8>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b12      	cmp	r3, #18
 8002c4e:	d10b      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ce4 <HAL_ADC_ConfigChannel+0x254>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d12b      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x23a>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a1c      	ldr	r2, [pc, #112]	; (8002ce8 <HAL_ADC_ConfigChannel+0x258>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d003      	beq.n	8002c84 <HAL_ADC_ConfigChannel+0x1f4>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b11      	cmp	r3, #17
 8002c82:	d122      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a11      	ldr	r2, [pc, #68]	; (8002ce8 <HAL_ADC_ConfigChannel+0x258>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d111      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ca6:	4b11      	ldr	r3, [pc, #68]	; (8002cec <HAL_ADC_ConfigChannel+0x25c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a11      	ldr	r2, [pc, #68]	; (8002cf0 <HAL_ADC_ConfigChannel+0x260>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	0c9a      	lsrs	r2, r3, #18
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cbc:	e002      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f9      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	40012300 	.word	0x40012300
 8002ce4:	40012000 	.word	0x40012000
 8002ce8:	10000012 	.word	0x10000012
 8002cec:	20000058 	.word	0x20000058
 8002cf0:	431bde83 	.word	0x431bde83

08002cf4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cfc:	4b79      	ldr	r3, [pc, #484]	; (8002ee4 <ADC_Init+0x1f0>)
 8002cfe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	431a      	orrs	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	021a      	lsls	r2, r3, #8
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6859      	ldr	r1, [r3, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6899      	ldr	r1, [r3, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	4a58      	ldr	r2, [pc, #352]	; (8002ee8 <ADC_Init+0x1f4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d022      	beq.n	8002dd2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6899      	ldr	r1, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6899      	ldr	r1, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	e00f      	b.n	8002df2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002de0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002df0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0202 	bic.w	r2, r2, #2
 8002e00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6899      	ldr	r1, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	7e1b      	ldrb	r3, [r3, #24]
 8002e0c:	005a      	lsls	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d01b      	beq.n	8002e58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6859      	ldr	r1, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	035a      	lsls	r2, r3, #13
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	e007      	b.n	8002e68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	051a      	lsls	r2, r3, #20
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6899      	ldr	r1, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002eaa:	025a      	lsls	r2, r3, #9
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6899      	ldr	r1, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	029a      	lsls	r2, r3, #10
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	609a      	str	r2, [r3, #8]
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	40012300 	.word	0x40012300
 8002ee8:	0f000001 	.word	0x0f000001

08002eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <__NVIC_SetPriorityGrouping+0x44>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f1e:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <__NVIC_SetPriorityGrouping+0x44>)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	60d3      	str	r3, [r2, #12]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <__NVIC_GetPriorityGrouping+0x18>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	f003 0307 	and.w	r3, r3, #7
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	db0b      	blt.n	8002f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	f003 021f 	and.w	r2, r3, #31
 8002f68:	4907      	ldr	r1, [pc, #28]	; (8002f88 <__NVIC_EnableIRQ+0x38>)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	2001      	movs	r0, #1
 8002f72:	fa00 f202 	lsl.w	r2, r0, r2
 8002f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000e100 	.word	0xe000e100

08002f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	6039      	str	r1, [r7, #0]
 8002f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	db0a      	blt.n	8002fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	490c      	ldr	r1, [pc, #48]	; (8002fd8 <__NVIC_SetPriority+0x4c>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	0112      	lsls	r2, r2, #4
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	440b      	add	r3, r1
 8002fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb4:	e00a      	b.n	8002fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4908      	ldr	r1, [pc, #32]	; (8002fdc <__NVIC_SetPriority+0x50>)
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	3b04      	subs	r3, #4
 8002fc4:	0112      	lsls	r2, r2, #4
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	440b      	add	r3, r1
 8002fca:	761a      	strb	r2, [r3, #24]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000e100 	.word	0xe000e100
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	; 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f1c3 0307 	rsb	r3, r3, #7
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	bf28      	it	cs
 8002ffe:	2304      	movcs	r3, #4
 8003000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3304      	adds	r3, #4
 8003006:	2b06      	cmp	r3, #6
 8003008:	d902      	bls.n	8003010 <NVIC_EncodePriority+0x30>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3b03      	subs	r3, #3
 800300e:	e000      	b.n	8003012 <NVIC_EncodePriority+0x32>
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	f04f 32ff 	mov.w	r2, #4294967295
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	401a      	ands	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003028:	f04f 31ff 	mov.w	r1, #4294967295
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	fa01 f303 	lsl.w	r3, r1, r3
 8003032:	43d9      	mvns	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	4313      	orrs	r3, r2
         );
}
 800303a:	4618      	mov	r0, r3
 800303c:	3724      	adds	r7, #36	; 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003058:	d301      	bcc.n	800305e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800305a:	2301      	movs	r3, #1
 800305c:	e00f      	b.n	800307e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <SysTick_Config+0x40>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3b01      	subs	r3, #1
 8003064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003066:	210f      	movs	r1, #15
 8003068:	f04f 30ff 	mov.w	r0, #4294967295
 800306c:	f7ff ff8e 	bl	8002f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <SysTick_Config+0x40>)
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003076:	4b04      	ldr	r3, [pc, #16]	; (8003088 <SysTick_Config+0x40>)
 8003078:	2207      	movs	r2, #7
 800307a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	e000e010 	.word	0xe000e010

0800308c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ff29 	bl	8002eec <__NVIC_SetPriorityGrouping>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b086      	sub	sp, #24
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030b4:	f7ff ff3e 	bl	8002f34 <__NVIC_GetPriorityGrouping>
 80030b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	6978      	ldr	r0, [r7, #20]
 80030c0:	f7ff ff8e 	bl	8002fe0 <NVIC_EncodePriority>
 80030c4:	4602      	mov	r2, r0
 80030c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff5d 	bl	8002f8c <__NVIC_SetPriority>
}
 80030d2:	bf00      	nop
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	4603      	mov	r3, r0
 80030e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff ff31 	bl	8002f50 <__NVIC_EnableIRQ>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff ffa2 	bl	8003048 <SysTick_Config>
 8003104:	4603      	mov	r3, r0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800311c:	f7ff fac4 	bl	80026a8 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e099      	b.n	8003260 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800314c:	e00f      	b.n	800316e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800314e:	f7ff faab 	bl	80026a8 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b05      	cmp	r3, #5
 800315a:	d908      	bls.n	800316e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2203      	movs	r2, #3
 8003166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e078      	b.n	8003260 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1e8      	bne.n	800314e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	4b38      	ldr	r3, [pc, #224]	; (8003268 <HAL_DMA_Init+0x158>)
 8003188:	4013      	ands	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800319a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4313      	orrs	r3, r2
 80031be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d107      	bne.n	80031d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	4313      	orrs	r3, r2
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f023 0307 	bic.w	r3, r3, #7
 80031ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d117      	bne.n	8003232 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00e      	beq.n	8003232 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fa6f 	bl	80036f8 <DMA_CheckFifoParam>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2240      	movs	r2, #64	; 0x40
 8003224:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800322e:	2301      	movs	r3, #1
 8003230:	e016      	b.n	8003260 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fa26 	bl	800368c <DMA_CalcBaseAndBitshift>
 8003240:	4603      	mov	r3, r0
 8003242:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003248:	223f      	movs	r2, #63	; 0x3f
 800324a:	409a      	lsls	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	f010803f 	.word	0xf010803f

0800326c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003282:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_DMA_Start_IT+0x26>
 800328e:	2302      	movs	r3, #2
 8003290:	e040      	b.n	8003314 <HAL_DMA_Start_IT+0xa8>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d12f      	bne.n	8003306 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2202      	movs	r2, #2
 80032aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f9b8 	bl	8003630 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c4:	223f      	movs	r2, #63	; 0x3f
 80032c6:	409a      	lsls	r2, r3
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0216 	orr.w	r2, r2, #22
 80032da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0208 	orr.w	r2, r2, #8
 80032f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	e005      	b.n	8003312 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800330e:	2302      	movs	r3, #2
 8003310:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003312:	7dfb      	ldrb	r3, [r7, #23]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003328:	4b8e      	ldr	r3, [pc, #568]	; (8003564 <HAL_DMA_IRQHandler+0x248>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a8e      	ldr	r2, [pc, #568]	; (8003568 <HAL_DMA_IRQHandler+0x24c>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	0a9b      	lsrs	r3, r3, #10
 8003334:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003346:	2208      	movs	r2, #8
 8003348:	409a      	lsls	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4013      	ands	r3, r2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d01a      	beq.n	8003388 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d013      	beq.n	8003388 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0204 	bic.w	r2, r2, #4
 800336e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003374:	2208      	movs	r2, #8
 8003376:	409a      	lsls	r2, r3
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003380:	f043 0201 	orr.w	r2, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338c:	2201      	movs	r2, #1
 800338e:	409a      	lsls	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d012      	beq.n	80033be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00b      	beq.n	80033be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033aa:	2201      	movs	r2, #1
 80033ac:	409a      	lsls	r2, r3
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	f043 0202 	orr.w	r2, r3, #2
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c2:	2204      	movs	r2, #4
 80033c4:	409a      	lsls	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d012      	beq.n	80033f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00b      	beq.n	80033f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e0:	2204      	movs	r2, #4
 80033e2:	409a      	lsls	r2, r3
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ec:	f043 0204 	orr.w	r2, r3, #4
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f8:	2210      	movs	r2, #16
 80033fa:	409a      	lsls	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d043      	beq.n	800348c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d03c      	beq.n	800348c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003416:	2210      	movs	r2, #16
 8003418:	409a      	lsls	r2, r3
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d018      	beq.n	800345e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d108      	bne.n	800344c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d024      	beq.n	800348c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	4798      	blx	r3
 800344a:	e01f      	b.n	800348c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01b      	beq.n	800348c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4798      	blx	r3
 800345c:	e016      	b.n	800348c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003468:	2b00      	cmp	r3, #0
 800346a:	d107      	bne.n	800347c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0208 	bic.w	r2, r2, #8
 800347a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	2220      	movs	r2, #32
 8003492:	409a      	lsls	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4013      	ands	r3, r2
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 808f 	beq.w	80035bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 8087 	beq.w	80035bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b2:	2220      	movs	r2, #32
 80034b4:	409a      	lsls	r2, r3
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b05      	cmp	r3, #5
 80034c4:	d136      	bne.n	8003534 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0216 	bic.w	r2, r2, #22
 80034d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695a      	ldr	r2, [r3, #20]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d103      	bne.n	80034f6 <HAL_DMA_IRQHandler+0x1da>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d007      	beq.n	8003506 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0208 	bic.w	r2, r2, #8
 8003504:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350a:	223f      	movs	r2, #63	; 0x3f
 800350c:	409a      	lsls	r2, r3
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003526:	2b00      	cmp	r3, #0
 8003528:	d07e      	beq.n	8003628 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	4798      	blx	r3
        }
        return;
 8003532:	e079      	b.n	8003628 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01d      	beq.n	800357e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10d      	bne.n	800356c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003554:	2b00      	cmp	r3, #0
 8003556:	d031      	beq.n	80035bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	4798      	blx	r3
 8003560:	e02c      	b.n	80035bc <HAL_DMA_IRQHandler+0x2a0>
 8003562:	bf00      	nop
 8003564:	20000058 	.word	0x20000058
 8003568:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003570:	2b00      	cmp	r3, #0
 8003572:	d023      	beq.n	80035bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	4798      	blx	r3
 800357c:	e01e      	b.n	80035bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10f      	bne.n	80035ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0210 	bic.w	r2, r2, #16
 800359a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d032      	beq.n	800362a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d022      	beq.n	8003616 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2205      	movs	r2, #5
 80035d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0201 	bic.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	3301      	adds	r3, #1
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d307      	bcc.n	8003604 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f2      	bne.n	80035e8 <HAL_DMA_IRQHandler+0x2cc>
 8003602:	e000      	b.n	8003606 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003604:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	4798      	blx	r3
 8003626:	e000      	b.n	800362a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003628:	bf00      	nop
    }
  }
}
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800364c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b40      	cmp	r3, #64	; 0x40
 800365c:	d108      	bne.n	8003670 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800366e:	e007      	b.n	8003680 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	60da      	str	r2, [r3, #12]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	3b10      	subs	r3, #16
 800369c:	4a14      	ldr	r2, [pc, #80]	; (80036f0 <DMA_CalcBaseAndBitshift+0x64>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	091b      	lsrs	r3, r3, #4
 80036a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036a6:	4a13      	ldr	r2, [pc, #76]	; (80036f4 <DMA_CalcBaseAndBitshift+0x68>)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4413      	add	r3, r2
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d909      	bls.n	80036ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036c2:	f023 0303 	bic.w	r3, r3, #3
 80036c6:	1d1a      	adds	r2, r3, #4
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	659a      	str	r2, [r3, #88]	; 0x58
 80036cc:	e007      	b.n	80036de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036d6:	f023 0303 	bic.w	r3, r3, #3
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	aaaaaaab 	.word	0xaaaaaaab
 80036f4:	08008abc 	.word	0x08008abc

080036f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d11f      	bne.n	8003752 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d856      	bhi.n	80037c6 <DMA_CheckFifoParam+0xce>
 8003718:	a201      	add	r2, pc, #4	; (adr r2, 8003720 <DMA_CheckFifoParam+0x28>)
 800371a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371e:	bf00      	nop
 8003720:	08003731 	.word	0x08003731
 8003724:	08003743 	.word	0x08003743
 8003728:	08003731 	.word	0x08003731
 800372c:	080037c7 	.word	0x080037c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d046      	beq.n	80037ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003740:	e043      	b.n	80037ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800374a:	d140      	bne.n	80037ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003750:	e03d      	b.n	80037ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800375a:	d121      	bne.n	80037a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b03      	cmp	r3, #3
 8003760:	d837      	bhi.n	80037d2 <DMA_CheckFifoParam+0xda>
 8003762:	a201      	add	r2, pc, #4	; (adr r2, 8003768 <DMA_CheckFifoParam+0x70>)
 8003764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003768:	08003779 	.word	0x08003779
 800376c:	0800377f 	.word	0x0800377f
 8003770:	08003779 	.word	0x08003779
 8003774:	08003791 	.word	0x08003791
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
      break;
 800377c:	e030      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d025      	beq.n	80037d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800378e:	e022      	b.n	80037d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003798:	d11f      	bne.n	80037da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800379e:	e01c      	b.n	80037da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d903      	bls.n	80037ae <DMA_CheckFifoParam+0xb6>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d003      	beq.n	80037b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037ac:	e018      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]
      break;
 80037b2:	e015      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00e      	beq.n	80037de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
      break;
 80037c4:	e00b      	b.n	80037de <DMA_CheckFifoParam+0xe6>
      break;
 80037c6:	bf00      	nop
 80037c8:	e00a      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ca:	bf00      	nop
 80037cc:	e008      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ce:	bf00      	nop
 80037d0:	e006      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037d2:	bf00      	nop
 80037d4:	e004      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037d6:	bf00      	nop
 80037d8:	e002      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80037da:	bf00      	nop
 80037dc:	e000      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037de:	bf00      	nop
    }
  } 
  
  return status; 
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop

080037f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b089      	sub	sp, #36	; 0x24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037fe:	2300      	movs	r3, #0
 8003800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003802:	2300      	movs	r3, #0
 8003804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	e159      	b.n	8003ac0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800380c:	2201      	movs	r2, #1
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	429a      	cmp	r2, r3
 8003826:	f040 8148 	bne.w	8003aba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b01      	cmp	r3, #1
 8003834:	d005      	beq.n	8003842 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800383e:	2b02      	cmp	r3, #2
 8003840:	d130      	bne.n	80038a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	2203      	movs	r2, #3
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003878:	2201      	movs	r2, #1
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f003 0201 	and.w	r2, r3, #1
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4313      	orrs	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d017      	beq.n	80038e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	2203      	movs	r2, #3
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d123      	bne.n	8003934 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	08da      	lsrs	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3208      	adds	r2, #8
 80038f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	220f      	movs	r2, #15
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	08da      	lsrs	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3208      	adds	r2, #8
 800392e:	69b9      	ldr	r1, [r7, #24]
 8003930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	2203      	movs	r2, #3
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0203 	and.w	r2, r3, #3
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80a2 	beq.w	8003aba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	4b57      	ldr	r3, [pc, #348]	; (8003ad8 <HAL_GPIO_Init+0x2e8>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	4a56      	ldr	r2, [pc, #344]	; (8003ad8 <HAL_GPIO_Init+0x2e8>)
 8003980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003984:	6453      	str	r3, [r2, #68]	; 0x44
 8003986:	4b54      	ldr	r3, [pc, #336]	; (8003ad8 <HAL_GPIO_Init+0x2e8>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003992:	4a52      	ldr	r2, [pc, #328]	; (8003adc <HAL_GPIO_Init+0x2ec>)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	089b      	lsrs	r3, r3, #2
 8003998:	3302      	adds	r3, #2
 800399a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	220f      	movs	r2, #15
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4013      	ands	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a49      	ldr	r2, [pc, #292]	; (8003ae0 <HAL_GPIO_Init+0x2f0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d019      	beq.n	80039f2 <HAL_GPIO_Init+0x202>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a48      	ldr	r2, [pc, #288]	; (8003ae4 <HAL_GPIO_Init+0x2f4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d013      	beq.n	80039ee <HAL_GPIO_Init+0x1fe>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a47      	ldr	r2, [pc, #284]	; (8003ae8 <HAL_GPIO_Init+0x2f8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00d      	beq.n	80039ea <HAL_GPIO_Init+0x1fa>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a46      	ldr	r2, [pc, #280]	; (8003aec <HAL_GPIO_Init+0x2fc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d007      	beq.n	80039e6 <HAL_GPIO_Init+0x1f6>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a45      	ldr	r2, [pc, #276]	; (8003af0 <HAL_GPIO_Init+0x300>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d101      	bne.n	80039e2 <HAL_GPIO_Init+0x1f2>
 80039de:	2304      	movs	r3, #4
 80039e0:	e008      	b.n	80039f4 <HAL_GPIO_Init+0x204>
 80039e2:	2307      	movs	r3, #7
 80039e4:	e006      	b.n	80039f4 <HAL_GPIO_Init+0x204>
 80039e6:	2303      	movs	r3, #3
 80039e8:	e004      	b.n	80039f4 <HAL_GPIO_Init+0x204>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e002      	b.n	80039f4 <HAL_GPIO_Init+0x204>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <HAL_GPIO_Init+0x204>
 80039f2:	2300      	movs	r3, #0
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	f002 0203 	and.w	r2, r2, #3
 80039fa:	0092      	lsls	r2, r2, #2
 80039fc:	4093      	lsls	r3, r2
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a04:	4935      	ldr	r1, [pc, #212]	; (8003adc <HAL_GPIO_Init+0x2ec>)
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	089b      	lsrs	r3, r3, #2
 8003a0a:	3302      	adds	r3, #2
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a12:	4b38      	ldr	r3, [pc, #224]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a36:	4a2f      	ldr	r2, [pc, #188]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a3c:	4b2d      	ldr	r3, [pc, #180]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	43db      	mvns	r3, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a60:	4a24      	ldr	r2, [pc, #144]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a66:	4b23      	ldr	r3, [pc, #140]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4013      	ands	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a8a:	4a1a      	ldr	r2, [pc, #104]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a90:	4b18      	ldr	r3, [pc, #96]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ab4:	4a0f      	ldr	r2, [pc, #60]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	3301      	adds	r3, #1
 8003abe:	61fb      	str	r3, [r7, #28]
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b0f      	cmp	r3, #15
 8003ac4:	f67f aea2 	bls.w	800380c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ac8:	bf00      	nop
 8003aca:	bf00      	nop
 8003acc:	3724      	adds	r7, #36	; 0x24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	40013800 	.word	0x40013800
 8003ae0:	40020000 	.word	0x40020000
 8003ae4:	40020400 	.word	0x40020400
 8003ae8:	40020800 	.word	0x40020800
 8003aec:	40020c00 	.word	0x40020c00
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40013c00 	.word	0x40013c00

08003af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	807b      	strh	r3, [r7, #2]
 8003b04:	4613      	mov	r3, r2
 8003b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b08:	787b      	ldrb	r3, [r7, #1]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b0e:	887a      	ldrh	r2, [r7, #2]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b14:	e003      	b.n	8003b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b16:	887b      	ldrh	r3, [r7, #2]
 8003b18:	041a      	lsls	r2, r3, #16
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	619a      	str	r2, [r3, #24]
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b085      	sub	sp, #20
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	460b      	mov	r3, r1
 8003b34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b3c:	887a      	ldrh	r2, [r7, #2]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4013      	ands	r3, r2
 8003b42:	041a      	lsls	r2, r3, #16
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	43d9      	mvns	r1, r3
 8003b48:	887b      	ldrh	r3, [r7, #2]
 8003b4a:	400b      	ands	r3, r1
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	619a      	str	r2, [r3, #24]
}
 8003b52:	bf00      	nop
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
	...

08003b60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b6a:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b6c:	695a      	ldr	r2, [r3, #20]
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	4013      	ands	r3, r2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d006      	beq.n	8003b84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b76:	4a05      	ldr	r2, [pc, #20]	; (8003b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b7c:	88fb      	ldrh	r3, [r7, #6]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fe fa6e 	bl	8002060 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b84:	bf00      	nop
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40013c00 	.word	0x40013c00

08003b90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e267      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d075      	beq.n	8003c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bae:	4b88      	ldr	r3, [pc, #544]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d00c      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bba:	4b85      	ldr	r3, [pc, #532]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d112      	bne.n	8003bec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc6:	4b82      	ldr	r3, [pc, #520]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd2:	d10b      	bne.n	8003bec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd4:	4b7e      	ldr	r3, [pc, #504]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d05b      	beq.n	8003c98 <HAL_RCC_OscConfig+0x108>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d157      	bne.n	8003c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e242      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf4:	d106      	bne.n	8003c04 <HAL_RCC_OscConfig+0x74>
 8003bf6:	4b76      	ldr	r3, [pc, #472]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a75      	ldr	r2, [pc, #468]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	e01d      	b.n	8003c40 <HAL_RCC_OscConfig+0xb0>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c0c:	d10c      	bne.n	8003c28 <HAL_RCC_OscConfig+0x98>
 8003c0e:	4b70      	ldr	r3, [pc, #448]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a6f      	ldr	r2, [pc, #444]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	4b6d      	ldr	r3, [pc, #436]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a6c      	ldr	r2, [pc, #432]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	e00b      	b.n	8003c40 <HAL_RCC_OscConfig+0xb0>
 8003c28:	4b69      	ldr	r3, [pc, #420]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a68      	ldr	r2, [pc, #416]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	4b66      	ldr	r3, [pc, #408]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a65      	ldr	r2, [pc, #404]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d013      	beq.n	8003c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c48:	f7fe fd2e 	bl	80026a8 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c50:	f7fe fd2a 	bl	80026a8 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b64      	cmp	r3, #100	; 0x64
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e207      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c62:	4b5b      	ldr	r3, [pc, #364]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0xc0>
 8003c6e:	e014      	b.n	8003c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c70:	f7fe fd1a 	bl	80026a8 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c78:	f7fe fd16 	bl	80026a8 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b64      	cmp	r3, #100	; 0x64
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e1f3      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8a:	4b51      	ldr	r3, [pc, #324]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0xe8>
 8003c96:	e000      	b.n	8003c9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d063      	beq.n	8003d6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ca6:	4b4a      	ldr	r3, [pc, #296]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb2:	4b47      	ldr	r3, [pc, #284]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d11c      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cbe:	4b44      	ldr	r3, [pc, #272]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d116      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cca:	4b41      	ldr	r3, [pc, #260]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d005      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x152>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d001      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e1c7      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce2:	4b3b      	ldr	r3, [pc, #236]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	4937      	ldr	r1, [pc, #220]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf6:	e03a      	b.n	8003d6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d020      	beq.n	8003d42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d00:	4b34      	ldr	r3, [pc, #208]	; (8003dd4 <HAL_RCC_OscConfig+0x244>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d06:	f7fe fccf 	bl	80026a8 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d0e:	f7fe fccb 	bl	80026a8 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e1a8      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d20:	4b2b      	ldr	r3, [pc, #172]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2c:	4b28      	ldr	r3, [pc, #160]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4925      	ldr	r1, [pc, #148]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	600b      	str	r3, [r1, #0]
 8003d40:	e015      	b.n	8003d6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d42:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <HAL_RCC_OscConfig+0x244>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fe fcae 	bl	80026a8 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d50:	f7fe fcaa 	bl	80026a8 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e187      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d62:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d036      	beq.n	8003de8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d016      	beq.n	8003db0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d82:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <HAL_RCC_OscConfig+0x248>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d88:	f7fe fc8e 	bl	80026a8 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d90:	f7fe fc8a 	bl	80026a8 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e167      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da2:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCC_OscConfig+0x200>
 8003dae:	e01b      	b.n	8003de8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db0:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <HAL_RCC_OscConfig+0x248>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db6:	f7fe fc77 	bl	80026a8 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dbc:	e00e      	b.n	8003ddc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dbe:	f7fe fc73 	bl	80026a8 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d907      	bls.n	8003ddc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e150      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	42470000 	.word	0x42470000
 8003dd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ddc:	4b88      	ldr	r3, [pc, #544]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1ea      	bne.n	8003dbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 8097 	beq.w	8003f24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df6:	2300      	movs	r3, #0
 8003df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfa:	4b81      	ldr	r3, [pc, #516]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10f      	bne.n	8003e26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	4b7d      	ldr	r3, [pc, #500]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	4a7c      	ldr	r2, [pc, #496]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e14:	6413      	str	r3, [r2, #64]	; 0x40
 8003e16:	4b7a      	ldr	r3, [pc, #488]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	60bb      	str	r3, [r7, #8]
 8003e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e22:	2301      	movs	r3, #1
 8003e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e26:	4b77      	ldr	r3, [pc, #476]	; (8004004 <HAL_RCC_OscConfig+0x474>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d118      	bne.n	8003e64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e32:	4b74      	ldr	r3, [pc, #464]	; (8004004 <HAL_RCC_OscConfig+0x474>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a73      	ldr	r2, [pc, #460]	; (8004004 <HAL_RCC_OscConfig+0x474>)
 8003e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3e:	f7fe fc33 	bl	80026a8 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e46:	f7fe fc2f 	bl	80026a8 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e10c      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e58:	4b6a      	ldr	r3, [pc, #424]	; (8004004 <HAL_RCC_OscConfig+0x474>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0f0      	beq.n	8003e46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d106      	bne.n	8003e7a <HAL_RCC_OscConfig+0x2ea>
 8003e6c:	4b64      	ldr	r3, [pc, #400]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	4a63      	ldr	r2, [pc, #396]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	6713      	str	r3, [r2, #112]	; 0x70
 8003e78:	e01c      	b.n	8003eb4 <HAL_RCC_OscConfig+0x324>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b05      	cmp	r3, #5
 8003e80:	d10c      	bne.n	8003e9c <HAL_RCC_OscConfig+0x30c>
 8003e82:	4b5f      	ldr	r3, [pc, #380]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	4a5e      	ldr	r2, [pc, #376]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e88:	f043 0304 	orr.w	r3, r3, #4
 8003e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8e:	4b5c      	ldr	r3, [pc, #368]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	4a5b      	ldr	r2, [pc, #364]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9a:	e00b      	b.n	8003eb4 <HAL_RCC_OscConfig+0x324>
 8003e9c:	4b58      	ldr	r3, [pc, #352]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	4a57      	ldr	r2, [pc, #348]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea8:	4b55      	ldr	r3, [pc, #340]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	4a54      	ldr	r2, [pc, #336]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003eae:	f023 0304 	bic.w	r3, r3, #4
 8003eb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d015      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebc:	f7fe fbf4 	bl	80026a8 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec2:	e00a      	b.n	8003eda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec4:	f7fe fbf0 	bl	80026a8 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e0cb      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eda:	4b49      	ldr	r3, [pc, #292]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0ee      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x334>
 8003ee6:	e014      	b.n	8003f12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee8:	f7fe fbde 	bl	80026a8 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eee:	e00a      	b.n	8003f06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef0:	f7fe fbda 	bl	80026a8 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e0b5      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f06:	4b3e      	ldr	r3, [pc, #248]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1ee      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d105      	bne.n	8003f24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f18:	4b39      	ldr	r3, [pc, #228]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	4a38      	ldr	r2, [pc, #224]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 80a1 	beq.w	8004070 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f2e:	4b34      	ldr	r3, [pc, #208]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d05c      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d141      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f42:	4b31      	ldr	r3, [pc, #196]	; (8004008 <HAL_RCC_OscConfig+0x478>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f48:	f7fe fbae 	bl	80026a8 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f50:	f7fe fbaa 	bl	80026a8 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e087      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f62:	4b27      	ldr	r3, [pc, #156]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69da      	ldr	r2, [r3, #28]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	019b      	lsls	r3, r3, #6
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	085b      	lsrs	r3, r3, #1
 8003f86:	3b01      	subs	r3, #1
 8003f88:	041b      	lsls	r3, r3, #16
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	061b      	lsls	r3, r3, #24
 8003f92:	491b      	ldr	r1, [pc, #108]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f98:	4b1b      	ldr	r3, [pc, #108]	; (8004008 <HAL_RCC_OscConfig+0x478>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9e:	f7fe fb83 	bl	80026a8 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa6:	f7fe fb7f 	bl	80026a8 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e05c      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb8:	4b11      	ldr	r3, [pc, #68]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x416>
 8003fc4:	e054      	b.n	8004070 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc6:	4b10      	ldr	r3, [pc, #64]	; (8004008 <HAL_RCC_OscConfig+0x478>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fcc:	f7fe fb6c 	bl	80026a8 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd4:	f7fe fb68 	bl	80026a8 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e045      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe6:	4b06      	ldr	r3, [pc, #24]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f0      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x444>
 8003ff2:	e03d      	b.n	8004070 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d107      	bne.n	800400c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e038      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
 8004000:	40023800 	.word	0x40023800
 8004004:	40007000 	.word	0x40007000
 8004008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <HAL_RCC_OscConfig+0x4ec>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d028      	beq.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d121      	bne.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004032:	429a      	cmp	r2, r3
 8004034:	d11a      	bne.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800403c:	4013      	ands	r3, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004044:	4293      	cmp	r3, r2
 8004046:	d111      	bne.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	3b01      	subs	r3, #1
 8004056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004058:	429a      	cmp	r2, r3
 800405a:	d107      	bne.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d001      	beq.n	8004070 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800

08004080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0cc      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004094:	4b68      	ldr	r3, [pc, #416]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d90c      	bls.n	80040bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b65      	ldr	r3, [pc, #404]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040aa:	4b63      	ldr	r3, [pc, #396]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0b8      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d020      	beq.n	800410a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d4:	4b59      	ldr	r3, [pc, #356]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4a58      	ldr	r2, [pc, #352]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040ec:	4b53      	ldr	r3, [pc, #332]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4a52      	ldr	r2, [pc, #328]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f8:	4b50      	ldr	r3, [pc, #320]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	494d      	ldr	r1, [pc, #308]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d044      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d107      	bne.n	800412e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411e:	4b47      	ldr	r3, [pc, #284]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d119      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e07f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d003      	beq.n	800413e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413a:	2b03      	cmp	r3, #3
 800413c:	d107      	bne.n	800414e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413e:	4b3f      	ldr	r3, [pc, #252]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e06f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414e:	4b3b      	ldr	r3, [pc, #236]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e067      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800415e:	4b37      	ldr	r3, [pc, #220]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f023 0203 	bic.w	r2, r3, #3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	4934      	ldr	r1, [pc, #208]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	4313      	orrs	r3, r2
 800416e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004170:	f7fe fa9a 	bl	80026a8 <HAL_GetTick>
 8004174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004176:	e00a      	b.n	800418e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004178:	f7fe fa96 	bl	80026a8 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f241 3288 	movw	r2, #5000	; 0x1388
 8004186:	4293      	cmp	r3, r2
 8004188:	d901      	bls.n	800418e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e04f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418e:	4b2b      	ldr	r3, [pc, #172]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 020c 	and.w	r2, r3, #12
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	429a      	cmp	r2, r3
 800419e:	d1eb      	bne.n	8004178 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041a0:	4b25      	ldr	r3, [pc, #148]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d20c      	bcs.n	80041c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ae:	4b22      	ldr	r3, [pc, #136]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b6:	4b20      	ldr	r3, [pc, #128]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e032      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d008      	beq.n	80041e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d4:	4b19      	ldr	r3, [pc, #100]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4916      	ldr	r1, [pc, #88]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041f2:	4b12      	ldr	r3, [pc, #72]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	490e      	ldr	r1, [pc, #56]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	4313      	orrs	r3, r2
 8004204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004206:	f000 f821 	bl	800424c <HAL_RCC_GetSysClockFreq>
 800420a:	4602      	mov	r2, r0
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	091b      	lsrs	r3, r3, #4
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	490a      	ldr	r1, [pc, #40]	; (8004240 <HAL_RCC_ClockConfig+0x1c0>)
 8004218:	5ccb      	ldrb	r3, [r1, r3]
 800421a:	fa22 f303 	lsr.w	r3, r2, r3
 800421e:	4a09      	ldr	r2, [pc, #36]	; (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 8004220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004222:	4b09      	ldr	r3, [pc, #36]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7fe f9fa 	bl	8002620 <HAL_InitTick>

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40023c00 	.word	0x40023c00
 800423c:	40023800 	.word	0x40023800
 8004240:	08008aa4 	.word	0x08008aa4
 8004244:	20000058 	.word	0x20000058
 8004248:	2000005c 	.word	0x2000005c

0800424c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800424c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004250:	b094      	sub	sp, #80	; 0x50
 8004252:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	647b      	str	r3, [r7, #68]	; 0x44
 8004258:	2300      	movs	r3, #0
 800425a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800425c:	2300      	movs	r3, #0
 800425e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004264:	4b79      	ldr	r3, [pc, #484]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 030c 	and.w	r3, r3, #12
 800426c:	2b08      	cmp	r3, #8
 800426e:	d00d      	beq.n	800428c <HAL_RCC_GetSysClockFreq+0x40>
 8004270:	2b08      	cmp	r3, #8
 8004272:	f200 80e1 	bhi.w	8004438 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0x34>
 800427a:	2b04      	cmp	r3, #4
 800427c:	d003      	beq.n	8004286 <HAL_RCC_GetSysClockFreq+0x3a>
 800427e:	e0db      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004280:	4b73      	ldr	r3, [pc, #460]	; (8004450 <HAL_RCC_GetSysClockFreq+0x204>)
 8004282:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004284:	e0db      	b.n	800443e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004286:	4b73      	ldr	r3, [pc, #460]	; (8004454 <HAL_RCC_GetSysClockFreq+0x208>)
 8004288:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800428a:	e0d8      	b.n	800443e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800428c:	4b6f      	ldr	r3, [pc, #444]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004294:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004296:	4b6d      	ldr	r3, [pc, #436]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d063      	beq.n	800436a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a2:	4b6a      	ldr	r3, [pc, #424]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	099b      	lsrs	r3, r3, #6
 80042a8:	2200      	movs	r2, #0
 80042aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80042ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b4:	633b      	str	r3, [r7, #48]	; 0x30
 80042b6:	2300      	movs	r3, #0
 80042b8:	637b      	str	r3, [r7, #52]	; 0x34
 80042ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042be:	4622      	mov	r2, r4
 80042c0:	462b      	mov	r3, r5
 80042c2:	f04f 0000 	mov.w	r0, #0
 80042c6:	f04f 0100 	mov.w	r1, #0
 80042ca:	0159      	lsls	r1, r3, #5
 80042cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042d0:	0150      	lsls	r0, r2, #5
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4621      	mov	r1, r4
 80042d8:	1a51      	subs	r1, r2, r1
 80042da:	6139      	str	r1, [r7, #16]
 80042dc:	4629      	mov	r1, r5
 80042de:	eb63 0301 	sbc.w	r3, r3, r1
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042f0:	4659      	mov	r1, fp
 80042f2:	018b      	lsls	r3, r1, #6
 80042f4:	4651      	mov	r1, sl
 80042f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042fa:	4651      	mov	r1, sl
 80042fc:	018a      	lsls	r2, r1, #6
 80042fe:	4651      	mov	r1, sl
 8004300:	ebb2 0801 	subs.w	r8, r2, r1
 8004304:	4659      	mov	r1, fp
 8004306:	eb63 0901 	sbc.w	r9, r3, r1
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800431a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800431e:	4690      	mov	r8, r2
 8004320:	4699      	mov	r9, r3
 8004322:	4623      	mov	r3, r4
 8004324:	eb18 0303 	adds.w	r3, r8, r3
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	462b      	mov	r3, r5
 800432c:	eb49 0303 	adc.w	r3, r9, r3
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800433e:	4629      	mov	r1, r5
 8004340:	024b      	lsls	r3, r1, #9
 8004342:	4621      	mov	r1, r4
 8004344:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004348:	4621      	mov	r1, r4
 800434a:	024a      	lsls	r2, r1, #9
 800434c:	4610      	mov	r0, r2
 800434e:	4619      	mov	r1, r3
 8004350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004352:	2200      	movs	r2, #0
 8004354:	62bb      	str	r3, [r7, #40]	; 0x28
 8004356:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004358:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800435c:	f7fc fc7c 	bl	8000c58 <__aeabi_uldivmod>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4613      	mov	r3, r2
 8004366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004368:	e058      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800436a:	4b38      	ldr	r3, [pc, #224]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	099b      	lsrs	r3, r3, #6
 8004370:	2200      	movs	r2, #0
 8004372:	4618      	mov	r0, r3
 8004374:	4611      	mov	r1, r2
 8004376:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800437a:	623b      	str	r3, [r7, #32]
 800437c:	2300      	movs	r3, #0
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
 8004380:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004384:	4642      	mov	r2, r8
 8004386:	464b      	mov	r3, r9
 8004388:	f04f 0000 	mov.w	r0, #0
 800438c:	f04f 0100 	mov.w	r1, #0
 8004390:	0159      	lsls	r1, r3, #5
 8004392:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004396:	0150      	lsls	r0, r2, #5
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4641      	mov	r1, r8
 800439e:	ebb2 0a01 	subs.w	sl, r2, r1
 80043a2:	4649      	mov	r1, r9
 80043a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043bc:	ebb2 040a 	subs.w	r4, r2, sl
 80043c0:	eb63 050b 	sbc.w	r5, r3, fp
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	00eb      	lsls	r3, r5, #3
 80043ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043d2:	00e2      	lsls	r2, r4, #3
 80043d4:	4614      	mov	r4, r2
 80043d6:	461d      	mov	r5, r3
 80043d8:	4643      	mov	r3, r8
 80043da:	18e3      	adds	r3, r4, r3
 80043dc:	603b      	str	r3, [r7, #0]
 80043de:	464b      	mov	r3, r9
 80043e0:	eb45 0303 	adc.w	r3, r5, r3
 80043e4:	607b      	str	r3, [r7, #4]
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043f2:	4629      	mov	r1, r5
 80043f4:	028b      	lsls	r3, r1, #10
 80043f6:	4621      	mov	r1, r4
 80043f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043fc:	4621      	mov	r1, r4
 80043fe:	028a      	lsls	r2, r1, #10
 8004400:	4610      	mov	r0, r2
 8004402:	4619      	mov	r1, r3
 8004404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004406:	2200      	movs	r2, #0
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	61fa      	str	r2, [r7, #28]
 800440c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004410:	f7fc fc22 	bl	8000c58 <__aeabi_uldivmod>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4613      	mov	r3, r2
 800441a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	0c1b      	lsrs	r3, r3, #16
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	3301      	adds	r3, #1
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800442c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800442e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004436:	e002      	b.n	800443e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HAL_RCC_GetSysClockFreq+0x204>)
 800443a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800443c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800443e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004440:	4618      	mov	r0, r3
 8004442:	3750      	adds	r7, #80	; 0x50
 8004444:	46bd      	mov	sp, r7
 8004446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800
 8004450:	00f42400 	.word	0x00f42400
 8004454:	007a1200 	.word	0x007a1200

08004458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800445c:	4b03      	ldr	r3, [pc, #12]	; (800446c <HAL_RCC_GetHCLKFreq+0x14>)
 800445e:	681b      	ldr	r3, [r3, #0]
}
 8004460:	4618      	mov	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	20000058 	.word	0x20000058

08004470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004474:	f7ff fff0 	bl	8004458 <HAL_RCC_GetHCLKFreq>
 8004478:	4602      	mov	r2, r0
 800447a:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	0a9b      	lsrs	r3, r3, #10
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	4903      	ldr	r1, [pc, #12]	; (8004494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004486:	5ccb      	ldrb	r3, [r1, r3]
 8004488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800448c:	4618      	mov	r0, r3
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40023800 	.word	0x40023800
 8004494:	08008ab4 	.word	0x08008ab4

08004498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800449c:	f7ff ffdc 	bl	8004458 <HAL_RCC_GetHCLKFreq>
 80044a0:	4602      	mov	r2, r0
 80044a2:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	0b5b      	lsrs	r3, r3, #13
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	4903      	ldr	r1, [pc, #12]	; (80044bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ae:	5ccb      	ldrb	r3, [r1, r3]
 80044b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40023800 	.word	0x40023800
 80044bc:	08008ab4 	.word	0x08008ab4

080044c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e041      	b.n	8004556 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d106      	bne.n	80044ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fd fe2e 	bl	8002148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3304      	adds	r3, #4
 80044fc:	4619      	mov	r1, r3
 80044fe:	4610      	mov	r0, r2
 8004500:	f000 fa10 	bl	8004924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b082      	sub	sp, #8
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e041      	b.n	80045f4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d106      	bne.n	800458a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f839 	bl	80045fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2202      	movs	r2, #2
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3304      	adds	r3, #4
 800459a:	4619      	mov	r1, r3
 800459c:	4610      	mov	r0, r2
 800459e:	f000 f9c1 	bl	8004924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800462a:	2302      	movs	r3, #2
 800462c:	e0ae      	b.n	800478c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b0c      	cmp	r3, #12
 800463a:	f200 809f 	bhi.w	800477c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800463e:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004644:	08004679 	.word	0x08004679
 8004648:	0800477d 	.word	0x0800477d
 800464c:	0800477d 	.word	0x0800477d
 8004650:	0800477d 	.word	0x0800477d
 8004654:	080046b9 	.word	0x080046b9
 8004658:	0800477d 	.word	0x0800477d
 800465c:	0800477d 	.word	0x0800477d
 8004660:	0800477d 	.word	0x0800477d
 8004664:	080046fb 	.word	0x080046fb
 8004668:	0800477d 	.word	0x0800477d
 800466c:	0800477d 	.word	0x0800477d
 8004670:	0800477d 	.word	0x0800477d
 8004674:	0800473b 	.word	0x0800473b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	4618      	mov	r0, r3
 8004680:	f000 f9d0 	bl	8004a24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699a      	ldr	r2, [r3, #24]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0208 	orr.w	r2, r2, #8
 8004692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699a      	ldr	r2, [r3, #24]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0204 	bic.w	r2, r2, #4
 80046a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6999      	ldr	r1, [r3, #24]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	619a      	str	r2, [r3, #24]
      break;
 80046b6:	e064      	b.n	8004782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fa16 	bl	8004af0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6999      	ldr	r1, [r3, #24]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	021a      	lsls	r2, r3, #8
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	619a      	str	r2, [r3, #24]
      break;
 80046f8:	e043      	b.n	8004782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68b9      	ldr	r1, [r7, #8]
 8004700:	4618      	mov	r0, r3
 8004702:	f000 fa61 	bl	8004bc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69da      	ldr	r2, [r3, #28]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 0208 	orr.w	r2, r2, #8
 8004714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69da      	ldr	r2, [r3, #28]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0204 	bic.w	r2, r2, #4
 8004724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69d9      	ldr	r1, [r3, #28]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	61da      	str	r2, [r3, #28]
      break;
 8004738:	e023      	b.n	8004782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	4618      	mov	r0, r3
 8004742:	f000 faab 	bl	8004c9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69d9      	ldr	r1, [r3, #28]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	021a      	lsls	r2, r3, #8
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	61da      	str	r2, [r3, #28]
      break;
 800477a:	e002      	b.n	8004782 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	75fb      	strb	r3, [r7, #23]
      break;
 8004780:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800478a:	7dfb      	ldrb	r3, [r7, #23]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d101      	bne.n	80047b0 <HAL_TIM_ConfigClockSource+0x1c>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e0b4      	b.n	800491a <HAL_TIM_ConfigClockSource+0x186>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e8:	d03e      	beq.n	8004868 <HAL_TIM_ConfigClockSource+0xd4>
 80047ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ee:	f200 8087 	bhi.w	8004900 <HAL_TIM_ConfigClockSource+0x16c>
 80047f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f6:	f000 8086 	beq.w	8004906 <HAL_TIM_ConfigClockSource+0x172>
 80047fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047fe:	d87f      	bhi.n	8004900 <HAL_TIM_ConfigClockSource+0x16c>
 8004800:	2b70      	cmp	r3, #112	; 0x70
 8004802:	d01a      	beq.n	800483a <HAL_TIM_ConfigClockSource+0xa6>
 8004804:	2b70      	cmp	r3, #112	; 0x70
 8004806:	d87b      	bhi.n	8004900 <HAL_TIM_ConfigClockSource+0x16c>
 8004808:	2b60      	cmp	r3, #96	; 0x60
 800480a:	d050      	beq.n	80048ae <HAL_TIM_ConfigClockSource+0x11a>
 800480c:	2b60      	cmp	r3, #96	; 0x60
 800480e:	d877      	bhi.n	8004900 <HAL_TIM_ConfigClockSource+0x16c>
 8004810:	2b50      	cmp	r3, #80	; 0x50
 8004812:	d03c      	beq.n	800488e <HAL_TIM_ConfigClockSource+0xfa>
 8004814:	2b50      	cmp	r3, #80	; 0x50
 8004816:	d873      	bhi.n	8004900 <HAL_TIM_ConfigClockSource+0x16c>
 8004818:	2b40      	cmp	r3, #64	; 0x40
 800481a:	d058      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x13a>
 800481c:	2b40      	cmp	r3, #64	; 0x40
 800481e:	d86f      	bhi.n	8004900 <HAL_TIM_ConfigClockSource+0x16c>
 8004820:	2b30      	cmp	r3, #48	; 0x30
 8004822:	d064      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0x15a>
 8004824:	2b30      	cmp	r3, #48	; 0x30
 8004826:	d86b      	bhi.n	8004900 <HAL_TIM_ConfigClockSource+0x16c>
 8004828:	2b20      	cmp	r3, #32
 800482a:	d060      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0x15a>
 800482c:	2b20      	cmp	r3, #32
 800482e:	d867      	bhi.n	8004900 <HAL_TIM_ConfigClockSource+0x16c>
 8004830:	2b00      	cmp	r3, #0
 8004832:	d05c      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0x15a>
 8004834:	2b10      	cmp	r3, #16
 8004836:	d05a      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0x15a>
 8004838:	e062      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6899      	ldr	r1, [r3, #8]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f000 faf1 	bl	8004e30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800485c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	609a      	str	r2, [r3, #8]
      break;
 8004866:	e04f      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6818      	ldr	r0, [r3, #0]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	6899      	ldr	r1, [r3, #8]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f000 fada 	bl	8004e30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800488a:	609a      	str	r2, [r3, #8]
      break;
 800488c:	e03c      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6859      	ldr	r1, [r3, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	461a      	mov	r2, r3
 800489c:	f000 fa4e 	bl	8004d3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2150      	movs	r1, #80	; 0x50
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 faa7 	bl	8004dfa <TIM_ITRx_SetConfig>
      break;
 80048ac:	e02c      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	6859      	ldr	r1, [r3, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	461a      	mov	r2, r3
 80048bc:	f000 fa6d 	bl	8004d9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2160      	movs	r1, #96	; 0x60
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fa97 	bl	8004dfa <TIM_ITRx_SetConfig>
      break;
 80048cc:	e01c      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6859      	ldr	r1, [r3, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	461a      	mov	r2, r3
 80048dc:	f000 fa2e 	bl	8004d3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2140      	movs	r1, #64	; 0x40
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fa87 	bl	8004dfa <TIM_ITRx_SetConfig>
      break;
 80048ec:	e00c      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4619      	mov	r1, r3
 80048f8:	4610      	mov	r0, r2
 80048fa:	f000 fa7e 	bl	8004dfa <TIM_ITRx_SetConfig>
      break;
 80048fe:	e003      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	73fb      	strb	r3, [r7, #15]
      break;
 8004904:	e000      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004906:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004918:	7bfb      	ldrb	r3, [r7, #15]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a34      	ldr	r2, [pc, #208]	; (8004a08 <TIM_Base_SetConfig+0xe4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00f      	beq.n	800495c <TIM_Base_SetConfig+0x38>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004942:	d00b      	beq.n	800495c <TIM_Base_SetConfig+0x38>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a31      	ldr	r2, [pc, #196]	; (8004a0c <TIM_Base_SetConfig+0xe8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d007      	beq.n	800495c <TIM_Base_SetConfig+0x38>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a30      	ldr	r2, [pc, #192]	; (8004a10 <TIM_Base_SetConfig+0xec>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d003      	beq.n	800495c <TIM_Base_SetConfig+0x38>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a2f      	ldr	r2, [pc, #188]	; (8004a14 <TIM_Base_SetConfig+0xf0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d108      	bne.n	800496e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a25      	ldr	r2, [pc, #148]	; (8004a08 <TIM_Base_SetConfig+0xe4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d01b      	beq.n	80049ae <TIM_Base_SetConfig+0x8a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497c:	d017      	beq.n	80049ae <TIM_Base_SetConfig+0x8a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a22      	ldr	r2, [pc, #136]	; (8004a0c <TIM_Base_SetConfig+0xe8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d013      	beq.n	80049ae <TIM_Base_SetConfig+0x8a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a21      	ldr	r2, [pc, #132]	; (8004a10 <TIM_Base_SetConfig+0xec>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00f      	beq.n	80049ae <TIM_Base_SetConfig+0x8a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a20      	ldr	r2, [pc, #128]	; (8004a14 <TIM_Base_SetConfig+0xf0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00b      	beq.n	80049ae <TIM_Base_SetConfig+0x8a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a1f      	ldr	r2, [pc, #124]	; (8004a18 <TIM_Base_SetConfig+0xf4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d007      	beq.n	80049ae <TIM_Base_SetConfig+0x8a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a1e      	ldr	r2, [pc, #120]	; (8004a1c <TIM_Base_SetConfig+0xf8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d003      	beq.n	80049ae <TIM_Base_SetConfig+0x8a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a1d      	ldr	r2, [pc, #116]	; (8004a20 <TIM_Base_SetConfig+0xfc>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d108      	bne.n	80049c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	4313      	orrs	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a08      	ldr	r2, [pc, #32]	; (8004a08 <TIM_Base_SetConfig+0xe4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d103      	bne.n	80049f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	615a      	str	r2, [r3, #20]
}
 80049fa:	bf00      	nop
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	40010000 	.word	0x40010000
 8004a0c:	40000400 	.word	0x40000400
 8004a10:	40000800 	.word	0x40000800
 8004a14:	40000c00 	.word	0x40000c00
 8004a18:	40014000 	.word	0x40014000
 8004a1c:	40014400 	.word	0x40014400
 8004a20:	40014800 	.word	0x40014800

08004a24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	f023 0201 	bic.w	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0303 	bic.w	r3, r3, #3
 8004a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f023 0302 	bic.w	r3, r3, #2
 8004a6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a1c      	ldr	r2, [pc, #112]	; (8004aec <TIM_OC1_SetConfig+0xc8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d10c      	bne.n	8004a9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f023 0308 	bic.w	r3, r3, #8
 8004a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f023 0304 	bic.w	r3, r3, #4
 8004a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a13      	ldr	r2, [pc, #76]	; (8004aec <TIM_OC1_SetConfig+0xc8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d111      	bne.n	8004ac6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	621a      	str	r2, [r3, #32]
}
 8004ae0:	bf00      	nop
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	40010000 	.word	0x40010000

08004af0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f023 0210 	bic.w	r2, r3, #16
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	021b      	lsls	r3, r3, #8
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f023 0320 	bic.w	r3, r3, #32
 8004b3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a1e      	ldr	r2, [pc, #120]	; (8004bc4 <TIM_OC2_SetConfig+0xd4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d10d      	bne.n	8004b6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a15      	ldr	r2, [pc, #84]	; (8004bc4 <TIM_OC2_SetConfig+0xd4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d113      	bne.n	8004b9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	621a      	str	r2, [r3, #32]
}
 8004bb6:	bf00      	nop
 8004bb8:	371c      	adds	r7, #28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40010000 	.word	0x40010000

08004bc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0303 	bic.w	r3, r3, #3
 8004bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	021b      	lsls	r3, r3, #8
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a1d      	ldr	r2, [pc, #116]	; (8004c98 <TIM_OC3_SetConfig+0xd0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d10d      	bne.n	8004c42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a14      	ldr	r2, [pc, #80]	; (8004c98 <TIM_OC3_SetConfig+0xd0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d113      	bne.n	8004c72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	621a      	str	r2, [r3, #32]
}
 8004c8c:	bf00      	nop
 8004c8e:	371c      	adds	r7, #28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	40010000 	.word	0x40010000

08004c9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	021b      	lsls	r3, r3, #8
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	031b      	lsls	r3, r3, #12
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a10      	ldr	r2, [pc, #64]	; (8004d38 <TIM_OC4_SetConfig+0x9c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d109      	bne.n	8004d10 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	019b      	lsls	r3, r3, #6
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	621a      	str	r2, [r3, #32]
}
 8004d2a:	bf00      	nop
 8004d2c:	371c      	adds	r7, #28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	40010000 	.word	0x40010000

08004d3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	f023 0201 	bic.w	r2, r3, #1
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f023 030a 	bic.w	r3, r3, #10
 8004d78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	621a      	str	r2, [r3, #32]
}
 8004d8e:	bf00      	nop
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b087      	sub	sp, #28
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f023 0210 	bic.w	r2, r3, #16
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	031b      	lsls	r3, r3, #12
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	621a      	str	r2, [r3, #32]
}
 8004dee:	bf00      	nop
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b085      	sub	sp, #20
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f043 0307 	orr.w	r3, r3, #7
 8004e1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	609a      	str	r2, [r3, #8]
}
 8004e24:	bf00      	nop
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
 8004e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	021a      	lsls	r2, r3, #8
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	609a      	str	r2, [r3, #8]
}
 8004e64:	bf00      	nop
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e050      	b.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a1c      	ldr	r2, [pc, #112]	; (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d018      	beq.n	8004efe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed4:	d013      	beq.n	8004efe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a18      	ldr	r2, [pc, #96]	; (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00e      	beq.n	8004efe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a16      	ldr	r2, [pc, #88]	; (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d009      	beq.n	8004efe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a15      	ldr	r2, [pc, #84]	; (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d004      	beq.n	8004efe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a13      	ldr	r2, [pc, #76]	; (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d10c      	bne.n	8004f18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40010000 	.word	0x40010000
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40000800 	.word	0x40000800
 8004f44:	40000c00 	.word	0x40000c00
 8004f48:	40014000 	.word	0x40014000

08004f4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e03f      	b.n	8004fde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7fd f944 	bl	8002200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2224      	movs	r2, #36	; 0x24
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fba5 	bl	80056e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695a      	ldr	r2, [r3, #20]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b08a      	sub	sp, #40	; 0x28
 8004fea:	af02      	add	r7, sp, #8
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	603b      	str	r3, [r7, #0]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b20      	cmp	r3, #32
 8005004:	d17c      	bne.n	8005100 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <HAL_UART_Transmit+0x2c>
 800500c:	88fb      	ldrh	r3, [r7, #6]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e075      	b.n	8005102 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_UART_Transmit+0x3e>
 8005020:	2302      	movs	r3, #2
 8005022:	e06e      	b.n	8005102 <HAL_UART_Transmit+0x11c>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2221      	movs	r2, #33	; 0x21
 8005036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800503a:	f7fd fb35 	bl	80026a8 <HAL_GetTick>
 800503e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	88fa      	ldrh	r2, [r7, #6]
 800504a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005054:	d108      	bne.n	8005068 <HAL_UART_Transmit+0x82>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d104      	bne.n	8005068 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800505e:	2300      	movs	r3, #0
 8005060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	61bb      	str	r3, [r7, #24]
 8005066:	e003      	b.n	8005070 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800506c:	2300      	movs	r3, #0
 800506e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005078:	e02a      	b.n	80050d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2200      	movs	r2, #0
 8005082:	2180      	movs	r1, #128	; 0x80
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 f992 	bl	80053ae <UART_WaitOnFlagUntilTimeout>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e036      	b.n	8005102 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10b      	bne.n	80050b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	461a      	mov	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	3302      	adds	r3, #2
 80050ae:	61bb      	str	r3, [r7, #24]
 80050b0:	e007      	b.n	80050c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	781a      	ldrb	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	3301      	adds	r3, #1
 80050c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1cf      	bne.n	800507a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2200      	movs	r2, #0
 80050e2:	2140      	movs	r1, #64	; 0x40
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 f962 	bl	80053ae <UART_WaitOnFlagUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e006      	b.n	8005102 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050fc:	2300      	movs	r3, #0
 80050fe:	e000      	b.n	8005102 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005100:	2302      	movs	r3, #2
  }
}
 8005102:	4618      	mov	r0, r3
 8005104:	3720      	adds	r7, #32
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	4613      	mov	r3, r2
 8005116:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b20      	cmp	r3, #32
 8005122:	d11d      	bne.n	8005160 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <HAL_UART_Receive_DMA+0x26>
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e016      	b.n	8005162 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513a:	2b01      	cmp	r3, #1
 800513c:	d101      	bne.n	8005142 <HAL_UART_Receive_DMA+0x38>
 800513e:	2302      	movs	r3, #2
 8005140:	e00f      	b.n	8005162 <HAL_UART_Receive_DMA+0x58>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005150:	88fb      	ldrh	r3, [r7, #6]
 8005152:	461a      	mov	r2, r3
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 f998 	bl	800548c <UART_Start_Receive_DMA>
 800515c:	4603      	mov	r3, r0
 800515e:	e000      	b.n	8005162 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005160:	2302      	movs	r3, #2
  }
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
 80051ae:	460b      	mov	r3, r1
 80051b0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b09c      	sub	sp, #112	; 0x70
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d172      	bne.n	80052c0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80051da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051dc:	2200      	movs	r2, #0
 80051de:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	330c      	adds	r3, #12
 80051e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ea:	e853 3f00 	ldrex	r3, [r3]
 80051ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80051f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	330c      	adds	r3, #12
 80051fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005200:	65ba      	str	r2, [r7, #88]	; 0x58
 8005202:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005206:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005208:	e841 2300 	strex	r3, r2, [r1]
 800520c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800520e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e5      	bne.n	80051e0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3314      	adds	r3, #20
 800521a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521e:	e853 3f00 	ldrex	r3, [r3]
 8005222:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005226:	f023 0301 	bic.w	r3, r3, #1
 800522a:	667b      	str	r3, [r7, #100]	; 0x64
 800522c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3314      	adds	r3, #20
 8005232:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005234:	647a      	str	r2, [r7, #68]	; 0x44
 8005236:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005238:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800523a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800523c:	e841 2300 	strex	r3, r2, [r1]
 8005240:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1e5      	bne.n	8005214 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3314      	adds	r3, #20
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	e853 3f00 	ldrex	r3, [r3]
 8005256:	623b      	str	r3, [r7, #32]
   return(result);
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800525e:	663b      	str	r3, [r7, #96]	; 0x60
 8005260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3314      	adds	r3, #20
 8005266:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005268:	633a      	str	r2, [r7, #48]	; 0x30
 800526a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800526e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005270:	e841 2300 	strex	r3, r2, [r1]
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1e5      	bne.n	8005248 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800527c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005288:	2b01      	cmp	r3, #1
 800528a:	d119      	bne.n	80052c0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800528c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	330c      	adds	r3, #12
 8005292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	e853 3f00 	ldrex	r3, [r3]
 800529a:	60fb      	str	r3, [r7, #12]
   return(result);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0310 	bic.w	r3, r3, #16
 80052a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	330c      	adds	r3, #12
 80052aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052ac:	61fa      	str	r2, [r7, #28]
 80052ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	69b9      	ldr	r1, [r7, #24]
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	e841 2300 	strex	r3, r2, [r1]
 80052b8:	617b      	str	r3, [r7, #20]
   return(result);
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e5      	bne.n	800528c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d106      	bne.n	80052d6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052cc:	4619      	mov	r1, r3
 80052ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80052d0:	f7ff ff69 	bl	80051a6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052d4:	e002      	b.n	80052dc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80052d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80052d8:	f7ff ff47 	bl	800516a <HAL_UART_RxCpltCallback>
}
 80052dc:	bf00      	nop
 80052de:	3770      	adds	r7, #112	; 0x70
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d108      	bne.n	800530c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052fe:	085b      	lsrs	r3, r3, #1
 8005300:	b29b      	uxth	r3, r3
 8005302:	4619      	mov	r1, r3
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f7ff ff4e 	bl	80051a6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800530a:	e002      	b.n	8005312 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f7ff ff36 	bl	800517e <HAL_UART_RxHalfCpltCallback>
}
 8005312:	bf00      	nop
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005336:	2b80      	cmp	r3, #128	; 0x80
 8005338:	bf0c      	ite	eq
 800533a:	2301      	moveq	r3, #1
 800533c:	2300      	movne	r3, #0
 800533e:	b2db      	uxtb	r3, r3
 8005340:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b21      	cmp	r3, #33	; 0x21
 800534c:	d108      	bne.n	8005360 <UART_DMAError+0x46>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d005      	beq.n	8005360 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2200      	movs	r2, #0
 8005358:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800535a:	68b8      	ldr	r0, [r7, #8]
 800535c:	f000 f934 	bl	80055c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536a:	2b40      	cmp	r3, #64	; 0x40
 800536c:	bf0c      	ite	eq
 800536e:	2301      	moveq	r3, #1
 8005370:	2300      	movne	r3, #0
 8005372:	b2db      	uxtb	r3, r3
 8005374:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b22      	cmp	r3, #34	; 0x22
 8005380:	d108      	bne.n	8005394 <UART_DMAError+0x7a>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2200      	movs	r2, #0
 800538c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800538e:	68b8      	ldr	r0, [r7, #8]
 8005390:	f000 f942 	bl	8005618 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005398:	f043 0210 	orr.w	r2, r3, #16
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053a0:	68b8      	ldr	r0, [r7, #8]
 80053a2:	f7ff fef6 	bl	8005192 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053a6:	bf00      	nop
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b090      	sub	sp, #64	; 0x40
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	603b      	str	r3, [r7, #0]
 80053ba:	4613      	mov	r3, r2
 80053bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053be:	e050      	b.n	8005462 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c6:	d04c      	beq.n	8005462 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80053c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d007      	beq.n	80053de <UART_WaitOnFlagUntilTimeout+0x30>
 80053ce:	f7fd f96b 	bl	80026a8 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053da:	429a      	cmp	r2, r3
 80053dc:	d241      	bcs.n	8005462 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	330c      	adds	r3, #12
 80053e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e8:	e853 3f00 	ldrex	r3, [r3]
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	330c      	adds	r3, #12
 80053fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053fe:	637a      	str	r2, [r7, #52]	; 0x34
 8005400:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005402:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005404:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005406:	e841 2300 	strex	r3, r2, [r1]
 800540a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800540c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1e5      	bne.n	80053de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3314      	adds	r3, #20
 8005418:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	613b      	str	r3, [r7, #16]
   return(result);
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f023 0301 	bic.w	r3, r3, #1
 8005428:	63bb      	str	r3, [r7, #56]	; 0x38
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3314      	adds	r3, #20
 8005430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005432:	623a      	str	r2, [r7, #32]
 8005434:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	69f9      	ldr	r1, [r7, #28]
 8005438:	6a3a      	ldr	r2, [r7, #32]
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e5      	bne.n	8005412 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2220      	movs	r2, #32
 800544a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2220      	movs	r2, #32
 8005452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e00f      	b.n	8005482 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	4013      	ands	r3, r2
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	429a      	cmp	r2, r3
 8005470:	bf0c      	ite	eq
 8005472:	2301      	moveq	r3, #1
 8005474:	2300      	movne	r3, #0
 8005476:	b2db      	uxtb	r3, r3
 8005478:	461a      	mov	r2, r3
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	429a      	cmp	r2, r3
 800547e:	d09f      	beq.n	80053c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3740      	adds	r7, #64	; 0x40
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b098      	sub	sp, #96	; 0x60
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	4613      	mov	r3, r2
 8005498:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	88fa      	ldrh	r2, [r7, #6]
 80054a4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2222      	movs	r2, #34	; 0x22
 80054b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	4a40      	ldr	r2, [pc, #256]	; (80055bc <UART_Start_Receive_DMA+0x130>)
 80054ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	4a3f      	ldr	r2, [pc, #252]	; (80055c0 <UART_Start_Receive_DMA+0x134>)
 80054c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c8:	4a3e      	ldr	r2, [pc, #248]	; (80055c4 <UART_Start_Receive_DMA+0x138>)
 80054ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d0:	2200      	movs	r2, #0
 80054d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80054d4:	f107 0308 	add.w	r3, r7, #8
 80054d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3304      	adds	r3, #4
 80054e4:	4619      	mov	r1, r3
 80054e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	88fb      	ldrh	r3, [r7, #6]
 80054ec:	f7fd febe 	bl	800326c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80054f0:	2300      	movs	r3, #0
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	613b      	str	r3, [r7, #16]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	613b      	str	r3, [r7, #16]
 8005504:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d019      	beq.n	800554a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	330c      	adds	r3, #12
 800551c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005520:	e853 3f00 	ldrex	r3, [r3]
 8005524:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552c:	65bb      	str	r3, [r7, #88]	; 0x58
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	330c      	adds	r3, #12
 8005534:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005536:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005538:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800553c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800553e:	e841 2300 	strex	r3, r2, [r1]
 8005542:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1e5      	bne.n	8005516 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3314      	adds	r3, #20
 8005550:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005554:	e853 3f00 	ldrex	r3, [r3]
 8005558:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	f043 0301 	orr.w	r3, r3, #1
 8005560:	657b      	str	r3, [r7, #84]	; 0x54
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3314      	adds	r3, #20
 8005568:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800556a:	63ba      	str	r2, [r7, #56]	; 0x38
 800556c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005572:	e841 2300 	strex	r3, r2, [r1]
 8005576:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1e5      	bne.n	800554a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3314      	adds	r3, #20
 8005584:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	617b      	str	r3, [r7, #20]
   return(result);
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005594:	653b      	str	r3, [r7, #80]	; 0x50
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3314      	adds	r3, #20
 800559c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800559e:	627a      	str	r2, [r7, #36]	; 0x24
 80055a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	6a39      	ldr	r1, [r7, #32]
 80055a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e5      	bne.n	800557e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3760      	adds	r7, #96	; 0x60
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	080051bf 	.word	0x080051bf
 80055c0:	080052e5 	.word	0x080052e5
 80055c4:	0800531b 	.word	0x0800531b

080055c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b089      	sub	sp, #36	; 0x24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	330c      	adds	r3, #12
 80055d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	e853 3f00 	ldrex	r3, [r3]
 80055de:	60bb      	str	r3, [r7, #8]
   return(result);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80055e6:	61fb      	str	r3, [r7, #28]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	330c      	adds	r3, #12
 80055ee:	69fa      	ldr	r2, [r7, #28]
 80055f0:	61ba      	str	r2, [r7, #24]
 80055f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f4:	6979      	ldr	r1, [r7, #20]
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	e841 2300 	strex	r3, r2, [r1]
 80055fc:	613b      	str	r3, [r7, #16]
   return(result);
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e5      	bne.n	80055d0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800560c:	bf00      	nop
 800560e:	3724      	adds	r7, #36	; 0x24
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005618:	b480      	push	{r7}
 800561a:	b095      	sub	sp, #84	; 0x54
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	330c      	adds	r3, #12
 8005626:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005632:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	330c      	adds	r3, #12
 800563e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005640:	643a      	str	r2, [r7, #64]	; 0x40
 8005642:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005646:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800564e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e5      	bne.n	8005620 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3314      	adds	r3, #20
 800565a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	61fb      	str	r3, [r7, #28]
   return(result);
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f023 0301 	bic.w	r3, r3, #1
 800566a:	64bb      	str	r3, [r7, #72]	; 0x48
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	3314      	adds	r3, #20
 8005672:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005674:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005676:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800567a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800567c:	e841 2300 	strex	r3, r2, [r1]
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e5      	bne.n	8005654 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568c:	2b01      	cmp	r3, #1
 800568e:	d119      	bne.n	80056c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	330c      	adds	r3, #12
 8005696:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	60bb      	str	r3, [r7, #8]
   return(result);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f023 0310 	bic.w	r3, r3, #16
 80056a6:	647b      	str	r3, [r7, #68]	; 0x44
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	330c      	adds	r3, #12
 80056ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056b0:	61ba      	str	r2, [r7, #24]
 80056b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6979      	ldr	r1, [r7, #20]
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	613b      	str	r3, [r7, #16]
   return(result);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e5      	bne.n	8005690 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80056d2:	bf00      	nop
 80056d4:	3754      	adds	r7, #84	; 0x54
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
	...

080056e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056e4:	b0c0      	sub	sp, #256	; 0x100
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fc:	68d9      	ldr	r1, [r3, #12]
 80056fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	ea40 0301 	orr.w	r3, r0, r1
 8005708:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800570a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	431a      	orrs	r2, r3
 8005718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	431a      	orrs	r2, r3
 8005720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	4313      	orrs	r3, r2
 8005728:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800572c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005738:	f021 010c 	bic.w	r1, r1, #12
 800573c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005746:	430b      	orrs	r3, r1
 8005748:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800574a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800575a:	6999      	ldr	r1, [r3, #24]
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	ea40 0301 	orr.w	r3, r0, r1
 8005766:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4b8f      	ldr	r3, [pc, #572]	; (80059ac <UART_SetConfig+0x2cc>)
 8005770:	429a      	cmp	r2, r3
 8005772:	d005      	beq.n	8005780 <UART_SetConfig+0xa0>
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	4b8d      	ldr	r3, [pc, #564]	; (80059b0 <UART_SetConfig+0x2d0>)
 800577c:	429a      	cmp	r2, r3
 800577e:	d104      	bne.n	800578a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005780:	f7fe fe8a 	bl	8004498 <HAL_RCC_GetPCLK2Freq>
 8005784:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005788:	e003      	b.n	8005792 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800578a:	f7fe fe71 	bl	8004470 <HAL_RCC_GetPCLK1Freq>
 800578e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800579c:	f040 810c 	bne.w	80059b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057a4:	2200      	movs	r2, #0
 80057a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80057b2:	4622      	mov	r2, r4
 80057b4:	462b      	mov	r3, r5
 80057b6:	1891      	adds	r1, r2, r2
 80057b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80057ba:	415b      	adcs	r3, r3
 80057bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80057c2:	4621      	mov	r1, r4
 80057c4:	eb12 0801 	adds.w	r8, r2, r1
 80057c8:	4629      	mov	r1, r5
 80057ca:	eb43 0901 	adc.w	r9, r3, r1
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057e2:	4690      	mov	r8, r2
 80057e4:	4699      	mov	r9, r3
 80057e6:	4623      	mov	r3, r4
 80057e8:	eb18 0303 	adds.w	r3, r8, r3
 80057ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057f0:	462b      	mov	r3, r5
 80057f2:	eb49 0303 	adc.w	r3, r9, r3
 80057f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005806:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800580a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800580e:	460b      	mov	r3, r1
 8005810:	18db      	adds	r3, r3, r3
 8005812:	653b      	str	r3, [r7, #80]	; 0x50
 8005814:	4613      	mov	r3, r2
 8005816:	eb42 0303 	adc.w	r3, r2, r3
 800581a:	657b      	str	r3, [r7, #84]	; 0x54
 800581c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005820:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005824:	f7fb fa18 	bl	8000c58 <__aeabi_uldivmod>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4b61      	ldr	r3, [pc, #388]	; (80059b4 <UART_SetConfig+0x2d4>)
 800582e:	fba3 2302 	umull	r2, r3, r3, r2
 8005832:	095b      	lsrs	r3, r3, #5
 8005834:	011c      	lsls	r4, r3, #4
 8005836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800583a:	2200      	movs	r2, #0
 800583c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005840:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005844:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005848:	4642      	mov	r2, r8
 800584a:	464b      	mov	r3, r9
 800584c:	1891      	adds	r1, r2, r2
 800584e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005850:	415b      	adcs	r3, r3
 8005852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005854:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005858:	4641      	mov	r1, r8
 800585a:	eb12 0a01 	adds.w	sl, r2, r1
 800585e:	4649      	mov	r1, r9
 8005860:	eb43 0b01 	adc.w	fp, r3, r1
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005870:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005874:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005878:	4692      	mov	sl, r2
 800587a:	469b      	mov	fp, r3
 800587c:	4643      	mov	r3, r8
 800587e:	eb1a 0303 	adds.w	r3, sl, r3
 8005882:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005886:	464b      	mov	r3, r9
 8005888:	eb4b 0303 	adc.w	r3, fp, r3
 800588c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800589c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80058a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80058a4:	460b      	mov	r3, r1
 80058a6:	18db      	adds	r3, r3, r3
 80058a8:	643b      	str	r3, [r7, #64]	; 0x40
 80058aa:	4613      	mov	r3, r2
 80058ac:	eb42 0303 	adc.w	r3, r2, r3
 80058b0:	647b      	str	r3, [r7, #68]	; 0x44
 80058b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80058ba:	f7fb f9cd 	bl	8000c58 <__aeabi_uldivmod>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4611      	mov	r1, r2
 80058c4:	4b3b      	ldr	r3, [pc, #236]	; (80059b4 <UART_SetConfig+0x2d4>)
 80058c6:	fba3 2301 	umull	r2, r3, r3, r1
 80058ca:	095b      	lsrs	r3, r3, #5
 80058cc:	2264      	movs	r2, #100	; 0x64
 80058ce:	fb02 f303 	mul.w	r3, r2, r3
 80058d2:	1acb      	subs	r3, r1, r3
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80058da:	4b36      	ldr	r3, [pc, #216]	; (80059b4 <UART_SetConfig+0x2d4>)
 80058dc:	fba3 2302 	umull	r2, r3, r3, r2
 80058e0:	095b      	lsrs	r3, r3, #5
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058e8:	441c      	add	r4, r3
 80058ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058ee:	2200      	movs	r2, #0
 80058f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80058f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80058fc:	4642      	mov	r2, r8
 80058fe:	464b      	mov	r3, r9
 8005900:	1891      	adds	r1, r2, r2
 8005902:	63b9      	str	r1, [r7, #56]	; 0x38
 8005904:	415b      	adcs	r3, r3
 8005906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005908:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800590c:	4641      	mov	r1, r8
 800590e:	1851      	adds	r1, r2, r1
 8005910:	6339      	str	r1, [r7, #48]	; 0x30
 8005912:	4649      	mov	r1, r9
 8005914:	414b      	adcs	r3, r1
 8005916:	637b      	str	r3, [r7, #52]	; 0x34
 8005918:	f04f 0200 	mov.w	r2, #0
 800591c:	f04f 0300 	mov.w	r3, #0
 8005920:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005924:	4659      	mov	r1, fp
 8005926:	00cb      	lsls	r3, r1, #3
 8005928:	4651      	mov	r1, sl
 800592a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800592e:	4651      	mov	r1, sl
 8005930:	00ca      	lsls	r2, r1, #3
 8005932:	4610      	mov	r0, r2
 8005934:	4619      	mov	r1, r3
 8005936:	4603      	mov	r3, r0
 8005938:	4642      	mov	r2, r8
 800593a:	189b      	adds	r3, r3, r2
 800593c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005940:	464b      	mov	r3, r9
 8005942:	460a      	mov	r2, r1
 8005944:	eb42 0303 	adc.w	r3, r2, r3
 8005948:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800594c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005958:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800595c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005960:	460b      	mov	r3, r1
 8005962:	18db      	adds	r3, r3, r3
 8005964:	62bb      	str	r3, [r7, #40]	; 0x28
 8005966:	4613      	mov	r3, r2
 8005968:	eb42 0303 	adc.w	r3, r2, r3
 800596c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800596e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005972:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005976:	f7fb f96f 	bl	8000c58 <__aeabi_uldivmod>
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <UART_SetConfig+0x2d4>)
 8005980:	fba3 1302 	umull	r1, r3, r3, r2
 8005984:	095b      	lsrs	r3, r3, #5
 8005986:	2164      	movs	r1, #100	; 0x64
 8005988:	fb01 f303 	mul.w	r3, r1, r3
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	3332      	adds	r3, #50	; 0x32
 8005992:	4a08      	ldr	r2, [pc, #32]	; (80059b4 <UART_SetConfig+0x2d4>)
 8005994:	fba2 2303 	umull	r2, r3, r2, r3
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	f003 0207 	and.w	r2, r3, #7
 800599e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4422      	add	r2, r4
 80059a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059a8:	e105      	b.n	8005bb6 <UART_SetConfig+0x4d6>
 80059aa:	bf00      	nop
 80059ac:	40011000 	.word	0x40011000
 80059b0:	40011400 	.word	0x40011400
 80059b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059bc:	2200      	movs	r2, #0
 80059be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80059c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80059ca:	4642      	mov	r2, r8
 80059cc:	464b      	mov	r3, r9
 80059ce:	1891      	adds	r1, r2, r2
 80059d0:	6239      	str	r1, [r7, #32]
 80059d2:	415b      	adcs	r3, r3
 80059d4:	627b      	str	r3, [r7, #36]	; 0x24
 80059d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059da:	4641      	mov	r1, r8
 80059dc:	1854      	adds	r4, r2, r1
 80059de:	4649      	mov	r1, r9
 80059e0:	eb43 0501 	adc.w	r5, r3, r1
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	00eb      	lsls	r3, r5, #3
 80059ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059f2:	00e2      	lsls	r2, r4, #3
 80059f4:	4614      	mov	r4, r2
 80059f6:	461d      	mov	r5, r3
 80059f8:	4643      	mov	r3, r8
 80059fa:	18e3      	adds	r3, r4, r3
 80059fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a00:	464b      	mov	r3, r9
 8005a02:	eb45 0303 	adc.w	r3, r5, r3
 8005a06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a1a:	f04f 0200 	mov.w	r2, #0
 8005a1e:	f04f 0300 	mov.w	r3, #0
 8005a22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a26:	4629      	mov	r1, r5
 8005a28:	008b      	lsls	r3, r1, #2
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a30:	4621      	mov	r1, r4
 8005a32:	008a      	lsls	r2, r1, #2
 8005a34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a38:	f7fb f90e 	bl	8000c58 <__aeabi_uldivmod>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4b60      	ldr	r3, [pc, #384]	; (8005bc4 <UART_SetConfig+0x4e4>)
 8005a42:	fba3 2302 	umull	r2, r3, r3, r2
 8005a46:	095b      	lsrs	r3, r3, #5
 8005a48:	011c      	lsls	r4, r3, #4
 8005a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a5c:	4642      	mov	r2, r8
 8005a5e:	464b      	mov	r3, r9
 8005a60:	1891      	adds	r1, r2, r2
 8005a62:	61b9      	str	r1, [r7, #24]
 8005a64:	415b      	adcs	r3, r3
 8005a66:	61fb      	str	r3, [r7, #28]
 8005a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a6c:	4641      	mov	r1, r8
 8005a6e:	1851      	adds	r1, r2, r1
 8005a70:	6139      	str	r1, [r7, #16]
 8005a72:	4649      	mov	r1, r9
 8005a74:	414b      	adcs	r3, r1
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	f04f 0300 	mov.w	r3, #0
 8005a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a84:	4659      	mov	r1, fp
 8005a86:	00cb      	lsls	r3, r1, #3
 8005a88:	4651      	mov	r1, sl
 8005a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a8e:	4651      	mov	r1, sl
 8005a90:	00ca      	lsls	r2, r1, #3
 8005a92:	4610      	mov	r0, r2
 8005a94:	4619      	mov	r1, r3
 8005a96:	4603      	mov	r3, r0
 8005a98:	4642      	mov	r2, r8
 8005a9a:	189b      	adds	r3, r3, r2
 8005a9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005aa0:	464b      	mov	r3, r9
 8005aa2:	460a      	mov	r2, r1
 8005aa4:	eb42 0303 	adc.w	r3, r2, r3
 8005aa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ab6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ab8:	f04f 0200 	mov.w	r2, #0
 8005abc:	f04f 0300 	mov.w	r3, #0
 8005ac0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ac4:	4649      	mov	r1, r9
 8005ac6:	008b      	lsls	r3, r1, #2
 8005ac8:	4641      	mov	r1, r8
 8005aca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ace:	4641      	mov	r1, r8
 8005ad0:	008a      	lsls	r2, r1, #2
 8005ad2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ad6:	f7fb f8bf 	bl	8000c58 <__aeabi_uldivmod>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4b39      	ldr	r3, [pc, #228]	; (8005bc4 <UART_SetConfig+0x4e4>)
 8005ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ae4:	095b      	lsrs	r3, r3, #5
 8005ae6:	2164      	movs	r1, #100	; 0x64
 8005ae8:	fb01 f303 	mul.w	r3, r1, r3
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	3332      	adds	r3, #50	; 0x32
 8005af2:	4a34      	ldr	r2, [pc, #208]	; (8005bc4 <UART_SetConfig+0x4e4>)
 8005af4:	fba2 2303 	umull	r2, r3, r2, r3
 8005af8:	095b      	lsrs	r3, r3, #5
 8005afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005afe:	441c      	add	r4, r3
 8005b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b04:	2200      	movs	r2, #0
 8005b06:	673b      	str	r3, [r7, #112]	; 0x70
 8005b08:	677a      	str	r2, [r7, #116]	; 0x74
 8005b0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b0e:	4642      	mov	r2, r8
 8005b10:	464b      	mov	r3, r9
 8005b12:	1891      	adds	r1, r2, r2
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	415b      	adcs	r3, r3
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b1e:	4641      	mov	r1, r8
 8005b20:	1851      	adds	r1, r2, r1
 8005b22:	6039      	str	r1, [r7, #0]
 8005b24:	4649      	mov	r1, r9
 8005b26:	414b      	adcs	r3, r1
 8005b28:	607b      	str	r3, [r7, #4]
 8005b2a:	f04f 0200 	mov.w	r2, #0
 8005b2e:	f04f 0300 	mov.w	r3, #0
 8005b32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b36:	4659      	mov	r1, fp
 8005b38:	00cb      	lsls	r3, r1, #3
 8005b3a:	4651      	mov	r1, sl
 8005b3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b40:	4651      	mov	r1, sl
 8005b42:	00ca      	lsls	r2, r1, #3
 8005b44:	4610      	mov	r0, r2
 8005b46:	4619      	mov	r1, r3
 8005b48:	4603      	mov	r3, r0
 8005b4a:	4642      	mov	r2, r8
 8005b4c:	189b      	adds	r3, r3, r2
 8005b4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b50:	464b      	mov	r3, r9
 8005b52:	460a      	mov	r2, r1
 8005b54:	eb42 0303 	adc.w	r3, r2, r3
 8005b58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	663b      	str	r3, [r7, #96]	; 0x60
 8005b64:	667a      	str	r2, [r7, #100]	; 0x64
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	f04f 0300 	mov.w	r3, #0
 8005b6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b72:	4649      	mov	r1, r9
 8005b74:	008b      	lsls	r3, r1, #2
 8005b76:	4641      	mov	r1, r8
 8005b78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b7c:	4641      	mov	r1, r8
 8005b7e:	008a      	lsls	r2, r1, #2
 8005b80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b84:	f7fb f868 	bl	8000c58 <__aeabi_uldivmod>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4b0d      	ldr	r3, [pc, #52]	; (8005bc4 <UART_SetConfig+0x4e4>)
 8005b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8005b92:	095b      	lsrs	r3, r3, #5
 8005b94:	2164      	movs	r1, #100	; 0x64
 8005b96:	fb01 f303 	mul.w	r3, r1, r3
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	3332      	adds	r3, #50	; 0x32
 8005ba0:	4a08      	ldr	r2, [pc, #32]	; (8005bc4 <UART_SetConfig+0x4e4>)
 8005ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	f003 020f 	and.w	r2, r3, #15
 8005bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4422      	add	r2, r4
 8005bb4:	609a      	str	r2, [r3, #8]
}
 8005bb6:	bf00      	nop
 8005bb8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bc2:	bf00      	nop
 8005bc4:	51eb851f 	.word	0x51eb851f

08005bc8 <__errno>:
 8005bc8:	4b01      	ldr	r3, [pc, #4]	; (8005bd0 <__errno+0x8>)
 8005bca:	6818      	ldr	r0, [r3, #0]
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	20000064 	.word	0x20000064

08005bd4 <__libc_init_array>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	4d0d      	ldr	r5, [pc, #52]	; (8005c0c <__libc_init_array+0x38>)
 8005bd8:	4c0d      	ldr	r4, [pc, #52]	; (8005c10 <__libc_init_array+0x3c>)
 8005bda:	1b64      	subs	r4, r4, r5
 8005bdc:	10a4      	asrs	r4, r4, #2
 8005bde:	2600      	movs	r6, #0
 8005be0:	42a6      	cmp	r6, r4
 8005be2:	d109      	bne.n	8005bf8 <__libc_init_array+0x24>
 8005be4:	4d0b      	ldr	r5, [pc, #44]	; (8005c14 <__libc_init_array+0x40>)
 8005be6:	4c0c      	ldr	r4, [pc, #48]	; (8005c18 <__libc_init_array+0x44>)
 8005be8:	f002 ff16 	bl	8008a18 <_init>
 8005bec:	1b64      	subs	r4, r4, r5
 8005bee:	10a4      	asrs	r4, r4, #2
 8005bf0:	2600      	movs	r6, #0
 8005bf2:	42a6      	cmp	r6, r4
 8005bf4:	d105      	bne.n	8005c02 <__libc_init_array+0x2e>
 8005bf6:	bd70      	pop	{r4, r5, r6, pc}
 8005bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bfc:	4798      	blx	r3
 8005bfe:	3601      	adds	r6, #1
 8005c00:	e7ee      	b.n	8005be0 <__libc_init_array+0xc>
 8005c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c06:	4798      	blx	r3
 8005c08:	3601      	adds	r6, #1
 8005c0a:	e7f2      	b.n	8005bf2 <__libc_init_array+0x1e>
 8005c0c:	08008ea4 	.word	0x08008ea4
 8005c10:	08008ea4 	.word	0x08008ea4
 8005c14:	08008ea4 	.word	0x08008ea4
 8005c18:	08008ea8 	.word	0x08008ea8

08005c1c <memset>:
 8005c1c:	4402      	add	r2, r0
 8005c1e:	4603      	mov	r3, r0
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d100      	bne.n	8005c26 <memset+0xa>
 8005c24:	4770      	bx	lr
 8005c26:	f803 1b01 	strb.w	r1, [r3], #1
 8005c2a:	e7f9      	b.n	8005c20 <memset+0x4>

08005c2c <__cvt>:
 8005c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c30:	ec55 4b10 	vmov	r4, r5, d0
 8005c34:	2d00      	cmp	r5, #0
 8005c36:	460e      	mov	r6, r1
 8005c38:	4619      	mov	r1, r3
 8005c3a:	462b      	mov	r3, r5
 8005c3c:	bfbb      	ittet	lt
 8005c3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c42:	461d      	movlt	r5, r3
 8005c44:	2300      	movge	r3, #0
 8005c46:	232d      	movlt	r3, #45	; 0x2d
 8005c48:	700b      	strb	r3, [r1, #0]
 8005c4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005c50:	4691      	mov	r9, r2
 8005c52:	f023 0820 	bic.w	r8, r3, #32
 8005c56:	bfbc      	itt	lt
 8005c58:	4622      	movlt	r2, r4
 8005c5a:	4614      	movlt	r4, r2
 8005c5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c60:	d005      	beq.n	8005c6e <__cvt+0x42>
 8005c62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005c66:	d100      	bne.n	8005c6a <__cvt+0x3e>
 8005c68:	3601      	adds	r6, #1
 8005c6a:	2102      	movs	r1, #2
 8005c6c:	e000      	b.n	8005c70 <__cvt+0x44>
 8005c6e:	2103      	movs	r1, #3
 8005c70:	ab03      	add	r3, sp, #12
 8005c72:	9301      	str	r3, [sp, #4]
 8005c74:	ab02      	add	r3, sp, #8
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	ec45 4b10 	vmov	d0, r4, r5
 8005c7c:	4653      	mov	r3, sl
 8005c7e:	4632      	mov	r2, r6
 8005c80:	f000 fcfe 	bl	8006680 <_dtoa_r>
 8005c84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c88:	4607      	mov	r7, r0
 8005c8a:	d102      	bne.n	8005c92 <__cvt+0x66>
 8005c8c:	f019 0f01 	tst.w	r9, #1
 8005c90:	d022      	beq.n	8005cd8 <__cvt+0xac>
 8005c92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c96:	eb07 0906 	add.w	r9, r7, r6
 8005c9a:	d110      	bne.n	8005cbe <__cvt+0x92>
 8005c9c:	783b      	ldrb	r3, [r7, #0]
 8005c9e:	2b30      	cmp	r3, #48	; 0x30
 8005ca0:	d10a      	bne.n	8005cb8 <__cvt+0x8c>
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	4629      	mov	r1, r5
 8005caa:	f7fa ff15 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cae:	b918      	cbnz	r0, 8005cb8 <__cvt+0x8c>
 8005cb0:	f1c6 0601 	rsb	r6, r6, #1
 8005cb4:	f8ca 6000 	str.w	r6, [sl]
 8005cb8:	f8da 3000 	ldr.w	r3, [sl]
 8005cbc:	4499      	add	r9, r3
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	f7fa ff07 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cca:	b108      	cbz	r0, 8005cd0 <__cvt+0xa4>
 8005ccc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005cd0:	2230      	movs	r2, #48	; 0x30
 8005cd2:	9b03      	ldr	r3, [sp, #12]
 8005cd4:	454b      	cmp	r3, r9
 8005cd6:	d307      	bcc.n	8005ce8 <__cvt+0xbc>
 8005cd8:	9b03      	ldr	r3, [sp, #12]
 8005cda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cdc:	1bdb      	subs	r3, r3, r7
 8005cde:	4638      	mov	r0, r7
 8005ce0:	6013      	str	r3, [r2, #0]
 8005ce2:	b004      	add	sp, #16
 8005ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce8:	1c59      	adds	r1, r3, #1
 8005cea:	9103      	str	r1, [sp, #12]
 8005cec:	701a      	strb	r2, [r3, #0]
 8005cee:	e7f0      	b.n	8005cd2 <__cvt+0xa6>

08005cf0 <__exponent>:
 8005cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2900      	cmp	r1, #0
 8005cf6:	bfb8      	it	lt
 8005cf8:	4249      	neglt	r1, r1
 8005cfa:	f803 2b02 	strb.w	r2, [r3], #2
 8005cfe:	bfb4      	ite	lt
 8005d00:	222d      	movlt	r2, #45	; 0x2d
 8005d02:	222b      	movge	r2, #43	; 0x2b
 8005d04:	2909      	cmp	r1, #9
 8005d06:	7042      	strb	r2, [r0, #1]
 8005d08:	dd2a      	ble.n	8005d60 <__exponent+0x70>
 8005d0a:	f10d 0407 	add.w	r4, sp, #7
 8005d0e:	46a4      	mov	ip, r4
 8005d10:	270a      	movs	r7, #10
 8005d12:	46a6      	mov	lr, r4
 8005d14:	460a      	mov	r2, r1
 8005d16:	fb91 f6f7 	sdiv	r6, r1, r7
 8005d1a:	fb07 1516 	mls	r5, r7, r6, r1
 8005d1e:	3530      	adds	r5, #48	; 0x30
 8005d20:	2a63      	cmp	r2, #99	; 0x63
 8005d22:	f104 34ff 	add.w	r4, r4, #4294967295
 8005d26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005d2a:	4631      	mov	r1, r6
 8005d2c:	dcf1      	bgt.n	8005d12 <__exponent+0x22>
 8005d2e:	3130      	adds	r1, #48	; 0x30
 8005d30:	f1ae 0502 	sub.w	r5, lr, #2
 8005d34:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005d38:	1c44      	adds	r4, r0, #1
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	4561      	cmp	r1, ip
 8005d3e:	d30a      	bcc.n	8005d56 <__exponent+0x66>
 8005d40:	f10d 0209 	add.w	r2, sp, #9
 8005d44:	eba2 020e 	sub.w	r2, r2, lr
 8005d48:	4565      	cmp	r5, ip
 8005d4a:	bf88      	it	hi
 8005d4c:	2200      	movhi	r2, #0
 8005d4e:	4413      	add	r3, r2
 8005d50:	1a18      	subs	r0, r3, r0
 8005d52:	b003      	add	sp, #12
 8005d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005d5e:	e7ed      	b.n	8005d3c <__exponent+0x4c>
 8005d60:	2330      	movs	r3, #48	; 0x30
 8005d62:	3130      	adds	r1, #48	; 0x30
 8005d64:	7083      	strb	r3, [r0, #2]
 8005d66:	70c1      	strb	r1, [r0, #3]
 8005d68:	1d03      	adds	r3, r0, #4
 8005d6a:	e7f1      	b.n	8005d50 <__exponent+0x60>

08005d6c <_printf_float>:
 8005d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d70:	ed2d 8b02 	vpush	{d8}
 8005d74:	b08d      	sub	sp, #52	; 0x34
 8005d76:	460c      	mov	r4, r1
 8005d78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005d7c:	4616      	mov	r6, r2
 8005d7e:	461f      	mov	r7, r3
 8005d80:	4605      	mov	r5, r0
 8005d82:	f001 fa6b 	bl	800725c <_localeconv_r>
 8005d86:	f8d0 a000 	ldr.w	sl, [r0]
 8005d8a:	4650      	mov	r0, sl
 8005d8c:	f7fa fa28 	bl	80001e0 <strlen>
 8005d90:	2300      	movs	r3, #0
 8005d92:	930a      	str	r3, [sp, #40]	; 0x28
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	9305      	str	r3, [sp, #20]
 8005d98:	f8d8 3000 	ldr.w	r3, [r8]
 8005d9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005da0:	3307      	adds	r3, #7
 8005da2:	f023 0307 	bic.w	r3, r3, #7
 8005da6:	f103 0208 	add.w	r2, r3, #8
 8005daa:	f8c8 2000 	str.w	r2, [r8]
 8005dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005db6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005dba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005dbe:	9307      	str	r3, [sp, #28]
 8005dc0:	f8cd 8018 	str.w	r8, [sp, #24]
 8005dc4:	ee08 0a10 	vmov	s16, r0
 8005dc8:	4b9f      	ldr	r3, [pc, #636]	; (8006048 <_printf_float+0x2dc>)
 8005dca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dce:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd2:	f7fa feb3 	bl	8000b3c <__aeabi_dcmpun>
 8005dd6:	bb88      	cbnz	r0, 8005e3c <_printf_float+0xd0>
 8005dd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ddc:	4b9a      	ldr	r3, [pc, #616]	; (8006048 <_printf_float+0x2dc>)
 8005dde:	f04f 32ff 	mov.w	r2, #4294967295
 8005de2:	f7fa fe8d 	bl	8000b00 <__aeabi_dcmple>
 8005de6:	bb48      	cbnz	r0, 8005e3c <_printf_float+0xd0>
 8005de8:	2200      	movs	r2, #0
 8005dea:	2300      	movs	r3, #0
 8005dec:	4640      	mov	r0, r8
 8005dee:	4649      	mov	r1, r9
 8005df0:	f7fa fe7c 	bl	8000aec <__aeabi_dcmplt>
 8005df4:	b110      	cbz	r0, 8005dfc <_printf_float+0x90>
 8005df6:	232d      	movs	r3, #45	; 0x2d
 8005df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dfc:	4b93      	ldr	r3, [pc, #588]	; (800604c <_printf_float+0x2e0>)
 8005dfe:	4894      	ldr	r0, [pc, #592]	; (8006050 <_printf_float+0x2e4>)
 8005e00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005e04:	bf94      	ite	ls
 8005e06:	4698      	movls	r8, r3
 8005e08:	4680      	movhi	r8, r0
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	6123      	str	r3, [r4, #16]
 8005e0e:	9b05      	ldr	r3, [sp, #20]
 8005e10:	f023 0204 	bic.w	r2, r3, #4
 8005e14:	6022      	str	r2, [r4, #0]
 8005e16:	f04f 0900 	mov.w	r9, #0
 8005e1a:	9700      	str	r7, [sp, #0]
 8005e1c:	4633      	mov	r3, r6
 8005e1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e20:	4621      	mov	r1, r4
 8005e22:	4628      	mov	r0, r5
 8005e24:	f000 f9d8 	bl	80061d8 <_printf_common>
 8005e28:	3001      	adds	r0, #1
 8005e2a:	f040 8090 	bne.w	8005f4e <_printf_float+0x1e2>
 8005e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e32:	b00d      	add	sp, #52	; 0x34
 8005e34:	ecbd 8b02 	vpop	{d8}
 8005e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e3c:	4642      	mov	r2, r8
 8005e3e:	464b      	mov	r3, r9
 8005e40:	4640      	mov	r0, r8
 8005e42:	4649      	mov	r1, r9
 8005e44:	f7fa fe7a 	bl	8000b3c <__aeabi_dcmpun>
 8005e48:	b140      	cbz	r0, 8005e5c <_printf_float+0xf0>
 8005e4a:	464b      	mov	r3, r9
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	bfbc      	itt	lt
 8005e50:	232d      	movlt	r3, #45	; 0x2d
 8005e52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e56:	487f      	ldr	r0, [pc, #508]	; (8006054 <_printf_float+0x2e8>)
 8005e58:	4b7f      	ldr	r3, [pc, #508]	; (8006058 <_printf_float+0x2ec>)
 8005e5a:	e7d1      	b.n	8005e00 <_printf_float+0x94>
 8005e5c:	6863      	ldr	r3, [r4, #4]
 8005e5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005e62:	9206      	str	r2, [sp, #24]
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	d13f      	bne.n	8005ee8 <_printf_float+0x17c>
 8005e68:	2306      	movs	r3, #6
 8005e6a:	6063      	str	r3, [r4, #4]
 8005e6c:	9b05      	ldr	r3, [sp, #20]
 8005e6e:	6861      	ldr	r1, [r4, #4]
 8005e70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e74:	2300      	movs	r3, #0
 8005e76:	9303      	str	r3, [sp, #12]
 8005e78:	ab0a      	add	r3, sp, #40	; 0x28
 8005e7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005e7e:	ab09      	add	r3, sp, #36	; 0x24
 8005e80:	ec49 8b10 	vmov	d0, r8, r9
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	6022      	str	r2, [r4, #0]
 8005e88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	f7ff fecd 	bl	8005c2c <__cvt>
 8005e92:	9b06      	ldr	r3, [sp, #24]
 8005e94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e96:	2b47      	cmp	r3, #71	; 0x47
 8005e98:	4680      	mov	r8, r0
 8005e9a:	d108      	bne.n	8005eae <_printf_float+0x142>
 8005e9c:	1cc8      	adds	r0, r1, #3
 8005e9e:	db02      	blt.n	8005ea6 <_printf_float+0x13a>
 8005ea0:	6863      	ldr	r3, [r4, #4]
 8005ea2:	4299      	cmp	r1, r3
 8005ea4:	dd41      	ble.n	8005f2a <_printf_float+0x1be>
 8005ea6:	f1ab 0b02 	sub.w	fp, fp, #2
 8005eaa:	fa5f fb8b 	uxtb.w	fp, fp
 8005eae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005eb2:	d820      	bhi.n	8005ef6 <_printf_float+0x18a>
 8005eb4:	3901      	subs	r1, #1
 8005eb6:	465a      	mov	r2, fp
 8005eb8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ebc:	9109      	str	r1, [sp, #36]	; 0x24
 8005ebe:	f7ff ff17 	bl	8005cf0 <__exponent>
 8005ec2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ec4:	1813      	adds	r3, r2, r0
 8005ec6:	2a01      	cmp	r2, #1
 8005ec8:	4681      	mov	r9, r0
 8005eca:	6123      	str	r3, [r4, #16]
 8005ecc:	dc02      	bgt.n	8005ed4 <_printf_float+0x168>
 8005ece:	6822      	ldr	r2, [r4, #0]
 8005ed0:	07d2      	lsls	r2, r2, #31
 8005ed2:	d501      	bpl.n	8005ed8 <_printf_float+0x16c>
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	6123      	str	r3, [r4, #16]
 8005ed8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d09c      	beq.n	8005e1a <_printf_float+0xae>
 8005ee0:	232d      	movs	r3, #45	; 0x2d
 8005ee2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ee6:	e798      	b.n	8005e1a <_printf_float+0xae>
 8005ee8:	9a06      	ldr	r2, [sp, #24]
 8005eea:	2a47      	cmp	r2, #71	; 0x47
 8005eec:	d1be      	bne.n	8005e6c <_printf_float+0x100>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1bc      	bne.n	8005e6c <_printf_float+0x100>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e7b9      	b.n	8005e6a <_printf_float+0xfe>
 8005ef6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005efa:	d118      	bne.n	8005f2e <_printf_float+0x1c2>
 8005efc:	2900      	cmp	r1, #0
 8005efe:	6863      	ldr	r3, [r4, #4]
 8005f00:	dd0b      	ble.n	8005f1a <_printf_float+0x1ae>
 8005f02:	6121      	str	r1, [r4, #16]
 8005f04:	b913      	cbnz	r3, 8005f0c <_printf_float+0x1a0>
 8005f06:	6822      	ldr	r2, [r4, #0]
 8005f08:	07d0      	lsls	r0, r2, #31
 8005f0a:	d502      	bpl.n	8005f12 <_printf_float+0x1a6>
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	440b      	add	r3, r1
 8005f10:	6123      	str	r3, [r4, #16]
 8005f12:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f14:	f04f 0900 	mov.w	r9, #0
 8005f18:	e7de      	b.n	8005ed8 <_printf_float+0x16c>
 8005f1a:	b913      	cbnz	r3, 8005f22 <_printf_float+0x1b6>
 8005f1c:	6822      	ldr	r2, [r4, #0]
 8005f1e:	07d2      	lsls	r2, r2, #31
 8005f20:	d501      	bpl.n	8005f26 <_printf_float+0x1ba>
 8005f22:	3302      	adds	r3, #2
 8005f24:	e7f4      	b.n	8005f10 <_printf_float+0x1a4>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e7f2      	b.n	8005f10 <_printf_float+0x1a4>
 8005f2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f30:	4299      	cmp	r1, r3
 8005f32:	db05      	blt.n	8005f40 <_printf_float+0x1d4>
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	6121      	str	r1, [r4, #16]
 8005f38:	07d8      	lsls	r0, r3, #31
 8005f3a:	d5ea      	bpl.n	8005f12 <_printf_float+0x1a6>
 8005f3c:	1c4b      	adds	r3, r1, #1
 8005f3e:	e7e7      	b.n	8005f10 <_printf_float+0x1a4>
 8005f40:	2900      	cmp	r1, #0
 8005f42:	bfd4      	ite	le
 8005f44:	f1c1 0202 	rsble	r2, r1, #2
 8005f48:	2201      	movgt	r2, #1
 8005f4a:	4413      	add	r3, r2
 8005f4c:	e7e0      	b.n	8005f10 <_printf_float+0x1a4>
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	055a      	lsls	r2, r3, #21
 8005f52:	d407      	bmi.n	8005f64 <_printf_float+0x1f8>
 8005f54:	6923      	ldr	r3, [r4, #16]
 8005f56:	4642      	mov	r2, r8
 8005f58:	4631      	mov	r1, r6
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	47b8      	blx	r7
 8005f5e:	3001      	adds	r0, #1
 8005f60:	d12c      	bne.n	8005fbc <_printf_float+0x250>
 8005f62:	e764      	b.n	8005e2e <_printf_float+0xc2>
 8005f64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f68:	f240 80e0 	bls.w	800612c <_printf_float+0x3c0>
 8005f6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f70:	2200      	movs	r2, #0
 8005f72:	2300      	movs	r3, #0
 8005f74:	f7fa fdb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d034      	beq.n	8005fe6 <_printf_float+0x27a>
 8005f7c:	4a37      	ldr	r2, [pc, #220]	; (800605c <_printf_float+0x2f0>)
 8005f7e:	2301      	movs	r3, #1
 8005f80:	4631      	mov	r1, r6
 8005f82:	4628      	mov	r0, r5
 8005f84:	47b8      	blx	r7
 8005f86:	3001      	adds	r0, #1
 8005f88:	f43f af51 	beq.w	8005e2e <_printf_float+0xc2>
 8005f8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f90:	429a      	cmp	r2, r3
 8005f92:	db02      	blt.n	8005f9a <_printf_float+0x22e>
 8005f94:	6823      	ldr	r3, [r4, #0]
 8005f96:	07d8      	lsls	r0, r3, #31
 8005f98:	d510      	bpl.n	8005fbc <_printf_float+0x250>
 8005f9a:	ee18 3a10 	vmov	r3, s16
 8005f9e:	4652      	mov	r2, sl
 8005fa0:	4631      	mov	r1, r6
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	47b8      	blx	r7
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	f43f af41 	beq.w	8005e2e <_printf_float+0xc2>
 8005fac:	f04f 0800 	mov.w	r8, #0
 8005fb0:	f104 091a 	add.w	r9, r4, #26
 8005fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	4543      	cmp	r3, r8
 8005fba:	dc09      	bgt.n	8005fd0 <_printf_float+0x264>
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	079b      	lsls	r3, r3, #30
 8005fc0:	f100 8105 	bmi.w	80061ce <_printf_float+0x462>
 8005fc4:	68e0      	ldr	r0, [r4, #12]
 8005fc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fc8:	4298      	cmp	r0, r3
 8005fca:	bfb8      	it	lt
 8005fcc:	4618      	movlt	r0, r3
 8005fce:	e730      	b.n	8005e32 <_printf_float+0xc6>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	464a      	mov	r2, r9
 8005fd4:	4631      	mov	r1, r6
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	47b8      	blx	r7
 8005fda:	3001      	adds	r0, #1
 8005fdc:	f43f af27 	beq.w	8005e2e <_printf_float+0xc2>
 8005fe0:	f108 0801 	add.w	r8, r8, #1
 8005fe4:	e7e6      	b.n	8005fb4 <_printf_float+0x248>
 8005fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	dc39      	bgt.n	8006060 <_printf_float+0x2f4>
 8005fec:	4a1b      	ldr	r2, [pc, #108]	; (800605c <_printf_float+0x2f0>)
 8005fee:	2301      	movs	r3, #1
 8005ff0:	4631      	mov	r1, r6
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	47b8      	blx	r7
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	f43f af19 	beq.w	8005e2e <_printf_float+0xc2>
 8005ffc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006000:	4313      	orrs	r3, r2
 8006002:	d102      	bne.n	800600a <_printf_float+0x29e>
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	07d9      	lsls	r1, r3, #31
 8006008:	d5d8      	bpl.n	8005fbc <_printf_float+0x250>
 800600a:	ee18 3a10 	vmov	r3, s16
 800600e:	4652      	mov	r2, sl
 8006010:	4631      	mov	r1, r6
 8006012:	4628      	mov	r0, r5
 8006014:	47b8      	blx	r7
 8006016:	3001      	adds	r0, #1
 8006018:	f43f af09 	beq.w	8005e2e <_printf_float+0xc2>
 800601c:	f04f 0900 	mov.w	r9, #0
 8006020:	f104 0a1a 	add.w	sl, r4, #26
 8006024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006026:	425b      	negs	r3, r3
 8006028:	454b      	cmp	r3, r9
 800602a:	dc01      	bgt.n	8006030 <_printf_float+0x2c4>
 800602c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800602e:	e792      	b.n	8005f56 <_printf_float+0x1ea>
 8006030:	2301      	movs	r3, #1
 8006032:	4652      	mov	r2, sl
 8006034:	4631      	mov	r1, r6
 8006036:	4628      	mov	r0, r5
 8006038:	47b8      	blx	r7
 800603a:	3001      	adds	r0, #1
 800603c:	f43f aef7 	beq.w	8005e2e <_printf_float+0xc2>
 8006040:	f109 0901 	add.w	r9, r9, #1
 8006044:	e7ee      	b.n	8006024 <_printf_float+0x2b8>
 8006046:	bf00      	nop
 8006048:	7fefffff 	.word	0x7fefffff
 800604c:	08008ac8 	.word	0x08008ac8
 8006050:	08008acc 	.word	0x08008acc
 8006054:	08008ad4 	.word	0x08008ad4
 8006058:	08008ad0 	.word	0x08008ad0
 800605c:	08008ad8 	.word	0x08008ad8
 8006060:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006062:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006064:	429a      	cmp	r2, r3
 8006066:	bfa8      	it	ge
 8006068:	461a      	movge	r2, r3
 800606a:	2a00      	cmp	r2, #0
 800606c:	4691      	mov	r9, r2
 800606e:	dc37      	bgt.n	80060e0 <_printf_float+0x374>
 8006070:	f04f 0b00 	mov.w	fp, #0
 8006074:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006078:	f104 021a 	add.w	r2, r4, #26
 800607c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800607e:	9305      	str	r3, [sp, #20]
 8006080:	eba3 0309 	sub.w	r3, r3, r9
 8006084:	455b      	cmp	r3, fp
 8006086:	dc33      	bgt.n	80060f0 <_printf_float+0x384>
 8006088:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800608c:	429a      	cmp	r2, r3
 800608e:	db3b      	blt.n	8006108 <_printf_float+0x39c>
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	07da      	lsls	r2, r3, #31
 8006094:	d438      	bmi.n	8006108 <_printf_float+0x39c>
 8006096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006098:	9a05      	ldr	r2, [sp, #20]
 800609a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800609c:	1a9a      	subs	r2, r3, r2
 800609e:	eba3 0901 	sub.w	r9, r3, r1
 80060a2:	4591      	cmp	r9, r2
 80060a4:	bfa8      	it	ge
 80060a6:	4691      	movge	r9, r2
 80060a8:	f1b9 0f00 	cmp.w	r9, #0
 80060ac:	dc35      	bgt.n	800611a <_printf_float+0x3ae>
 80060ae:	f04f 0800 	mov.w	r8, #0
 80060b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060b6:	f104 0a1a 	add.w	sl, r4, #26
 80060ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060be:	1a9b      	subs	r3, r3, r2
 80060c0:	eba3 0309 	sub.w	r3, r3, r9
 80060c4:	4543      	cmp	r3, r8
 80060c6:	f77f af79 	ble.w	8005fbc <_printf_float+0x250>
 80060ca:	2301      	movs	r3, #1
 80060cc:	4652      	mov	r2, sl
 80060ce:	4631      	mov	r1, r6
 80060d0:	4628      	mov	r0, r5
 80060d2:	47b8      	blx	r7
 80060d4:	3001      	adds	r0, #1
 80060d6:	f43f aeaa 	beq.w	8005e2e <_printf_float+0xc2>
 80060da:	f108 0801 	add.w	r8, r8, #1
 80060de:	e7ec      	b.n	80060ba <_printf_float+0x34e>
 80060e0:	4613      	mov	r3, r2
 80060e2:	4631      	mov	r1, r6
 80060e4:	4642      	mov	r2, r8
 80060e6:	4628      	mov	r0, r5
 80060e8:	47b8      	blx	r7
 80060ea:	3001      	adds	r0, #1
 80060ec:	d1c0      	bne.n	8006070 <_printf_float+0x304>
 80060ee:	e69e      	b.n	8005e2e <_printf_float+0xc2>
 80060f0:	2301      	movs	r3, #1
 80060f2:	4631      	mov	r1, r6
 80060f4:	4628      	mov	r0, r5
 80060f6:	9205      	str	r2, [sp, #20]
 80060f8:	47b8      	blx	r7
 80060fa:	3001      	adds	r0, #1
 80060fc:	f43f ae97 	beq.w	8005e2e <_printf_float+0xc2>
 8006100:	9a05      	ldr	r2, [sp, #20]
 8006102:	f10b 0b01 	add.w	fp, fp, #1
 8006106:	e7b9      	b.n	800607c <_printf_float+0x310>
 8006108:	ee18 3a10 	vmov	r3, s16
 800610c:	4652      	mov	r2, sl
 800610e:	4631      	mov	r1, r6
 8006110:	4628      	mov	r0, r5
 8006112:	47b8      	blx	r7
 8006114:	3001      	adds	r0, #1
 8006116:	d1be      	bne.n	8006096 <_printf_float+0x32a>
 8006118:	e689      	b.n	8005e2e <_printf_float+0xc2>
 800611a:	9a05      	ldr	r2, [sp, #20]
 800611c:	464b      	mov	r3, r9
 800611e:	4442      	add	r2, r8
 8006120:	4631      	mov	r1, r6
 8006122:	4628      	mov	r0, r5
 8006124:	47b8      	blx	r7
 8006126:	3001      	adds	r0, #1
 8006128:	d1c1      	bne.n	80060ae <_printf_float+0x342>
 800612a:	e680      	b.n	8005e2e <_printf_float+0xc2>
 800612c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800612e:	2a01      	cmp	r2, #1
 8006130:	dc01      	bgt.n	8006136 <_printf_float+0x3ca>
 8006132:	07db      	lsls	r3, r3, #31
 8006134:	d538      	bpl.n	80061a8 <_printf_float+0x43c>
 8006136:	2301      	movs	r3, #1
 8006138:	4642      	mov	r2, r8
 800613a:	4631      	mov	r1, r6
 800613c:	4628      	mov	r0, r5
 800613e:	47b8      	blx	r7
 8006140:	3001      	adds	r0, #1
 8006142:	f43f ae74 	beq.w	8005e2e <_printf_float+0xc2>
 8006146:	ee18 3a10 	vmov	r3, s16
 800614a:	4652      	mov	r2, sl
 800614c:	4631      	mov	r1, r6
 800614e:	4628      	mov	r0, r5
 8006150:	47b8      	blx	r7
 8006152:	3001      	adds	r0, #1
 8006154:	f43f ae6b 	beq.w	8005e2e <_printf_float+0xc2>
 8006158:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800615c:	2200      	movs	r2, #0
 800615e:	2300      	movs	r3, #0
 8006160:	f7fa fcba 	bl	8000ad8 <__aeabi_dcmpeq>
 8006164:	b9d8      	cbnz	r0, 800619e <_printf_float+0x432>
 8006166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006168:	f108 0201 	add.w	r2, r8, #1
 800616c:	3b01      	subs	r3, #1
 800616e:	4631      	mov	r1, r6
 8006170:	4628      	mov	r0, r5
 8006172:	47b8      	blx	r7
 8006174:	3001      	adds	r0, #1
 8006176:	d10e      	bne.n	8006196 <_printf_float+0x42a>
 8006178:	e659      	b.n	8005e2e <_printf_float+0xc2>
 800617a:	2301      	movs	r3, #1
 800617c:	4652      	mov	r2, sl
 800617e:	4631      	mov	r1, r6
 8006180:	4628      	mov	r0, r5
 8006182:	47b8      	blx	r7
 8006184:	3001      	adds	r0, #1
 8006186:	f43f ae52 	beq.w	8005e2e <_printf_float+0xc2>
 800618a:	f108 0801 	add.w	r8, r8, #1
 800618e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006190:	3b01      	subs	r3, #1
 8006192:	4543      	cmp	r3, r8
 8006194:	dcf1      	bgt.n	800617a <_printf_float+0x40e>
 8006196:	464b      	mov	r3, r9
 8006198:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800619c:	e6dc      	b.n	8005f58 <_printf_float+0x1ec>
 800619e:	f04f 0800 	mov.w	r8, #0
 80061a2:	f104 0a1a 	add.w	sl, r4, #26
 80061a6:	e7f2      	b.n	800618e <_printf_float+0x422>
 80061a8:	2301      	movs	r3, #1
 80061aa:	4642      	mov	r2, r8
 80061ac:	e7df      	b.n	800616e <_printf_float+0x402>
 80061ae:	2301      	movs	r3, #1
 80061b0:	464a      	mov	r2, r9
 80061b2:	4631      	mov	r1, r6
 80061b4:	4628      	mov	r0, r5
 80061b6:	47b8      	blx	r7
 80061b8:	3001      	adds	r0, #1
 80061ba:	f43f ae38 	beq.w	8005e2e <_printf_float+0xc2>
 80061be:	f108 0801 	add.w	r8, r8, #1
 80061c2:	68e3      	ldr	r3, [r4, #12]
 80061c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061c6:	1a5b      	subs	r3, r3, r1
 80061c8:	4543      	cmp	r3, r8
 80061ca:	dcf0      	bgt.n	80061ae <_printf_float+0x442>
 80061cc:	e6fa      	b.n	8005fc4 <_printf_float+0x258>
 80061ce:	f04f 0800 	mov.w	r8, #0
 80061d2:	f104 0919 	add.w	r9, r4, #25
 80061d6:	e7f4      	b.n	80061c2 <_printf_float+0x456>

080061d8 <_printf_common>:
 80061d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061dc:	4616      	mov	r6, r2
 80061de:	4699      	mov	r9, r3
 80061e0:	688a      	ldr	r2, [r1, #8]
 80061e2:	690b      	ldr	r3, [r1, #16]
 80061e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061e8:	4293      	cmp	r3, r2
 80061ea:	bfb8      	it	lt
 80061ec:	4613      	movlt	r3, r2
 80061ee:	6033      	str	r3, [r6, #0]
 80061f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061f4:	4607      	mov	r7, r0
 80061f6:	460c      	mov	r4, r1
 80061f8:	b10a      	cbz	r2, 80061fe <_printf_common+0x26>
 80061fa:	3301      	adds	r3, #1
 80061fc:	6033      	str	r3, [r6, #0]
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	0699      	lsls	r1, r3, #26
 8006202:	bf42      	ittt	mi
 8006204:	6833      	ldrmi	r3, [r6, #0]
 8006206:	3302      	addmi	r3, #2
 8006208:	6033      	strmi	r3, [r6, #0]
 800620a:	6825      	ldr	r5, [r4, #0]
 800620c:	f015 0506 	ands.w	r5, r5, #6
 8006210:	d106      	bne.n	8006220 <_printf_common+0x48>
 8006212:	f104 0a19 	add.w	sl, r4, #25
 8006216:	68e3      	ldr	r3, [r4, #12]
 8006218:	6832      	ldr	r2, [r6, #0]
 800621a:	1a9b      	subs	r3, r3, r2
 800621c:	42ab      	cmp	r3, r5
 800621e:	dc26      	bgt.n	800626e <_printf_common+0x96>
 8006220:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006224:	1e13      	subs	r3, r2, #0
 8006226:	6822      	ldr	r2, [r4, #0]
 8006228:	bf18      	it	ne
 800622a:	2301      	movne	r3, #1
 800622c:	0692      	lsls	r2, r2, #26
 800622e:	d42b      	bmi.n	8006288 <_printf_common+0xb0>
 8006230:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006234:	4649      	mov	r1, r9
 8006236:	4638      	mov	r0, r7
 8006238:	47c0      	blx	r8
 800623a:	3001      	adds	r0, #1
 800623c:	d01e      	beq.n	800627c <_printf_common+0xa4>
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	68e5      	ldr	r5, [r4, #12]
 8006242:	6832      	ldr	r2, [r6, #0]
 8006244:	f003 0306 	and.w	r3, r3, #6
 8006248:	2b04      	cmp	r3, #4
 800624a:	bf08      	it	eq
 800624c:	1aad      	subeq	r5, r5, r2
 800624e:	68a3      	ldr	r3, [r4, #8]
 8006250:	6922      	ldr	r2, [r4, #16]
 8006252:	bf0c      	ite	eq
 8006254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006258:	2500      	movne	r5, #0
 800625a:	4293      	cmp	r3, r2
 800625c:	bfc4      	itt	gt
 800625e:	1a9b      	subgt	r3, r3, r2
 8006260:	18ed      	addgt	r5, r5, r3
 8006262:	2600      	movs	r6, #0
 8006264:	341a      	adds	r4, #26
 8006266:	42b5      	cmp	r5, r6
 8006268:	d11a      	bne.n	80062a0 <_printf_common+0xc8>
 800626a:	2000      	movs	r0, #0
 800626c:	e008      	b.n	8006280 <_printf_common+0xa8>
 800626e:	2301      	movs	r3, #1
 8006270:	4652      	mov	r2, sl
 8006272:	4649      	mov	r1, r9
 8006274:	4638      	mov	r0, r7
 8006276:	47c0      	blx	r8
 8006278:	3001      	adds	r0, #1
 800627a:	d103      	bne.n	8006284 <_printf_common+0xac>
 800627c:	f04f 30ff 	mov.w	r0, #4294967295
 8006280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006284:	3501      	adds	r5, #1
 8006286:	e7c6      	b.n	8006216 <_printf_common+0x3e>
 8006288:	18e1      	adds	r1, r4, r3
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	2030      	movs	r0, #48	; 0x30
 800628e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006292:	4422      	add	r2, r4
 8006294:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006298:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800629c:	3302      	adds	r3, #2
 800629e:	e7c7      	b.n	8006230 <_printf_common+0x58>
 80062a0:	2301      	movs	r3, #1
 80062a2:	4622      	mov	r2, r4
 80062a4:	4649      	mov	r1, r9
 80062a6:	4638      	mov	r0, r7
 80062a8:	47c0      	blx	r8
 80062aa:	3001      	adds	r0, #1
 80062ac:	d0e6      	beq.n	800627c <_printf_common+0xa4>
 80062ae:	3601      	adds	r6, #1
 80062b0:	e7d9      	b.n	8006266 <_printf_common+0x8e>
	...

080062b4 <_printf_i>:
 80062b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062b8:	7e0f      	ldrb	r7, [r1, #24]
 80062ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062bc:	2f78      	cmp	r7, #120	; 0x78
 80062be:	4691      	mov	r9, r2
 80062c0:	4680      	mov	r8, r0
 80062c2:	460c      	mov	r4, r1
 80062c4:	469a      	mov	sl, r3
 80062c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062ca:	d807      	bhi.n	80062dc <_printf_i+0x28>
 80062cc:	2f62      	cmp	r7, #98	; 0x62
 80062ce:	d80a      	bhi.n	80062e6 <_printf_i+0x32>
 80062d0:	2f00      	cmp	r7, #0
 80062d2:	f000 80d8 	beq.w	8006486 <_printf_i+0x1d2>
 80062d6:	2f58      	cmp	r7, #88	; 0x58
 80062d8:	f000 80a3 	beq.w	8006422 <_printf_i+0x16e>
 80062dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062e4:	e03a      	b.n	800635c <_printf_i+0xa8>
 80062e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062ea:	2b15      	cmp	r3, #21
 80062ec:	d8f6      	bhi.n	80062dc <_printf_i+0x28>
 80062ee:	a101      	add	r1, pc, #4	; (adr r1, 80062f4 <_printf_i+0x40>)
 80062f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062f4:	0800634d 	.word	0x0800634d
 80062f8:	08006361 	.word	0x08006361
 80062fc:	080062dd 	.word	0x080062dd
 8006300:	080062dd 	.word	0x080062dd
 8006304:	080062dd 	.word	0x080062dd
 8006308:	080062dd 	.word	0x080062dd
 800630c:	08006361 	.word	0x08006361
 8006310:	080062dd 	.word	0x080062dd
 8006314:	080062dd 	.word	0x080062dd
 8006318:	080062dd 	.word	0x080062dd
 800631c:	080062dd 	.word	0x080062dd
 8006320:	0800646d 	.word	0x0800646d
 8006324:	08006391 	.word	0x08006391
 8006328:	0800644f 	.word	0x0800644f
 800632c:	080062dd 	.word	0x080062dd
 8006330:	080062dd 	.word	0x080062dd
 8006334:	0800648f 	.word	0x0800648f
 8006338:	080062dd 	.word	0x080062dd
 800633c:	08006391 	.word	0x08006391
 8006340:	080062dd 	.word	0x080062dd
 8006344:	080062dd 	.word	0x080062dd
 8006348:	08006457 	.word	0x08006457
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	1d1a      	adds	r2, r3, #4
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	602a      	str	r2, [r5, #0]
 8006354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006358:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800635c:	2301      	movs	r3, #1
 800635e:	e0a3      	b.n	80064a8 <_printf_i+0x1f4>
 8006360:	6820      	ldr	r0, [r4, #0]
 8006362:	6829      	ldr	r1, [r5, #0]
 8006364:	0606      	lsls	r6, r0, #24
 8006366:	f101 0304 	add.w	r3, r1, #4
 800636a:	d50a      	bpl.n	8006382 <_printf_i+0xce>
 800636c:	680e      	ldr	r6, [r1, #0]
 800636e:	602b      	str	r3, [r5, #0]
 8006370:	2e00      	cmp	r6, #0
 8006372:	da03      	bge.n	800637c <_printf_i+0xc8>
 8006374:	232d      	movs	r3, #45	; 0x2d
 8006376:	4276      	negs	r6, r6
 8006378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800637c:	485e      	ldr	r0, [pc, #376]	; (80064f8 <_printf_i+0x244>)
 800637e:	230a      	movs	r3, #10
 8006380:	e019      	b.n	80063b6 <_printf_i+0x102>
 8006382:	680e      	ldr	r6, [r1, #0]
 8006384:	602b      	str	r3, [r5, #0]
 8006386:	f010 0f40 	tst.w	r0, #64	; 0x40
 800638a:	bf18      	it	ne
 800638c:	b236      	sxthne	r6, r6
 800638e:	e7ef      	b.n	8006370 <_printf_i+0xbc>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	6820      	ldr	r0, [r4, #0]
 8006394:	1d19      	adds	r1, r3, #4
 8006396:	6029      	str	r1, [r5, #0]
 8006398:	0601      	lsls	r1, r0, #24
 800639a:	d501      	bpl.n	80063a0 <_printf_i+0xec>
 800639c:	681e      	ldr	r6, [r3, #0]
 800639e:	e002      	b.n	80063a6 <_printf_i+0xf2>
 80063a0:	0646      	lsls	r6, r0, #25
 80063a2:	d5fb      	bpl.n	800639c <_printf_i+0xe8>
 80063a4:	881e      	ldrh	r6, [r3, #0]
 80063a6:	4854      	ldr	r0, [pc, #336]	; (80064f8 <_printf_i+0x244>)
 80063a8:	2f6f      	cmp	r7, #111	; 0x6f
 80063aa:	bf0c      	ite	eq
 80063ac:	2308      	moveq	r3, #8
 80063ae:	230a      	movne	r3, #10
 80063b0:	2100      	movs	r1, #0
 80063b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063b6:	6865      	ldr	r5, [r4, #4]
 80063b8:	60a5      	str	r5, [r4, #8]
 80063ba:	2d00      	cmp	r5, #0
 80063bc:	bfa2      	ittt	ge
 80063be:	6821      	ldrge	r1, [r4, #0]
 80063c0:	f021 0104 	bicge.w	r1, r1, #4
 80063c4:	6021      	strge	r1, [r4, #0]
 80063c6:	b90e      	cbnz	r6, 80063cc <_printf_i+0x118>
 80063c8:	2d00      	cmp	r5, #0
 80063ca:	d04d      	beq.n	8006468 <_printf_i+0x1b4>
 80063cc:	4615      	mov	r5, r2
 80063ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80063d2:	fb03 6711 	mls	r7, r3, r1, r6
 80063d6:	5dc7      	ldrb	r7, [r0, r7]
 80063d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063dc:	4637      	mov	r7, r6
 80063de:	42bb      	cmp	r3, r7
 80063e0:	460e      	mov	r6, r1
 80063e2:	d9f4      	bls.n	80063ce <_printf_i+0x11a>
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d10b      	bne.n	8006400 <_printf_i+0x14c>
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	07de      	lsls	r6, r3, #31
 80063ec:	d508      	bpl.n	8006400 <_printf_i+0x14c>
 80063ee:	6923      	ldr	r3, [r4, #16]
 80063f0:	6861      	ldr	r1, [r4, #4]
 80063f2:	4299      	cmp	r1, r3
 80063f4:	bfde      	ittt	le
 80063f6:	2330      	movle	r3, #48	; 0x30
 80063f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006400:	1b52      	subs	r2, r2, r5
 8006402:	6122      	str	r2, [r4, #16]
 8006404:	f8cd a000 	str.w	sl, [sp]
 8006408:	464b      	mov	r3, r9
 800640a:	aa03      	add	r2, sp, #12
 800640c:	4621      	mov	r1, r4
 800640e:	4640      	mov	r0, r8
 8006410:	f7ff fee2 	bl	80061d8 <_printf_common>
 8006414:	3001      	adds	r0, #1
 8006416:	d14c      	bne.n	80064b2 <_printf_i+0x1fe>
 8006418:	f04f 30ff 	mov.w	r0, #4294967295
 800641c:	b004      	add	sp, #16
 800641e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006422:	4835      	ldr	r0, [pc, #212]	; (80064f8 <_printf_i+0x244>)
 8006424:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006428:	6829      	ldr	r1, [r5, #0]
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006430:	6029      	str	r1, [r5, #0]
 8006432:	061d      	lsls	r5, r3, #24
 8006434:	d514      	bpl.n	8006460 <_printf_i+0x1ac>
 8006436:	07df      	lsls	r7, r3, #31
 8006438:	bf44      	itt	mi
 800643a:	f043 0320 	orrmi.w	r3, r3, #32
 800643e:	6023      	strmi	r3, [r4, #0]
 8006440:	b91e      	cbnz	r6, 800644a <_printf_i+0x196>
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	f023 0320 	bic.w	r3, r3, #32
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	2310      	movs	r3, #16
 800644c:	e7b0      	b.n	80063b0 <_printf_i+0xfc>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	f043 0320 	orr.w	r3, r3, #32
 8006454:	6023      	str	r3, [r4, #0]
 8006456:	2378      	movs	r3, #120	; 0x78
 8006458:	4828      	ldr	r0, [pc, #160]	; (80064fc <_printf_i+0x248>)
 800645a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800645e:	e7e3      	b.n	8006428 <_printf_i+0x174>
 8006460:	0659      	lsls	r1, r3, #25
 8006462:	bf48      	it	mi
 8006464:	b2b6      	uxthmi	r6, r6
 8006466:	e7e6      	b.n	8006436 <_printf_i+0x182>
 8006468:	4615      	mov	r5, r2
 800646a:	e7bb      	b.n	80063e4 <_printf_i+0x130>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	6826      	ldr	r6, [r4, #0]
 8006470:	6961      	ldr	r1, [r4, #20]
 8006472:	1d18      	adds	r0, r3, #4
 8006474:	6028      	str	r0, [r5, #0]
 8006476:	0635      	lsls	r5, r6, #24
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	d501      	bpl.n	8006480 <_printf_i+0x1cc>
 800647c:	6019      	str	r1, [r3, #0]
 800647e:	e002      	b.n	8006486 <_printf_i+0x1d2>
 8006480:	0670      	lsls	r0, r6, #25
 8006482:	d5fb      	bpl.n	800647c <_printf_i+0x1c8>
 8006484:	8019      	strh	r1, [r3, #0]
 8006486:	2300      	movs	r3, #0
 8006488:	6123      	str	r3, [r4, #16]
 800648a:	4615      	mov	r5, r2
 800648c:	e7ba      	b.n	8006404 <_printf_i+0x150>
 800648e:	682b      	ldr	r3, [r5, #0]
 8006490:	1d1a      	adds	r2, r3, #4
 8006492:	602a      	str	r2, [r5, #0]
 8006494:	681d      	ldr	r5, [r3, #0]
 8006496:	6862      	ldr	r2, [r4, #4]
 8006498:	2100      	movs	r1, #0
 800649a:	4628      	mov	r0, r5
 800649c:	f7f9 fea8 	bl	80001f0 <memchr>
 80064a0:	b108      	cbz	r0, 80064a6 <_printf_i+0x1f2>
 80064a2:	1b40      	subs	r0, r0, r5
 80064a4:	6060      	str	r0, [r4, #4]
 80064a6:	6863      	ldr	r3, [r4, #4]
 80064a8:	6123      	str	r3, [r4, #16]
 80064aa:	2300      	movs	r3, #0
 80064ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064b0:	e7a8      	b.n	8006404 <_printf_i+0x150>
 80064b2:	6923      	ldr	r3, [r4, #16]
 80064b4:	462a      	mov	r2, r5
 80064b6:	4649      	mov	r1, r9
 80064b8:	4640      	mov	r0, r8
 80064ba:	47d0      	blx	sl
 80064bc:	3001      	adds	r0, #1
 80064be:	d0ab      	beq.n	8006418 <_printf_i+0x164>
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	079b      	lsls	r3, r3, #30
 80064c4:	d413      	bmi.n	80064ee <_printf_i+0x23a>
 80064c6:	68e0      	ldr	r0, [r4, #12]
 80064c8:	9b03      	ldr	r3, [sp, #12]
 80064ca:	4298      	cmp	r0, r3
 80064cc:	bfb8      	it	lt
 80064ce:	4618      	movlt	r0, r3
 80064d0:	e7a4      	b.n	800641c <_printf_i+0x168>
 80064d2:	2301      	movs	r3, #1
 80064d4:	4632      	mov	r2, r6
 80064d6:	4649      	mov	r1, r9
 80064d8:	4640      	mov	r0, r8
 80064da:	47d0      	blx	sl
 80064dc:	3001      	adds	r0, #1
 80064de:	d09b      	beq.n	8006418 <_printf_i+0x164>
 80064e0:	3501      	adds	r5, #1
 80064e2:	68e3      	ldr	r3, [r4, #12]
 80064e4:	9903      	ldr	r1, [sp, #12]
 80064e6:	1a5b      	subs	r3, r3, r1
 80064e8:	42ab      	cmp	r3, r5
 80064ea:	dcf2      	bgt.n	80064d2 <_printf_i+0x21e>
 80064ec:	e7eb      	b.n	80064c6 <_printf_i+0x212>
 80064ee:	2500      	movs	r5, #0
 80064f0:	f104 0619 	add.w	r6, r4, #25
 80064f4:	e7f5      	b.n	80064e2 <_printf_i+0x22e>
 80064f6:	bf00      	nop
 80064f8:	08008ada 	.word	0x08008ada
 80064fc:	08008aeb 	.word	0x08008aeb

08006500 <siprintf>:
 8006500:	b40e      	push	{r1, r2, r3}
 8006502:	b500      	push	{lr}
 8006504:	b09c      	sub	sp, #112	; 0x70
 8006506:	ab1d      	add	r3, sp, #116	; 0x74
 8006508:	9002      	str	r0, [sp, #8]
 800650a:	9006      	str	r0, [sp, #24]
 800650c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006510:	4809      	ldr	r0, [pc, #36]	; (8006538 <siprintf+0x38>)
 8006512:	9107      	str	r1, [sp, #28]
 8006514:	9104      	str	r1, [sp, #16]
 8006516:	4909      	ldr	r1, [pc, #36]	; (800653c <siprintf+0x3c>)
 8006518:	f853 2b04 	ldr.w	r2, [r3], #4
 800651c:	9105      	str	r1, [sp, #20]
 800651e:	6800      	ldr	r0, [r0, #0]
 8006520:	9301      	str	r3, [sp, #4]
 8006522:	a902      	add	r1, sp, #8
 8006524:	f001 fb8a 	bl	8007c3c <_svfiprintf_r>
 8006528:	9b02      	ldr	r3, [sp, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	701a      	strb	r2, [r3, #0]
 800652e:	b01c      	add	sp, #112	; 0x70
 8006530:	f85d eb04 	ldr.w	lr, [sp], #4
 8006534:	b003      	add	sp, #12
 8006536:	4770      	bx	lr
 8006538:	20000064 	.word	0x20000064
 800653c:	ffff0208 	.word	0xffff0208

08006540 <strncat>:
 8006540:	b530      	push	{r4, r5, lr}
 8006542:	4604      	mov	r4, r0
 8006544:	7825      	ldrb	r5, [r4, #0]
 8006546:	4623      	mov	r3, r4
 8006548:	3401      	adds	r4, #1
 800654a:	2d00      	cmp	r5, #0
 800654c:	d1fa      	bne.n	8006544 <strncat+0x4>
 800654e:	3a01      	subs	r2, #1
 8006550:	d304      	bcc.n	800655c <strncat+0x1c>
 8006552:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006556:	f803 4b01 	strb.w	r4, [r3], #1
 800655a:	b904      	cbnz	r4, 800655e <strncat+0x1e>
 800655c:	bd30      	pop	{r4, r5, pc}
 800655e:	2a00      	cmp	r2, #0
 8006560:	d1f5      	bne.n	800654e <strncat+0xe>
 8006562:	701a      	strb	r2, [r3, #0]
 8006564:	e7f3      	b.n	800654e <strncat+0xe>

08006566 <quorem>:
 8006566:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656a:	6903      	ldr	r3, [r0, #16]
 800656c:	690c      	ldr	r4, [r1, #16]
 800656e:	42a3      	cmp	r3, r4
 8006570:	4607      	mov	r7, r0
 8006572:	f2c0 8081 	blt.w	8006678 <quorem+0x112>
 8006576:	3c01      	subs	r4, #1
 8006578:	f101 0814 	add.w	r8, r1, #20
 800657c:	f100 0514 	add.w	r5, r0, #20
 8006580:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006584:	9301      	str	r3, [sp, #4]
 8006586:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800658a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800658e:	3301      	adds	r3, #1
 8006590:	429a      	cmp	r2, r3
 8006592:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006596:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800659a:	fbb2 f6f3 	udiv	r6, r2, r3
 800659e:	d331      	bcc.n	8006604 <quorem+0x9e>
 80065a0:	f04f 0e00 	mov.w	lr, #0
 80065a4:	4640      	mov	r0, r8
 80065a6:	46ac      	mov	ip, r5
 80065a8:	46f2      	mov	sl, lr
 80065aa:	f850 2b04 	ldr.w	r2, [r0], #4
 80065ae:	b293      	uxth	r3, r2
 80065b0:	fb06 e303 	mla	r3, r6, r3, lr
 80065b4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	ebaa 0303 	sub.w	r3, sl, r3
 80065be:	f8dc a000 	ldr.w	sl, [ip]
 80065c2:	0c12      	lsrs	r2, r2, #16
 80065c4:	fa13 f38a 	uxtah	r3, r3, sl
 80065c8:	fb06 e202 	mla	r2, r6, r2, lr
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	9b00      	ldr	r3, [sp, #0]
 80065d0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80065d4:	b292      	uxth	r2, r2
 80065d6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80065da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065de:	f8bd 3000 	ldrh.w	r3, [sp]
 80065e2:	4581      	cmp	r9, r0
 80065e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065e8:	f84c 3b04 	str.w	r3, [ip], #4
 80065ec:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80065f0:	d2db      	bcs.n	80065aa <quorem+0x44>
 80065f2:	f855 300b 	ldr.w	r3, [r5, fp]
 80065f6:	b92b      	cbnz	r3, 8006604 <quorem+0x9e>
 80065f8:	9b01      	ldr	r3, [sp, #4]
 80065fa:	3b04      	subs	r3, #4
 80065fc:	429d      	cmp	r5, r3
 80065fe:	461a      	mov	r2, r3
 8006600:	d32e      	bcc.n	8006660 <quorem+0xfa>
 8006602:	613c      	str	r4, [r7, #16]
 8006604:	4638      	mov	r0, r7
 8006606:	f001 f8c5 	bl	8007794 <__mcmp>
 800660a:	2800      	cmp	r0, #0
 800660c:	db24      	blt.n	8006658 <quorem+0xf2>
 800660e:	3601      	adds	r6, #1
 8006610:	4628      	mov	r0, r5
 8006612:	f04f 0c00 	mov.w	ip, #0
 8006616:	f858 2b04 	ldr.w	r2, [r8], #4
 800661a:	f8d0 e000 	ldr.w	lr, [r0]
 800661e:	b293      	uxth	r3, r2
 8006620:	ebac 0303 	sub.w	r3, ip, r3
 8006624:	0c12      	lsrs	r2, r2, #16
 8006626:	fa13 f38e 	uxtah	r3, r3, lr
 800662a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800662e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006632:	b29b      	uxth	r3, r3
 8006634:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006638:	45c1      	cmp	r9, r8
 800663a:	f840 3b04 	str.w	r3, [r0], #4
 800663e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006642:	d2e8      	bcs.n	8006616 <quorem+0xb0>
 8006644:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006648:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800664c:	b922      	cbnz	r2, 8006658 <quorem+0xf2>
 800664e:	3b04      	subs	r3, #4
 8006650:	429d      	cmp	r5, r3
 8006652:	461a      	mov	r2, r3
 8006654:	d30a      	bcc.n	800666c <quorem+0x106>
 8006656:	613c      	str	r4, [r7, #16]
 8006658:	4630      	mov	r0, r6
 800665a:	b003      	add	sp, #12
 800665c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006660:	6812      	ldr	r2, [r2, #0]
 8006662:	3b04      	subs	r3, #4
 8006664:	2a00      	cmp	r2, #0
 8006666:	d1cc      	bne.n	8006602 <quorem+0x9c>
 8006668:	3c01      	subs	r4, #1
 800666a:	e7c7      	b.n	80065fc <quorem+0x96>
 800666c:	6812      	ldr	r2, [r2, #0]
 800666e:	3b04      	subs	r3, #4
 8006670:	2a00      	cmp	r2, #0
 8006672:	d1f0      	bne.n	8006656 <quorem+0xf0>
 8006674:	3c01      	subs	r4, #1
 8006676:	e7eb      	b.n	8006650 <quorem+0xea>
 8006678:	2000      	movs	r0, #0
 800667a:	e7ee      	b.n	800665a <quorem+0xf4>
 800667c:	0000      	movs	r0, r0
	...

08006680 <_dtoa_r>:
 8006680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006684:	ed2d 8b04 	vpush	{d8-d9}
 8006688:	ec57 6b10 	vmov	r6, r7, d0
 800668c:	b093      	sub	sp, #76	; 0x4c
 800668e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006690:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006694:	9106      	str	r1, [sp, #24]
 8006696:	ee10 aa10 	vmov	sl, s0
 800669a:	4604      	mov	r4, r0
 800669c:	9209      	str	r2, [sp, #36]	; 0x24
 800669e:	930c      	str	r3, [sp, #48]	; 0x30
 80066a0:	46bb      	mov	fp, r7
 80066a2:	b975      	cbnz	r5, 80066c2 <_dtoa_r+0x42>
 80066a4:	2010      	movs	r0, #16
 80066a6:	f000 fddd 	bl	8007264 <malloc>
 80066aa:	4602      	mov	r2, r0
 80066ac:	6260      	str	r0, [r4, #36]	; 0x24
 80066ae:	b920      	cbnz	r0, 80066ba <_dtoa_r+0x3a>
 80066b0:	4ba7      	ldr	r3, [pc, #668]	; (8006950 <_dtoa_r+0x2d0>)
 80066b2:	21ea      	movs	r1, #234	; 0xea
 80066b4:	48a7      	ldr	r0, [pc, #668]	; (8006954 <_dtoa_r+0x2d4>)
 80066b6:	f001 fbd1 	bl	8007e5c <__assert_func>
 80066ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80066be:	6005      	str	r5, [r0, #0]
 80066c0:	60c5      	str	r5, [r0, #12]
 80066c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066c4:	6819      	ldr	r1, [r3, #0]
 80066c6:	b151      	cbz	r1, 80066de <_dtoa_r+0x5e>
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	604a      	str	r2, [r1, #4]
 80066cc:	2301      	movs	r3, #1
 80066ce:	4093      	lsls	r3, r2
 80066d0:	608b      	str	r3, [r1, #8]
 80066d2:	4620      	mov	r0, r4
 80066d4:	f000 fe1c 	bl	8007310 <_Bfree>
 80066d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066da:	2200      	movs	r2, #0
 80066dc:	601a      	str	r2, [r3, #0]
 80066de:	1e3b      	subs	r3, r7, #0
 80066e0:	bfaa      	itet	ge
 80066e2:	2300      	movge	r3, #0
 80066e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80066e8:	f8c8 3000 	strge.w	r3, [r8]
 80066ec:	4b9a      	ldr	r3, [pc, #616]	; (8006958 <_dtoa_r+0x2d8>)
 80066ee:	bfbc      	itt	lt
 80066f0:	2201      	movlt	r2, #1
 80066f2:	f8c8 2000 	strlt.w	r2, [r8]
 80066f6:	ea33 030b 	bics.w	r3, r3, fp
 80066fa:	d11b      	bne.n	8006734 <_dtoa_r+0xb4>
 80066fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006708:	4333      	orrs	r3, r6
 800670a:	f000 8592 	beq.w	8007232 <_dtoa_r+0xbb2>
 800670e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006710:	b963      	cbnz	r3, 800672c <_dtoa_r+0xac>
 8006712:	4b92      	ldr	r3, [pc, #584]	; (800695c <_dtoa_r+0x2dc>)
 8006714:	e022      	b.n	800675c <_dtoa_r+0xdc>
 8006716:	4b92      	ldr	r3, [pc, #584]	; (8006960 <_dtoa_r+0x2e0>)
 8006718:	9301      	str	r3, [sp, #4]
 800671a:	3308      	adds	r3, #8
 800671c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	9801      	ldr	r0, [sp, #4]
 8006722:	b013      	add	sp, #76	; 0x4c
 8006724:	ecbd 8b04 	vpop	{d8-d9}
 8006728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800672c:	4b8b      	ldr	r3, [pc, #556]	; (800695c <_dtoa_r+0x2dc>)
 800672e:	9301      	str	r3, [sp, #4]
 8006730:	3303      	adds	r3, #3
 8006732:	e7f3      	b.n	800671c <_dtoa_r+0x9c>
 8006734:	2200      	movs	r2, #0
 8006736:	2300      	movs	r3, #0
 8006738:	4650      	mov	r0, sl
 800673a:	4659      	mov	r1, fp
 800673c:	f7fa f9cc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006740:	ec4b ab19 	vmov	d9, sl, fp
 8006744:	4680      	mov	r8, r0
 8006746:	b158      	cbz	r0, 8006760 <_dtoa_r+0xe0>
 8006748:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800674a:	2301      	movs	r3, #1
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 856b 	beq.w	800722c <_dtoa_r+0xbac>
 8006756:	4883      	ldr	r0, [pc, #524]	; (8006964 <_dtoa_r+0x2e4>)
 8006758:	6018      	str	r0, [r3, #0]
 800675a:	1e43      	subs	r3, r0, #1
 800675c:	9301      	str	r3, [sp, #4]
 800675e:	e7df      	b.n	8006720 <_dtoa_r+0xa0>
 8006760:	ec4b ab10 	vmov	d0, sl, fp
 8006764:	aa10      	add	r2, sp, #64	; 0x40
 8006766:	a911      	add	r1, sp, #68	; 0x44
 8006768:	4620      	mov	r0, r4
 800676a:	f001 f8b9 	bl	80078e0 <__d2b>
 800676e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006772:	ee08 0a10 	vmov	s16, r0
 8006776:	2d00      	cmp	r5, #0
 8006778:	f000 8084 	beq.w	8006884 <_dtoa_r+0x204>
 800677c:	ee19 3a90 	vmov	r3, s19
 8006780:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006784:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006788:	4656      	mov	r6, sl
 800678a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800678e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006792:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006796:	4b74      	ldr	r3, [pc, #464]	; (8006968 <_dtoa_r+0x2e8>)
 8006798:	2200      	movs	r2, #0
 800679a:	4630      	mov	r0, r6
 800679c:	4639      	mov	r1, r7
 800679e:	f7f9 fd7b 	bl	8000298 <__aeabi_dsub>
 80067a2:	a365      	add	r3, pc, #404	; (adr r3, 8006938 <_dtoa_r+0x2b8>)
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	f7f9 ff2e 	bl	8000608 <__aeabi_dmul>
 80067ac:	a364      	add	r3, pc, #400	; (adr r3, 8006940 <_dtoa_r+0x2c0>)
 80067ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b2:	f7f9 fd73 	bl	800029c <__adddf3>
 80067b6:	4606      	mov	r6, r0
 80067b8:	4628      	mov	r0, r5
 80067ba:	460f      	mov	r7, r1
 80067bc:	f7f9 feba 	bl	8000534 <__aeabi_i2d>
 80067c0:	a361      	add	r3, pc, #388	; (adr r3, 8006948 <_dtoa_r+0x2c8>)
 80067c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c6:	f7f9 ff1f 	bl	8000608 <__aeabi_dmul>
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
 80067ce:	4630      	mov	r0, r6
 80067d0:	4639      	mov	r1, r7
 80067d2:	f7f9 fd63 	bl	800029c <__adddf3>
 80067d6:	4606      	mov	r6, r0
 80067d8:	460f      	mov	r7, r1
 80067da:	f7fa f9c5 	bl	8000b68 <__aeabi_d2iz>
 80067de:	2200      	movs	r2, #0
 80067e0:	9000      	str	r0, [sp, #0]
 80067e2:	2300      	movs	r3, #0
 80067e4:	4630      	mov	r0, r6
 80067e6:	4639      	mov	r1, r7
 80067e8:	f7fa f980 	bl	8000aec <__aeabi_dcmplt>
 80067ec:	b150      	cbz	r0, 8006804 <_dtoa_r+0x184>
 80067ee:	9800      	ldr	r0, [sp, #0]
 80067f0:	f7f9 fea0 	bl	8000534 <__aeabi_i2d>
 80067f4:	4632      	mov	r2, r6
 80067f6:	463b      	mov	r3, r7
 80067f8:	f7fa f96e 	bl	8000ad8 <__aeabi_dcmpeq>
 80067fc:	b910      	cbnz	r0, 8006804 <_dtoa_r+0x184>
 80067fe:	9b00      	ldr	r3, [sp, #0]
 8006800:	3b01      	subs	r3, #1
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	9b00      	ldr	r3, [sp, #0]
 8006806:	2b16      	cmp	r3, #22
 8006808:	d85a      	bhi.n	80068c0 <_dtoa_r+0x240>
 800680a:	9a00      	ldr	r2, [sp, #0]
 800680c:	4b57      	ldr	r3, [pc, #348]	; (800696c <_dtoa_r+0x2ec>)
 800680e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006816:	ec51 0b19 	vmov	r0, r1, d9
 800681a:	f7fa f967 	bl	8000aec <__aeabi_dcmplt>
 800681e:	2800      	cmp	r0, #0
 8006820:	d050      	beq.n	80068c4 <_dtoa_r+0x244>
 8006822:	9b00      	ldr	r3, [sp, #0]
 8006824:	3b01      	subs	r3, #1
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	2300      	movs	r3, #0
 800682a:	930b      	str	r3, [sp, #44]	; 0x2c
 800682c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800682e:	1b5d      	subs	r5, r3, r5
 8006830:	1e6b      	subs	r3, r5, #1
 8006832:	9305      	str	r3, [sp, #20]
 8006834:	bf45      	ittet	mi
 8006836:	f1c5 0301 	rsbmi	r3, r5, #1
 800683a:	9304      	strmi	r3, [sp, #16]
 800683c:	2300      	movpl	r3, #0
 800683e:	2300      	movmi	r3, #0
 8006840:	bf4c      	ite	mi
 8006842:	9305      	strmi	r3, [sp, #20]
 8006844:	9304      	strpl	r3, [sp, #16]
 8006846:	9b00      	ldr	r3, [sp, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	db3d      	blt.n	80068c8 <_dtoa_r+0x248>
 800684c:	9b05      	ldr	r3, [sp, #20]
 800684e:	9a00      	ldr	r2, [sp, #0]
 8006850:	920a      	str	r2, [sp, #40]	; 0x28
 8006852:	4413      	add	r3, r2
 8006854:	9305      	str	r3, [sp, #20]
 8006856:	2300      	movs	r3, #0
 8006858:	9307      	str	r3, [sp, #28]
 800685a:	9b06      	ldr	r3, [sp, #24]
 800685c:	2b09      	cmp	r3, #9
 800685e:	f200 8089 	bhi.w	8006974 <_dtoa_r+0x2f4>
 8006862:	2b05      	cmp	r3, #5
 8006864:	bfc4      	itt	gt
 8006866:	3b04      	subgt	r3, #4
 8006868:	9306      	strgt	r3, [sp, #24]
 800686a:	9b06      	ldr	r3, [sp, #24]
 800686c:	f1a3 0302 	sub.w	r3, r3, #2
 8006870:	bfcc      	ite	gt
 8006872:	2500      	movgt	r5, #0
 8006874:	2501      	movle	r5, #1
 8006876:	2b03      	cmp	r3, #3
 8006878:	f200 8087 	bhi.w	800698a <_dtoa_r+0x30a>
 800687c:	e8df f003 	tbb	[pc, r3]
 8006880:	59383a2d 	.word	0x59383a2d
 8006884:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006888:	441d      	add	r5, r3
 800688a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800688e:	2b20      	cmp	r3, #32
 8006890:	bfc1      	itttt	gt
 8006892:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006896:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800689a:	fa0b f303 	lslgt.w	r3, fp, r3
 800689e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80068a2:	bfda      	itte	le
 80068a4:	f1c3 0320 	rsble	r3, r3, #32
 80068a8:	fa06 f003 	lslle.w	r0, r6, r3
 80068ac:	4318      	orrgt	r0, r3
 80068ae:	f7f9 fe31 	bl	8000514 <__aeabi_ui2d>
 80068b2:	2301      	movs	r3, #1
 80068b4:	4606      	mov	r6, r0
 80068b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80068ba:	3d01      	subs	r5, #1
 80068bc:	930e      	str	r3, [sp, #56]	; 0x38
 80068be:	e76a      	b.n	8006796 <_dtoa_r+0x116>
 80068c0:	2301      	movs	r3, #1
 80068c2:	e7b2      	b.n	800682a <_dtoa_r+0x1aa>
 80068c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80068c6:	e7b1      	b.n	800682c <_dtoa_r+0x1ac>
 80068c8:	9b04      	ldr	r3, [sp, #16]
 80068ca:	9a00      	ldr	r2, [sp, #0]
 80068cc:	1a9b      	subs	r3, r3, r2
 80068ce:	9304      	str	r3, [sp, #16]
 80068d0:	4253      	negs	r3, r2
 80068d2:	9307      	str	r3, [sp, #28]
 80068d4:	2300      	movs	r3, #0
 80068d6:	930a      	str	r3, [sp, #40]	; 0x28
 80068d8:	e7bf      	b.n	800685a <_dtoa_r+0x1da>
 80068da:	2300      	movs	r3, #0
 80068dc:	9308      	str	r3, [sp, #32]
 80068de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	dc55      	bgt.n	8006990 <_dtoa_r+0x310>
 80068e4:	2301      	movs	r3, #1
 80068e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80068ea:	461a      	mov	r2, r3
 80068ec:	9209      	str	r2, [sp, #36]	; 0x24
 80068ee:	e00c      	b.n	800690a <_dtoa_r+0x28a>
 80068f0:	2301      	movs	r3, #1
 80068f2:	e7f3      	b.n	80068dc <_dtoa_r+0x25c>
 80068f4:	2300      	movs	r3, #0
 80068f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068f8:	9308      	str	r3, [sp, #32]
 80068fa:	9b00      	ldr	r3, [sp, #0]
 80068fc:	4413      	add	r3, r2
 80068fe:	9302      	str	r3, [sp, #8]
 8006900:	3301      	adds	r3, #1
 8006902:	2b01      	cmp	r3, #1
 8006904:	9303      	str	r3, [sp, #12]
 8006906:	bfb8      	it	lt
 8006908:	2301      	movlt	r3, #1
 800690a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800690c:	2200      	movs	r2, #0
 800690e:	6042      	str	r2, [r0, #4]
 8006910:	2204      	movs	r2, #4
 8006912:	f102 0614 	add.w	r6, r2, #20
 8006916:	429e      	cmp	r6, r3
 8006918:	6841      	ldr	r1, [r0, #4]
 800691a:	d93d      	bls.n	8006998 <_dtoa_r+0x318>
 800691c:	4620      	mov	r0, r4
 800691e:	f000 fcb7 	bl	8007290 <_Balloc>
 8006922:	9001      	str	r0, [sp, #4]
 8006924:	2800      	cmp	r0, #0
 8006926:	d13b      	bne.n	80069a0 <_dtoa_r+0x320>
 8006928:	4b11      	ldr	r3, [pc, #68]	; (8006970 <_dtoa_r+0x2f0>)
 800692a:	4602      	mov	r2, r0
 800692c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006930:	e6c0      	b.n	80066b4 <_dtoa_r+0x34>
 8006932:	2301      	movs	r3, #1
 8006934:	e7df      	b.n	80068f6 <_dtoa_r+0x276>
 8006936:	bf00      	nop
 8006938:	636f4361 	.word	0x636f4361
 800693c:	3fd287a7 	.word	0x3fd287a7
 8006940:	8b60c8b3 	.word	0x8b60c8b3
 8006944:	3fc68a28 	.word	0x3fc68a28
 8006948:	509f79fb 	.word	0x509f79fb
 800694c:	3fd34413 	.word	0x3fd34413
 8006950:	08008b09 	.word	0x08008b09
 8006954:	08008b20 	.word	0x08008b20
 8006958:	7ff00000 	.word	0x7ff00000
 800695c:	08008b05 	.word	0x08008b05
 8006960:	08008afc 	.word	0x08008afc
 8006964:	08008ad9 	.word	0x08008ad9
 8006968:	3ff80000 	.word	0x3ff80000
 800696c:	08008c10 	.word	0x08008c10
 8006970:	08008b7b 	.word	0x08008b7b
 8006974:	2501      	movs	r5, #1
 8006976:	2300      	movs	r3, #0
 8006978:	9306      	str	r3, [sp, #24]
 800697a:	9508      	str	r5, [sp, #32]
 800697c:	f04f 33ff 	mov.w	r3, #4294967295
 8006980:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006984:	2200      	movs	r2, #0
 8006986:	2312      	movs	r3, #18
 8006988:	e7b0      	b.n	80068ec <_dtoa_r+0x26c>
 800698a:	2301      	movs	r3, #1
 800698c:	9308      	str	r3, [sp, #32]
 800698e:	e7f5      	b.n	800697c <_dtoa_r+0x2fc>
 8006990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006992:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006996:	e7b8      	b.n	800690a <_dtoa_r+0x28a>
 8006998:	3101      	adds	r1, #1
 800699a:	6041      	str	r1, [r0, #4]
 800699c:	0052      	lsls	r2, r2, #1
 800699e:	e7b8      	b.n	8006912 <_dtoa_r+0x292>
 80069a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069a2:	9a01      	ldr	r2, [sp, #4]
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	9b03      	ldr	r3, [sp, #12]
 80069a8:	2b0e      	cmp	r3, #14
 80069aa:	f200 809d 	bhi.w	8006ae8 <_dtoa_r+0x468>
 80069ae:	2d00      	cmp	r5, #0
 80069b0:	f000 809a 	beq.w	8006ae8 <_dtoa_r+0x468>
 80069b4:	9b00      	ldr	r3, [sp, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	dd32      	ble.n	8006a20 <_dtoa_r+0x3a0>
 80069ba:	4ab7      	ldr	r2, [pc, #732]	; (8006c98 <_dtoa_r+0x618>)
 80069bc:	f003 030f 	and.w	r3, r3, #15
 80069c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80069c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069c8:	9b00      	ldr	r3, [sp, #0]
 80069ca:	05d8      	lsls	r0, r3, #23
 80069cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80069d0:	d516      	bpl.n	8006a00 <_dtoa_r+0x380>
 80069d2:	4bb2      	ldr	r3, [pc, #712]	; (8006c9c <_dtoa_r+0x61c>)
 80069d4:	ec51 0b19 	vmov	r0, r1, d9
 80069d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069dc:	f7f9 ff3e 	bl	800085c <__aeabi_ddiv>
 80069e0:	f007 070f 	and.w	r7, r7, #15
 80069e4:	4682      	mov	sl, r0
 80069e6:	468b      	mov	fp, r1
 80069e8:	2503      	movs	r5, #3
 80069ea:	4eac      	ldr	r6, [pc, #688]	; (8006c9c <_dtoa_r+0x61c>)
 80069ec:	b957      	cbnz	r7, 8006a04 <_dtoa_r+0x384>
 80069ee:	4642      	mov	r2, r8
 80069f0:	464b      	mov	r3, r9
 80069f2:	4650      	mov	r0, sl
 80069f4:	4659      	mov	r1, fp
 80069f6:	f7f9 ff31 	bl	800085c <__aeabi_ddiv>
 80069fa:	4682      	mov	sl, r0
 80069fc:	468b      	mov	fp, r1
 80069fe:	e028      	b.n	8006a52 <_dtoa_r+0x3d2>
 8006a00:	2502      	movs	r5, #2
 8006a02:	e7f2      	b.n	80069ea <_dtoa_r+0x36a>
 8006a04:	07f9      	lsls	r1, r7, #31
 8006a06:	d508      	bpl.n	8006a1a <_dtoa_r+0x39a>
 8006a08:	4640      	mov	r0, r8
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a10:	f7f9 fdfa 	bl	8000608 <__aeabi_dmul>
 8006a14:	3501      	adds	r5, #1
 8006a16:	4680      	mov	r8, r0
 8006a18:	4689      	mov	r9, r1
 8006a1a:	107f      	asrs	r7, r7, #1
 8006a1c:	3608      	adds	r6, #8
 8006a1e:	e7e5      	b.n	80069ec <_dtoa_r+0x36c>
 8006a20:	f000 809b 	beq.w	8006b5a <_dtoa_r+0x4da>
 8006a24:	9b00      	ldr	r3, [sp, #0]
 8006a26:	4f9d      	ldr	r7, [pc, #628]	; (8006c9c <_dtoa_r+0x61c>)
 8006a28:	425e      	negs	r6, r3
 8006a2a:	4b9b      	ldr	r3, [pc, #620]	; (8006c98 <_dtoa_r+0x618>)
 8006a2c:	f006 020f 	and.w	r2, r6, #15
 8006a30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a38:	ec51 0b19 	vmov	r0, r1, d9
 8006a3c:	f7f9 fde4 	bl	8000608 <__aeabi_dmul>
 8006a40:	1136      	asrs	r6, r6, #4
 8006a42:	4682      	mov	sl, r0
 8006a44:	468b      	mov	fp, r1
 8006a46:	2300      	movs	r3, #0
 8006a48:	2502      	movs	r5, #2
 8006a4a:	2e00      	cmp	r6, #0
 8006a4c:	d17a      	bne.n	8006b44 <_dtoa_r+0x4c4>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1d3      	bne.n	80069fa <_dtoa_r+0x37a>
 8006a52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 8082 	beq.w	8006b5e <_dtoa_r+0x4de>
 8006a5a:	4b91      	ldr	r3, [pc, #580]	; (8006ca0 <_dtoa_r+0x620>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	4650      	mov	r0, sl
 8006a60:	4659      	mov	r1, fp
 8006a62:	f7fa f843 	bl	8000aec <__aeabi_dcmplt>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	d079      	beq.n	8006b5e <_dtoa_r+0x4de>
 8006a6a:	9b03      	ldr	r3, [sp, #12]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d076      	beq.n	8006b5e <_dtoa_r+0x4de>
 8006a70:	9b02      	ldr	r3, [sp, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	dd36      	ble.n	8006ae4 <_dtoa_r+0x464>
 8006a76:	9b00      	ldr	r3, [sp, #0]
 8006a78:	4650      	mov	r0, sl
 8006a7a:	4659      	mov	r1, fp
 8006a7c:	1e5f      	subs	r7, r3, #1
 8006a7e:	2200      	movs	r2, #0
 8006a80:	4b88      	ldr	r3, [pc, #544]	; (8006ca4 <_dtoa_r+0x624>)
 8006a82:	f7f9 fdc1 	bl	8000608 <__aeabi_dmul>
 8006a86:	9e02      	ldr	r6, [sp, #8]
 8006a88:	4682      	mov	sl, r0
 8006a8a:	468b      	mov	fp, r1
 8006a8c:	3501      	adds	r5, #1
 8006a8e:	4628      	mov	r0, r5
 8006a90:	f7f9 fd50 	bl	8000534 <__aeabi_i2d>
 8006a94:	4652      	mov	r2, sl
 8006a96:	465b      	mov	r3, fp
 8006a98:	f7f9 fdb6 	bl	8000608 <__aeabi_dmul>
 8006a9c:	4b82      	ldr	r3, [pc, #520]	; (8006ca8 <_dtoa_r+0x628>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f7f9 fbfc 	bl	800029c <__adddf3>
 8006aa4:	46d0      	mov	r8, sl
 8006aa6:	46d9      	mov	r9, fp
 8006aa8:	4682      	mov	sl, r0
 8006aaa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006aae:	2e00      	cmp	r6, #0
 8006ab0:	d158      	bne.n	8006b64 <_dtoa_r+0x4e4>
 8006ab2:	4b7e      	ldr	r3, [pc, #504]	; (8006cac <_dtoa_r+0x62c>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	4640      	mov	r0, r8
 8006ab8:	4649      	mov	r1, r9
 8006aba:	f7f9 fbed 	bl	8000298 <__aeabi_dsub>
 8006abe:	4652      	mov	r2, sl
 8006ac0:	465b      	mov	r3, fp
 8006ac2:	4680      	mov	r8, r0
 8006ac4:	4689      	mov	r9, r1
 8006ac6:	f7fa f82f 	bl	8000b28 <__aeabi_dcmpgt>
 8006aca:	2800      	cmp	r0, #0
 8006acc:	f040 8295 	bne.w	8006ffa <_dtoa_r+0x97a>
 8006ad0:	4652      	mov	r2, sl
 8006ad2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006ad6:	4640      	mov	r0, r8
 8006ad8:	4649      	mov	r1, r9
 8006ada:	f7fa f807 	bl	8000aec <__aeabi_dcmplt>
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	f040 8289 	bne.w	8006ff6 <_dtoa_r+0x976>
 8006ae4:	ec5b ab19 	vmov	sl, fp, d9
 8006ae8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f2c0 8148 	blt.w	8006d80 <_dtoa_r+0x700>
 8006af0:	9a00      	ldr	r2, [sp, #0]
 8006af2:	2a0e      	cmp	r2, #14
 8006af4:	f300 8144 	bgt.w	8006d80 <_dtoa_r+0x700>
 8006af8:	4b67      	ldr	r3, [pc, #412]	; (8006c98 <_dtoa_r+0x618>)
 8006afa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006afe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f280 80d5 	bge.w	8006cb4 <_dtoa_r+0x634>
 8006b0a:	9b03      	ldr	r3, [sp, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f300 80d1 	bgt.w	8006cb4 <_dtoa_r+0x634>
 8006b12:	f040 826f 	bne.w	8006ff4 <_dtoa_r+0x974>
 8006b16:	4b65      	ldr	r3, [pc, #404]	; (8006cac <_dtoa_r+0x62c>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	4640      	mov	r0, r8
 8006b1c:	4649      	mov	r1, r9
 8006b1e:	f7f9 fd73 	bl	8000608 <__aeabi_dmul>
 8006b22:	4652      	mov	r2, sl
 8006b24:	465b      	mov	r3, fp
 8006b26:	f7f9 fff5 	bl	8000b14 <__aeabi_dcmpge>
 8006b2a:	9e03      	ldr	r6, [sp, #12]
 8006b2c:	4637      	mov	r7, r6
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	f040 8245 	bne.w	8006fbe <_dtoa_r+0x93e>
 8006b34:	9d01      	ldr	r5, [sp, #4]
 8006b36:	2331      	movs	r3, #49	; 0x31
 8006b38:	f805 3b01 	strb.w	r3, [r5], #1
 8006b3c:	9b00      	ldr	r3, [sp, #0]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	e240      	b.n	8006fc6 <_dtoa_r+0x946>
 8006b44:	07f2      	lsls	r2, r6, #31
 8006b46:	d505      	bpl.n	8006b54 <_dtoa_r+0x4d4>
 8006b48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b4c:	f7f9 fd5c 	bl	8000608 <__aeabi_dmul>
 8006b50:	3501      	adds	r5, #1
 8006b52:	2301      	movs	r3, #1
 8006b54:	1076      	asrs	r6, r6, #1
 8006b56:	3708      	adds	r7, #8
 8006b58:	e777      	b.n	8006a4a <_dtoa_r+0x3ca>
 8006b5a:	2502      	movs	r5, #2
 8006b5c:	e779      	b.n	8006a52 <_dtoa_r+0x3d2>
 8006b5e:	9f00      	ldr	r7, [sp, #0]
 8006b60:	9e03      	ldr	r6, [sp, #12]
 8006b62:	e794      	b.n	8006a8e <_dtoa_r+0x40e>
 8006b64:	9901      	ldr	r1, [sp, #4]
 8006b66:	4b4c      	ldr	r3, [pc, #304]	; (8006c98 <_dtoa_r+0x618>)
 8006b68:	4431      	add	r1, r6
 8006b6a:	910d      	str	r1, [sp, #52]	; 0x34
 8006b6c:	9908      	ldr	r1, [sp, #32]
 8006b6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b76:	2900      	cmp	r1, #0
 8006b78:	d043      	beq.n	8006c02 <_dtoa_r+0x582>
 8006b7a:	494d      	ldr	r1, [pc, #308]	; (8006cb0 <_dtoa_r+0x630>)
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	f7f9 fe6d 	bl	800085c <__aeabi_ddiv>
 8006b82:	4652      	mov	r2, sl
 8006b84:	465b      	mov	r3, fp
 8006b86:	f7f9 fb87 	bl	8000298 <__aeabi_dsub>
 8006b8a:	9d01      	ldr	r5, [sp, #4]
 8006b8c:	4682      	mov	sl, r0
 8006b8e:	468b      	mov	fp, r1
 8006b90:	4649      	mov	r1, r9
 8006b92:	4640      	mov	r0, r8
 8006b94:	f7f9 ffe8 	bl	8000b68 <__aeabi_d2iz>
 8006b98:	4606      	mov	r6, r0
 8006b9a:	f7f9 fccb 	bl	8000534 <__aeabi_i2d>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	4640      	mov	r0, r8
 8006ba4:	4649      	mov	r1, r9
 8006ba6:	f7f9 fb77 	bl	8000298 <__aeabi_dsub>
 8006baa:	3630      	adds	r6, #48	; 0x30
 8006bac:	f805 6b01 	strb.w	r6, [r5], #1
 8006bb0:	4652      	mov	r2, sl
 8006bb2:	465b      	mov	r3, fp
 8006bb4:	4680      	mov	r8, r0
 8006bb6:	4689      	mov	r9, r1
 8006bb8:	f7f9 ff98 	bl	8000aec <__aeabi_dcmplt>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	d163      	bne.n	8006c88 <_dtoa_r+0x608>
 8006bc0:	4642      	mov	r2, r8
 8006bc2:	464b      	mov	r3, r9
 8006bc4:	4936      	ldr	r1, [pc, #216]	; (8006ca0 <_dtoa_r+0x620>)
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	f7f9 fb66 	bl	8000298 <__aeabi_dsub>
 8006bcc:	4652      	mov	r2, sl
 8006bce:	465b      	mov	r3, fp
 8006bd0:	f7f9 ff8c 	bl	8000aec <__aeabi_dcmplt>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	f040 80b5 	bne.w	8006d44 <_dtoa_r+0x6c4>
 8006bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bdc:	429d      	cmp	r5, r3
 8006bde:	d081      	beq.n	8006ae4 <_dtoa_r+0x464>
 8006be0:	4b30      	ldr	r3, [pc, #192]	; (8006ca4 <_dtoa_r+0x624>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	4650      	mov	r0, sl
 8006be6:	4659      	mov	r1, fp
 8006be8:	f7f9 fd0e 	bl	8000608 <__aeabi_dmul>
 8006bec:	4b2d      	ldr	r3, [pc, #180]	; (8006ca4 <_dtoa_r+0x624>)
 8006bee:	4682      	mov	sl, r0
 8006bf0:	468b      	mov	fp, r1
 8006bf2:	4640      	mov	r0, r8
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f7f9 fd06 	bl	8000608 <__aeabi_dmul>
 8006bfc:	4680      	mov	r8, r0
 8006bfe:	4689      	mov	r9, r1
 8006c00:	e7c6      	b.n	8006b90 <_dtoa_r+0x510>
 8006c02:	4650      	mov	r0, sl
 8006c04:	4659      	mov	r1, fp
 8006c06:	f7f9 fcff 	bl	8000608 <__aeabi_dmul>
 8006c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c0c:	9d01      	ldr	r5, [sp, #4]
 8006c0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c10:	4682      	mov	sl, r0
 8006c12:	468b      	mov	fp, r1
 8006c14:	4649      	mov	r1, r9
 8006c16:	4640      	mov	r0, r8
 8006c18:	f7f9 ffa6 	bl	8000b68 <__aeabi_d2iz>
 8006c1c:	4606      	mov	r6, r0
 8006c1e:	f7f9 fc89 	bl	8000534 <__aeabi_i2d>
 8006c22:	3630      	adds	r6, #48	; 0x30
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	4640      	mov	r0, r8
 8006c2a:	4649      	mov	r1, r9
 8006c2c:	f7f9 fb34 	bl	8000298 <__aeabi_dsub>
 8006c30:	f805 6b01 	strb.w	r6, [r5], #1
 8006c34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c36:	429d      	cmp	r5, r3
 8006c38:	4680      	mov	r8, r0
 8006c3a:	4689      	mov	r9, r1
 8006c3c:	f04f 0200 	mov.w	r2, #0
 8006c40:	d124      	bne.n	8006c8c <_dtoa_r+0x60c>
 8006c42:	4b1b      	ldr	r3, [pc, #108]	; (8006cb0 <_dtoa_r+0x630>)
 8006c44:	4650      	mov	r0, sl
 8006c46:	4659      	mov	r1, fp
 8006c48:	f7f9 fb28 	bl	800029c <__adddf3>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4640      	mov	r0, r8
 8006c52:	4649      	mov	r1, r9
 8006c54:	f7f9 ff68 	bl	8000b28 <__aeabi_dcmpgt>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d173      	bne.n	8006d44 <_dtoa_r+0x6c4>
 8006c5c:	4652      	mov	r2, sl
 8006c5e:	465b      	mov	r3, fp
 8006c60:	4913      	ldr	r1, [pc, #76]	; (8006cb0 <_dtoa_r+0x630>)
 8006c62:	2000      	movs	r0, #0
 8006c64:	f7f9 fb18 	bl	8000298 <__aeabi_dsub>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	4649      	mov	r1, r9
 8006c70:	f7f9 ff3c 	bl	8000aec <__aeabi_dcmplt>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	f43f af35 	beq.w	8006ae4 <_dtoa_r+0x464>
 8006c7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c7c:	1e6b      	subs	r3, r5, #1
 8006c7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c84:	2b30      	cmp	r3, #48	; 0x30
 8006c86:	d0f8      	beq.n	8006c7a <_dtoa_r+0x5fa>
 8006c88:	9700      	str	r7, [sp, #0]
 8006c8a:	e049      	b.n	8006d20 <_dtoa_r+0x6a0>
 8006c8c:	4b05      	ldr	r3, [pc, #20]	; (8006ca4 <_dtoa_r+0x624>)
 8006c8e:	f7f9 fcbb 	bl	8000608 <__aeabi_dmul>
 8006c92:	4680      	mov	r8, r0
 8006c94:	4689      	mov	r9, r1
 8006c96:	e7bd      	b.n	8006c14 <_dtoa_r+0x594>
 8006c98:	08008c10 	.word	0x08008c10
 8006c9c:	08008be8 	.word	0x08008be8
 8006ca0:	3ff00000 	.word	0x3ff00000
 8006ca4:	40240000 	.word	0x40240000
 8006ca8:	401c0000 	.word	0x401c0000
 8006cac:	40140000 	.word	0x40140000
 8006cb0:	3fe00000 	.word	0x3fe00000
 8006cb4:	9d01      	ldr	r5, [sp, #4]
 8006cb6:	4656      	mov	r6, sl
 8006cb8:	465f      	mov	r7, fp
 8006cba:	4642      	mov	r2, r8
 8006cbc:	464b      	mov	r3, r9
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	4639      	mov	r1, r7
 8006cc2:	f7f9 fdcb 	bl	800085c <__aeabi_ddiv>
 8006cc6:	f7f9 ff4f 	bl	8000b68 <__aeabi_d2iz>
 8006cca:	4682      	mov	sl, r0
 8006ccc:	f7f9 fc32 	bl	8000534 <__aeabi_i2d>
 8006cd0:	4642      	mov	r2, r8
 8006cd2:	464b      	mov	r3, r9
 8006cd4:	f7f9 fc98 	bl	8000608 <__aeabi_dmul>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4630      	mov	r0, r6
 8006cde:	4639      	mov	r1, r7
 8006ce0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006ce4:	f7f9 fad8 	bl	8000298 <__aeabi_dsub>
 8006ce8:	f805 6b01 	strb.w	r6, [r5], #1
 8006cec:	9e01      	ldr	r6, [sp, #4]
 8006cee:	9f03      	ldr	r7, [sp, #12]
 8006cf0:	1bae      	subs	r6, r5, r6
 8006cf2:	42b7      	cmp	r7, r6
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	d135      	bne.n	8006d66 <_dtoa_r+0x6e6>
 8006cfa:	f7f9 facf 	bl	800029c <__adddf3>
 8006cfe:	4642      	mov	r2, r8
 8006d00:	464b      	mov	r3, r9
 8006d02:	4606      	mov	r6, r0
 8006d04:	460f      	mov	r7, r1
 8006d06:	f7f9 ff0f 	bl	8000b28 <__aeabi_dcmpgt>
 8006d0a:	b9d0      	cbnz	r0, 8006d42 <_dtoa_r+0x6c2>
 8006d0c:	4642      	mov	r2, r8
 8006d0e:	464b      	mov	r3, r9
 8006d10:	4630      	mov	r0, r6
 8006d12:	4639      	mov	r1, r7
 8006d14:	f7f9 fee0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d18:	b110      	cbz	r0, 8006d20 <_dtoa_r+0x6a0>
 8006d1a:	f01a 0f01 	tst.w	sl, #1
 8006d1e:	d110      	bne.n	8006d42 <_dtoa_r+0x6c2>
 8006d20:	4620      	mov	r0, r4
 8006d22:	ee18 1a10 	vmov	r1, s16
 8006d26:	f000 faf3 	bl	8007310 <_Bfree>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	9800      	ldr	r0, [sp, #0]
 8006d2e:	702b      	strb	r3, [r5, #0]
 8006d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d32:	3001      	adds	r0, #1
 8006d34:	6018      	str	r0, [r3, #0]
 8006d36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f43f acf1 	beq.w	8006720 <_dtoa_r+0xa0>
 8006d3e:	601d      	str	r5, [r3, #0]
 8006d40:	e4ee      	b.n	8006720 <_dtoa_r+0xa0>
 8006d42:	9f00      	ldr	r7, [sp, #0]
 8006d44:	462b      	mov	r3, r5
 8006d46:	461d      	mov	r5, r3
 8006d48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d4c:	2a39      	cmp	r2, #57	; 0x39
 8006d4e:	d106      	bne.n	8006d5e <_dtoa_r+0x6de>
 8006d50:	9a01      	ldr	r2, [sp, #4]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d1f7      	bne.n	8006d46 <_dtoa_r+0x6c6>
 8006d56:	9901      	ldr	r1, [sp, #4]
 8006d58:	2230      	movs	r2, #48	; 0x30
 8006d5a:	3701      	adds	r7, #1
 8006d5c:	700a      	strb	r2, [r1, #0]
 8006d5e:	781a      	ldrb	r2, [r3, #0]
 8006d60:	3201      	adds	r2, #1
 8006d62:	701a      	strb	r2, [r3, #0]
 8006d64:	e790      	b.n	8006c88 <_dtoa_r+0x608>
 8006d66:	4ba6      	ldr	r3, [pc, #664]	; (8007000 <_dtoa_r+0x980>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f7f9 fc4d 	bl	8000608 <__aeabi_dmul>
 8006d6e:	2200      	movs	r2, #0
 8006d70:	2300      	movs	r3, #0
 8006d72:	4606      	mov	r6, r0
 8006d74:	460f      	mov	r7, r1
 8006d76:	f7f9 feaf 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d09d      	beq.n	8006cba <_dtoa_r+0x63a>
 8006d7e:	e7cf      	b.n	8006d20 <_dtoa_r+0x6a0>
 8006d80:	9a08      	ldr	r2, [sp, #32]
 8006d82:	2a00      	cmp	r2, #0
 8006d84:	f000 80d7 	beq.w	8006f36 <_dtoa_r+0x8b6>
 8006d88:	9a06      	ldr	r2, [sp, #24]
 8006d8a:	2a01      	cmp	r2, #1
 8006d8c:	f300 80ba 	bgt.w	8006f04 <_dtoa_r+0x884>
 8006d90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d92:	2a00      	cmp	r2, #0
 8006d94:	f000 80b2 	beq.w	8006efc <_dtoa_r+0x87c>
 8006d98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d9c:	9e07      	ldr	r6, [sp, #28]
 8006d9e:	9d04      	ldr	r5, [sp, #16]
 8006da0:	9a04      	ldr	r2, [sp, #16]
 8006da2:	441a      	add	r2, r3
 8006da4:	9204      	str	r2, [sp, #16]
 8006da6:	9a05      	ldr	r2, [sp, #20]
 8006da8:	2101      	movs	r1, #1
 8006daa:	441a      	add	r2, r3
 8006dac:	4620      	mov	r0, r4
 8006dae:	9205      	str	r2, [sp, #20]
 8006db0:	f000 fb66 	bl	8007480 <__i2b>
 8006db4:	4607      	mov	r7, r0
 8006db6:	2d00      	cmp	r5, #0
 8006db8:	dd0c      	ble.n	8006dd4 <_dtoa_r+0x754>
 8006dba:	9b05      	ldr	r3, [sp, #20]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	dd09      	ble.n	8006dd4 <_dtoa_r+0x754>
 8006dc0:	42ab      	cmp	r3, r5
 8006dc2:	9a04      	ldr	r2, [sp, #16]
 8006dc4:	bfa8      	it	ge
 8006dc6:	462b      	movge	r3, r5
 8006dc8:	1ad2      	subs	r2, r2, r3
 8006dca:	9204      	str	r2, [sp, #16]
 8006dcc:	9a05      	ldr	r2, [sp, #20]
 8006dce:	1aed      	subs	r5, r5, r3
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	9305      	str	r3, [sp, #20]
 8006dd4:	9b07      	ldr	r3, [sp, #28]
 8006dd6:	b31b      	cbz	r3, 8006e20 <_dtoa_r+0x7a0>
 8006dd8:	9b08      	ldr	r3, [sp, #32]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f000 80af 	beq.w	8006f3e <_dtoa_r+0x8be>
 8006de0:	2e00      	cmp	r6, #0
 8006de2:	dd13      	ble.n	8006e0c <_dtoa_r+0x78c>
 8006de4:	4639      	mov	r1, r7
 8006de6:	4632      	mov	r2, r6
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 fc09 	bl	8007600 <__pow5mult>
 8006dee:	ee18 2a10 	vmov	r2, s16
 8006df2:	4601      	mov	r1, r0
 8006df4:	4607      	mov	r7, r0
 8006df6:	4620      	mov	r0, r4
 8006df8:	f000 fb58 	bl	80074ac <__multiply>
 8006dfc:	ee18 1a10 	vmov	r1, s16
 8006e00:	4680      	mov	r8, r0
 8006e02:	4620      	mov	r0, r4
 8006e04:	f000 fa84 	bl	8007310 <_Bfree>
 8006e08:	ee08 8a10 	vmov	s16, r8
 8006e0c:	9b07      	ldr	r3, [sp, #28]
 8006e0e:	1b9a      	subs	r2, r3, r6
 8006e10:	d006      	beq.n	8006e20 <_dtoa_r+0x7a0>
 8006e12:	ee18 1a10 	vmov	r1, s16
 8006e16:	4620      	mov	r0, r4
 8006e18:	f000 fbf2 	bl	8007600 <__pow5mult>
 8006e1c:	ee08 0a10 	vmov	s16, r0
 8006e20:	2101      	movs	r1, #1
 8006e22:	4620      	mov	r0, r4
 8006e24:	f000 fb2c 	bl	8007480 <__i2b>
 8006e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	4606      	mov	r6, r0
 8006e2e:	f340 8088 	ble.w	8006f42 <_dtoa_r+0x8c2>
 8006e32:	461a      	mov	r2, r3
 8006e34:	4601      	mov	r1, r0
 8006e36:	4620      	mov	r0, r4
 8006e38:	f000 fbe2 	bl	8007600 <__pow5mult>
 8006e3c:	9b06      	ldr	r3, [sp, #24]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	4606      	mov	r6, r0
 8006e42:	f340 8081 	ble.w	8006f48 <_dtoa_r+0x8c8>
 8006e46:	f04f 0800 	mov.w	r8, #0
 8006e4a:	6933      	ldr	r3, [r6, #16]
 8006e4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e50:	6918      	ldr	r0, [r3, #16]
 8006e52:	f000 fac5 	bl	80073e0 <__hi0bits>
 8006e56:	f1c0 0020 	rsb	r0, r0, #32
 8006e5a:	9b05      	ldr	r3, [sp, #20]
 8006e5c:	4418      	add	r0, r3
 8006e5e:	f010 001f 	ands.w	r0, r0, #31
 8006e62:	f000 8092 	beq.w	8006f8a <_dtoa_r+0x90a>
 8006e66:	f1c0 0320 	rsb	r3, r0, #32
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	f340 808a 	ble.w	8006f84 <_dtoa_r+0x904>
 8006e70:	f1c0 001c 	rsb	r0, r0, #28
 8006e74:	9b04      	ldr	r3, [sp, #16]
 8006e76:	4403      	add	r3, r0
 8006e78:	9304      	str	r3, [sp, #16]
 8006e7a:	9b05      	ldr	r3, [sp, #20]
 8006e7c:	4403      	add	r3, r0
 8006e7e:	4405      	add	r5, r0
 8006e80:	9305      	str	r3, [sp, #20]
 8006e82:	9b04      	ldr	r3, [sp, #16]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	dd07      	ble.n	8006e98 <_dtoa_r+0x818>
 8006e88:	ee18 1a10 	vmov	r1, s16
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f000 fc10 	bl	80076b4 <__lshift>
 8006e94:	ee08 0a10 	vmov	s16, r0
 8006e98:	9b05      	ldr	r3, [sp, #20]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	dd05      	ble.n	8006eaa <_dtoa_r+0x82a>
 8006e9e:	4631      	mov	r1, r6
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f000 fc06 	bl	80076b4 <__lshift>
 8006ea8:	4606      	mov	r6, r0
 8006eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d06e      	beq.n	8006f8e <_dtoa_r+0x90e>
 8006eb0:	ee18 0a10 	vmov	r0, s16
 8006eb4:	4631      	mov	r1, r6
 8006eb6:	f000 fc6d 	bl	8007794 <__mcmp>
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	da67      	bge.n	8006f8e <_dtoa_r+0x90e>
 8006ebe:	9b00      	ldr	r3, [sp, #0]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	ee18 1a10 	vmov	r1, s16
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	220a      	movs	r2, #10
 8006eca:	2300      	movs	r3, #0
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f000 fa41 	bl	8007354 <__multadd>
 8006ed2:	9b08      	ldr	r3, [sp, #32]
 8006ed4:	ee08 0a10 	vmov	s16, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 81b1 	beq.w	8007240 <_dtoa_r+0xbc0>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	4639      	mov	r1, r7
 8006ee2:	220a      	movs	r2, #10
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	f000 fa35 	bl	8007354 <__multadd>
 8006eea:	9b02      	ldr	r3, [sp, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	4607      	mov	r7, r0
 8006ef0:	f300 808e 	bgt.w	8007010 <_dtoa_r+0x990>
 8006ef4:	9b06      	ldr	r3, [sp, #24]
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	dc51      	bgt.n	8006f9e <_dtoa_r+0x91e>
 8006efa:	e089      	b.n	8007010 <_dtoa_r+0x990>
 8006efc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006efe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f02:	e74b      	b.n	8006d9c <_dtoa_r+0x71c>
 8006f04:	9b03      	ldr	r3, [sp, #12]
 8006f06:	1e5e      	subs	r6, r3, #1
 8006f08:	9b07      	ldr	r3, [sp, #28]
 8006f0a:	42b3      	cmp	r3, r6
 8006f0c:	bfbf      	itttt	lt
 8006f0e:	9b07      	ldrlt	r3, [sp, #28]
 8006f10:	9607      	strlt	r6, [sp, #28]
 8006f12:	1af2      	sublt	r2, r6, r3
 8006f14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006f16:	bfb6      	itet	lt
 8006f18:	189b      	addlt	r3, r3, r2
 8006f1a:	1b9e      	subge	r6, r3, r6
 8006f1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006f1e:	9b03      	ldr	r3, [sp, #12]
 8006f20:	bfb8      	it	lt
 8006f22:	2600      	movlt	r6, #0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	bfb7      	itett	lt
 8006f28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006f2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006f30:	1a9d      	sublt	r5, r3, r2
 8006f32:	2300      	movlt	r3, #0
 8006f34:	e734      	b.n	8006da0 <_dtoa_r+0x720>
 8006f36:	9e07      	ldr	r6, [sp, #28]
 8006f38:	9d04      	ldr	r5, [sp, #16]
 8006f3a:	9f08      	ldr	r7, [sp, #32]
 8006f3c:	e73b      	b.n	8006db6 <_dtoa_r+0x736>
 8006f3e:	9a07      	ldr	r2, [sp, #28]
 8006f40:	e767      	b.n	8006e12 <_dtoa_r+0x792>
 8006f42:	9b06      	ldr	r3, [sp, #24]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	dc18      	bgt.n	8006f7a <_dtoa_r+0x8fa>
 8006f48:	f1ba 0f00 	cmp.w	sl, #0
 8006f4c:	d115      	bne.n	8006f7a <_dtoa_r+0x8fa>
 8006f4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f52:	b993      	cbnz	r3, 8006f7a <_dtoa_r+0x8fa>
 8006f54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f58:	0d1b      	lsrs	r3, r3, #20
 8006f5a:	051b      	lsls	r3, r3, #20
 8006f5c:	b183      	cbz	r3, 8006f80 <_dtoa_r+0x900>
 8006f5e:	9b04      	ldr	r3, [sp, #16]
 8006f60:	3301      	adds	r3, #1
 8006f62:	9304      	str	r3, [sp, #16]
 8006f64:	9b05      	ldr	r3, [sp, #20]
 8006f66:	3301      	adds	r3, #1
 8006f68:	9305      	str	r3, [sp, #20]
 8006f6a:	f04f 0801 	mov.w	r8, #1
 8006f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f47f af6a 	bne.w	8006e4a <_dtoa_r+0x7ca>
 8006f76:	2001      	movs	r0, #1
 8006f78:	e76f      	b.n	8006e5a <_dtoa_r+0x7da>
 8006f7a:	f04f 0800 	mov.w	r8, #0
 8006f7e:	e7f6      	b.n	8006f6e <_dtoa_r+0x8ee>
 8006f80:	4698      	mov	r8, r3
 8006f82:	e7f4      	b.n	8006f6e <_dtoa_r+0x8ee>
 8006f84:	f43f af7d 	beq.w	8006e82 <_dtoa_r+0x802>
 8006f88:	4618      	mov	r0, r3
 8006f8a:	301c      	adds	r0, #28
 8006f8c:	e772      	b.n	8006e74 <_dtoa_r+0x7f4>
 8006f8e:	9b03      	ldr	r3, [sp, #12]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	dc37      	bgt.n	8007004 <_dtoa_r+0x984>
 8006f94:	9b06      	ldr	r3, [sp, #24]
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	dd34      	ble.n	8007004 <_dtoa_r+0x984>
 8006f9a:	9b03      	ldr	r3, [sp, #12]
 8006f9c:	9302      	str	r3, [sp, #8]
 8006f9e:	9b02      	ldr	r3, [sp, #8]
 8006fa0:	b96b      	cbnz	r3, 8006fbe <_dtoa_r+0x93e>
 8006fa2:	4631      	mov	r1, r6
 8006fa4:	2205      	movs	r2, #5
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f000 f9d4 	bl	8007354 <__multadd>
 8006fac:	4601      	mov	r1, r0
 8006fae:	4606      	mov	r6, r0
 8006fb0:	ee18 0a10 	vmov	r0, s16
 8006fb4:	f000 fbee 	bl	8007794 <__mcmp>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	f73f adbb 	bgt.w	8006b34 <_dtoa_r+0x4b4>
 8006fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc0:	9d01      	ldr	r5, [sp, #4]
 8006fc2:	43db      	mvns	r3, r3
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	f04f 0800 	mov.w	r8, #0
 8006fca:	4631      	mov	r1, r6
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f000 f99f 	bl	8007310 <_Bfree>
 8006fd2:	2f00      	cmp	r7, #0
 8006fd4:	f43f aea4 	beq.w	8006d20 <_dtoa_r+0x6a0>
 8006fd8:	f1b8 0f00 	cmp.w	r8, #0
 8006fdc:	d005      	beq.n	8006fea <_dtoa_r+0x96a>
 8006fde:	45b8      	cmp	r8, r7
 8006fe0:	d003      	beq.n	8006fea <_dtoa_r+0x96a>
 8006fe2:	4641      	mov	r1, r8
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f000 f993 	bl	8007310 <_Bfree>
 8006fea:	4639      	mov	r1, r7
 8006fec:	4620      	mov	r0, r4
 8006fee:	f000 f98f 	bl	8007310 <_Bfree>
 8006ff2:	e695      	b.n	8006d20 <_dtoa_r+0x6a0>
 8006ff4:	2600      	movs	r6, #0
 8006ff6:	4637      	mov	r7, r6
 8006ff8:	e7e1      	b.n	8006fbe <_dtoa_r+0x93e>
 8006ffa:	9700      	str	r7, [sp, #0]
 8006ffc:	4637      	mov	r7, r6
 8006ffe:	e599      	b.n	8006b34 <_dtoa_r+0x4b4>
 8007000:	40240000 	.word	0x40240000
 8007004:	9b08      	ldr	r3, [sp, #32]
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 80ca 	beq.w	80071a0 <_dtoa_r+0xb20>
 800700c:	9b03      	ldr	r3, [sp, #12]
 800700e:	9302      	str	r3, [sp, #8]
 8007010:	2d00      	cmp	r5, #0
 8007012:	dd05      	ble.n	8007020 <_dtoa_r+0x9a0>
 8007014:	4639      	mov	r1, r7
 8007016:	462a      	mov	r2, r5
 8007018:	4620      	mov	r0, r4
 800701a:	f000 fb4b 	bl	80076b4 <__lshift>
 800701e:	4607      	mov	r7, r0
 8007020:	f1b8 0f00 	cmp.w	r8, #0
 8007024:	d05b      	beq.n	80070de <_dtoa_r+0xa5e>
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	4620      	mov	r0, r4
 800702a:	f000 f931 	bl	8007290 <_Balloc>
 800702e:	4605      	mov	r5, r0
 8007030:	b928      	cbnz	r0, 800703e <_dtoa_r+0x9be>
 8007032:	4b87      	ldr	r3, [pc, #540]	; (8007250 <_dtoa_r+0xbd0>)
 8007034:	4602      	mov	r2, r0
 8007036:	f240 21ea 	movw	r1, #746	; 0x2ea
 800703a:	f7ff bb3b 	b.w	80066b4 <_dtoa_r+0x34>
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	3202      	adds	r2, #2
 8007042:	0092      	lsls	r2, r2, #2
 8007044:	f107 010c 	add.w	r1, r7, #12
 8007048:	300c      	adds	r0, #12
 800704a:	f000 f913 	bl	8007274 <memcpy>
 800704e:	2201      	movs	r2, #1
 8007050:	4629      	mov	r1, r5
 8007052:	4620      	mov	r0, r4
 8007054:	f000 fb2e 	bl	80076b4 <__lshift>
 8007058:	9b01      	ldr	r3, [sp, #4]
 800705a:	f103 0901 	add.w	r9, r3, #1
 800705e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007062:	4413      	add	r3, r2
 8007064:	9305      	str	r3, [sp, #20]
 8007066:	f00a 0301 	and.w	r3, sl, #1
 800706a:	46b8      	mov	r8, r7
 800706c:	9304      	str	r3, [sp, #16]
 800706e:	4607      	mov	r7, r0
 8007070:	4631      	mov	r1, r6
 8007072:	ee18 0a10 	vmov	r0, s16
 8007076:	f7ff fa76 	bl	8006566 <quorem>
 800707a:	4641      	mov	r1, r8
 800707c:	9002      	str	r0, [sp, #8]
 800707e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007082:	ee18 0a10 	vmov	r0, s16
 8007086:	f000 fb85 	bl	8007794 <__mcmp>
 800708a:	463a      	mov	r2, r7
 800708c:	9003      	str	r0, [sp, #12]
 800708e:	4631      	mov	r1, r6
 8007090:	4620      	mov	r0, r4
 8007092:	f000 fb9b 	bl	80077cc <__mdiff>
 8007096:	68c2      	ldr	r2, [r0, #12]
 8007098:	f109 3bff 	add.w	fp, r9, #4294967295
 800709c:	4605      	mov	r5, r0
 800709e:	bb02      	cbnz	r2, 80070e2 <_dtoa_r+0xa62>
 80070a0:	4601      	mov	r1, r0
 80070a2:	ee18 0a10 	vmov	r0, s16
 80070a6:	f000 fb75 	bl	8007794 <__mcmp>
 80070aa:	4602      	mov	r2, r0
 80070ac:	4629      	mov	r1, r5
 80070ae:	4620      	mov	r0, r4
 80070b0:	9207      	str	r2, [sp, #28]
 80070b2:	f000 f92d 	bl	8007310 <_Bfree>
 80070b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80070ba:	ea43 0102 	orr.w	r1, r3, r2
 80070be:	9b04      	ldr	r3, [sp, #16]
 80070c0:	430b      	orrs	r3, r1
 80070c2:	464d      	mov	r5, r9
 80070c4:	d10f      	bne.n	80070e6 <_dtoa_r+0xa66>
 80070c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80070ca:	d02a      	beq.n	8007122 <_dtoa_r+0xaa2>
 80070cc:	9b03      	ldr	r3, [sp, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	dd02      	ble.n	80070d8 <_dtoa_r+0xa58>
 80070d2:	9b02      	ldr	r3, [sp, #8]
 80070d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80070d8:	f88b a000 	strb.w	sl, [fp]
 80070dc:	e775      	b.n	8006fca <_dtoa_r+0x94a>
 80070de:	4638      	mov	r0, r7
 80070e0:	e7ba      	b.n	8007058 <_dtoa_r+0x9d8>
 80070e2:	2201      	movs	r2, #1
 80070e4:	e7e2      	b.n	80070ac <_dtoa_r+0xa2c>
 80070e6:	9b03      	ldr	r3, [sp, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	db04      	blt.n	80070f6 <_dtoa_r+0xa76>
 80070ec:	9906      	ldr	r1, [sp, #24]
 80070ee:	430b      	orrs	r3, r1
 80070f0:	9904      	ldr	r1, [sp, #16]
 80070f2:	430b      	orrs	r3, r1
 80070f4:	d122      	bne.n	800713c <_dtoa_r+0xabc>
 80070f6:	2a00      	cmp	r2, #0
 80070f8:	ddee      	ble.n	80070d8 <_dtoa_r+0xa58>
 80070fa:	ee18 1a10 	vmov	r1, s16
 80070fe:	2201      	movs	r2, #1
 8007100:	4620      	mov	r0, r4
 8007102:	f000 fad7 	bl	80076b4 <__lshift>
 8007106:	4631      	mov	r1, r6
 8007108:	ee08 0a10 	vmov	s16, r0
 800710c:	f000 fb42 	bl	8007794 <__mcmp>
 8007110:	2800      	cmp	r0, #0
 8007112:	dc03      	bgt.n	800711c <_dtoa_r+0xa9c>
 8007114:	d1e0      	bne.n	80070d8 <_dtoa_r+0xa58>
 8007116:	f01a 0f01 	tst.w	sl, #1
 800711a:	d0dd      	beq.n	80070d8 <_dtoa_r+0xa58>
 800711c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007120:	d1d7      	bne.n	80070d2 <_dtoa_r+0xa52>
 8007122:	2339      	movs	r3, #57	; 0x39
 8007124:	f88b 3000 	strb.w	r3, [fp]
 8007128:	462b      	mov	r3, r5
 800712a:	461d      	mov	r5, r3
 800712c:	3b01      	subs	r3, #1
 800712e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007132:	2a39      	cmp	r2, #57	; 0x39
 8007134:	d071      	beq.n	800721a <_dtoa_r+0xb9a>
 8007136:	3201      	adds	r2, #1
 8007138:	701a      	strb	r2, [r3, #0]
 800713a:	e746      	b.n	8006fca <_dtoa_r+0x94a>
 800713c:	2a00      	cmp	r2, #0
 800713e:	dd07      	ble.n	8007150 <_dtoa_r+0xad0>
 8007140:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007144:	d0ed      	beq.n	8007122 <_dtoa_r+0xaa2>
 8007146:	f10a 0301 	add.w	r3, sl, #1
 800714a:	f88b 3000 	strb.w	r3, [fp]
 800714e:	e73c      	b.n	8006fca <_dtoa_r+0x94a>
 8007150:	9b05      	ldr	r3, [sp, #20]
 8007152:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007156:	4599      	cmp	r9, r3
 8007158:	d047      	beq.n	80071ea <_dtoa_r+0xb6a>
 800715a:	ee18 1a10 	vmov	r1, s16
 800715e:	2300      	movs	r3, #0
 8007160:	220a      	movs	r2, #10
 8007162:	4620      	mov	r0, r4
 8007164:	f000 f8f6 	bl	8007354 <__multadd>
 8007168:	45b8      	cmp	r8, r7
 800716a:	ee08 0a10 	vmov	s16, r0
 800716e:	f04f 0300 	mov.w	r3, #0
 8007172:	f04f 020a 	mov.w	r2, #10
 8007176:	4641      	mov	r1, r8
 8007178:	4620      	mov	r0, r4
 800717a:	d106      	bne.n	800718a <_dtoa_r+0xb0a>
 800717c:	f000 f8ea 	bl	8007354 <__multadd>
 8007180:	4680      	mov	r8, r0
 8007182:	4607      	mov	r7, r0
 8007184:	f109 0901 	add.w	r9, r9, #1
 8007188:	e772      	b.n	8007070 <_dtoa_r+0x9f0>
 800718a:	f000 f8e3 	bl	8007354 <__multadd>
 800718e:	4639      	mov	r1, r7
 8007190:	4680      	mov	r8, r0
 8007192:	2300      	movs	r3, #0
 8007194:	220a      	movs	r2, #10
 8007196:	4620      	mov	r0, r4
 8007198:	f000 f8dc 	bl	8007354 <__multadd>
 800719c:	4607      	mov	r7, r0
 800719e:	e7f1      	b.n	8007184 <_dtoa_r+0xb04>
 80071a0:	9b03      	ldr	r3, [sp, #12]
 80071a2:	9302      	str	r3, [sp, #8]
 80071a4:	9d01      	ldr	r5, [sp, #4]
 80071a6:	ee18 0a10 	vmov	r0, s16
 80071aa:	4631      	mov	r1, r6
 80071ac:	f7ff f9db 	bl	8006566 <quorem>
 80071b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80071b4:	9b01      	ldr	r3, [sp, #4]
 80071b6:	f805 ab01 	strb.w	sl, [r5], #1
 80071ba:	1aea      	subs	r2, r5, r3
 80071bc:	9b02      	ldr	r3, [sp, #8]
 80071be:	4293      	cmp	r3, r2
 80071c0:	dd09      	ble.n	80071d6 <_dtoa_r+0xb56>
 80071c2:	ee18 1a10 	vmov	r1, s16
 80071c6:	2300      	movs	r3, #0
 80071c8:	220a      	movs	r2, #10
 80071ca:	4620      	mov	r0, r4
 80071cc:	f000 f8c2 	bl	8007354 <__multadd>
 80071d0:	ee08 0a10 	vmov	s16, r0
 80071d4:	e7e7      	b.n	80071a6 <_dtoa_r+0xb26>
 80071d6:	9b02      	ldr	r3, [sp, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	bfc8      	it	gt
 80071dc:	461d      	movgt	r5, r3
 80071de:	9b01      	ldr	r3, [sp, #4]
 80071e0:	bfd8      	it	le
 80071e2:	2501      	movle	r5, #1
 80071e4:	441d      	add	r5, r3
 80071e6:	f04f 0800 	mov.w	r8, #0
 80071ea:	ee18 1a10 	vmov	r1, s16
 80071ee:	2201      	movs	r2, #1
 80071f0:	4620      	mov	r0, r4
 80071f2:	f000 fa5f 	bl	80076b4 <__lshift>
 80071f6:	4631      	mov	r1, r6
 80071f8:	ee08 0a10 	vmov	s16, r0
 80071fc:	f000 faca 	bl	8007794 <__mcmp>
 8007200:	2800      	cmp	r0, #0
 8007202:	dc91      	bgt.n	8007128 <_dtoa_r+0xaa8>
 8007204:	d102      	bne.n	800720c <_dtoa_r+0xb8c>
 8007206:	f01a 0f01 	tst.w	sl, #1
 800720a:	d18d      	bne.n	8007128 <_dtoa_r+0xaa8>
 800720c:	462b      	mov	r3, r5
 800720e:	461d      	mov	r5, r3
 8007210:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007214:	2a30      	cmp	r2, #48	; 0x30
 8007216:	d0fa      	beq.n	800720e <_dtoa_r+0xb8e>
 8007218:	e6d7      	b.n	8006fca <_dtoa_r+0x94a>
 800721a:	9a01      	ldr	r2, [sp, #4]
 800721c:	429a      	cmp	r2, r3
 800721e:	d184      	bne.n	800712a <_dtoa_r+0xaaa>
 8007220:	9b00      	ldr	r3, [sp, #0]
 8007222:	3301      	adds	r3, #1
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	2331      	movs	r3, #49	; 0x31
 8007228:	7013      	strb	r3, [r2, #0]
 800722a:	e6ce      	b.n	8006fca <_dtoa_r+0x94a>
 800722c:	4b09      	ldr	r3, [pc, #36]	; (8007254 <_dtoa_r+0xbd4>)
 800722e:	f7ff ba95 	b.w	800675c <_dtoa_r+0xdc>
 8007232:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007234:	2b00      	cmp	r3, #0
 8007236:	f47f aa6e 	bne.w	8006716 <_dtoa_r+0x96>
 800723a:	4b07      	ldr	r3, [pc, #28]	; (8007258 <_dtoa_r+0xbd8>)
 800723c:	f7ff ba8e 	b.w	800675c <_dtoa_r+0xdc>
 8007240:	9b02      	ldr	r3, [sp, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	dcae      	bgt.n	80071a4 <_dtoa_r+0xb24>
 8007246:	9b06      	ldr	r3, [sp, #24]
 8007248:	2b02      	cmp	r3, #2
 800724a:	f73f aea8 	bgt.w	8006f9e <_dtoa_r+0x91e>
 800724e:	e7a9      	b.n	80071a4 <_dtoa_r+0xb24>
 8007250:	08008b7b 	.word	0x08008b7b
 8007254:	08008ad8 	.word	0x08008ad8
 8007258:	08008afc 	.word	0x08008afc

0800725c <_localeconv_r>:
 800725c:	4800      	ldr	r0, [pc, #0]	; (8007260 <_localeconv_r+0x4>)
 800725e:	4770      	bx	lr
 8007260:	200001b8 	.word	0x200001b8

08007264 <malloc>:
 8007264:	4b02      	ldr	r3, [pc, #8]	; (8007270 <malloc+0xc>)
 8007266:	4601      	mov	r1, r0
 8007268:	6818      	ldr	r0, [r3, #0]
 800726a:	f000 bc17 	b.w	8007a9c <_malloc_r>
 800726e:	bf00      	nop
 8007270:	20000064 	.word	0x20000064

08007274 <memcpy>:
 8007274:	440a      	add	r2, r1
 8007276:	4291      	cmp	r1, r2
 8007278:	f100 33ff 	add.w	r3, r0, #4294967295
 800727c:	d100      	bne.n	8007280 <memcpy+0xc>
 800727e:	4770      	bx	lr
 8007280:	b510      	push	{r4, lr}
 8007282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007286:	f803 4f01 	strb.w	r4, [r3, #1]!
 800728a:	4291      	cmp	r1, r2
 800728c:	d1f9      	bne.n	8007282 <memcpy+0xe>
 800728e:	bd10      	pop	{r4, pc}

08007290 <_Balloc>:
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007294:	4604      	mov	r4, r0
 8007296:	460d      	mov	r5, r1
 8007298:	b976      	cbnz	r6, 80072b8 <_Balloc+0x28>
 800729a:	2010      	movs	r0, #16
 800729c:	f7ff ffe2 	bl	8007264 <malloc>
 80072a0:	4602      	mov	r2, r0
 80072a2:	6260      	str	r0, [r4, #36]	; 0x24
 80072a4:	b920      	cbnz	r0, 80072b0 <_Balloc+0x20>
 80072a6:	4b18      	ldr	r3, [pc, #96]	; (8007308 <_Balloc+0x78>)
 80072a8:	4818      	ldr	r0, [pc, #96]	; (800730c <_Balloc+0x7c>)
 80072aa:	2166      	movs	r1, #102	; 0x66
 80072ac:	f000 fdd6 	bl	8007e5c <__assert_func>
 80072b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072b4:	6006      	str	r6, [r0, #0]
 80072b6:	60c6      	str	r6, [r0, #12]
 80072b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80072ba:	68f3      	ldr	r3, [r6, #12]
 80072bc:	b183      	cbz	r3, 80072e0 <_Balloc+0x50>
 80072be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072c6:	b9b8      	cbnz	r0, 80072f8 <_Balloc+0x68>
 80072c8:	2101      	movs	r1, #1
 80072ca:	fa01 f605 	lsl.w	r6, r1, r5
 80072ce:	1d72      	adds	r2, r6, #5
 80072d0:	0092      	lsls	r2, r2, #2
 80072d2:	4620      	mov	r0, r4
 80072d4:	f000 fb60 	bl	8007998 <_calloc_r>
 80072d8:	b160      	cbz	r0, 80072f4 <_Balloc+0x64>
 80072da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072de:	e00e      	b.n	80072fe <_Balloc+0x6e>
 80072e0:	2221      	movs	r2, #33	; 0x21
 80072e2:	2104      	movs	r1, #4
 80072e4:	4620      	mov	r0, r4
 80072e6:	f000 fb57 	bl	8007998 <_calloc_r>
 80072ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072ec:	60f0      	str	r0, [r6, #12]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1e4      	bne.n	80072be <_Balloc+0x2e>
 80072f4:	2000      	movs	r0, #0
 80072f6:	bd70      	pop	{r4, r5, r6, pc}
 80072f8:	6802      	ldr	r2, [r0, #0]
 80072fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072fe:	2300      	movs	r3, #0
 8007300:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007304:	e7f7      	b.n	80072f6 <_Balloc+0x66>
 8007306:	bf00      	nop
 8007308:	08008b09 	.word	0x08008b09
 800730c:	08008b8c 	.word	0x08008b8c

08007310 <_Bfree>:
 8007310:	b570      	push	{r4, r5, r6, lr}
 8007312:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007314:	4605      	mov	r5, r0
 8007316:	460c      	mov	r4, r1
 8007318:	b976      	cbnz	r6, 8007338 <_Bfree+0x28>
 800731a:	2010      	movs	r0, #16
 800731c:	f7ff ffa2 	bl	8007264 <malloc>
 8007320:	4602      	mov	r2, r0
 8007322:	6268      	str	r0, [r5, #36]	; 0x24
 8007324:	b920      	cbnz	r0, 8007330 <_Bfree+0x20>
 8007326:	4b09      	ldr	r3, [pc, #36]	; (800734c <_Bfree+0x3c>)
 8007328:	4809      	ldr	r0, [pc, #36]	; (8007350 <_Bfree+0x40>)
 800732a:	218a      	movs	r1, #138	; 0x8a
 800732c:	f000 fd96 	bl	8007e5c <__assert_func>
 8007330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007334:	6006      	str	r6, [r0, #0]
 8007336:	60c6      	str	r6, [r0, #12]
 8007338:	b13c      	cbz	r4, 800734a <_Bfree+0x3a>
 800733a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800733c:	6862      	ldr	r2, [r4, #4]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007344:	6021      	str	r1, [r4, #0]
 8007346:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800734a:	bd70      	pop	{r4, r5, r6, pc}
 800734c:	08008b09 	.word	0x08008b09
 8007350:	08008b8c 	.word	0x08008b8c

08007354 <__multadd>:
 8007354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007358:	690d      	ldr	r5, [r1, #16]
 800735a:	4607      	mov	r7, r0
 800735c:	460c      	mov	r4, r1
 800735e:	461e      	mov	r6, r3
 8007360:	f101 0c14 	add.w	ip, r1, #20
 8007364:	2000      	movs	r0, #0
 8007366:	f8dc 3000 	ldr.w	r3, [ip]
 800736a:	b299      	uxth	r1, r3
 800736c:	fb02 6101 	mla	r1, r2, r1, r6
 8007370:	0c1e      	lsrs	r6, r3, #16
 8007372:	0c0b      	lsrs	r3, r1, #16
 8007374:	fb02 3306 	mla	r3, r2, r6, r3
 8007378:	b289      	uxth	r1, r1
 800737a:	3001      	adds	r0, #1
 800737c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007380:	4285      	cmp	r5, r0
 8007382:	f84c 1b04 	str.w	r1, [ip], #4
 8007386:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800738a:	dcec      	bgt.n	8007366 <__multadd+0x12>
 800738c:	b30e      	cbz	r6, 80073d2 <__multadd+0x7e>
 800738e:	68a3      	ldr	r3, [r4, #8]
 8007390:	42ab      	cmp	r3, r5
 8007392:	dc19      	bgt.n	80073c8 <__multadd+0x74>
 8007394:	6861      	ldr	r1, [r4, #4]
 8007396:	4638      	mov	r0, r7
 8007398:	3101      	adds	r1, #1
 800739a:	f7ff ff79 	bl	8007290 <_Balloc>
 800739e:	4680      	mov	r8, r0
 80073a0:	b928      	cbnz	r0, 80073ae <__multadd+0x5a>
 80073a2:	4602      	mov	r2, r0
 80073a4:	4b0c      	ldr	r3, [pc, #48]	; (80073d8 <__multadd+0x84>)
 80073a6:	480d      	ldr	r0, [pc, #52]	; (80073dc <__multadd+0x88>)
 80073a8:	21b5      	movs	r1, #181	; 0xb5
 80073aa:	f000 fd57 	bl	8007e5c <__assert_func>
 80073ae:	6922      	ldr	r2, [r4, #16]
 80073b0:	3202      	adds	r2, #2
 80073b2:	f104 010c 	add.w	r1, r4, #12
 80073b6:	0092      	lsls	r2, r2, #2
 80073b8:	300c      	adds	r0, #12
 80073ba:	f7ff ff5b 	bl	8007274 <memcpy>
 80073be:	4621      	mov	r1, r4
 80073c0:	4638      	mov	r0, r7
 80073c2:	f7ff ffa5 	bl	8007310 <_Bfree>
 80073c6:	4644      	mov	r4, r8
 80073c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073cc:	3501      	adds	r5, #1
 80073ce:	615e      	str	r6, [r3, #20]
 80073d0:	6125      	str	r5, [r4, #16]
 80073d2:	4620      	mov	r0, r4
 80073d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d8:	08008b7b 	.word	0x08008b7b
 80073dc:	08008b8c 	.word	0x08008b8c

080073e0 <__hi0bits>:
 80073e0:	0c03      	lsrs	r3, r0, #16
 80073e2:	041b      	lsls	r3, r3, #16
 80073e4:	b9d3      	cbnz	r3, 800741c <__hi0bits+0x3c>
 80073e6:	0400      	lsls	r0, r0, #16
 80073e8:	2310      	movs	r3, #16
 80073ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80073ee:	bf04      	itt	eq
 80073f0:	0200      	lsleq	r0, r0, #8
 80073f2:	3308      	addeq	r3, #8
 80073f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80073f8:	bf04      	itt	eq
 80073fa:	0100      	lsleq	r0, r0, #4
 80073fc:	3304      	addeq	r3, #4
 80073fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007402:	bf04      	itt	eq
 8007404:	0080      	lsleq	r0, r0, #2
 8007406:	3302      	addeq	r3, #2
 8007408:	2800      	cmp	r0, #0
 800740a:	db05      	blt.n	8007418 <__hi0bits+0x38>
 800740c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007410:	f103 0301 	add.w	r3, r3, #1
 8007414:	bf08      	it	eq
 8007416:	2320      	moveq	r3, #32
 8007418:	4618      	mov	r0, r3
 800741a:	4770      	bx	lr
 800741c:	2300      	movs	r3, #0
 800741e:	e7e4      	b.n	80073ea <__hi0bits+0xa>

08007420 <__lo0bits>:
 8007420:	6803      	ldr	r3, [r0, #0]
 8007422:	f013 0207 	ands.w	r2, r3, #7
 8007426:	4601      	mov	r1, r0
 8007428:	d00b      	beq.n	8007442 <__lo0bits+0x22>
 800742a:	07da      	lsls	r2, r3, #31
 800742c:	d423      	bmi.n	8007476 <__lo0bits+0x56>
 800742e:	0798      	lsls	r0, r3, #30
 8007430:	bf49      	itett	mi
 8007432:	085b      	lsrmi	r3, r3, #1
 8007434:	089b      	lsrpl	r3, r3, #2
 8007436:	2001      	movmi	r0, #1
 8007438:	600b      	strmi	r3, [r1, #0]
 800743a:	bf5c      	itt	pl
 800743c:	600b      	strpl	r3, [r1, #0]
 800743e:	2002      	movpl	r0, #2
 8007440:	4770      	bx	lr
 8007442:	b298      	uxth	r0, r3
 8007444:	b9a8      	cbnz	r0, 8007472 <__lo0bits+0x52>
 8007446:	0c1b      	lsrs	r3, r3, #16
 8007448:	2010      	movs	r0, #16
 800744a:	b2da      	uxtb	r2, r3
 800744c:	b90a      	cbnz	r2, 8007452 <__lo0bits+0x32>
 800744e:	3008      	adds	r0, #8
 8007450:	0a1b      	lsrs	r3, r3, #8
 8007452:	071a      	lsls	r2, r3, #28
 8007454:	bf04      	itt	eq
 8007456:	091b      	lsreq	r3, r3, #4
 8007458:	3004      	addeq	r0, #4
 800745a:	079a      	lsls	r2, r3, #30
 800745c:	bf04      	itt	eq
 800745e:	089b      	lsreq	r3, r3, #2
 8007460:	3002      	addeq	r0, #2
 8007462:	07da      	lsls	r2, r3, #31
 8007464:	d403      	bmi.n	800746e <__lo0bits+0x4e>
 8007466:	085b      	lsrs	r3, r3, #1
 8007468:	f100 0001 	add.w	r0, r0, #1
 800746c:	d005      	beq.n	800747a <__lo0bits+0x5a>
 800746e:	600b      	str	r3, [r1, #0]
 8007470:	4770      	bx	lr
 8007472:	4610      	mov	r0, r2
 8007474:	e7e9      	b.n	800744a <__lo0bits+0x2a>
 8007476:	2000      	movs	r0, #0
 8007478:	4770      	bx	lr
 800747a:	2020      	movs	r0, #32
 800747c:	4770      	bx	lr
	...

08007480 <__i2b>:
 8007480:	b510      	push	{r4, lr}
 8007482:	460c      	mov	r4, r1
 8007484:	2101      	movs	r1, #1
 8007486:	f7ff ff03 	bl	8007290 <_Balloc>
 800748a:	4602      	mov	r2, r0
 800748c:	b928      	cbnz	r0, 800749a <__i2b+0x1a>
 800748e:	4b05      	ldr	r3, [pc, #20]	; (80074a4 <__i2b+0x24>)
 8007490:	4805      	ldr	r0, [pc, #20]	; (80074a8 <__i2b+0x28>)
 8007492:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007496:	f000 fce1 	bl	8007e5c <__assert_func>
 800749a:	2301      	movs	r3, #1
 800749c:	6144      	str	r4, [r0, #20]
 800749e:	6103      	str	r3, [r0, #16]
 80074a0:	bd10      	pop	{r4, pc}
 80074a2:	bf00      	nop
 80074a4:	08008b7b 	.word	0x08008b7b
 80074a8:	08008b8c 	.word	0x08008b8c

080074ac <__multiply>:
 80074ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b0:	4691      	mov	r9, r2
 80074b2:	690a      	ldr	r2, [r1, #16]
 80074b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	bfb8      	it	lt
 80074bc:	460b      	movlt	r3, r1
 80074be:	460c      	mov	r4, r1
 80074c0:	bfbc      	itt	lt
 80074c2:	464c      	movlt	r4, r9
 80074c4:	4699      	movlt	r9, r3
 80074c6:	6927      	ldr	r7, [r4, #16]
 80074c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80074cc:	68a3      	ldr	r3, [r4, #8]
 80074ce:	6861      	ldr	r1, [r4, #4]
 80074d0:	eb07 060a 	add.w	r6, r7, sl
 80074d4:	42b3      	cmp	r3, r6
 80074d6:	b085      	sub	sp, #20
 80074d8:	bfb8      	it	lt
 80074da:	3101      	addlt	r1, #1
 80074dc:	f7ff fed8 	bl	8007290 <_Balloc>
 80074e0:	b930      	cbnz	r0, 80074f0 <__multiply+0x44>
 80074e2:	4602      	mov	r2, r0
 80074e4:	4b44      	ldr	r3, [pc, #272]	; (80075f8 <__multiply+0x14c>)
 80074e6:	4845      	ldr	r0, [pc, #276]	; (80075fc <__multiply+0x150>)
 80074e8:	f240 115d 	movw	r1, #349	; 0x15d
 80074ec:	f000 fcb6 	bl	8007e5c <__assert_func>
 80074f0:	f100 0514 	add.w	r5, r0, #20
 80074f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074f8:	462b      	mov	r3, r5
 80074fa:	2200      	movs	r2, #0
 80074fc:	4543      	cmp	r3, r8
 80074fe:	d321      	bcc.n	8007544 <__multiply+0x98>
 8007500:	f104 0314 	add.w	r3, r4, #20
 8007504:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007508:	f109 0314 	add.w	r3, r9, #20
 800750c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007510:	9202      	str	r2, [sp, #8]
 8007512:	1b3a      	subs	r2, r7, r4
 8007514:	3a15      	subs	r2, #21
 8007516:	f022 0203 	bic.w	r2, r2, #3
 800751a:	3204      	adds	r2, #4
 800751c:	f104 0115 	add.w	r1, r4, #21
 8007520:	428f      	cmp	r7, r1
 8007522:	bf38      	it	cc
 8007524:	2204      	movcc	r2, #4
 8007526:	9201      	str	r2, [sp, #4]
 8007528:	9a02      	ldr	r2, [sp, #8]
 800752a:	9303      	str	r3, [sp, #12]
 800752c:	429a      	cmp	r2, r3
 800752e:	d80c      	bhi.n	800754a <__multiply+0x9e>
 8007530:	2e00      	cmp	r6, #0
 8007532:	dd03      	ble.n	800753c <__multiply+0x90>
 8007534:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007538:	2b00      	cmp	r3, #0
 800753a:	d05a      	beq.n	80075f2 <__multiply+0x146>
 800753c:	6106      	str	r6, [r0, #16]
 800753e:	b005      	add	sp, #20
 8007540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007544:	f843 2b04 	str.w	r2, [r3], #4
 8007548:	e7d8      	b.n	80074fc <__multiply+0x50>
 800754a:	f8b3 a000 	ldrh.w	sl, [r3]
 800754e:	f1ba 0f00 	cmp.w	sl, #0
 8007552:	d024      	beq.n	800759e <__multiply+0xf2>
 8007554:	f104 0e14 	add.w	lr, r4, #20
 8007558:	46a9      	mov	r9, r5
 800755a:	f04f 0c00 	mov.w	ip, #0
 800755e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007562:	f8d9 1000 	ldr.w	r1, [r9]
 8007566:	fa1f fb82 	uxth.w	fp, r2
 800756a:	b289      	uxth	r1, r1
 800756c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007570:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007574:	f8d9 2000 	ldr.w	r2, [r9]
 8007578:	4461      	add	r1, ip
 800757a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800757e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007582:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007586:	b289      	uxth	r1, r1
 8007588:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800758c:	4577      	cmp	r7, lr
 800758e:	f849 1b04 	str.w	r1, [r9], #4
 8007592:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007596:	d8e2      	bhi.n	800755e <__multiply+0xb2>
 8007598:	9a01      	ldr	r2, [sp, #4]
 800759a:	f845 c002 	str.w	ip, [r5, r2]
 800759e:	9a03      	ldr	r2, [sp, #12]
 80075a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80075a4:	3304      	adds	r3, #4
 80075a6:	f1b9 0f00 	cmp.w	r9, #0
 80075aa:	d020      	beq.n	80075ee <__multiply+0x142>
 80075ac:	6829      	ldr	r1, [r5, #0]
 80075ae:	f104 0c14 	add.w	ip, r4, #20
 80075b2:	46ae      	mov	lr, r5
 80075b4:	f04f 0a00 	mov.w	sl, #0
 80075b8:	f8bc b000 	ldrh.w	fp, [ip]
 80075bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80075c0:	fb09 220b 	mla	r2, r9, fp, r2
 80075c4:	4492      	add	sl, r2
 80075c6:	b289      	uxth	r1, r1
 80075c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80075cc:	f84e 1b04 	str.w	r1, [lr], #4
 80075d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80075d4:	f8be 1000 	ldrh.w	r1, [lr]
 80075d8:	0c12      	lsrs	r2, r2, #16
 80075da:	fb09 1102 	mla	r1, r9, r2, r1
 80075de:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80075e2:	4567      	cmp	r7, ip
 80075e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80075e8:	d8e6      	bhi.n	80075b8 <__multiply+0x10c>
 80075ea:	9a01      	ldr	r2, [sp, #4]
 80075ec:	50a9      	str	r1, [r5, r2]
 80075ee:	3504      	adds	r5, #4
 80075f0:	e79a      	b.n	8007528 <__multiply+0x7c>
 80075f2:	3e01      	subs	r6, #1
 80075f4:	e79c      	b.n	8007530 <__multiply+0x84>
 80075f6:	bf00      	nop
 80075f8:	08008b7b 	.word	0x08008b7b
 80075fc:	08008b8c 	.word	0x08008b8c

08007600 <__pow5mult>:
 8007600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007604:	4615      	mov	r5, r2
 8007606:	f012 0203 	ands.w	r2, r2, #3
 800760a:	4606      	mov	r6, r0
 800760c:	460f      	mov	r7, r1
 800760e:	d007      	beq.n	8007620 <__pow5mult+0x20>
 8007610:	4c25      	ldr	r4, [pc, #148]	; (80076a8 <__pow5mult+0xa8>)
 8007612:	3a01      	subs	r2, #1
 8007614:	2300      	movs	r3, #0
 8007616:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800761a:	f7ff fe9b 	bl	8007354 <__multadd>
 800761e:	4607      	mov	r7, r0
 8007620:	10ad      	asrs	r5, r5, #2
 8007622:	d03d      	beq.n	80076a0 <__pow5mult+0xa0>
 8007624:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007626:	b97c      	cbnz	r4, 8007648 <__pow5mult+0x48>
 8007628:	2010      	movs	r0, #16
 800762a:	f7ff fe1b 	bl	8007264 <malloc>
 800762e:	4602      	mov	r2, r0
 8007630:	6270      	str	r0, [r6, #36]	; 0x24
 8007632:	b928      	cbnz	r0, 8007640 <__pow5mult+0x40>
 8007634:	4b1d      	ldr	r3, [pc, #116]	; (80076ac <__pow5mult+0xac>)
 8007636:	481e      	ldr	r0, [pc, #120]	; (80076b0 <__pow5mult+0xb0>)
 8007638:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800763c:	f000 fc0e 	bl	8007e5c <__assert_func>
 8007640:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007644:	6004      	str	r4, [r0, #0]
 8007646:	60c4      	str	r4, [r0, #12]
 8007648:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800764c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007650:	b94c      	cbnz	r4, 8007666 <__pow5mult+0x66>
 8007652:	f240 2171 	movw	r1, #625	; 0x271
 8007656:	4630      	mov	r0, r6
 8007658:	f7ff ff12 	bl	8007480 <__i2b>
 800765c:	2300      	movs	r3, #0
 800765e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007662:	4604      	mov	r4, r0
 8007664:	6003      	str	r3, [r0, #0]
 8007666:	f04f 0900 	mov.w	r9, #0
 800766a:	07eb      	lsls	r3, r5, #31
 800766c:	d50a      	bpl.n	8007684 <__pow5mult+0x84>
 800766e:	4639      	mov	r1, r7
 8007670:	4622      	mov	r2, r4
 8007672:	4630      	mov	r0, r6
 8007674:	f7ff ff1a 	bl	80074ac <__multiply>
 8007678:	4639      	mov	r1, r7
 800767a:	4680      	mov	r8, r0
 800767c:	4630      	mov	r0, r6
 800767e:	f7ff fe47 	bl	8007310 <_Bfree>
 8007682:	4647      	mov	r7, r8
 8007684:	106d      	asrs	r5, r5, #1
 8007686:	d00b      	beq.n	80076a0 <__pow5mult+0xa0>
 8007688:	6820      	ldr	r0, [r4, #0]
 800768a:	b938      	cbnz	r0, 800769c <__pow5mult+0x9c>
 800768c:	4622      	mov	r2, r4
 800768e:	4621      	mov	r1, r4
 8007690:	4630      	mov	r0, r6
 8007692:	f7ff ff0b 	bl	80074ac <__multiply>
 8007696:	6020      	str	r0, [r4, #0]
 8007698:	f8c0 9000 	str.w	r9, [r0]
 800769c:	4604      	mov	r4, r0
 800769e:	e7e4      	b.n	800766a <__pow5mult+0x6a>
 80076a0:	4638      	mov	r0, r7
 80076a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076a6:	bf00      	nop
 80076a8:	08008cd8 	.word	0x08008cd8
 80076ac:	08008b09 	.word	0x08008b09
 80076b0:	08008b8c 	.word	0x08008b8c

080076b4 <__lshift>:
 80076b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076b8:	460c      	mov	r4, r1
 80076ba:	6849      	ldr	r1, [r1, #4]
 80076bc:	6923      	ldr	r3, [r4, #16]
 80076be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076c2:	68a3      	ldr	r3, [r4, #8]
 80076c4:	4607      	mov	r7, r0
 80076c6:	4691      	mov	r9, r2
 80076c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076cc:	f108 0601 	add.w	r6, r8, #1
 80076d0:	42b3      	cmp	r3, r6
 80076d2:	db0b      	blt.n	80076ec <__lshift+0x38>
 80076d4:	4638      	mov	r0, r7
 80076d6:	f7ff fddb 	bl	8007290 <_Balloc>
 80076da:	4605      	mov	r5, r0
 80076dc:	b948      	cbnz	r0, 80076f2 <__lshift+0x3e>
 80076de:	4602      	mov	r2, r0
 80076e0:	4b2a      	ldr	r3, [pc, #168]	; (800778c <__lshift+0xd8>)
 80076e2:	482b      	ldr	r0, [pc, #172]	; (8007790 <__lshift+0xdc>)
 80076e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80076e8:	f000 fbb8 	bl	8007e5c <__assert_func>
 80076ec:	3101      	adds	r1, #1
 80076ee:	005b      	lsls	r3, r3, #1
 80076f0:	e7ee      	b.n	80076d0 <__lshift+0x1c>
 80076f2:	2300      	movs	r3, #0
 80076f4:	f100 0114 	add.w	r1, r0, #20
 80076f8:	f100 0210 	add.w	r2, r0, #16
 80076fc:	4618      	mov	r0, r3
 80076fe:	4553      	cmp	r3, sl
 8007700:	db37      	blt.n	8007772 <__lshift+0xbe>
 8007702:	6920      	ldr	r0, [r4, #16]
 8007704:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007708:	f104 0314 	add.w	r3, r4, #20
 800770c:	f019 091f 	ands.w	r9, r9, #31
 8007710:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007714:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007718:	d02f      	beq.n	800777a <__lshift+0xc6>
 800771a:	f1c9 0e20 	rsb	lr, r9, #32
 800771e:	468a      	mov	sl, r1
 8007720:	f04f 0c00 	mov.w	ip, #0
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	fa02 f209 	lsl.w	r2, r2, r9
 800772a:	ea42 020c 	orr.w	r2, r2, ip
 800772e:	f84a 2b04 	str.w	r2, [sl], #4
 8007732:	f853 2b04 	ldr.w	r2, [r3], #4
 8007736:	4298      	cmp	r0, r3
 8007738:	fa22 fc0e 	lsr.w	ip, r2, lr
 800773c:	d8f2      	bhi.n	8007724 <__lshift+0x70>
 800773e:	1b03      	subs	r3, r0, r4
 8007740:	3b15      	subs	r3, #21
 8007742:	f023 0303 	bic.w	r3, r3, #3
 8007746:	3304      	adds	r3, #4
 8007748:	f104 0215 	add.w	r2, r4, #21
 800774c:	4290      	cmp	r0, r2
 800774e:	bf38      	it	cc
 8007750:	2304      	movcc	r3, #4
 8007752:	f841 c003 	str.w	ip, [r1, r3]
 8007756:	f1bc 0f00 	cmp.w	ip, #0
 800775a:	d001      	beq.n	8007760 <__lshift+0xac>
 800775c:	f108 0602 	add.w	r6, r8, #2
 8007760:	3e01      	subs	r6, #1
 8007762:	4638      	mov	r0, r7
 8007764:	612e      	str	r6, [r5, #16]
 8007766:	4621      	mov	r1, r4
 8007768:	f7ff fdd2 	bl	8007310 <_Bfree>
 800776c:	4628      	mov	r0, r5
 800776e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007772:	f842 0f04 	str.w	r0, [r2, #4]!
 8007776:	3301      	adds	r3, #1
 8007778:	e7c1      	b.n	80076fe <__lshift+0x4a>
 800777a:	3904      	subs	r1, #4
 800777c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007780:	f841 2f04 	str.w	r2, [r1, #4]!
 8007784:	4298      	cmp	r0, r3
 8007786:	d8f9      	bhi.n	800777c <__lshift+0xc8>
 8007788:	e7ea      	b.n	8007760 <__lshift+0xac>
 800778a:	bf00      	nop
 800778c:	08008b7b 	.word	0x08008b7b
 8007790:	08008b8c 	.word	0x08008b8c

08007794 <__mcmp>:
 8007794:	b530      	push	{r4, r5, lr}
 8007796:	6902      	ldr	r2, [r0, #16]
 8007798:	690c      	ldr	r4, [r1, #16]
 800779a:	1b12      	subs	r2, r2, r4
 800779c:	d10e      	bne.n	80077bc <__mcmp+0x28>
 800779e:	f100 0314 	add.w	r3, r0, #20
 80077a2:	3114      	adds	r1, #20
 80077a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80077a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80077ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80077b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80077b4:	42a5      	cmp	r5, r4
 80077b6:	d003      	beq.n	80077c0 <__mcmp+0x2c>
 80077b8:	d305      	bcc.n	80077c6 <__mcmp+0x32>
 80077ba:	2201      	movs	r2, #1
 80077bc:	4610      	mov	r0, r2
 80077be:	bd30      	pop	{r4, r5, pc}
 80077c0:	4283      	cmp	r3, r0
 80077c2:	d3f3      	bcc.n	80077ac <__mcmp+0x18>
 80077c4:	e7fa      	b.n	80077bc <__mcmp+0x28>
 80077c6:	f04f 32ff 	mov.w	r2, #4294967295
 80077ca:	e7f7      	b.n	80077bc <__mcmp+0x28>

080077cc <__mdiff>:
 80077cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d0:	460c      	mov	r4, r1
 80077d2:	4606      	mov	r6, r0
 80077d4:	4611      	mov	r1, r2
 80077d6:	4620      	mov	r0, r4
 80077d8:	4690      	mov	r8, r2
 80077da:	f7ff ffdb 	bl	8007794 <__mcmp>
 80077de:	1e05      	subs	r5, r0, #0
 80077e0:	d110      	bne.n	8007804 <__mdiff+0x38>
 80077e2:	4629      	mov	r1, r5
 80077e4:	4630      	mov	r0, r6
 80077e6:	f7ff fd53 	bl	8007290 <_Balloc>
 80077ea:	b930      	cbnz	r0, 80077fa <__mdiff+0x2e>
 80077ec:	4b3a      	ldr	r3, [pc, #232]	; (80078d8 <__mdiff+0x10c>)
 80077ee:	4602      	mov	r2, r0
 80077f0:	f240 2132 	movw	r1, #562	; 0x232
 80077f4:	4839      	ldr	r0, [pc, #228]	; (80078dc <__mdiff+0x110>)
 80077f6:	f000 fb31 	bl	8007e5c <__assert_func>
 80077fa:	2301      	movs	r3, #1
 80077fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007804:	bfa4      	itt	ge
 8007806:	4643      	movge	r3, r8
 8007808:	46a0      	movge	r8, r4
 800780a:	4630      	mov	r0, r6
 800780c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007810:	bfa6      	itte	ge
 8007812:	461c      	movge	r4, r3
 8007814:	2500      	movge	r5, #0
 8007816:	2501      	movlt	r5, #1
 8007818:	f7ff fd3a 	bl	8007290 <_Balloc>
 800781c:	b920      	cbnz	r0, 8007828 <__mdiff+0x5c>
 800781e:	4b2e      	ldr	r3, [pc, #184]	; (80078d8 <__mdiff+0x10c>)
 8007820:	4602      	mov	r2, r0
 8007822:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007826:	e7e5      	b.n	80077f4 <__mdiff+0x28>
 8007828:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800782c:	6926      	ldr	r6, [r4, #16]
 800782e:	60c5      	str	r5, [r0, #12]
 8007830:	f104 0914 	add.w	r9, r4, #20
 8007834:	f108 0514 	add.w	r5, r8, #20
 8007838:	f100 0e14 	add.w	lr, r0, #20
 800783c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007840:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007844:	f108 0210 	add.w	r2, r8, #16
 8007848:	46f2      	mov	sl, lr
 800784a:	2100      	movs	r1, #0
 800784c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007850:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007854:	fa1f f883 	uxth.w	r8, r3
 8007858:	fa11 f18b 	uxtah	r1, r1, fp
 800785c:	0c1b      	lsrs	r3, r3, #16
 800785e:	eba1 0808 	sub.w	r8, r1, r8
 8007862:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007866:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800786a:	fa1f f888 	uxth.w	r8, r8
 800786e:	1419      	asrs	r1, r3, #16
 8007870:	454e      	cmp	r6, r9
 8007872:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007876:	f84a 3b04 	str.w	r3, [sl], #4
 800787a:	d8e7      	bhi.n	800784c <__mdiff+0x80>
 800787c:	1b33      	subs	r3, r6, r4
 800787e:	3b15      	subs	r3, #21
 8007880:	f023 0303 	bic.w	r3, r3, #3
 8007884:	3304      	adds	r3, #4
 8007886:	3415      	adds	r4, #21
 8007888:	42a6      	cmp	r6, r4
 800788a:	bf38      	it	cc
 800788c:	2304      	movcc	r3, #4
 800788e:	441d      	add	r5, r3
 8007890:	4473      	add	r3, lr
 8007892:	469e      	mov	lr, r3
 8007894:	462e      	mov	r6, r5
 8007896:	4566      	cmp	r6, ip
 8007898:	d30e      	bcc.n	80078b8 <__mdiff+0xec>
 800789a:	f10c 0203 	add.w	r2, ip, #3
 800789e:	1b52      	subs	r2, r2, r5
 80078a0:	f022 0203 	bic.w	r2, r2, #3
 80078a4:	3d03      	subs	r5, #3
 80078a6:	45ac      	cmp	ip, r5
 80078a8:	bf38      	it	cc
 80078aa:	2200      	movcc	r2, #0
 80078ac:	441a      	add	r2, r3
 80078ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80078b2:	b17b      	cbz	r3, 80078d4 <__mdiff+0x108>
 80078b4:	6107      	str	r7, [r0, #16]
 80078b6:	e7a3      	b.n	8007800 <__mdiff+0x34>
 80078b8:	f856 8b04 	ldr.w	r8, [r6], #4
 80078bc:	fa11 f288 	uxtah	r2, r1, r8
 80078c0:	1414      	asrs	r4, r2, #16
 80078c2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80078c6:	b292      	uxth	r2, r2
 80078c8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80078cc:	f84e 2b04 	str.w	r2, [lr], #4
 80078d0:	1421      	asrs	r1, r4, #16
 80078d2:	e7e0      	b.n	8007896 <__mdiff+0xca>
 80078d4:	3f01      	subs	r7, #1
 80078d6:	e7ea      	b.n	80078ae <__mdiff+0xe2>
 80078d8:	08008b7b 	.word	0x08008b7b
 80078dc:	08008b8c 	.word	0x08008b8c

080078e0 <__d2b>:
 80078e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078e4:	4689      	mov	r9, r1
 80078e6:	2101      	movs	r1, #1
 80078e8:	ec57 6b10 	vmov	r6, r7, d0
 80078ec:	4690      	mov	r8, r2
 80078ee:	f7ff fccf 	bl	8007290 <_Balloc>
 80078f2:	4604      	mov	r4, r0
 80078f4:	b930      	cbnz	r0, 8007904 <__d2b+0x24>
 80078f6:	4602      	mov	r2, r0
 80078f8:	4b25      	ldr	r3, [pc, #148]	; (8007990 <__d2b+0xb0>)
 80078fa:	4826      	ldr	r0, [pc, #152]	; (8007994 <__d2b+0xb4>)
 80078fc:	f240 310a 	movw	r1, #778	; 0x30a
 8007900:	f000 faac 	bl	8007e5c <__assert_func>
 8007904:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007908:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800790c:	bb35      	cbnz	r5, 800795c <__d2b+0x7c>
 800790e:	2e00      	cmp	r6, #0
 8007910:	9301      	str	r3, [sp, #4]
 8007912:	d028      	beq.n	8007966 <__d2b+0x86>
 8007914:	4668      	mov	r0, sp
 8007916:	9600      	str	r6, [sp, #0]
 8007918:	f7ff fd82 	bl	8007420 <__lo0bits>
 800791c:	9900      	ldr	r1, [sp, #0]
 800791e:	b300      	cbz	r0, 8007962 <__d2b+0x82>
 8007920:	9a01      	ldr	r2, [sp, #4]
 8007922:	f1c0 0320 	rsb	r3, r0, #32
 8007926:	fa02 f303 	lsl.w	r3, r2, r3
 800792a:	430b      	orrs	r3, r1
 800792c:	40c2      	lsrs	r2, r0
 800792e:	6163      	str	r3, [r4, #20]
 8007930:	9201      	str	r2, [sp, #4]
 8007932:	9b01      	ldr	r3, [sp, #4]
 8007934:	61a3      	str	r3, [r4, #24]
 8007936:	2b00      	cmp	r3, #0
 8007938:	bf14      	ite	ne
 800793a:	2202      	movne	r2, #2
 800793c:	2201      	moveq	r2, #1
 800793e:	6122      	str	r2, [r4, #16]
 8007940:	b1d5      	cbz	r5, 8007978 <__d2b+0x98>
 8007942:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007946:	4405      	add	r5, r0
 8007948:	f8c9 5000 	str.w	r5, [r9]
 800794c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007950:	f8c8 0000 	str.w	r0, [r8]
 8007954:	4620      	mov	r0, r4
 8007956:	b003      	add	sp, #12
 8007958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800795c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007960:	e7d5      	b.n	800790e <__d2b+0x2e>
 8007962:	6161      	str	r1, [r4, #20]
 8007964:	e7e5      	b.n	8007932 <__d2b+0x52>
 8007966:	a801      	add	r0, sp, #4
 8007968:	f7ff fd5a 	bl	8007420 <__lo0bits>
 800796c:	9b01      	ldr	r3, [sp, #4]
 800796e:	6163      	str	r3, [r4, #20]
 8007970:	2201      	movs	r2, #1
 8007972:	6122      	str	r2, [r4, #16]
 8007974:	3020      	adds	r0, #32
 8007976:	e7e3      	b.n	8007940 <__d2b+0x60>
 8007978:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800797c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007980:	f8c9 0000 	str.w	r0, [r9]
 8007984:	6918      	ldr	r0, [r3, #16]
 8007986:	f7ff fd2b 	bl	80073e0 <__hi0bits>
 800798a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800798e:	e7df      	b.n	8007950 <__d2b+0x70>
 8007990:	08008b7b 	.word	0x08008b7b
 8007994:	08008b8c 	.word	0x08008b8c

08007998 <_calloc_r>:
 8007998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800799a:	fba1 2402 	umull	r2, r4, r1, r2
 800799e:	b94c      	cbnz	r4, 80079b4 <_calloc_r+0x1c>
 80079a0:	4611      	mov	r1, r2
 80079a2:	9201      	str	r2, [sp, #4]
 80079a4:	f000 f87a 	bl	8007a9c <_malloc_r>
 80079a8:	9a01      	ldr	r2, [sp, #4]
 80079aa:	4605      	mov	r5, r0
 80079ac:	b930      	cbnz	r0, 80079bc <_calloc_r+0x24>
 80079ae:	4628      	mov	r0, r5
 80079b0:	b003      	add	sp, #12
 80079b2:	bd30      	pop	{r4, r5, pc}
 80079b4:	220c      	movs	r2, #12
 80079b6:	6002      	str	r2, [r0, #0]
 80079b8:	2500      	movs	r5, #0
 80079ba:	e7f8      	b.n	80079ae <_calloc_r+0x16>
 80079bc:	4621      	mov	r1, r4
 80079be:	f7fe f92d 	bl	8005c1c <memset>
 80079c2:	e7f4      	b.n	80079ae <_calloc_r+0x16>

080079c4 <_free_r>:
 80079c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079c6:	2900      	cmp	r1, #0
 80079c8:	d044      	beq.n	8007a54 <_free_r+0x90>
 80079ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079ce:	9001      	str	r0, [sp, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f1a1 0404 	sub.w	r4, r1, #4
 80079d6:	bfb8      	it	lt
 80079d8:	18e4      	addlt	r4, r4, r3
 80079da:	f000 fa9b 	bl	8007f14 <__malloc_lock>
 80079de:	4a1e      	ldr	r2, [pc, #120]	; (8007a58 <_free_r+0x94>)
 80079e0:	9801      	ldr	r0, [sp, #4]
 80079e2:	6813      	ldr	r3, [r2, #0]
 80079e4:	b933      	cbnz	r3, 80079f4 <_free_r+0x30>
 80079e6:	6063      	str	r3, [r4, #4]
 80079e8:	6014      	str	r4, [r2, #0]
 80079ea:	b003      	add	sp, #12
 80079ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079f0:	f000 ba96 	b.w	8007f20 <__malloc_unlock>
 80079f4:	42a3      	cmp	r3, r4
 80079f6:	d908      	bls.n	8007a0a <_free_r+0x46>
 80079f8:	6825      	ldr	r5, [r4, #0]
 80079fa:	1961      	adds	r1, r4, r5
 80079fc:	428b      	cmp	r3, r1
 80079fe:	bf01      	itttt	eq
 8007a00:	6819      	ldreq	r1, [r3, #0]
 8007a02:	685b      	ldreq	r3, [r3, #4]
 8007a04:	1949      	addeq	r1, r1, r5
 8007a06:	6021      	streq	r1, [r4, #0]
 8007a08:	e7ed      	b.n	80079e6 <_free_r+0x22>
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	b10b      	cbz	r3, 8007a14 <_free_r+0x50>
 8007a10:	42a3      	cmp	r3, r4
 8007a12:	d9fa      	bls.n	8007a0a <_free_r+0x46>
 8007a14:	6811      	ldr	r1, [r2, #0]
 8007a16:	1855      	adds	r5, r2, r1
 8007a18:	42a5      	cmp	r5, r4
 8007a1a:	d10b      	bne.n	8007a34 <_free_r+0x70>
 8007a1c:	6824      	ldr	r4, [r4, #0]
 8007a1e:	4421      	add	r1, r4
 8007a20:	1854      	adds	r4, r2, r1
 8007a22:	42a3      	cmp	r3, r4
 8007a24:	6011      	str	r1, [r2, #0]
 8007a26:	d1e0      	bne.n	80079ea <_free_r+0x26>
 8007a28:	681c      	ldr	r4, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	6053      	str	r3, [r2, #4]
 8007a2e:	4421      	add	r1, r4
 8007a30:	6011      	str	r1, [r2, #0]
 8007a32:	e7da      	b.n	80079ea <_free_r+0x26>
 8007a34:	d902      	bls.n	8007a3c <_free_r+0x78>
 8007a36:	230c      	movs	r3, #12
 8007a38:	6003      	str	r3, [r0, #0]
 8007a3a:	e7d6      	b.n	80079ea <_free_r+0x26>
 8007a3c:	6825      	ldr	r5, [r4, #0]
 8007a3e:	1961      	adds	r1, r4, r5
 8007a40:	428b      	cmp	r3, r1
 8007a42:	bf04      	itt	eq
 8007a44:	6819      	ldreq	r1, [r3, #0]
 8007a46:	685b      	ldreq	r3, [r3, #4]
 8007a48:	6063      	str	r3, [r4, #4]
 8007a4a:	bf04      	itt	eq
 8007a4c:	1949      	addeq	r1, r1, r5
 8007a4e:	6021      	streq	r1, [r4, #0]
 8007a50:	6054      	str	r4, [r2, #4]
 8007a52:	e7ca      	b.n	80079ea <_free_r+0x26>
 8007a54:	b003      	add	sp, #12
 8007a56:	bd30      	pop	{r4, r5, pc}
 8007a58:	2000052c 	.word	0x2000052c

08007a5c <sbrk_aligned>:
 8007a5c:	b570      	push	{r4, r5, r6, lr}
 8007a5e:	4e0e      	ldr	r6, [pc, #56]	; (8007a98 <sbrk_aligned+0x3c>)
 8007a60:	460c      	mov	r4, r1
 8007a62:	6831      	ldr	r1, [r6, #0]
 8007a64:	4605      	mov	r5, r0
 8007a66:	b911      	cbnz	r1, 8007a6e <sbrk_aligned+0x12>
 8007a68:	f000 f9e8 	bl	8007e3c <_sbrk_r>
 8007a6c:	6030      	str	r0, [r6, #0]
 8007a6e:	4621      	mov	r1, r4
 8007a70:	4628      	mov	r0, r5
 8007a72:	f000 f9e3 	bl	8007e3c <_sbrk_r>
 8007a76:	1c43      	adds	r3, r0, #1
 8007a78:	d00a      	beq.n	8007a90 <sbrk_aligned+0x34>
 8007a7a:	1cc4      	adds	r4, r0, #3
 8007a7c:	f024 0403 	bic.w	r4, r4, #3
 8007a80:	42a0      	cmp	r0, r4
 8007a82:	d007      	beq.n	8007a94 <sbrk_aligned+0x38>
 8007a84:	1a21      	subs	r1, r4, r0
 8007a86:	4628      	mov	r0, r5
 8007a88:	f000 f9d8 	bl	8007e3c <_sbrk_r>
 8007a8c:	3001      	adds	r0, #1
 8007a8e:	d101      	bne.n	8007a94 <sbrk_aligned+0x38>
 8007a90:	f04f 34ff 	mov.w	r4, #4294967295
 8007a94:	4620      	mov	r0, r4
 8007a96:	bd70      	pop	{r4, r5, r6, pc}
 8007a98:	20000530 	.word	0x20000530

08007a9c <_malloc_r>:
 8007a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aa0:	1ccd      	adds	r5, r1, #3
 8007aa2:	f025 0503 	bic.w	r5, r5, #3
 8007aa6:	3508      	adds	r5, #8
 8007aa8:	2d0c      	cmp	r5, #12
 8007aaa:	bf38      	it	cc
 8007aac:	250c      	movcc	r5, #12
 8007aae:	2d00      	cmp	r5, #0
 8007ab0:	4607      	mov	r7, r0
 8007ab2:	db01      	blt.n	8007ab8 <_malloc_r+0x1c>
 8007ab4:	42a9      	cmp	r1, r5
 8007ab6:	d905      	bls.n	8007ac4 <_malloc_r+0x28>
 8007ab8:	230c      	movs	r3, #12
 8007aba:	603b      	str	r3, [r7, #0]
 8007abc:	2600      	movs	r6, #0
 8007abe:	4630      	mov	r0, r6
 8007ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ac4:	4e2e      	ldr	r6, [pc, #184]	; (8007b80 <_malloc_r+0xe4>)
 8007ac6:	f000 fa25 	bl	8007f14 <__malloc_lock>
 8007aca:	6833      	ldr	r3, [r6, #0]
 8007acc:	461c      	mov	r4, r3
 8007ace:	bb34      	cbnz	r4, 8007b1e <_malloc_r+0x82>
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	f7ff ffc2 	bl	8007a5c <sbrk_aligned>
 8007ad8:	1c43      	adds	r3, r0, #1
 8007ada:	4604      	mov	r4, r0
 8007adc:	d14d      	bne.n	8007b7a <_malloc_r+0xde>
 8007ade:	6834      	ldr	r4, [r6, #0]
 8007ae0:	4626      	mov	r6, r4
 8007ae2:	2e00      	cmp	r6, #0
 8007ae4:	d140      	bne.n	8007b68 <_malloc_r+0xcc>
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	4631      	mov	r1, r6
 8007aea:	4638      	mov	r0, r7
 8007aec:	eb04 0803 	add.w	r8, r4, r3
 8007af0:	f000 f9a4 	bl	8007e3c <_sbrk_r>
 8007af4:	4580      	cmp	r8, r0
 8007af6:	d13a      	bne.n	8007b6e <_malloc_r+0xd2>
 8007af8:	6821      	ldr	r1, [r4, #0]
 8007afa:	3503      	adds	r5, #3
 8007afc:	1a6d      	subs	r5, r5, r1
 8007afe:	f025 0503 	bic.w	r5, r5, #3
 8007b02:	3508      	adds	r5, #8
 8007b04:	2d0c      	cmp	r5, #12
 8007b06:	bf38      	it	cc
 8007b08:	250c      	movcc	r5, #12
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	4638      	mov	r0, r7
 8007b0e:	f7ff ffa5 	bl	8007a5c <sbrk_aligned>
 8007b12:	3001      	adds	r0, #1
 8007b14:	d02b      	beq.n	8007b6e <_malloc_r+0xd2>
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	442b      	add	r3, r5
 8007b1a:	6023      	str	r3, [r4, #0]
 8007b1c:	e00e      	b.n	8007b3c <_malloc_r+0xa0>
 8007b1e:	6822      	ldr	r2, [r4, #0]
 8007b20:	1b52      	subs	r2, r2, r5
 8007b22:	d41e      	bmi.n	8007b62 <_malloc_r+0xc6>
 8007b24:	2a0b      	cmp	r2, #11
 8007b26:	d916      	bls.n	8007b56 <_malloc_r+0xba>
 8007b28:	1961      	adds	r1, r4, r5
 8007b2a:	42a3      	cmp	r3, r4
 8007b2c:	6025      	str	r5, [r4, #0]
 8007b2e:	bf18      	it	ne
 8007b30:	6059      	strne	r1, [r3, #4]
 8007b32:	6863      	ldr	r3, [r4, #4]
 8007b34:	bf08      	it	eq
 8007b36:	6031      	streq	r1, [r6, #0]
 8007b38:	5162      	str	r2, [r4, r5]
 8007b3a:	604b      	str	r3, [r1, #4]
 8007b3c:	4638      	mov	r0, r7
 8007b3e:	f104 060b 	add.w	r6, r4, #11
 8007b42:	f000 f9ed 	bl	8007f20 <__malloc_unlock>
 8007b46:	f026 0607 	bic.w	r6, r6, #7
 8007b4a:	1d23      	adds	r3, r4, #4
 8007b4c:	1af2      	subs	r2, r6, r3
 8007b4e:	d0b6      	beq.n	8007abe <_malloc_r+0x22>
 8007b50:	1b9b      	subs	r3, r3, r6
 8007b52:	50a3      	str	r3, [r4, r2]
 8007b54:	e7b3      	b.n	8007abe <_malloc_r+0x22>
 8007b56:	6862      	ldr	r2, [r4, #4]
 8007b58:	42a3      	cmp	r3, r4
 8007b5a:	bf0c      	ite	eq
 8007b5c:	6032      	streq	r2, [r6, #0]
 8007b5e:	605a      	strne	r2, [r3, #4]
 8007b60:	e7ec      	b.n	8007b3c <_malloc_r+0xa0>
 8007b62:	4623      	mov	r3, r4
 8007b64:	6864      	ldr	r4, [r4, #4]
 8007b66:	e7b2      	b.n	8007ace <_malloc_r+0x32>
 8007b68:	4634      	mov	r4, r6
 8007b6a:	6876      	ldr	r6, [r6, #4]
 8007b6c:	e7b9      	b.n	8007ae2 <_malloc_r+0x46>
 8007b6e:	230c      	movs	r3, #12
 8007b70:	603b      	str	r3, [r7, #0]
 8007b72:	4638      	mov	r0, r7
 8007b74:	f000 f9d4 	bl	8007f20 <__malloc_unlock>
 8007b78:	e7a1      	b.n	8007abe <_malloc_r+0x22>
 8007b7a:	6025      	str	r5, [r4, #0]
 8007b7c:	e7de      	b.n	8007b3c <_malloc_r+0xa0>
 8007b7e:	bf00      	nop
 8007b80:	2000052c 	.word	0x2000052c

08007b84 <__ssputs_r>:
 8007b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b88:	688e      	ldr	r6, [r1, #8]
 8007b8a:	429e      	cmp	r6, r3
 8007b8c:	4682      	mov	sl, r0
 8007b8e:	460c      	mov	r4, r1
 8007b90:	4690      	mov	r8, r2
 8007b92:	461f      	mov	r7, r3
 8007b94:	d838      	bhi.n	8007c08 <__ssputs_r+0x84>
 8007b96:	898a      	ldrh	r2, [r1, #12]
 8007b98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b9c:	d032      	beq.n	8007c04 <__ssputs_r+0x80>
 8007b9e:	6825      	ldr	r5, [r4, #0]
 8007ba0:	6909      	ldr	r1, [r1, #16]
 8007ba2:	eba5 0901 	sub.w	r9, r5, r1
 8007ba6:	6965      	ldr	r5, [r4, #20]
 8007ba8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	444b      	add	r3, r9
 8007bb4:	106d      	asrs	r5, r5, #1
 8007bb6:	429d      	cmp	r5, r3
 8007bb8:	bf38      	it	cc
 8007bba:	461d      	movcc	r5, r3
 8007bbc:	0553      	lsls	r3, r2, #21
 8007bbe:	d531      	bpl.n	8007c24 <__ssputs_r+0xa0>
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	f7ff ff6b 	bl	8007a9c <_malloc_r>
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	b950      	cbnz	r0, 8007be0 <__ssputs_r+0x5c>
 8007bca:	230c      	movs	r3, #12
 8007bcc:	f8ca 3000 	str.w	r3, [sl]
 8007bd0:	89a3      	ldrh	r3, [r4, #12]
 8007bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bd6:	81a3      	strh	r3, [r4, #12]
 8007bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be0:	6921      	ldr	r1, [r4, #16]
 8007be2:	464a      	mov	r2, r9
 8007be4:	f7ff fb46 	bl	8007274 <memcpy>
 8007be8:	89a3      	ldrh	r3, [r4, #12]
 8007bea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf2:	81a3      	strh	r3, [r4, #12]
 8007bf4:	6126      	str	r6, [r4, #16]
 8007bf6:	6165      	str	r5, [r4, #20]
 8007bf8:	444e      	add	r6, r9
 8007bfa:	eba5 0509 	sub.w	r5, r5, r9
 8007bfe:	6026      	str	r6, [r4, #0]
 8007c00:	60a5      	str	r5, [r4, #8]
 8007c02:	463e      	mov	r6, r7
 8007c04:	42be      	cmp	r6, r7
 8007c06:	d900      	bls.n	8007c0a <__ssputs_r+0x86>
 8007c08:	463e      	mov	r6, r7
 8007c0a:	6820      	ldr	r0, [r4, #0]
 8007c0c:	4632      	mov	r2, r6
 8007c0e:	4641      	mov	r1, r8
 8007c10:	f000 f966 	bl	8007ee0 <memmove>
 8007c14:	68a3      	ldr	r3, [r4, #8]
 8007c16:	1b9b      	subs	r3, r3, r6
 8007c18:	60a3      	str	r3, [r4, #8]
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	4433      	add	r3, r6
 8007c1e:	6023      	str	r3, [r4, #0]
 8007c20:	2000      	movs	r0, #0
 8007c22:	e7db      	b.n	8007bdc <__ssputs_r+0x58>
 8007c24:	462a      	mov	r2, r5
 8007c26:	f000 f981 	bl	8007f2c <_realloc_r>
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d1e1      	bne.n	8007bf4 <__ssputs_r+0x70>
 8007c30:	6921      	ldr	r1, [r4, #16]
 8007c32:	4650      	mov	r0, sl
 8007c34:	f7ff fec6 	bl	80079c4 <_free_r>
 8007c38:	e7c7      	b.n	8007bca <__ssputs_r+0x46>
	...

08007c3c <_svfiprintf_r>:
 8007c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c40:	4698      	mov	r8, r3
 8007c42:	898b      	ldrh	r3, [r1, #12]
 8007c44:	061b      	lsls	r3, r3, #24
 8007c46:	b09d      	sub	sp, #116	; 0x74
 8007c48:	4607      	mov	r7, r0
 8007c4a:	460d      	mov	r5, r1
 8007c4c:	4614      	mov	r4, r2
 8007c4e:	d50e      	bpl.n	8007c6e <_svfiprintf_r+0x32>
 8007c50:	690b      	ldr	r3, [r1, #16]
 8007c52:	b963      	cbnz	r3, 8007c6e <_svfiprintf_r+0x32>
 8007c54:	2140      	movs	r1, #64	; 0x40
 8007c56:	f7ff ff21 	bl	8007a9c <_malloc_r>
 8007c5a:	6028      	str	r0, [r5, #0]
 8007c5c:	6128      	str	r0, [r5, #16]
 8007c5e:	b920      	cbnz	r0, 8007c6a <_svfiprintf_r+0x2e>
 8007c60:	230c      	movs	r3, #12
 8007c62:	603b      	str	r3, [r7, #0]
 8007c64:	f04f 30ff 	mov.w	r0, #4294967295
 8007c68:	e0d1      	b.n	8007e0e <_svfiprintf_r+0x1d2>
 8007c6a:	2340      	movs	r3, #64	; 0x40
 8007c6c:	616b      	str	r3, [r5, #20]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	9309      	str	r3, [sp, #36]	; 0x24
 8007c72:	2320      	movs	r3, #32
 8007c74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c78:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c7c:	2330      	movs	r3, #48	; 0x30
 8007c7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007e28 <_svfiprintf_r+0x1ec>
 8007c82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c86:	f04f 0901 	mov.w	r9, #1
 8007c8a:	4623      	mov	r3, r4
 8007c8c:	469a      	mov	sl, r3
 8007c8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c92:	b10a      	cbz	r2, 8007c98 <_svfiprintf_r+0x5c>
 8007c94:	2a25      	cmp	r2, #37	; 0x25
 8007c96:	d1f9      	bne.n	8007c8c <_svfiprintf_r+0x50>
 8007c98:	ebba 0b04 	subs.w	fp, sl, r4
 8007c9c:	d00b      	beq.n	8007cb6 <_svfiprintf_r+0x7a>
 8007c9e:	465b      	mov	r3, fp
 8007ca0:	4622      	mov	r2, r4
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	4638      	mov	r0, r7
 8007ca6:	f7ff ff6d 	bl	8007b84 <__ssputs_r>
 8007caa:	3001      	adds	r0, #1
 8007cac:	f000 80aa 	beq.w	8007e04 <_svfiprintf_r+0x1c8>
 8007cb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cb2:	445a      	add	r2, fp
 8007cb4:	9209      	str	r2, [sp, #36]	; 0x24
 8007cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f000 80a2 	beq.w	8007e04 <_svfiprintf_r+0x1c8>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cca:	f10a 0a01 	add.w	sl, sl, #1
 8007cce:	9304      	str	r3, [sp, #16]
 8007cd0:	9307      	str	r3, [sp, #28]
 8007cd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cd6:	931a      	str	r3, [sp, #104]	; 0x68
 8007cd8:	4654      	mov	r4, sl
 8007cda:	2205      	movs	r2, #5
 8007cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce0:	4851      	ldr	r0, [pc, #324]	; (8007e28 <_svfiprintf_r+0x1ec>)
 8007ce2:	f7f8 fa85 	bl	80001f0 <memchr>
 8007ce6:	9a04      	ldr	r2, [sp, #16]
 8007ce8:	b9d8      	cbnz	r0, 8007d22 <_svfiprintf_r+0xe6>
 8007cea:	06d0      	lsls	r0, r2, #27
 8007cec:	bf44      	itt	mi
 8007cee:	2320      	movmi	r3, #32
 8007cf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cf4:	0711      	lsls	r1, r2, #28
 8007cf6:	bf44      	itt	mi
 8007cf8:	232b      	movmi	r3, #43	; 0x2b
 8007cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cfe:	f89a 3000 	ldrb.w	r3, [sl]
 8007d02:	2b2a      	cmp	r3, #42	; 0x2a
 8007d04:	d015      	beq.n	8007d32 <_svfiprintf_r+0xf6>
 8007d06:	9a07      	ldr	r2, [sp, #28]
 8007d08:	4654      	mov	r4, sl
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	f04f 0c0a 	mov.w	ip, #10
 8007d10:	4621      	mov	r1, r4
 8007d12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d16:	3b30      	subs	r3, #48	; 0x30
 8007d18:	2b09      	cmp	r3, #9
 8007d1a:	d94e      	bls.n	8007dba <_svfiprintf_r+0x17e>
 8007d1c:	b1b0      	cbz	r0, 8007d4c <_svfiprintf_r+0x110>
 8007d1e:	9207      	str	r2, [sp, #28]
 8007d20:	e014      	b.n	8007d4c <_svfiprintf_r+0x110>
 8007d22:	eba0 0308 	sub.w	r3, r0, r8
 8007d26:	fa09 f303 	lsl.w	r3, r9, r3
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	9304      	str	r3, [sp, #16]
 8007d2e:	46a2      	mov	sl, r4
 8007d30:	e7d2      	b.n	8007cd8 <_svfiprintf_r+0x9c>
 8007d32:	9b03      	ldr	r3, [sp, #12]
 8007d34:	1d19      	adds	r1, r3, #4
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	9103      	str	r1, [sp, #12]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	bfbb      	ittet	lt
 8007d3e:	425b      	neglt	r3, r3
 8007d40:	f042 0202 	orrlt.w	r2, r2, #2
 8007d44:	9307      	strge	r3, [sp, #28]
 8007d46:	9307      	strlt	r3, [sp, #28]
 8007d48:	bfb8      	it	lt
 8007d4a:	9204      	strlt	r2, [sp, #16]
 8007d4c:	7823      	ldrb	r3, [r4, #0]
 8007d4e:	2b2e      	cmp	r3, #46	; 0x2e
 8007d50:	d10c      	bne.n	8007d6c <_svfiprintf_r+0x130>
 8007d52:	7863      	ldrb	r3, [r4, #1]
 8007d54:	2b2a      	cmp	r3, #42	; 0x2a
 8007d56:	d135      	bne.n	8007dc4 <_svfiprintf_r+0x188>
 8007d58:	9b03      	ldr	r3, [sp, #12]
 8007d5a:	1d1a      	adds	r2, r3, #4
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	9203      	str	r2, [sp, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	bfb8      	it	lt
 8007d64:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d68:	3402      	adds	r4, #2
 8007d6a:	9305      	str	r3, [sp, #20]
 8007d6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e38 <_svfiprintf_r+0x1fc>
 8007d70:	7821      	ldrb	r1, [r4, #0]
 8007d72:	2203      	movs	r2, #3
 8007d74:	4650      	mov	r0, sl
 8007d76:	f7f8 fa3b 	bl	80001f0 <memchr>
 8007d7a:	b140      	cbz	r0, 8007d8e <_svfiprintf_r+0x152>
 8007d7c:	2340      	movs	r3, #64	; 0x40
 8007d7e:	eba0 000a 	sub.w	r0, r0, sl
 8007d82:	fa03 f000 	lsl.w	r0, r3, r0
 8007d86:	9b04      	ldr	r3, [sp, #16]
 8007d88:	4303      	orrs	r3, r0
 8007d8a:	3401      	adds	r4, #1
 8007d8c:	9304      	str	r3, [sp, #16]
 8007d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d92:	4826      	ldr	r0, [pc, #152]	; (8007e2c <_svfiprintf_r+0x1f0>)
 8007d94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d98:	2206      	movs	r2, #6
 8007d9a:	f7f8 fa29 	bl	80001f0 <memchr>
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	d038      	beq.n	8007e14 <_svfiprintf_r+0x1d8>
 8007da2:	4b23      	ldr	r3, [pc, #140]	; (8007e30 <_svfiprintf_r+0x1f4>)
 8007da4:	bb1b      	cbnz	r3, 8007dee <_svfiprintf_r+0x1b2>
 8007da6:	9b03      	ldr	r3, [sp, #12]
 8007da8:	3307      	adds	r3, #7
 8007daa:	f023 0307 	bic.w	r3, r3, #7
 8007dae:	3308      	adds	r3, #8
 8007db0:	9303      	str	r3, [sp, #12]
 8007db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db4:	4433      	add	r3, r6
 8007db6:	9309      	str	r3, [sp, #36]	; 0x24
 8007db8:	e767      	b.n	8007c8a <_svfiprintf_r+0x4e>
 8007dba:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	2001      	movs	r0, #1
 8007dc2:	e7a5      	b.n	8007d10 <_svfiprintf_r+0xd4>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	3401      	adds	r4, #1
 8007dc8:	9305      	str	r3, [sp, #20]
 8007dca:	4619      	mov	r1, r3
 8007dcc:	f04f 0c0a 	mov.w	ip, #10
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dd6:	3a30      	subs	r2, #48	; 0x30
 8007dd8:	2a09      	cmp	r2, #9
 8007dda:	d903      	bls.n	8007de4 <_svfiprintf_r+0x1a8>
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d0c5      	beq.n	8007d6c <_svfiprintf_r+0x130>
 8007de0:	9105      	str	r1, [sp, #20]
 8007de2:	e7c3      	b.n	8007d6c <_svfiprintf_r+0x130>
 8007de4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007de8:	4604      	mov	r4, r0
 8007dea:	2301      	movs	r3, #1
 8007dec:	e7f0      	b.n	8007dd0 <_svfiprintf_r+0x194>
 8007dee:	ab03      	add	r3, sp, #12
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	462a      	mov	r2, r5
 8007df4:	4b0f      	ldr	r3, [pc, #60]	; (8007e34 <_svfiprintf_r+0x1f8>)
 8007df6:	a904      	add	r1, sp, #16
 8007df8:	4638      	mov	r0, r7
 8007dfa:	f7fd ffb7 	bl	8005d6c <_printf_float>
 8007dfe:	1c42      	adds	r2, r0, #1
 8007e00:	4606      	mov	r6, r0
 8007e02:	d1d6      	bne.n	8007db2 <_svfiprintf_r+0x176>
 8007e04:	89ab      	ldrh	r3, [r5, #12]
 8007e06:	065b      	lsls	r3, r3, #25
 8007e08:	f53f af2c 	bmi.w	8007c64 <_svfiprintf_r+0x28>
 8007e0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e0e:	b01d      	add	sp, #116	; 0x74
 8007e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e14:	ab03      	add	r3, sp, #12
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	462a      	mov	r2, r5
 8007e1a:	4b06      	ldr	r3, [pc, #24]	; (8007e34 <_svfiprintf_r+0x1f8>)
 8007e1c:	a904      	add	r1, sp, #16
 8007e1e:	4638      	mov	r0, r7
 8007e20:	f7fe fa48 	bl	80062b4 <_printf_i>
 8007e24:	e7eb      	b.n	8007dfe <_svfiprintf_r+0x1c2>
 8007e26:	bf00      	nop
 8007e28:	08008ce4 	.word	0x08008ce4
 8007e2c:	08008cee 	.word	0x08008cee
 8007e30:	08005d6d 	.word	0x08005d6d
 8007e34:	08007b85 	.word	0x08007b85
 8007e38:	08008cea 	.word	0x08008cea

08007e3c <_sbrk_r>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	4d06      	ldr	r5, [pc, #24]	; (8007e58 <_sbrk_r+0x1c>)
 8007e40:	2300      	movs	r3, #0
 8007e42:	4604      	mov	r4, r0
 8007e44:	4608      	mov	r0, r1
 8007e46:	602b      	str	r3, [r5, #0]
 8007e48:	f7fa fb56 	bl	80024f8 <_sbrk>
 8007e4c:	1c43      	adds	r3, r0, #1
 8007e4e:	d102      	bne.n	8007e56 <_sbrk_r+0x1a>
 8007e50:	682b      	ldr	r3, [r5, #0]
 8007e52:	b103      	cbz	r3, 8007e56 <_sbrk_r+0x1a>
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	bd38      	pop	{r3, r4, r5, pc}
 8007e58:	20000534 	.word	0x20000534

08007e5c <__assert_func>:
 8007e5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e5e:	4614      	mov	r4, r2
 8007e60:	461a      	mov	r2, r3
 8007e62:	4b09      	ldr	r3, [pc, #36]	; (8007e88 <__assert_func+0x2c>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4605      	mov	r5, r0
 8007e68:	68d8      	ldr	r0, [r3, #12]
 8007e6a:	b14c      	cbz	r4, 8007e80 <__assert_func+0x24>
 8007e6c:	4b07      	ldr	r3, [pc, #28]	; (8007e8c <__assert_func+0x30>)
 8007e6e:	9100      	str	r1, [sp, #0]
 8007e70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e74:	4906      	ldr	r1, [pc, #24]	; (8007e90 <__assert_func+0x34>)
 8007e76:	462b      	mov	r3, r5
 8007e78:	f000 f80e 	bl	8007e98 <fiprintf>
 8007e7c:	f000 faac 	bl	80083d8 <abort>
 8007e80:	4b04      	ldr	r3, [pc, #16]	; (8007e94 <__assert_func+0x38>)
 8007e82:	461c      	mov	r4, r3
 8007e84:	e7f3      	b.n	8007e6e <__assert_func+0x12>
 8007e86:	bf00      	nop
 8007e88:	20000064 	.word	0x20000064
 8007e8c:	08008cf5 	.word	0x08008cf5
 8007e90:	08008d02 	.word	0x08008d02
 8007e94:	08008d30 	.word	0x08008d30

08007e98 <fiprintf>:
 8007e98:	b40e      	push	{r1, r2, r3}
 8007e9a:	b503      	push	{r0, r1, lr}
 8007e9c:	4601      	mov	r1, r0
 8007e9e:	ab03      	add	r3, sp, #12
 8007ea0:	4805      	ldr	r0, [pc, #20]	; (8007eb8 <fiprintf+0x20>)
 8007ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ea6:	6800      	ldr	r0, [r0, #0]
 8007ea8:	9301      	str	r3, [sp, #4]
 8007eaa:	f000 f897 	bl	8007fdc <_vfiprintf_r>
 8007eae:	b002      	add	sp, #8
 8007eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007eb4:	b003      	add	sp, #12
 8007eb6:	4770      	bx	lr
 8007eb8:	20000064 	.word	0x20000064

08007ebc <__ascii_mbtowc>:
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	b901      	cbnz	r1, 8007ec2 <__ascii_mbtowc+0x6>
 8007ec0:	a901      	add	r1, sp, #4
 8007ec2:	b142      	cbz	r2, 8007ed6 <__ascii_mbtowc+0x1a>
 8007ec4:	b14b      	cbz	r3, 8007eda <__ascii_mbtowc+0x1e>
 8007ec6:	7813      	ldrb	r3, [r2, #0]
 8007ec8:	600b      	str	r3, [r1, #0]
 8007eca:	7812      	ldrb	r2, [r2, #0]
 8007ecc:	1e10      	subs	r0, r2, #0
 8007ece:	bf18      	it	ne
 8007ed0:	2001      	movne	r0, #1
 8007ed2:	b002      	add	sp, #8
 8007ed4:	4770      	bx	lr
 8007ed6:	4610      	mov	r0, r2
 8007ed8:	e7fb      	b.n	8007ed2 <__ascii_mbtowc+0x16>
 8007eda:	f06f 0001 	mvn.w	r0, #1
 8007ede:	e7f8      	b.n	8007ed2 <__ascii_mbtowc+0x16>

08007ee0 <memmove>:
 8007ee0:	4288      	cmp	r0, r1
 8007ee2:	b510      	push	{r4, lr}
 8007ee4:	eb01 0402 	add.w	r4, r1, r2
 8007ee8:	d902      	bls.n	8007ef0 <memmove+0x10>
 8007eea:	4284      	cmp	r4, r0
 8007eec:	4623      	mov	r3, r4
 8007eee:	d807      	bhi.n	8007f00 <memmove+0x20>
 8007ef0:	1e43      	subs	r3, r0, #1
 8007ef2:	42a1      	cmp	r1, r4
 8007ef4:	d008      	beq.n	8007f08 <memmove+0x28>
 8007ef6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007efa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007efe:	e7f8      	b.n	8007ef2 <memmove+0x12>
 8007f00:	4402      	add	r2, r0
 8007f02:	4601      	mov	r1, r0
 8007f04:	428a      	cmp	r2, r1
 8007f06:	d100      	bne.n	8007f0a <memmove+0x2a>
 8007f08:	bd10      	pop	{r4, pc}
 8007f0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f12:	e7f7      	b.n	8007f04 <memmove+0x24>

08007f14 <__malloc_lock>:
 8007f14:	4801      	ldr	r0, [pc, #4]	; (8007f1c <__malloc_lock+0x8>)
 8007f16:	f000 bc1f 	b.w	8008758 <__retarget_lock_acquire_recursive>
 8007f1a:	bf00      	nop
 8007f1c:	20000538 	.word	0x20000538

08007f20 <__malloc_unlock>:
 8007f20:	4801      	ldr	r0, [pc, #4]	; (8007f28 <__malloc_unlock+0x8>)
 8007f22:	f000 bc1a 	b.w	800875a <__retarget_lock_release_recursive>
 8007f26:	bf00      	nop
 8007f28:	20000538 	.word	0x20000538

08007f2c <_realloc_r>:
 8007f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f30:	4680      	mov	r8, r0
 8007f32:	4614      	mov	r4, r2
 8007f34:	460e      	mov	r6, r1
 8007f36:	b921      	cbnz	r1, 8007f42 <_realloc_r+0x16>
 8007f38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f3c:	4611      	mov	r1, r2
 8007f3e:	f7ff bdad 	b.w	8007a9c <_malloc_r>
 8007f42:	b92a      	cbnz	r2, 8007f50 <_realloc_r+0x24>
 8007f44:	f7ff fd3e 	bl	80079c4 <_free_r>
 8007f48:	4625      	mov	r5, r4
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f50:	f000 fc6a 	bl	8008828 <_malloc_usable_size_r>
 8007f54:	4284      	cmp	r4, r0
 8007f56:	4607      	mov	r7, r0
 8007f58:	d802      	bhi.n	8007f60 <_realloc_r+0x34>
 8007f5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f5e:	d812      	bhi.n	8007f86 <_realloc_r+0x5a>
 8007f60:	4621      	mov	r1, r4
 8007f62:	4640      	mov	r0, r8
 8007f64:	f7ff fd9a 	bl	8007a9c <_malloc_r>
 8007f68:	4605      	mov	r5, r0
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	d0ed      	beq.n	8007f4a <_realloc_r+0x1e>
 8007f6e:	42bc      	cmp	r4, r7
 8007f70:	4622      	mov	r2, r4
 8007f72:	4631      	mov	r1, r6
 8007f74:	bf28      	it	cs
 8007f76:	463a      	movcs	r2, r7
 8007f78:	f7ff f97c 	bl	8007274 <memcpy>
 8007f7c:	4631      	mov	r1, r6
 8007f7e:	4640      	mov	r0, r8
 8007f80:	f7ff fd20 	bl	80079c4 <_free_r>
 8007f84:	e7e1      	b.n	8007f4a <_realloc_r+0x1e>
 8007f86:	4635      	mov	r5, r6
 8007f88:	e7df      	b.n	8007f4a <_realloc_r+0x1e>

08007f8a <__sfputc_r>:
 8007f8a:	6893      	ldr	r3, [r2, #8]
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	b410      	push	{r4}
 8007f92:	6093      	str	r3, [r2, #8]
 8007f94:	da08      	bge.n	8007fa8 <__sfputc_r+0x1e>
 8007f96:	6994      	ldr	r4, [r2, #24]
 8007f98:	42a3      	cmp	r3, r4
 8007f9a:	db01      	blt.n	8007fa0 <__sfputc_r+0x16>
 8007f9c:	290a      	cmp	r1, #10
 8007f9e:	d103      	bne.n	8007fa8 <__sfputc_r+0x1e>
 8007fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fa4:	f000 b94a 	b.w	800823c <__swbuf_r>
 8007fa8:	6813      	ldr	r3, [r2, #0]
 8007faa:	1c58      	adds	r0, r3, #1
 8007fac:	6010      	str	r0, [r2, #0]
 8007fae:	7019      	strb	r1, [r3, #0]
 8007fb0:	4608      	mov	r0, r1
 8007fb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <__sfputs_r>:
 8007fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fba:	4606      	mov	r6, r0
 8007fbc:	460f      	mov	r7, r1
 8007fbe:	4614      	mov	r4, r2
 8007fc0:	18d5      	adds	r5, r2, r3
 8007fc2:	42ac      	cmp	r4, r5
 8007fc4:	d101      	bne.n	8007fca <__sfputs_r+0x12>
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	e007      	b.n	8007fda <__sfputs_r+0x22>
 8007fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fce:	463a      	mov	r2, r7
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	f7ff ffda 	bl	8007f8a <__sfputc_r>
 8007fd6:	1c43      	adds	r3, r0, #1
 8007fd8:	d1f3      	bne.n	8007fc2 <__sfputs_r+0xa>
 8007fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fdc <_vfiprintf_r>:
 8007fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe0:	460d      	mov	r5, r1
 8007fe2:	b09d      	sub	sp, #116	; 0x74
 8007fe4:	4614      	mov	r4, r2
 8007fe6:	4698      	mov	r8, r3
 8007fe8:	4606      	mov	r6, r0
 8007fea:	b118      	cbz	r0, 8007ff4 <_vfiprintf_r+0x18>
 8007fec:	6983      	ldr	r3, [r0, #24]
 8007fee:	b90b      	cbnz	r3, 8007ff4 <_vfiprintf_r+0x18>
 8007ff0:	f000 fb14 	bl	800861c <__sinit>
 8007ff4:	4b89      	ldr	r3, [pc, #548]	; (800821c <_vfiprintf_r+0x240>)
 8007ff6:	429d      	cmp	r5, r3
 8007ff8:	d11b      	bne.n	8008032 <_vfiprintf_r+0x56>
 8007ffa:	6875      	ldr	r5, [r6, #4]
 8007ffc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ffe:	07d9      	lsls	r1, r3, #31
 8008000:	d405      	bmi.n	800800e <_vfiprintf_r+0x32>
 8008002:	89ab      	ldrh	r3, [r5, #12]
 8008004:	059a      	lsls	r2, r3, #22
 8008006:	d402      	bmi.n	800800e <_vfiprintf_r+0x32>
 8008008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800800a:	f000 fba5 	bl	8008758 <__retarget_lock_acquire_recursive>
 800800e:	89ab      	ldrh	r3, [r5, #12]
 8008010:	071b      	lsls	r3, r3, #28
 8008012:	d501      	bpl.n	8008018 <_vfiprintf_r+0x3c>
 8008014:	692b      	ldr	r3, [r5, #16]
 8008016:	b9eb      	cbnz	r3, 8008054 <_vfiprintf_r+0x78>
 8008018:	4629      	mov	r1, r5
 800801a:	4630      	mov	r0, r6
 800801c:	f000 f96e 	bl	80082fc <__swsetup_r>
 8008020:	b1c0      	cbz	r0, 8008054 <_vfiprintf_r+0x78>
 8008022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008024:	07dc      	lsls	r4, r3, #31
 8008026:	d50e      	bpl.n	8008046 <_vfiprintf_r+0x6a>
 8008028:	f04f 30ff 	mov.w	r0, #4294967295
 800802c:	b01d      	add	sp, #116	; 0x74
 800802e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008032:	4b7b      	ldr	r3, [pc, #492]	; (8008220 <_vfiprintf_r+0x244>)
 8008034:	429d      	cmp	r5, r3
 8008036:	d101      	bne.n	800803c <_vfiprintf_r+0x60>
 8008038:	68b5      	ldr	r5, [r6, #8]
 800803a:	e7df      	b.n	8007ffc <_vfiprintf_r+0x20>
 800803c:	4b79      	ldr	r3, [pc, #484]	; (8008224 <_vfiprintf_r+0x248>)
 800803e:	429d      	cmp	r5, r3
 8008040:	bf08      	it	eq
 8008042:	68f5      	ldreq	r5, [r6, #12]
 8008044:	e7da      	b.n	8007ffc <_vfiprintf_r+0x20>
 8008046:	89ab      	ldrh	r3, [r5, #12]
 8008048:	0598      	lsls	r0, r3, #22
 800804a:	d4ed      	bmi.n	8008028 <_vfiprintf_r+0x4c>
 800804c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800804e:	f000 fb84 	bl	800875a <__retarget_lock_release_recursive>
 8008052:	e7e9      	b.n	8008028 <_vfiprintf_r+0x4c>
 8008054:	2300      	movs	r3, #0
 8008056:	9309      	str	r3, [sp, #36]	; 0x24
 8008058:	2320      	movs	r3, #32
 800805a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800805e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008062:	2330      	movs	r3, #48	; 0x30
 8008064:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008228 <_vfiprintf_r+0x24c>
 8008068:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800806c:	f04f 0901 	mov.w	r9, #1
 8008070:	4623      	mov	r3, r4
 8008072:	469a      	mov	sl, r3
 8008074:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008078:	b10a      	cbz	r2, 800807e <_vfiprintf_r+0xa2>
 800807a:	2a25      	cmp	r2, #37	; 0x25
 800807c:	d1f9      	bne.n	8008072 <_vfiprintf_r+0x96>
 800807e:	ebba 0b04 	subs.w	fp, sl, r4
 8008082:	d00b      	beq.n	800809c <_vfiprintf_r+0xc0>
 8008084:	465b      	mov	r3, fp
 8008086:	4622      	mov	r2, r4
 8008088:	4629      	mov	r1, r5
 800808a:	4630      	mov	r0, r6
 800808c:	f7ff ff94 	bl	8007fb8 <__sfputs_r>
 8008090:	3001      	adds	r0, #1
 8008092:	f000 80aa 	beq.w	80081ea <_vfiprintf_r+0x20e>
 8008096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008098:	445a      	add	r2, fp
 800809a:	9209      	str	r2, [sp, #36]	; 0x24
 800809c:	f89a 3000 	ldrb.w	r3, [sl]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 80a2 	beq.w	80081ea <_vfiprintf_r+0x20e>
 80080a6:	2300      	movs	r3, #0
 80080a8:	f04f 32ff 	mov.w	r2, #4294967295
 80080ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080b0:	f10a 0a01 	add.w	sl, sl, #1
 80080b4:	9304      	str	r3, [sp, #16]
 80080b6:	9307      	str	r3, [sp, #28]
 80080b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080bc:	931a      	str	r3, [sp, #104]	; 0x68
 80080be:	4654      	mov	r4, sl
 80080c0:	2205      	movs	r2, #5
 80080c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080c6:	4858      	ldr	r0, [pc, #352]	; (8008228 <_vfiprintf_r+0x24c>)
 80080c8:	f7f8 f892 	bl	80001f0 <memchr>
 80080cc:	9a04      	ldr	r2, [sp, #16]
 80080ce:	b9d8      	cbnz	r0, 8008108 <_vfiprintf_r+0x12c>
 80080d0:	06d1      	lsls	r1, r2, #27
 80080d2:	bf44      	itt	mi
 80080d4:	2320      	movmi	r3, #32
 80080d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080da:	0713      	lsls	r3, r2, #28
 80080dc:	bf44      	itt	mi
 80080de:	232b      	movmi	r3, #43	; 0x2b
 80080e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080e4:	f89a 3000 	ldrb.w	r3, [sl]
 80080e8:	2b2a      	cmp	r3, #42	; 0x2a
 80080ea:	d015      	beq.n	8008118 <_vfiprintf_r+0x13c>
 80080ec:	9a07      	ldr	r2, [sp, #28]
 80080ee:	4654      	mov	r4, sl
 80080f0:	2000      	movs	r0, #0
 80080f2:	f04f 0c0a 	mov.w	ip, #10
 80080f6:	4621      	mov	r1, r4
 80080f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080fc:	3b30      	subs	r3, #48	; 0x30
 80080fe:	2b09      	cmp	r3, #9
 8008100:	d94e      	bls.n	80081a0 <_vfiprintf_r+0x1c4>
 8008102:	b1b0      	cbz	r0, 8008132 <_vfiprintf_r+0x156>
 8008104:	9207      	str	r2, [sp, #28]
 8008106:	e014      	b.n	8008132 <_vfiprintf_r+0x156>
 8008108:	eba0 0308 	sub.w	r3, r0, r8
 800810c:	fa09 f303 	lsl.w	r3, r9, r3
 8008110:	4313      	orrs	r3, r2
 8008112:	9304      	str	r3, [sp, #16]
 8008114:	46a2      	mov	sl, r4
 8008116:	e7d2      	b.n	80080be <_vfiprintf_r+0xe2>
 8008118:	9b03      	ldr	r3, [sp, #12]
 800811a:	1d19      	adds	r1, r3, #4
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	9103      	str	r1, [sp, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	bfbb      	ittet	lt
 8008124:	425b      	neglt	r3, r3
 8008126:	f042 0202 	orrlt.w	r2, r2, #2
 800812a:	9307      	strge	r3, [sp, #28]
 800812c:	9307      	strlt	r3, [sp, #28]
 800812e:	bfb8      	it	lt
 8008130:	9204      	strlt	r2, [sp, #16]
 8008132:	7823      	ldrb	r3, [r4, #0]
 8008134:	2b2e      	cmp	r3, #46	; 0x2e
 8008136:	d10c      	bne.n	8008152 <_vfiprintf_r+0x176>
 8008138:	7863      	ldrb	r3, [r4, #1]
 800813a:	2b2a      	cmp	r3, #42	; 0x2a
 800813c:	d135      	bne.n	80081aa <_vfiprintf_r+0x1ce>
 800813e:	9b03      	ldr	r3, [sp, #12]
 8008140:	1d1a      	adds	r2, r3, #4
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	9203      	str	r2, [sp, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	bfb8      	it	lt
 800814a:	f04f 33ff 	movlt.w	r3, #4294967295
 800814e:	3402      	adds	r4, #2
 8008150:	9305      	str	r3, [sp, #20]
 8008152:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008238 <_vfiprintf_r+0x25c>
 8008156:	7821      	ldrb	r1, [r4, #0]
 8008158:	2203      	movs	r2, #3
 800815a:	4650      	mov	r0, sl
 800815c:	f7f8 f848 	bl	80001f0 <memchr>
 8008160:	b140      	cbz	r0, 8008174 <_vfiprintf_r+0x198>
 8008162:	2340      	movs	r3, #64	; 0x40
 8008164:	eba0 000a 	sub.w	r0, r0, sl
 8008168:	fa03 f000 	lsl.w	r0, r3, r0
 800816c:	9b04      	ldr	r3, [sp, #16]
 800816e:	4303      	orrs	r3, r0
 8008170:	3401      	adds	r4, #1
 8008172:	9304      	str	r3, [sp, #16]
 8008174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008178:	482c      	ldr	r0, [pc, #176]	; (800822c <_vfiprintf_r+0x250>)
 800817a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800817e:	2206      	movs	r2, #6
 8008180:	f7f8 f836 	bl	80001f0 <memchr>
 8008184:	2800      	cmp	r0, #0
 8008186:	d03f      	beq.n	8008208 <_vfiprintf_r+0x22c>
 8008188:	4b29      	ldr	r3, [pc, #164]	; (8008230 <_vfiprintf_r+0x254>)
 800818a:	bb1b      	cbnz	r3, 80081d4 <_vfiprintf_r+0x1f8>
 800818c:	9b03      	ldr	r3, [sp, #12]
 800818e:	3307      	adds	r3, #7
 8008190:	f023 0307 	bic.w	r3, r3, #7
 8008194:	3308      	adds	r3, #8
 8008196:	9303      	str	r3, [sp, #12]
 8008198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800819a:	443b      	add	r3, r7
 800819c:	9309      	str	r3, [sp, #36]	; 0x24
 800819e:	e767      	b.n	8008070 <_vfiprintf_r+0x94>
 80081a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80081a4:	460c      	mov	r4, r1
 80081a6:	2001      	movs	r0, #1
 80081a8:	e7a5      	b.n	80080f6 <_vfiprintf_r+0x11a>
 80081aa:	2300      	movs	r3, #0
 80081ac:	3401      	adds	r4, #1
 80081ae:	9305      	str	r3, [sp, #20]
 80081b0:	4619      	mov	r1, r3
 80081b2:	f04f 0c0a 	mov.w	ip, #10
 80081b6:	4620      	mov	r0, r4
 80081b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081bc:	3a30      	subs	r2, #48	; 0x30
 80081be:	2a09      	cmp	r2, #9
 80081c0:	d903      	bls.n	80081ca <_vfiprintf_r+0x1ee>
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d0c5      	beq.n	8008152 <_vfiprintf_r+0x176>
 80081c6:	9105      	str	r1, [sp, #20]
 80081c8:	e7c3      	b.n	8008152 <_vfiprintf_r+0x176>
 80081ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80081ce:	4604      	mov	r4, r0
 80081d0:	2301      	movs	r3, #1
 80081d2:	e7f0      	b.n	80081b6 <_vfiprintf_r+0x1da>
 80081d4:	ab03      	add	r3, sp, #12
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	462a      	mov	r2, r5
 80081da:	4b16      	ldr	r3, [pc, #88]	; (8008234 <_vfiprintf_r+0x258>)
 80081dc:	a904      	add	r1, sp, #16
 80081de:	4630      	mov	r0, r6
 80081e0:	f7fd fdc4 	bl	8005d6c <_printf_float>
 80081e4:	4607      	mov	r7, r0
 80081e6:	1c78      	adds	r0, r7, #1
 80081e8:	d1d6      	bne.n	8008198 <_vfiprintf_r+0x1bc>
 80081ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081ec:	07d9      	lsls	r1, r3, #31
 80081ee:	d405      	bmi.n	80081fc <_vfiprintf_r+0x220>
 80081f0:	89ab      	ldrh	r3, [r5, #12]
 80081f2:	059a      	lsls	r2, r3, #22
 80081f4:	d402      	bmi.n	80081fc <_vfiprintf_r+0x220>
 80081f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081f8:	f000 faaf 	bl	800875a <__retarget_lock_release_recursive>
 80081fc:	89ab      	ldrh	r3, [r5, #12]
 80081fe:	065b      	lsls	r3, r3, #25
 8008200:	f53f af12 	bmi.w	8008028 <_vfiprintf_r+0x4c>
 8008204:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008206:	e711      	b.n	800802c <_vfiprintf_r+0x50>
 8008208:	ab03      	add	r3, sp, #12
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	462a      	mov	r2, r5
 800820e:	4b09      	ldr	r3, [pc, #36]	; (8008234 <_vfiprintf_r+0x258>)
 8008210:	a904      	add	r1, sp, #16
 8008212:	4630      	mov	r0, r6
 8008214:	f7fe f84e 	bl	80062b4 <_printf_i>
 8008218:	e7e4      	b.n	80081e4 <_vfiprintf_r+0x208>
 800821a:	bf00      	nop
 800821c:	08008e5c 	.word	0x08008e5c
 8008220:	08008e7c 	.word	0x08008e7c
 8008224:	08008e3c 	.word	0x08008e3c
 8008228:	08008ce4 	.word	0x08008ce4
 800822c:	08008cee 	.word	0x08008cee
 8008230:	08005d6d 	.word	0x08005d6d
 8008234:	08007fb9 	.word	0x08007fb9
 8008238:	08008cea 	.word	0x08008cea

0800823c <__swbuf_r>:
 800823c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823e:	460e      	mov	r6, r1
 8008240:	4614      	mov	r4, r2
 8008242:	4605      	mov	r5, r0
 8008244:	b118      	cbz	r0, 800824e <__swbuf_r+0x12>
 8008246:	6983      	ldr	r3, [r0, #24]
 8008248:	b90b      	cbnz	r3, 800824e <__swbuf_r+0x12>
 800824a:	f000 f9e7 	bl	800861c <__sinit>
 800824e:	4b21      	ldr	r3, [pc, #132]	; (80082d4 <__swbuf_r+0x98>)
 8008250:	429c      	cmp	r4, r3
 8008252:	d12b      	bne.n	80082ac <__swbuf_r+0x70>
 8008254:	686c      	ldr	r4, [r5, #4]
 8008256:	69a3      	ldr	r3, [r4, #24]
 8008258:	60a3      	str	r3, [r4, #8]
 800825a:	89a3      	ldrh	r3, [r4, #12]
 800825c:	071a      	lsls	r2, r3, #28
 800825e:	d52f      	bpl.n	80082c0 <__swbuf_r+0x84>
 8008260:	6923      	ldr	r3, [r4, #16]
 8008262:	b36b      	cbz	r3, 80082c0 <__swbuf_r+0x84>
 8008264:	6923      	ldr	r3, [r4, #16]
 8008266:	6820      	ldr	r0, [r4, #0]
 8008268:	1ac0      	subs	r0, r0, r3
 800826a:	6963      	ldr	r3, [r4, #20]
 800826c:	b2f6      	uxtb	r6, r6
 800826e:	4283      	cmp	r3, r0
 8008270:	4637      	mov	r7, r6
 8008272:	dc04      	bgt.n	800827e <__swbuf_r+0x42>
 8008274:	4621      	mov	r1, r4
 8008276:	4628      	mov	r0, r5
 8008278:	f000 f93c 	bl	80084f4 <_fflush_r>
 800827c:	bb30      	cbnz	r0, 80082cc <__swbuf_r+0x90>
 800827e:	68a3      	ldr	r3, [r4, #8]
 8008280:	3b01      	subs	r3, #1
 8008282:	60a3      	str	r3, [r4, #8]
 8008284:	6823      	ldr	r3, [r4, #0]
 8008286:	1c5a      	adds	r2, r3, #1
 8008288:	6022      	str	r2, [r4, #0]
 800828a:	701e      	strb	r6, [r3, #0]
 800828c:	6963      	ldr	r3, [r4, #20]
 800828e:	3001      	adds	r0, #1
 8008290:	4283      	cmp	r3, r0
 8008292:	d004      	beq.n	800829e <__swbuf_r+0x62>
 8008294:	89a3      	ldrh	r3, [r4, #12]
 8008296:	07db      	lsls	r3, r3, #31
 8008298:	d506      	bpl.n	80082a8 <__swbuf_r+0x6c>
 800829a:	2e0a      	cmp	r6, #10
 800829c:	d104      	bne.n	80082a8 <__swbuf_r+0x6c>
 800829e:	4621      	mov	r1, r4
 80082a0:	4628      	mov	r0, r5
 80082a2:	f000 f927 	bl	80084f4 <_fflush_r>
 80082a6:	b988      	cbnz	r0, 80082cc <__swbuf_r+0x90>
 80082a8:	4638      	mov	r0, r7
 80082aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082ac:	4b0a      	ldr	r3, [pc, #40]	; (80082d8 <__swbuf_r+0x9c>)
 80082ae:	429c      	cmp	r4, r3
 80082b0:	d101      	bne.n	80082b6 <__swbuf_r+0x7a>
 80082b2:	68ac      	ldr	r4, [r5, #8]
 80082b4:	e7cf      	b.n	8008256 <__swbuf_r+0x1a>
 80082b6:	4b09      	ldr	r3, [pc, #36]	; (80082dc <__swbuf_r+0xa0>)
 80082b8:	429c      	cmp	r4, r3
 80082ba:	bf08      	it	eq
 80082bc:	68ec      	ldreq	r4, [r5, #12]
 80082be:	e7ca      	b.n	8008256 <__swbuf_r+0x1a>
 80082c0:	4621      	mov	r1, r4
 80082c2:	4628      	mov	r0, r5
 80082c4:	f000 f81a 	bl	80082fc <__swsetup_r>
 80082c8:	2800      	cmp	r0, #0
 80082ca:	d0cb      	beq.n	8008264 <__swbuf_r+0x28>
 80082cc:	f04f 37ff 	mov.w	r7, #4294967295
 80082d0:	e7ea      	b.n	80082a8 <__swbuf_r+0x6c>
 80082d2:	bf00      	nop
 80082d4:	08008e5c 	.word	0x08008e5c
 80082d8:	08008e7c 	.word	0x08008e7c
 80082dc:	08008e3c 	.word	0x08008e3c

080082e0 <__ascii_wctomb>:
 80082e0:	b149      	cbz	r1, 80082f6 <__ascii_wctomb+0x16>
 80082e2:	2aff      	cmp	r2, #255	; 0xff
 80082e4:	bf85      	ittet	hi
 80082e6:	238a      	movhi	r3, #138	; 0x8a
 80082e8:	6003      	strhi	r3, [r0, #0]
 80082ea:	700a      	strbls	r2, [r1, #0]
 80082ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80082f0:	bf98      	it	ls
 80082f2:	2001      	movls	r0, #1
 80082f4:	4770      	bx	lr
 80082f6:	4608      	mov	r0, r1
 80082f8:	4770      	bx	lr
	...

080082fc <__swsetup_r>:
 80082fc:	4b32      	ldr	r3, [pc, #200]	; (80083c8 <__swsetup_r+0xcc>)
 80082fe:	b570      	push	{r4, r5, r6, lr}
 8008300:	681d      	ldr	r5, [r3, #0]
 8008302:	4606      	mov	r6, r0
 8008304:	460c      	mov	r4, r1
 8008306:	b125      	cbz	r5, 8008312 <__swsetup_r+0x16>
 8008308:	69ab      	ldr	r3, [r5, #24]
 800830a:	b913      	cbnz	r3, 8008312 <__swsetup_r+0x16>
 800830c:	4628      	mov	r0, r5
 800830e:	f000 f985 	bl	800861c <__sinit>
 8008312:	4b2e      	ldr	r3, [pc, #184]	; (80083cc <__swsetup_r+0xd0>)
 8008314:	429c      	cmp	r4, r3
 8008316:	d10f      	bne.n	8008338 <__swsetup_r+0x3c>
 8008318:	686c      	ldr	r4, [r5, #4]
 800831a:	89a3      	ldrh	r3, [r4, #12]
 800831c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008320:	0719      	lsls	r1, r3, #28
 8008322:	d42c      	bmi.n	800837e <__swsetup_r+0x82>
 8008324:	06dd      	lsls	r5, r3, #27
 8008326:	d411      	bmi.n	800834c <__swsetup_r+0x50>
 8008328:	2309      	movs	r3, #9
 800832a:	6033      	str	r3, [r6, #0]
 800832c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008330:	81a3      	strh	r3, [r4, #12]
 8008332:	f04f 30ff 	mov.w	r0, #4294967295
 8008336:	e03e      	b.n	80083b6 <__swsetup_r+0xba>
 8008338:	4b25      	ldr	r3, [pc, #148]	; (80083d0 <__swsetup_r+0xd4>)
 800833a:	429c      	cmp	r4, r3
 800833c:	d101      	bne.n	8008342 <__swsetup_r+0x46>
 800833e:	68ac      	ldr	r4, [r5, #8]
 8008340:	e7eb      	b.n	800831a <__swsetup_r+0x1e>
 8008342:	4b24      	ldr	r3, [pc, #144]	; (80083d4 <__swsetup_r+0xd8>)
 8008344:	429c      	cmp	r4, r3
 8008346:	bf08      	it	eq
 8008348:	68ec      	ldreq	r4, [r5, #12]
 800834a:	e7e6      	b.n	800831a <__swsetup_r+0x1e>
 800834c:	0758      	lsls	r0, r3, #29
 800834e:	d512      	bpl.n	8008376 <__swsetup_r+0x7a>
 8008350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008352:	b141      	cbz	r1, 8008366 <__swsetup_r+0x6a>
 8008354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008358:	4299      	cmp	r1, r3
 800835a:	d002      	beq.n	8008362 <__swsetup_r+0x66>
 800835c:	4630      	mov	r0, r6
 800835e:	f7ff fb31 	bl	80079c4 <_free_r>
 8008362:	2300      	movs	r3, #0
 8008364:	6363      	str	r3, [r4, #52]	; 0x34
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800836c:	81a3      	strh	r3, [r4, #12]
 800836e:	2300      	movs	r3, #0
 8008370:	6063      	str	r3, [r4, #4]
 8008372:	6923      	ldr	r3, [r4, #16]
 8008374:	6023      	str	r3, [r4, #0]
 8008376:	89a3      	ldrh	r3, [r4, #12]
 8008378:	f043 0308 	orr.w	r3, r3, #8
 800837c:	81a3      	strh	r3, [r4, #12]
 800837e:	6923      	ldr	r3, [r4, #16]
 8008380:	b94b      	cbnz	r3, 8008396 <__swsetup_r+0x9a>
 8008382:	89a3      	ldrh	r3, [r4, #12]
 8008384:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800838c:	d003      	beq.n	8008396 <__swsetup_r+0x9a>
 800838e:	4621      	mov	r1, r4
 8008390:	4630      	mov	r0, r6
 8008392:	f000 fa09 	bl	80087a8 <__smakebuf_r>
 8008396:	89a0      	ldrh	r0, [r4, #12]
 8008398:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800839c:	f010 0301 	ands.w	r3, r0, #1
 80083a0:	d00a      	beq.n	80083b8 <__swsetup_r+0xbc>
 80083a2:	2300      	movs	r3, #0
 80083a4:	60a3      	str	r3, [r4, #8]
 80083a6:	6963      	ldr	r3, [r4, #20]
 80083a8:	425b      	negs	r3, r3
 80083aa:	61a3      	str	r3, [r4, #24]
 80083ac:	6923      	ldr	r3, [r4, #16]
 80083ae:	b943      	cbnz	r3, 80083c2 <__swsetup_r+0xc6>
 80083b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083b4:	d1ba      	bne.n	800832c <__swsetup_r+0x30>
 80083b6:	bd70      	pop	{r4, r5, r6, pc}
 80083b8:	0781      	lsls	r1, r0, #30
 80083ba:	bf58      	it	pl
 80083bc:	6963      	ldrpl	r3, [r4, #20]
 80083be:	60a3      	str	r3, [r4, #8]
 80083c0:	e7f4      	b.n	80083ac <__swsetup_r+0xb0>
 80083c2:	2000      	movs	r0, #0
 80083c4:	e7f7      	b.n	80083b6 <__swsetup_r+0xba>
 80083c6:	bf00      	nop
 80083c8:	20000064 	.word	0x20000064
 80083cc:	08008e5c 	.word	0x08008e5c
 80083d0:	08008e7c 	.word	0x08008e7c
 80083d4:	08008e3c 	.word	0x08008e3c

080083d8 <abort>:
 80083d8:	b508      	push	{r3, lr}
 80083da:	2006      	movs	r0, #6
 80083dc:	f000 fa54 	bl	8008888 <raise>
 80083e0:	2001      	movs	r0, #1
 80083e2:	f7fa f811 	bl	8002408 <_exit>
	...

080083e8 <__sflush_r>:
 80083e8:	898a      	ldrh	r2, [r1, #12]
 80083ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ee:	4605      	mov	r5, r0
 80083f0:	0710      	lsls	r0, r2, #28
 80083f2:	460c      	mov	r4, r1
 80083f4:	d458      	bmi.n	80084a8 <__sflush_r+0xc0>
 80083f6:	684b      	ldr	r3, [r1, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	dc05      	bgt.n	8008408 <__sflush_r+0x20>
 80083fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083fe:	2b00      	cmp	r3, #0
 8008400:	dc02      	bgt.n	8008408 <__sflush_r+0x20>
 8008402:	2000      	movs	r0, #0
 8008404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008408:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800840a:	2e00      	cmp	r6, #0
 800840c:	d0f9      	beq.n	8008402 <__sflush_r+0x1a>
 800840e:	2300      	movs	r3, #0
 8008410:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008414:	682f      	ldr	r7, [r5, #0]
 8008416:	602b      	str	r3, [r5, #0]
 8008418:	d032      	beq.n	8008480 <__sflush_r+0x98>
 800841a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800841c:	89a3      	ldrh	r3, [r4, #12]
 800841e:	075a      	lsls	r2, r3, #29
 8008420:	d505      	bpl.n	800842e <__sflush_r+0x46>
 8008422:	6863      	ldr	r3, [r4, #4]
 8008424:	1ac0      	subs	r0, r0, r3
 8008426:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008428:	b10b      	cbz	r3, 800842e <__sflush_r+0x46>
 800842a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800842c:	1ac0      	subs	r0, r0, r3
 800842e:	2300      	movs	r3, #0
 8008430:	4602      	mov	r2, r0
 8008432:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008434:	6a21      	ldr	r1, [r4, #32]
 8008436:	4628      	mov	r0, r5
 8008438:	47b0      	blx	r6
 800843a:	1c43      	adds	r3, r0, #1
 800843c:	89a3      	ldrh	r3, [r4, #12]
 800843e:	d106      	bne.n	800844e <__sflush_r+0x66>
 8008440:	6829      	ldr	r1, [r5, #0]
 8008442:	291d      	cmp	r1, #29
 8008444:	d82c      	bhi.n	80084a0 <__sflush_r+0xb8>
 8008446:	4a2a      	ldr	r2, [pc, #168]	; (80084f0 <__sflush_r+0x108>)
 8008448:	40ca      	lsrs	r2, r1
 800844a:	07d6      	lsls	r6, r2, #31
 800844c:	d528      	bpl.n	80084a0 <__sflush_r+0xb8>
 800844e:	2200      	movs	r2, #0
 8008450:	6062      	str	r2, [r4, #4]
 8008452:	04d9      	lsls	r1, r3, #19
 8008454:	6922      	ldr	r2, [r4, #16]
 8008456:	6022      	str	r2, [r4, #0]
 8008458:	d504      	bpl.n	8008464 <__sflush_r+0x7c>
 800845a:	1c42      	adds	r2, r0, #1
 800845c:	d101      	bne.n	8008462 <__sflush_r+0x7a>
 800845e:	682b      	ldr	r3, [r5, #0]
 8008460:	b903      	cbnz	r3, 8008464 <__sflush_r+0x7c>
 8008462:	6560      	str	r0, [r4, #84]	; 0x54
 8008464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008466:	602f      	str	r7, [r5, #0]
 8008468:	2900      	cmp	r1, #0
 800846a:	d0ca      	beq.n	8008402 <__sflush_r+0x1a>
 800846c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008470:	4299      	cmp	r1, r3
 8008472:	d002      	beq.n	800847a <__sflush_r+0x92>
 8008474:	4628      	mov	r0, r5
 8008476:	f7ff faa5 	bl	80079c4 <_free_r>
 800847a:	2000      	movs	r0, #0
 800847c:	6360      	str	r0, [r4, #52]	; 0x34
 800847e:	e7c1      	b.n	8008404 <__sflush_r+0x1c>
 8008480:	6a21      	ldr	r1, [r4, #32]
 8008482:	2301      	movs	r3, #1
 8008484:	4628      	mov	r0, r5
 8008486:	47b0      	blx	r6
 8008488:	1c41      	adds	r1, r0, #1
 800848a:	d1c7      	bne.n	800841c <__sflush_r+0x34>
 800848c:	682b      	ldr	r3, [r5, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d0c4      	beq.n	800841c <__sflush_r+0x34>
 8008492:	2b1d      	cmp	r3, #29
 8008494:	d001      	beq.n	800849a <__sflush_r+0xb2>
 8008496:	2b16      	cmp	r3, #22
 8008498:	d101      	bne.n	800849e <__sflush_r+0xb6>
 800849a:	602f      	str	r7, [r5, #0]
 800849c:	e7b1      	b.n	8008402 <__sflush_r+0x1a>
 800849e:	89a3      	ldrh	r3, [r4, #12]
 80084a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084a4:	81a3      	strh	r3, [r4, #12]
 80084a6:	e7ad      	b.n	8008404 <__sflush_r+0x1c>
 80084a8:	690f      	ldr	r7, [r1, #16]
 80084aa:	2f00      	cmp	r7, #0
 80084ac:	d0a9      	beq.n	8008402 <__sflush_r+0x1a>
 80084ae:	0793      	lsls	r3, r2, #30
 80084b0:	680e      	ldr	r6, [r1, #0]
 80084b2:	bf08      	it	eq
 80084b4:	694b      	ldreq	r3, [r1, #20]
 80084b6:	600f      	str	r7, [r1, #0]
 80084b8:	bf18      	it	ne
 80084ba:	2300      	movne	r3, #0
 80084bc:	eba6 0807 	sub.w	r8, r6, r7
 80084c0:	608b      	str	r3, [r1, #8]
 80084c2:	f1b8 0f00 	cmp.w	r8, #0
 80084c6:	dd9c      	ble.n	8008402 <__sflush_r+0x1a>
 80084c8:	6a21      	ldr	r1, [r4, #32]
 80084ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084cc:	4643      	mov	r3, r8
 80084ce:	463a      	mov	r2, r7
 80084d0:	4628      	mov	r0, r5
 80084d2:	47b0      	blx	r6
 80084d4:	2800      	cmp	r0, #0
 80084d6:	dc06      	bgt.n	80084e6 <__sflush_r+0xfe>
 80084d8:	89a3      	ldrh	r3, [r4, #12]
 80084da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084de:	81a3      	strh	r3, [r4, #12]
 80084e0:	f04f 30ff 	mov.w	r0, #4294967295
 80084e4:	e78e      	b.n	8008404 <__sflush_r+0x1c>
 80084e6:	4407      	add	r7, r0
 80084e8:	eba8 0800 	sub.w	r8, r8, r0
 80084ec:	e7e9      	b.n	80084c2 <__sflush_r+0xda>
 80084ee:	bf00      	nop
 80084f0:	20400001 	.word	0x20400001

080084f4 <_fflush_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	690b      	ldr	r3, [r1, #16]
 80084f8:	4605      	mov	r5, r0
 80084fa:	460c      	mov	r4, r1
 80084fc:	b913      	cbnz	r3, 8008504 <_fflush_r+0x10>
 80084fe:	2500      	movs	r5, #0
 8008500:	4628      	mov	r0, r5
 8008502:	bd38      	pop	{r3, r4, r5, pc}
 8008504:	b118      	cbz	r0, 800850e <_fflush_r+0x1a>
 8008506:	6983      	ldr	r3, [r0, #24]
 8008508:	b90b      	cbnz	r3, 800850e <_fflush_r+0x1a>
 800850a:	f000 f887 	bl	800861c <__sinit>
 800850e:	4b14      	ldr	r3, [pc, #80]	; (8008560 <_fflush_r+0x6c>)
 8008510:	429c      	cmp	r4, r3
 8008512:	d11b      	bne.n	800854c <_fflush_r+0x58>
 8008514:	686c      	ldr	r4, [r5, #4]
 8008516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d0ef      	beq.n	80084fe <_fflush_r+0xa>
 800851e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008520:	07d0      	lsls	r0, r2, #31
 8008522:	d404      	bmi.n	800852e <_fflush_r+0x3a>
 8008524:	0599      	lsls	r1, r3, #22
 8008526:	d402      	bmi.n	800852e <_fflush_r+0x3a>
 8008528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800852a:	f000 f915 	bl	8008758 <__retarget_lock_acquire_recursive>
 800852e:	4628      	mov	r0, r5
 8008530:	4621      	mov	r1, r4
 8008532:	f7ff ff59 	bl	80083e8 <__sflush_r>
 8008536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008538:	07da      	lsls	r2, r3, #31
 800853a:	4605      	mov	r5, r0
 800853c:	d4e0      	bmi.n	8008500 <_fflush_r+0xc>
 800853e:	89a3      	ldrh	r3, [r4, #12]
 8008540:	059b      	lsls	r3, r3, #22
 8008542:	d4dd      	bmi.n	8008500 <_fflush_r+0xc>
 8008544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008546:	f000 f908 	bl	800875a <__retarget_lock_release_recursive>
 800854a:	e7d9      	b.n	8008500 <_fflush_r+0xc>
 800854c:	4b05      	ldr	r3, [pc, #20]	; (8008564 <_fflush_r+0x70>)
 800854e:	429c      	cmp	r4, r3
 8008550:	d101      	bne.n	8008556 <_fflush_r+0x62>
 8008552:	68ac      	ldr	r4, [r5, #8]
 8008554:	e7df      	b.n	8008516 <_fflush_r+0x22>
 8008556:	4b04      	ldr	r3, [pc, #16]	; (8008568 <_fflush_r+0x74>)
 8008558:	429c      	cmp	r4, r3
 800855a:	bf08      	it	eq
 800855c:	68ec      	ldreq	r4, [r5, #12]
 800855e:	e7da      	b.n	8008516 <_fflush_r+0x22>
 8008560:	08008e5c 	.word	0x08008e5c
 8008564:	08008e7c 	.word	0x08008e7c
 8008568:	08008e3c 	.word	0x08008e3c

0800856c <std>:
 800856c:	2300      	movs	r3, #0
 800856e:	b510      	push	{r4, lr}
 8008570:	4604      	mov	r4, r0
 8008572:	e9c0 3300 	strd	r3, r3, [r0]
 8008576:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800857a:	6083      	str	r3, [r0, #8]
 800857c:	8181      	strh	r1, [r0, #12]
 800857e:	6643      	str	r3, [r0, #100]	; 0x64
 8008580:	81c2      	strh	r2, [r0, #14]
 8008582:	6183      	str	r3, [r0, #24]
 8008584:	4619      	mov	r1, r3
 8008586:	2208      	movs	r2, #8
 8008588:	305c      	adds	r0, #92	; 0x5c
 800858a:	f7fd fb47 	bl	8005c1c <memset>
 800858e:	4b05      	ldr	r3, [pc, #20]	; (80085a4 <std+0x38>)
 8008590:	6263      	str	r3, [r4, #36]	; 0x24
 8008592:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <std+0x3c>)
 8008594:	62a3      	str	r3, [r4, #40]	; 0x28
 8008596:	4b05      	ldr	r3, [pc, #20]	; (80085ac <std+0x40>)
 8008598:	62e3      	str	r3, [r4, #44]	; 0x2c
 800859a:	4b05      	ldr	r3, [pc, #20]	; (80085b0 <std+0x44>)
 800859c:	6224      	str	r4, [r4, #32]
 800859e:	6323      	str	r3, [r4, #48]	; 0x30
 80085a0:	bd10      	pop	{r4, pc}
 80085a2:	bf00      	nop
 80085a4:	080088c1 	.word	0x080088c1
 80085a8:	080088e3 	.word	0x080088e3
 80085ac:	0800891b 	.word	0x0800891b
 80085b0:	0800893f 	.word	0x0800893f

080085b4 <_cleanup_r>:
 80085b4:	4901      	ldr	r1, [pc, #4]	; (80085bc <_cleanup_r+0x8>)
 80085b6:	f000 b8af 	b.w	8008718 <_fwalk_reent>
 80085ba:	bf00      	nop
 80085bc:	080084f5 	.word	0x080084f5

080085c0 <__sfmoreglue>:
 80085c0:	b570      	push	{r4, r5, r6, lr}
 80085c2:	2268      	movs	r2, #104	; 0x68
 80085c4:	1e4d      	subs	r5, r1, #1
 80085c6:	4355      	muls	r5, r2
 80085c8:	460e      	mov	r6, r1
 80085ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085ce:	f7ff fa65 	bl	8007a9c <_malloc_r>
 80085d2:	4604      	mov	r4, r0
 80085d4:	b140      	cbz	r0, 80085e8 <__sfmoreglue+0x28>
 80085d6:	2100      	movs	r1, #0
 80085d8:	e9c0 1600 	strd	r1, r6, [r0]
 80085dc:	300c      	adds	r0, #12
 80085de:	60a0      	str	r0, [r4, #8]
 80085e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085e4:	f7fd fb1a 	bl	8005c1c <memset>
 80085e8:	4620      	mov	r0, r4
 80085ea:	bd70      	pop	{r4, r5, r6, pc}

080085ec <__sfp_lock_acquire>:
 80085ec:	4801      	ldr	r0, [pc, #4]	; (80085f4 <__sfp_lock_acquire+0x8>)
 80085ee:	f000 b8b3 	b.w	8008758 <__retarget_lock_acquire_recursive>
 80085f2:	bf00      	nop
 80085f4:	20000539 	.word	0x20000539

080085f8 <__sfp_lock_release>:
 80085f8:	4801      	ldr	r0, [pc, #4]	; (8008600 <__sfp_lock_release+0x8>)
 80085fa:	f000 b8ae 	b.w	800875a <__retarget_lock_release_recursive>
 80085fe:	bf00      	nop
 8008600:	20000539 	.word	0x20000539

08008604 <__sinit_lock_acquire>:
 8008604:	4801      	ldr	r0, [pc, #4]	; (800860c <__sinit_lock_acquire+0x8>)
 8008606:	f000 b8a7 	b.w	8008758 <__retarget_lock_acquire_recursive>
 800860a:	bf00      	nop
 800860c:	2000053a 	.word	0x2000053a

08008610 <__sinit_lock_release>:
 8008610:	4801      	ldr	r0, [pc, #4]	; (8008618 <__sinit_lock_release+0x8>)
 8008612:	f000 b8a2 	b.w	800875a <__retarget_lock_release_recursive>
 8008616:	bf00      	nop
 8008618:	2000053a 	.word	0x2000053a

0800861c <__sinit>:
 800861c:	b510      	push	{r4, lr}
 800861e:	4604      	mov	r4, r0
 8008620:	f7ff fff0 	bl	8008604 <__sinit_lock_acquire>
 8008624:	69a3      	ldr	r3, [r4, #24]
 8008626:	b11b      	cbz	r3, 8008630 <__sinit+0x14>
 8008628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800862c:	f7ff bff0 	b.w	8008610 <__sinit_lock_release>
 8008630:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008634:	6523      	str	r3, [r4, #80]	; 0x50
 8008636:	4b13      	ldr	r3, [pc, #76]	; (8008684 <__sinit+0x68>)
 8008638:	4a13      	ldr	r2, [pc, #76]	; (8008688 <__sinit+0x6c>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	62a2      	str	r2, [r4, #40]	; 0x28
 800863e:	42a3      	cmp	r3, r4
 8008640:	bf04      	itt	eq
 8008642:	2301      	moveq	r3, #1
 8008644:	61a3      	streq	r3, [r4, #24]
 8008646:	4620      	mov	r0, r4
 8008648:	f000 f820 	bl	800868c <__sfp>
 800864c:	6060      	str	r0, [r4, #4]
 800864e:	4620      	mov	r0, r4
 8008650:	f000 f81c 	bl	800868c <__sfp>
 8008654:	60a0      	str	r0, [r4, #8]
 8008656:	4620      	mov	r0, r4
 8008658:	f000 f818 	bl	800868c <__sfp>
 800865c:	2200      	movs	r2, #0
 800865e:	60e0      	str	r0, [r4, #12]
 8008660:	2104      	movs	r1, #4
 8008662:	6860      	ldr	r0, [r4, #4]
 8008664:	f7ff ff82 	bl	800856c <std>
 8008668:	68a0      	ldr	r0, [r4, #8]
 800866a:	2201      	movs	r2, #1
 800866c:	2109      	movs	r1, #9
 800866e:	f7ff ff7d 	bl	800856c <std>
 8008672:	68e0      	ldr	r0, [r4, #12]
 8008674:	2202      	movs	r2, #2
 8008676:	2112      	movs	r1, #18
 8008678:	f7ff ff78 	bl	800856c <std>
 800867c:	2301      	movs	r3, #1
 800867e:	61a3      	str	r3, [r4, #24]
 8008680:	e7d2      	b.n	8008628 <__sinit+0xc>
 8008682:	bf00      	nop
 8008684:	08008ac4 	.word	0x08008ac4
 8008688:	080085b5 	.word	0x080085b5

0800868c <__sfp>:
 800868c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868e:	4607      	mov	r7, r0
 8008690:	f7ff ffac 	bl	80085ec <__sfp_lock_acquire>
 8008694:	4b1e      	ldr	r3, [pc, #120]	; (8008710 <__sfp+0x84>)
 8008696:	681e      	ldr	r6, [r3, #0]
 8008698:	69b3      	ldr	r3, [r6, #24]
 800869a:	b913      	cbnz	r3, 80086a2 <__sfp+0x16>
 800869c:	4630      	mov	r0, r6
 800869e:	f7ff ffbd 	bl	800861c <__sinit>
 80086a2:	3648      	adds	r6, #72	; 0x48
 80086a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086a8:	3b01      	subs	r3, #1
 80086aa:	d503      	bpl.n	80086b4 <__sfp+0x28>
 80086ac:	6833      	ldr	r3, [r6, #0]
 80086ae:	b30b      	cbz	r3, 80086f4 <__sfp+0x68>
 80086b0:	6836      	ldr	r6, [r6, #0]
 80086b2:	e7f7      	b.n	80086a4 <__sfp+0x18>
 80086b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086b8:	b9d5      	cbnz	r5, 80086f0 <__sfp+0x64>
 80086ba:	4b16      	ldr	r3, [pc, #88]	; (8008714 <__sfp+0x88>)
 80086bc:	60e3      	str	r3, [r4, #12]
 80086be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086c2:	6665      	str	r5, [r4, #100]	; 0x64
 80086c4:	f000 f847 	bl	8008756 <__retarget_lock_init_recursive>
 80086c8:	f7ff ff96 	bl	80085f8 <__sfp_lock_release>
 80086cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086d4:	6025      	str	r5, [r4, #0]
 80086d6:	61a5      	str	r5, [r4, #24]
 80086d8:	2208      	movs	r2, #8
 80086da:	4629      	mov	r1, r5
 80086dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086e0:	f7fd fa9c 	bl	8005c1c <memset>
 80086e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086ec:	4620      	mov	r0, r4
 80086ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086f0:	3468      	adds	r4, #104	; 0x68
 80086f2:	e7d9      	b.n	80086a8 <__sfp+0x1c>
 80086f4:	2104      	movs	r1, #4
 80086f6:	4638      	mov	r0, r7
 80086f8:	f7ff ff62 	bl	80085c0 <__sfmoreglue>
 80086fc:	4604      	mov	r4, r0
 80086fe:	6030      	str	r0, [r6, #0]
 8008700:	2800      	cmp	r0, #0
 8008702:	d1d5      	bne.n	80086b0 <__sfp+0x24>
 8008704:	f7ff ff78 	bl	80085f8 <__sfp_lock_release>
 8008708:	230c      	movs	r3, #12
 800870a:	603b      	str	r3, [r7, #0]
 800870c:	e7ee      	b.n	80086ec <__sfp+0x60>
 800870e:	bf00      	nop
 8008710:	08008ac4 	.word	0x08008ac4
 8008714:	ffff0001 	.word	0xffff0001

08008718 <_fwalk_reent>:
 8008718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800871c:	4606      	mov	r6, r0
 800871e:	4688      	mov	r8, r1
 8008720:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008724:	2700      	movs	r7, #0
 8008726:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800872a:	f1b9 0901 	subs.w	r9, r9, #1
 800872e:	d505      	bpl.n	800873c <_fwalk_reent+0x24>
 8008730:	6824      	ldr	r4, [r4, #0]
 8008732:	2c00      	cmp	r4, #0
 8008734:	d1f7      	bne.n	8008726 <_fwalk_reent+0xe>
 8008736:	4638      	mov	r0, r7
 8008738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800873c:	89ab      	ldrh	r3, [r5, #12]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d907      	bls.n	8008752 <_fwalk_reent+0x3a>
 8008742:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008746:	3301      	adds	r3, #1
 8008748:	d003      	beq.n	8008752 <_fwalk_reent+0x3a>
 800874a:	4629      	mov	r1, r5
 800874c:	4630      	mov	r0, r6
 800874e:	47c0      	blx	r8
 8008750:	4307      	orrs	r7, r0
 8008752:	3568      	adds	r5, #104	; 0x68
 8008754:	e7e9      	b.n	800872a <_fwalk_reent+0x12>

08008756 <__retarget_lock_init_recursive>:
 8008756:	4770      	bx	lr

08008758 <__retarget_lock_acquire_recursive>:
 8008758:	4770      	bx	lr

0800875a <__retarget_lock_release_recursive>:
 800875a:	4770      	bx	lr

0800875c <__swhatbuf_r>:
 800875c:	b570      	push	{r4, r5, r6, lr}
 800875e:	460e      	mov	r6, r1
 8008760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008764:	2900      	cmp	r1, #0
 8008766:	b096      	sub	sp, #88	; 0x58
 8008768:	4614      	mov	r4, r2
 800876a:	461d      	mov	r5, r3
 800876c:	da08      	bge.n	8008780 <__swhatbuf_r+0x24>
 800876e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	602a      	str	r2, [r5, #0]
 8008776:	061a      	lsls	r2, r3, #24
 8008778:	d410      	bmi.n	800879c <__swhatbuf_r+0x40>
 800877a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800877e:	e00e      	b.n	800879e <__swhatbuf_r+0x42>
 8008780:	466a      	mov	r2, sp
 8008782:	f000 f903 	bl	800898c <_fstat_r>
 8008786:	2800      	cmp	r0, #0
 8008788:	dbf1      	blt.n	800876e <__swhatbuf_r+0x12>
 800878a:	9a01      	ldr	r2, [sp, #4]
 800878c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008790:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008794:	425a      	negs	r2, r3
 8008796:	415a      	adcs	r2, r3
 8008798:	602a      	str	r2, [r5, #0]
 800879a:	e7ee      	b.n	800877a <__swhatbuf_r+0x1e>
 800879c:	2340      	movs	r3, #64	; 0x40
 800879e:	2000      	movs	r0, #0
 80087a0:	6023      	str	r3, [r4, #0]
 80087a2:	b016      	add	sp, #88	; 0x58
 80087a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080087a8 <__smakebuf_r>:
 80087a8:	898b      	ldrh	r3, [r1, #12]
 80087aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087ac:	079d      	lsls	r5, r3, #30
 80087ae:	4606      	mov	r6, r0
 80087b0:	460c      	mov	r4, r1
 80087b2:	d507      	bpl.n	80087c4 <__smakebuf_r+0x1c>
 80087b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087b8:	6023      	str	r3, [r4, #0]
 80087ba:	6123      	str	r3, [r4, #16]
 80087bc:	2301      	movs	r3, #1
 80087be:	6163      	str	r3, [r4, #20]
 80087c0:	b002      	add	sp, #8
 80087c2:	bd70      	pop	{r4, r5, r6, pc}
 80087c4:	ab01      	add	r3, sp, #4
 80087c6:	466a      	mov	r2, sp
 80087c8:	f7ff ffc8 	bl	800875c <__swhatbuf_r>
 80087cc:	9900      	ldr	r1, [sp, #0]
 80087ce:	4605      	mov	r5, r0
 80087d0:	4630      	mov	r0, r6
 80087d2:	f7ff f963 	bl	8007a9c <_malloc_r>
 80087d6:	b948      	cbnz	r0, 80087ec <__smakebuf_r+0x44>
 80087d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087dc:	059a      	lsls	r2, r3, #22
 80087de:	d4ef      	bmi.n	80087c0 <__smakebuf_r+0x18>
 80087e0:	f023 0303 	bic.w	r3, r3, #3
 80087e4:	f043 0302 	orr.w	r3, r3, #2
 80087e8:	81a3      	strh	r3, [r4, #12]
 80087ea:	e7e3      	b.n	80087b4 <__smakebuf_r+0xc>
 80087ec:	4b0d      	ldr	r3, [pc, #52]	; (8008824 <__smakebuf_r+0x7c>)
 80087ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80087f0:	89a3      	ldrh	r3, [r4, #12]
 80087f2:	6020      	str	r0, [r4, #0]
 80087f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087f8:	81a3      	strh	r3, [r4, #12]
 80087fa:	9b00      	ldr	r3, [sp, #0]
 80087fc:	6163      	str	r3, [r4, #20]
 80087fe:	9b01      	ldr	r3, [sp, #4]
 8008800:	6120      	str	r0, [r4, #16]
 8008802:	b15b      	cbz	r3, 800881c <__smakebuf_r+0x74>
 8008804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008808:	4630      	mov	r0, r6
 800880a:	f000 f8d1 	bl	80089b0 <_isatty_r>
 800880e:	b128      	cbz	r0, 800881c <__smakebuf_r+0x74>
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	f023 0303 	bic.w	r3, r3, #3
 8008816:	f043 0301 	orr.w	r3, r3, #1
 800881a:	81a3      	strh	r3, [r4, #12]
 800881c:	89a0      	ldrh	r0, [r4, #12]
 800881e:	4305      	orrs	r5, r0
 8008820:	81a5      	strh	r5, [r4, #12]
 8008822:	e7cd      	b.n	80087c0 <__smakebuf_r+0x18>
 8008824:	080085b5 	.word	0x080085b5

08008828 <_malloc_usable_size_r>:
 8008828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800882c:	1f18      	subs	r0, r3, #4
 800882e:	2b00      	cmp	r3, #0
 8008830:	bfbc      	itt	lt
 8008832:	580b      	ldrlt	r3, [r1, r0]
 8008834:	18c0      	addlt	r0, r0, r3
 8008836:	4770      	bx	lr

08008838 <_raise_r>:
 8008838:	291f      	cmp	r1, #31
 800883a:	b538      	push	{r3, r4, r5, lr}
 800883c:	4604      	mov	r4, r0
 800883e:	460d      	mov	r5, r1
 8008840:	d904      	bls.n	800884c <_raise_r+0x14>
 8008842:	2316      	movs	r3, #22
 8008844:	6003      	str	r3, [r0, #0]
 8008846:	f04f 30ff 	mov.w	r0, #4294967295
 800884a:	bd38      	pop	{r3, r4, r5, pc}
 800884c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800884e:	b112      	cbz	r2, 8008856 <_raise_r+0x1e>
 8008850:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008854:	b94b      	cbnz	r3, 800886a <_raise_r+0x32>
 8008856:	4620      	mov	r0, r4
 8008858:	f000 f830 	bl	80088bc <_getpid_r>
 800885c:	462a      	mov	r2, r5
 800885e:	4601      	mov	r1, r0
 8008860:	4620      	mov	r0, r4
 8008862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008866:	f000 b817 	b.w	8008898 <_kill_r>
 800886a:	2b01      	cmp	r3, #1
 800886c:	d00a      	beq.n	8008884 <_raise_r+0x4c>
 800886e:	1c59      	adds	r1, r3, #1
 8008870:	d103      	bne.n	800887a <_raise_r+0x42>
 8008872:	2316      	movs	r3, #22
 8008874:	6003      	str	r3, [r0, #0]
 8008876:	2001      	movs	r0, #1
 8008878:	e7e7      	b.n	800884a <_raise_r+0x12>
 800887a:	2400      	movs	r4, #0
 800887c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008880:	4628      	mov	r0, r5
 8008882:	4798      	blx	r3
 8008884:	2000      	movs	r0, #0
 8008886:	e7e0      	b.n	800884a <_raise_r+0x12>

08008888 <raise>:
 8008888:	4b02      	ldr	r3, [pc, #8]	; (8008894 <raise+0xc>)
 800888a:	4601      	mov	r1, r0
 800888c:	6818      	ldr	r0, [r3, #0]
 800888e:	f7ff bfd3 	b.w	8008838 <_raise_r>
 8008892:	bf00      	nop
 8008894:	20000064 	.word	0x20000064

08008898 <_kill_r>:
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	4d07      	ldr	r5, [pc, #28]	; (80088b8 <_kill_r+0x20>)
 800889c:	2300      	movs	r3, #0
 800889e:	4604      	mov	r4, r0
 80088a0:	4608      	mov	r0, r1
 80088a2:	4611      	mov	r1, r2
 80088a4:	602b      	str	r3, [r5, #0]
 80088a6:	f7f9 fd9f 	bl	80023e8 <_kill>
 80088aa:	1c43      	adds	r3, r0, #1
 80088ac:	d102      	bne.n	80088b4 <_kill_r+0x1c>
 80088ae:	682b      	ldr	r3, [r5, #0]
 80088b0:	b103      	cbz	r3, 80088b4 <_kill_r+0x1c>
 80088b2:	6023      	str	r3, [r4, #0]
 80088b4:	bd38      	pop	{r3, r4, r5, pc}
 80088b6:	bf00      	nop
 80088b8:	20000534 	.word	0x20000534

080088bc <_getpid_r>:
 80088bc:	f7f9 bd8c 	b.w	80023d8 <_getpid>

080088c0 <__sread>:
 80088c0:	b510      	push	{r4, lr}
 80088c2:	460c      	mov	r4, r1
 80088c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c8:	f000 f894 	bl	80089f4 <_read_r>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	bfab      	itete	ge
 80088d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088d2:	89a3      	ldrhlt	r3, [r4, #12]
 80088d4:	181b      	addge	r3, r3, r0
 80088d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088da:	bfac      	ite	ge
 80088dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80088de:	81a3      	strhlt	r3, [r4, #12]
 80088e0:	bd10      	pop	{r4, pc}

080088e2 <__swrite>:
 80088e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e6:	461f      	mov	r7, r3
 80088e8:	898b      	ldrh	r3, [r1, #12]
 80088ea:	05db      	lsls	r3, r3, #23
 80088ec:	4605      	mov	r5, r0
 80088ee:	460c      	mov	r4, r1
 80088f0:	4616      	mov	r6, r2
 80088f2:	d505      	bpl.n	8008900 <__swrite+0x1e>
 80088f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f8:	2302      	movs	r3, #2
 80088fa:	2200      	movs	r2, #0
 80088fc:	f000 f868 	bl	80089d0 <_lseek_r>
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800890a:	81a3      	strh	r3, [r4, #12]
 800890c:	4632      	mov	r2, r6
 800890e:	463b      	mov	r3, r7
 8008910:	4628      	mov	r0, r5
 8008912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008916:	f000 b817 	b.w	8008948 <_write_r>

0800891a <__sseek>:
 800891a:	b510      	push	{r4, lr}
 800891c:	460c      	mov	r4, r1
 800891e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008922:	f000 f855 	bl	80089d0 <_lseek_r>
 8008926:	1c43      	adds	r3, r0, #1
 8008928:	89a3      	ldrh	r3, [r4, #12]
 800892a:	bf15      	itete	ne
 800892c:	6560      	strne	r0, [r4, #84]	; 0x54
 800892e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008936:	81a3      	strheq	r3, [r4, #12]
 8008938:	bf18      	it	ne
 800893a:	81a3      	strhne	r3, [r4, #12]
 800893c:	bd10      	pop	{r4, pc}

0800893e <__sclose>:
 800893e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008942:	f000 b813 	b.w	800896c <_close_r>
	...

08008948 <_write_r>:
 8008948:	b538      	push	{r3, r4, r5, lr}
 800894a:	4d07      	ldr	r5, [pc, #28]	; (8008968 <_write_r+0x20>)
 800894c:	4604      	mov	r4, r0
 800894e:	4608      	mov	r0, r1
 8008950:	4611      	mov	r1, r2
 8008952:	2200      	movs	r2, #0
 8008954:	602a      	str	r2, [r5, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	f7f9 fd7d 	bl	8002456 <_write>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d102      	bne.n	8008966 <_write_r+0x1e>
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	b103      	cbz	r3, 8008966 <_write_r+0x1e>
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	20000534 	.word	0x20000534

0800896c <_close_r>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	4d06      	ldr	r5, [pc, #24]	; (8008988 <_close_r+0x1c>)
 8008970:	2300      	movs	r3, #0
 8008972:	4604      	mov	r4, r0
 8008974:	4608      	mov	r0, r1
 8008976:	602b      	str	r3, [r5, #0]
 8008978:	f7f9 fd89 	bl	800248e <_close>
 800897c:	1c43      	adds	r3, r0, #1
 800897e:	d102      	bne.n	8008986 <_close_r+0x1a>
 8008980:	682b      	ldr	r3, [r5, #0]
 8008982:	b103      	cbz	r3, 8008986 <_close_r+0x1a>
 8008984:	6023      	str	r3, [r4, #0]
 8008986:	bd38      	pop	{r3, r4, r5, pc}
 8008988:	20000534 	.word	0x20000534

0800898c <_fstat_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	4d07      	ldr	r5, [pc, #28]	; (80089ac <_fstat_r+0x20>)
 8008990:	2300      	movs	r3, #0
 8008992:	4604      	mov	r4, r0
 8008994:	4608      	mov	r0, r1
 8008996:	4611      	mov	r1, r2
 8008998:	602b      	str	r3, [r5, #0]
 800899a:	f7f9 fd84 	bl	80024a6 <_fstat>
 800899e:	1c43      	adds	r3, r0, #1
 80089a0:	d102      	bne.n	80089a8 <_fstat_r+0x1c>
 80089a2:	682b      	ldr	r3, [r5, #0]
 80089a4:	b103      	cbz	r3, 80089a8 <_fstat_r+0x1c>
 80089a6:	6023      	str	r3, [r4, #0]
 80089a8:	bd38      	pop	{r3, r4, r5, pc}
 80089aa:	bf00      	nop
 80089ac:	20000534 	.word	0x20000534

080089b0 <_isatty_r>:
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	4d06      	ldr	r5, [pc, #24]	; (80089cc <_isatty_r+0x1c>)
 80089b4:	2300      	movs	r3, #0
 80089b6:	4604      	mov	r4, r0
 80089b8:	4608      	mov	r0, r1
 80089ba:	602b      	str	r3, [r5, #0]
 80089bc:	f7f9 fd83 	bl	80024c6 <_isatty>
 80089c0:	1c43      	adds	r3, r0, #1
 80089c2:	d102      	bne.n	80089ca <_isatty_r+0x1a>
 80089c4:	682b      	ldr	r3, [r5, #0]
 80089c6:	b103      	cbz	r3, 80089ca <_isatty_r+0x1a>
 80089c8:	6023      	str	r3, [r4, #0]
 80089ca:	bd38      	pop	{r3, r4, r5, pc}
 80089cc:	20000534 	.word	0x20000534

080089d0 <_lseek_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4d07      	ldr	r5, [pc, #28]	; (80089f0 <_lseek_r+0x20>)
 80089d4:	4604      	mov	r4, r0
 80089d6:	4608      	mov	r0, r1
 80089d8:	4611      	mov	r1, r2
 80089da:	2200      	movs	r2, #0
 80089dc:	602a      	str	r2, [r5, #0]
 80089de:	461a      	mov	r2, r3
 80089e0:	f7f9 fd7c 	bl	80024dc <_lseek>
 80089e4:	1c43      	adds	r3, r0, #1
 80089e6:	d102      	bne.n	80089ee <_lseek_r+0x1e>
 80089e8:	682b      	ldr	r3, [r5, #0]
 80089ea:	b103      	cbz	r3, 80089ee <_lseek_r+0x1e>
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	bd38      	pop	{r3, r4, r5, pc}
 80089f0:	20000534 	.word	0x20000534

080089f4 <_read_r>:
 80089f4:	b538      	push	{r3, r4, r5, lr}
 80089f6:	4d07      	ldr	r5, [pc, #28]	; (8008a14 <_read_r+0x20>)
 80089f8:	4604      	mov	r4, r0
 80089fa:	4608      	mov	r0, r1
 80089fc:	4611      	mov	r1, r2
 80089fe:	2200      	movs	r2, #0
 8008a00:	602a      	str	r2, [r5, #0]
 8008a02:	461a      	mov	r2, r3
 8008a04:	f7f9 fd0a 	bl	800241c <_read>
 8008a08:	1c43      	adds	r3, r0, #1
 8008a0a:	d102      	bne.n	8008a12 <_read_r+0x1e>
 8008a0c:	682b      	ldr	r3, [r5, #0]
 8008a0e:	b103      	cbz	r3, 8008a12 <_read_r+0x1e>
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	bd38      	pop	{r3, r4, r5, pc}
 8008a14:	20000534 	.word	0x20000534

08008a18 <_init>:
 8008a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1a:	bf00      	nop
 8008a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a1e:	bc08      	pop	{r3}
 8008a20:	469e      	mov	lr, r3
 8008a22:	4770      	bx	lr

08008a24 <_fini>:
 8008a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a26:	bf00      	nop
 8008a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a2a:	bc08      	pop	{r3}
 8008a2c:	469e      	mov	lr, r3
 8008a2e:	4770      	bx	lr
