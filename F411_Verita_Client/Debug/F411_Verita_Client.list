
F411_Verita_Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007680  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08007820  08007820  00017820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c6c  08007c6c  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  08007c6c  08007c6c  00017c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c74  08007c74  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c74  08007c74  00017c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c78  08007c78  00017c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08007c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000234  08007eb0  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08007eb0  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e89d  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eae  00000000  00000000  0002eb01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  000309b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  00031750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018531  00000000  00000000  00032428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6b6  00000000  00000000  0004a959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b27e  00000000  00000000  0005a00f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f528d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b48  00000000  00000000  000f52e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000234 	.word	0x20000234
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007808 	.word	0x08007808

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000238 	.word	0x20000238
 80001dc:	08007808 	.word	0x08007808

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <gpio_selftest_input_pupdr_1>:
//// lists All port - pin to inspect first // avoid special pin like osilators / UART
//// GPIO_PIN_x is in bit position format (0 2 4 8 16 ...) which loss if stored in that form and log2() to calculate back
//uint16_t List_GPIOC[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13};


uint32_t gpio_selftest_input_pupdr_1(GPIO_TypeDef* GPIOx,uint16_t *Lista_GPIOx){
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]

	uint32_t result = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]

	uint32_t temp_mode = GPIOx->MODER;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	617b      	str	r3, [r7, #20]
	uint32_t temp_pupdr = GPIOx->PUPDR;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	613b      	str	r3, [r7, #16]

	//uint16_t sizearr = sizeof(Lista_GPIOx); // / sizeof(List_GPIOC[0])
	//// use instead of sizeof which return array length input into function as 4
	uint16_t sizearr = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	81fb      	strh	r3, [r7, #14]
	for(register int i = 0; i <= 17 ;i++){
 8000f7a:	2400      	movs	r4, #0
 8000f7c:	e00a      	b.n	8000f94 <gpio_selftest_input_pupdr_1+0x38>
		if(Lista_GPIOx[i] == 20){
 8000f7e:	4623      	mov	r3, r4
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	4413      	add	r3, r2
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	2b14      	cmp	r3, #20
 8000f8a:	d006      	beq.n	8000f9a <gpio_selftest_input_pupdr_1+0x3e>
			break;
		}else{
			sizearr++;
 8000f8c:	89fb      	ldrh	r3, [r7, #14]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	81fb      	strh	r3, [r7, #14]
	for(register int i = 0; i <= 17 ;i++){
 8000f92:	3401      	adds	r4, #1
 8000f94:	2c11      	cmp	r4, #17
 8000f96:	ddf2      	ble.n	8000f7e <gpio_selftest_input_pupdr_1+0x22>
 8000f98:	e000      	b.n	8000f9c <gpio_selftest_input_pupdr_1+0x40>
			break;
 8000f9a:	bf00      	nop
		}
	}


	//// ------------------ Input PULLUP ------------------------------
	for(register int i = 0;i < sizearr; i++){
 8000f9c:	2400      	movs	r4, #0
 8000f9e:	e00e      	b.n	8000fbe <gpio_selftest_input_pupdr_1+0x62>
		temp_mode &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 8000fa0:	4623      	mov	r3, r4
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	617b      	str	r3, [r7, #20]
	for(register int i = 0;i < sizearr; i++){
 8000fbc:	3401      	adds	r4, #1
 8000fbe:	89fb      	ldrh	r3, [r7, #14]
 8000fc0:	429c      	cmp	r4, r3
 8000fc2:	dbed      	blt.n	8000fa0 <gpio_selftest_input_pupdr_1+0x44>
		temp_mode |= ( GPIO_MODE_INPUT << (Lista_GPIOx[i] * 2U));
	}
	GPIOx->MODER = temp_mode;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	601a      	str	r2, [r3, #0]


	for(register int i = 0;i < sizearr; i++){
 8000fca:	2400      	movs	r4, #0
 8000fcc:	e01a      	b.n	8001004 <gpio_selftest_input_pupdr_1+0xa8>
		temp_pupdr &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 8000fce:	4623      	mov	r3, r4
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
		temp_pupdr |= ( GPIO_PULLUP << (Lista_GPIOx[i] * 2U));
 8000fea:	4623      	mov	r3, r4
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
	for(register int i = 0;i < sizearr; i++){
 8001002:	3401      	adds	r4, #1
 8001004:	89fb      	ldrh	r3, [r7, #14]
 8001006:	429c      	cmp	r4, r3
 8001008:	dbe1      	blt.n	8000fce <gpio_selftest_input_pupdr_1+0x72>
	}
	GPIOx->PUPDR = temp_pupdr;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	60da      	str	r2, [r3, #12]
	HAL_Delay(1);
 8001010:	2001      	movs	r0, #1
 8001012:	f001 f84d 	bl	80020b0 <HAL_Delay>
	result |= (GPIOx->IDR) << 16;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	041b      	lsls	r3, r3, #16
 800101c:	68ba      	ldr	r2, [r7, #8]
 800101e:	4313      	orrs	r3, r2
 8001020:	60bb      	str	r3, [r7, #8]

	//// ------------------ Input PULLDOWN ------------------------------
	for(register int i = 0;i < sizearr; i++){
 8001022:	2400      	movs	r4, #0
 8001024:	e01a      	b.n	800105c <gpio_selftest_input_pupdr_1+0x100>
		temp_pupdr &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 8001026:	4623      	mov	r3, r4
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	4413      	add	r3, r2
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	461a      	mov	r2, r3
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
		temp_pupdr |= ( GPIO_PULLDOWN << (Lista_GPIOx[i] * 2U));
 8001042:	4623      	mov	r3, r4
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	4413      	add	r3, r2
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2202      	movs	r2, #2
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
	for(register int i = 0;i < sizearr; i++){
 800105a:	3401      	adds	r4, #1
 800105c:	89fb      	ldrh	r3, [r7, #14]
 800105e:	429c      	cmp	r4, r3
 8001060:	dbe1      	blt.n	8001026 <gpio_selftest_input_pupdr_1+0xca>
	}
	GPIOx->PUPDR = temp_pupdr;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	60da      	str	r2, [r3, #12]
	HAL_Delay(5);
 8001068:	2005      	movs	r0, #5
 800106a:	f001 f821 	bl	80020b0 <HAL_Delay>
	result |= GPIOx->IDR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	4313      	orrs	r3, r2
 8001076:	60bb      	str	r3, [r7, #8]

	return result;
 8001078:	68bb      	ldr	r3, [r7, #8]

	}
 800107a:	4618      	mov	r0, r3
 800107c:	371c      	adds	r7, #28
 800107e:	46bd      	mov	sp, r7
 8001080:	bd90      	pop	{r4, r7, pc}

08001082 <gpio_selftest_output_pp_1>:

//// output pushpull
uint32_t gpio_selftest_output_pp_1(GPIO_TypeDef* GPIOx,uint16_t *Lista_GPIOx){
 8001082:	b590      	push	{r4, r7, lr}
 8001084:	b087      	sub	sp, #28
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	6039      	str	r1, [r7, #0]
	uint32_t temp_mode = GPIOx->MODER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	617b      	str	r3, [r7, #20]
	uint32_t temp_bsrr = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
	uint32_t result = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]

	uint16_t sizearr = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	81fb      	strh	r3, [r7, #14]
	//// use instead of sizeof
	for(register int i = 0; i <= 17 ;i++){
 800109e:	2400      	movs	r4, #0
 80010a0:	e00a      	b.n	80010b8 <gpio_selftest_output_pp_1+0x36>
		if(Lista_GPIOx[i] == 20){
 80010a2:	4623      	mov	r3, r4
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	4413      	add	r3, r2
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	2b14      	cmp	r3, #20
 80010ae:	d006      	beq.n	80010be <gpio_selftest_output_pp_1+0x3c>
			break;
		}else{
			sizearr++;
 80010b0:	89fb      	ldrh	r3, [r7, #14]
 80010b2:	3301      	adds	r3, #1
 80010b4:	81fb      	strh	r3, [r7, #14]
	for(register int i = 0; i <= 17 ;i++){
 80010b6:	3401      	adds	r4, #1
 80010b8:	2c11      	cmp	r4, #17
 80010ba:	ddf2      	ble.n	80010a2 <gpio_selftest_output_pp_1+0x20>
 80010bc:	e000      	b.n	80010c0 <gpio_selftest_output_pp_1+0x3e>
			break;
 80010be:	bf00      	nop
		}
	}

	///// -------------- Set Output Pushpull ---------------------
	for(register int i = 0;i < sizearr; i++){
 80010c0:	2400      	movs	r4, #0
 80010c2:	e01a      	b.n	80010fa <gpio_selftest_output_pp_1+0x78>
			temp_mode &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 80010c4:	4623      	mov	r3, r4
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	4013      	ands	r3, r2
 80010de:	617b      	str	r3, [r7, #20]
			temp_mode |= ( GPIO_MODE_OUTPUT_PP << (Lista_GPIOx[i] * 2U));
 80010e0:	4623      	mov	r3, r4
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2201      	movs	r2, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	617b      	str	r3, [r7, #20]
	for(register int i = 0;i < sizearr; i++){
 80010f8:	3401      	adds	r4, #1
 80010fa:	89fb      	ldrh	r3, [r7, #14]
 80010fc:	429c      	cmp	r4, r3
 80010fe:	dbe1      	blt.n	80010c4 <gpio_selftest_output_pp_1+0x42>
		}
	GPIOx->MODER = temp_mode;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	601a      	str	r2, [r3, #0]

	//// write SET to BSRR
	for(register int i = 0;i < sizearr; i++){
 8001106:	2400      	movs	r4, #0
 8001108:	e019      	b.n	800113e <gpio_selftest_output_pp_1+0xbc>
			temp_bsrr &= ~( 0b1 << Lista_GPIOx[i]); // clear only register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 800110a:	4623      	mov	r3, r4
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	4413      	add	r3, r2
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	2301      	movs	r3, #1
 8001118:	4093      	lsls	r3, r2
 800111a:	43db      	mvns	r3, r3
 800111c:	461a      	mov	r2, r3
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
			temp_bsrr |= ( GPIO_PIN_SET << Lista_GPIOx[i]);
 8001124:	4623      	mov	r3, r4
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	4413      	add	r3, r2
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	2301      	movs	r3, #1
 8001132:	4093      	lsls	r3, r2
 8001134:	461a      	mov	r2, r3
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
	for(register int i = 0;i < sizearr; i++){
 800113c:	3401      	adds	r4, #1
 800113e:	89fb      	ldrh	r3, [r7, #14]
 8001140:	429c      	cmp	r4, r3
 8001142:	dbe2      	blt.n	800110a <gpio_selftest_output_pp_1+0x88>
		}
	GPIOx->BSRR = temp_bsrr; // insert 1 into SET position
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	619a      	str	r2, [r3, #24]

	//// Read Back #1 get set
	HAL_Delay(1);
 800114a:	2001      	movs	r0, #1
 800114c:	f000 ffb0 	bl	80020b0 <HAL_Delay>
	result |= (GPIOx->IDR) << 16;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	041b      	lsls	r3, r3, #16
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	4313      	orrs	r3, r2
 800115a:	60bb      	str	r3, [r7, #8]
	HAL_Delay(1);
 800115c:	2001      	movs	r0, #1
 800115e:	f000 ffa7 	bl	80020b0 <HAL_Delay>

	//// write RESET to BSRR
	GPIOx->BSRR = temp_bsrr << 16; // insert 1 into RESET position << 16
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	041a      	lsls	r2, r3, #16
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	619a      	str	r2, [r3, #24]
	//// Read Back #2 get Reset
	HAL_Delay(1);
 800116a:	2001      	movs	r0, #1
 800116c:	f000 ffa0 	bl	80020b0 <HAL_Delay>
	result |= GPIOx->IDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	4313      	orrs	r3, r2
 8001178:	60bb      	str	r3, [r7, #8]

	return result;
 800117a:	68bb      	ldr	r3, [r7, #8]
}
 800117c:	4618      	mov	r0, r3
 800117e:	371c      	adds	r7, #28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd90      	pop	{r4, r7, pc}

08001184 <gpio_selftest_output_od_1>:

//// output opendrain
/* Open drain mode: A “0” in the Output register activates the N-MOS whereas a “1”
 * in the Output register leaves the port in Hi-Z (the P-MOS is never activated)
 * */
uint32_t gpio_selftest_output_od_1(GPIO_TypeDef* GPIOx,uint16_t *Lista_GPIOx){
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
	uint32_t temp_mode = GPIOx->MODER;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	61fb      	str	r3, [r7, #28]
	uint32_t temp_bsrr = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	61bb      	str	r3, [r7, #24]
	uint32_t temp_pupdr = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
	uint32_t result = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]

	uint16_t sizearr = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	827b      	strh	r3, [r7, #18]
	//// use instead of sizeof
	for(register int i = 0; i <= 17 ;i++){
 80011a4:	2400      	movs	r4, #0
 80011a6:	e00a      	b.n	80011be <gpio_selftest_output_od_1+0x3a>
		if(Lista_GPIOx[i] == 20){
 80011a8:	4623      	mov	r3, r4
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	2b14      	cmp	r3, #20
 80011b4:	d006      	beq.n	80011c4 <gpio_selftest_output_od_1+0x40>
			break;
		}else{
			sizearr++;
 80011b6:	8a7b      	ldrh	r3, [r7, #18]
 80011b8:	3301      	adds	r3, #1
 80011ba:	827b      	strh	r3, [r7, #18]
	for(register int i = 0; i <= 17 ;i++){
 80011bc:	3401      	adds	r4, #1
 80011be:	2c11      	cmp	r4, #17
 80011c0:	ddf2      	ble.n	80011a8 <gpio_selftest_output_od_1+0x24>
 80011c2:	e000      	b.n	80011c6 <gpio_selftest_output_od_1+0x42>
			break;
 80011c4:	bf00      	nop
		}
	}

	///// -------------- Set Output  opendrain ---------------------
	for(register int i = 0;i < sizearr; i++){
 80011c6:	2400      	movs	r4, #0
 80011c8:	e01a      	b.n	8001200 <gpio_selftest_output_od_1+0x7c>
			temp_mode &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 80011ca:	4623      	mov	r3, r4
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	4413      	add	r3, r2
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	461a      	mov	r2, r3
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61fb      	str	r3, [r7, #28]
			temp_mode |= ( GPIO_MODE_OUTPUT_OD << (Lista_GPIOx[i] * 2U));
 80011e6:	4623      	mov	r3, r4
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	4413      	add	r3, r2
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2211      	movs	r2, #17
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61fb      	str	r3, [r7, #28]
	for(register int i = 0;i < sizearr; i++){
 80011fe:	3401      	adds	r4, #1
 8001200:	8a7b      	ldrh	r3, [r7, #18]
 8001202:	429c      	cmp	r4, r3
 8001204:	dbe1      	blt.n	80011ca <gpio_selftest_output_od_1+0x46>
		}
	GPIOx->MODER = temp_mode;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69fa      	ldr	r2, [r7, #28]
 800120a:	601a      	str	r2, [r3, #0]

	//// Set Pullup for Hi-Z State read
	for(register int i = 0;i < sizearr; i++){
 800120c:	2400      	movs	r4, #0
 800120e:	e01a      	b.n	8001246 <gpio_selftest_output_od_1+0xc2>
		temp_pupdr &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 8001210:	4623      	mov	r3, r4
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	4413      	add	r3, r2
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	461a      	mov	r2, r3
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	4013      	ands	r3, r2
 800122a:	617b      	str	r3, [r7, #20]
		temp_pupdr |= ( GPIO_PULLUP << (Lista_GPIOx[i] * 2U));
 800122c:	4623      	mov	r3, r4
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	4413      	add	r3, r2
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2201      	movs	r2, #1
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	4313      	orrs	r3, r2
 8001242:	617b      	str	r3, [r7, #20]
	for(register int i = 0;i < sizearr; i++){
 8001244:	3401      	adds	r4, #1
 8001246:	8a7b      	ldrh	r3, [r7, #18]
 8001248:	429c      	cmp	r4, r3
 800124a:	dbe1      	blt.n	8001210 <gpio_selftest_output_od_1+0x8c>
	}
	GPIOx->PUPDR = temp_pupdr;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	60da      	str	r2, [r3, #12]

	//// write SET to BSRR
	for(register int i = 0;i < sizearr; i++){
 8001252:	2400      	movs	r4, #0
 8001254:	e019      	b.n	800128a <gpio_selftest_output_od_1+0x106>
			temp_bsrr &= ~( 0b1 << Lista_GPIOx[i]); // clear only register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 8001256:	4623      	mov	r3, r4
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	4413      	add	r3, r2
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	2301      	movs	r3, #1
 8001264:	4093      	lsls	r3, r2
 8001266:	43db      	mvns	r3, r3
 8001268:	461a      	mov	r2, r3
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
			temp_bsrr |= ( GPIO_PIN_SET << Lista_GPIOx[i]);
 8001270:	4623      	mov	r3, r4
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	4413      	add	r3, r2
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	2301      	movs	r3, #1
 800127e:	4093      	lsls	r3, r2
 8001280:	461a      	mov	r2, r3
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
	for(register int i = 0;i < sizearr; i++){
 8001288:	3401      	adds	r4, #1
 800128a:	8a7b      	ldrh	r3, [r7, #18]
 800128c:	429c      	cmp	r4, r3
 800128e:	dbe2      	blt.n	8001256 <gpio_selftest_output_od_1+0xd2>
		}
	GPIOx->BSRR = temp_bsrr; // insert 1 into SET position
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	619a      	str	r2, [r3, #24]

	//// Read Back #1 get set
	HAL_Delay(1);
 8001296:	2001      	movs	r0, #1
 8001298:	f000 ff0a 	bl	80020b0 <HAL_Delay>
	result |= (GPIOx->IDR) << 16;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	041b      	lsls	r3, r3, #16
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]
	HAL_Delay(1);
 80012a8:	2001      	movs	r0, #1
 80012aa:	f000 ff01 	bl	80020b0 <HAL_Delay>

	//// write RESET to BSRR
	GPIOx->BSRR = temp_bsrr << 16; // insert 1 into RESET position << 16
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	041a      	lsls	r2, r3, #16
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	619a      	str	r2, [r3, #24]
	//// Read Back #2 get Reset
	HAL_Delay(1);
 80012b6:	2001      	movs	r0, #1
 80012b8:	f000 fefa 	bl	80020b0 <HAL_Delay>
	result |= GPIOx->IDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]

	return result;
 80012c6:	68fb      	ldr	r3, [r7, #12]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3724      	adds	r7, #36	; 0x24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd90      	pop	{r4, r7, pc}

080012d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d0:	b5b0      	push	{r4, r5, r7, lr}
 80012d2:	b094      	sub	sp, #80	; 0x50
 80012d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d6:	f000 fe79 	bl	8001fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012da:	f000 f8e7 	bl	80014ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012de:	f000 fa6d 	bl	80017bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012e2:	f000 fa17 	bl	8001714 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80012e6:	f000 f949 	bl	800157c <MX_ADC1_Init>
  MX_TIM3_Init();
 80012ea:	f000 f99b 	bl	8001624 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 80012ee:	f000 fa3b 	bl	8001768 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  CPUTemprdINIT();
 80012f2:	f000 fae9 	bl	80018c8 <CPUTemprdINIT>

  char temp[]="----------------- F411_Verita_Client --------------------\r\n";
 80012f6:	4b59      	ldr	r3, [pc, #356]	; (800145c <main+0x18c>)
 80012f8:	f107 040c 	add.w	r4, r7, #12
 80012fc:	461d      	mov	r5, r3
 80012fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800130a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800130e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	4618      	mov	r0, r3
 8001318:	f7fe ff62 	bl	80001e0 <strlen>
 800131c:	4603      	mov	r3, r0
 800131e:	b29a      	uxth	r2, r3
 8001320:	f107 010c 	add.w	r1, r7, #12
 8001324:	230a      	movs	r3, #10
 8001326:	484e      	ldr	r0, [pc, #312]	; (8001460 <main+0x190>)
 8001328:	f002 ffe5 	bl	80042f6 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(HAL_GetTick() >= timestamp_one){
 800132c:	f000 feb4 	bl	8002098 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	4b4c      	ldr	r3, [pc, #304]	; (8001464 <main+0x194>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d33a      	bcc.n	80013b0 <main+0xe0>
		  timestamp_one += 400;
 800133a:	4b4a      	ldr	r3, [pc, #296]	; (8001464 <main+0x194>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001342:	4a48      	ldr	r2, [pc, #288]	; (8001464 <main+0x194>)
 8001344:	6013      	str	r3, [r2, #0]

		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001346:	2120      	movs	r1, #32
 8001348:	4847      	ldr	r0, [pc, #284]	; (8001468 <main+0x198>)
 800134a:	f001 fd76 	bl	8002e3a <HAL_GPIO_TogglePin>

		  cputmpraw = CPUTempread();
 800134e:	f000 facf 	bl	80018f0 <CPUTempread>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b45      	ldr	r3, [pc, #276]	; (800146c <main+0x19c>)
 8001358:	801a      	strh	r2, [r3, #0]

		  cputempCC = TempEquat(ADCTVolta(cputmpraw));
 800135a:	4b44      	ldr	r3, [pc, #272]	; (800146c <main+0x19c>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f000 faea 	bl	8001938 <ADCTVolta>
 8001364:	eef0 7a40 	vmov.f32	s15, s0
 8001368:	eeb0 0a67 	vmov.f32	s0, s15
 800136c:	f000 fb14 	bl	8001998 <TempEquat>
 8001370:	eef0 7a40 	vmov.f32	s15, s0
 8001374:	4b3e      	ldr	r3, [pc, #248]	; (8001470 <main+0x1a0>)
 8001376:	edc3 7a00 	vstr	s15, [r3]

		  sprintf(uartTXBf, "cpuraw = %d  => %.3f C\r\n ",
 800137a:	4b3c      	ldr	r3, [pc, #240]	; (800146c <main+0x19c>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	461c      	mov	r4, r3
 8001380:	4b3b      	ldr	r3, [pc, #236]	; (8001470 <main+0x1a0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f8e7 	bl	8000558 <__aeabi_f2d>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	e9cd 2300 	strd	r2, r3, [sp]
 8001392:	4622      	mov	r2, r4
 8001394:	4937      	ldr	r1, [pc, #220]	; (8001474 <main+0x1a4>)
 8001396:	4838      	ldr	r0, [pc, #224]	; (8001478 <main+0x1a8>)
 8001398:	f003 ffbe 	bl	8005318 <siprintf>
				  cputmpraw,
				  cputempCC);
		  HAL_UART_Transmit(&huart2, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 800139c:	4836      	ldr	r0, [pc, #216]	; (8001478 <main+0x1a8>)
 800139e:	f7fe ff1f 	bl	80001e0 <strlen>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	230a      	movs	r3, #10
 80013a8:	4933      	ldr	r1, [pc, #204]	; (8001478 <main+0x1a8>)
 80013aa:	482d      	ldr	r0, [pc, #180]	; (8001460 <main+0x190>)
 80013ac:	f002 ffa3 	bl	80042f6 <HAL_UART_Transmit>
//		  gpio_C_rd[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
		  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);

	  }

	  if(flag_gpioselftest == 1){
 80013b0:	4b32      	ldr	r3, [pc, #200]	; (800147c <main+0x1ac>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d1b9      	bne.n	800132c <main+0x5c>
		  //GPIO_Selftest_step_1_single();

		  gpio_xpupd_rd[2] = gpio_selftest_input_pupdr_1(GPIOC, List_GPIOC);
 80013b8:	4931      	ldr	r1, [pc, #196]	; (8001480 <main+0x1b0>)
 80013ba:	4832      	ldr	r0, [pc, #200]	; (8001484 <main+0x1b4>)
 80013bc:	f7ff fdce 	bl	8000f5c <gpio_selftest_input_pupdr_1>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4a31      	ldr	r2, [pc, #196]	; (8001488 <main+0x1b8>)
 80013c4:	6093      	str	r3, [r2, #8]
		  gpio_xpupd_rd[1] = gpio_selftest_input_pupdr_1(GPIOB, List_GPIOB);
 80013c6:	4931      	ldr	r1, [pc, #196]	; (800148c <main+0x1bc>)
 80013c8:	4831      	ldr	r0, [pc, #196]	; (8001490 <main+0x1c0>)
 80013ca:	f7ff fdc7 	bl	8000f5c <gpio_selftest_input_pupdr_1>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4a2d      	ldr	r2, [pc, #180]	; (8001488 <main+0x1b8>)
 80013d2:	6053      	str	r3, [r2, #4]

		  HAL_Delay(5);
 80013d4:	2005      	movs	r0, #5
 80013d6:	f000 fe6b 	bl	80020b0 <HAL_Delay>

		  gpio_xopp[0] = gpio_selftest_output_pp_1(GPIOA, List_GPIOA);
 80013da:	492e      	ldr	r1, [pc, #184]	; (8001494 <main+0x1c4>)
 80013dc:	4822      	ldr	r0, [pc, #136]	; (8001468 <main+0x198>)
 80013de:	f7ff fe50 	bl	8001082 <gpio_selftest_output_pp_1>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4a2c      	ldr	r2, [pc, #176]	; (8001498 <main+0x1c8>)
 80013e6:	6013      	str	r3, [r2, #0]
		  gpio_xopp[1] = gpio_selftest_output_pp_1(GPIOB, List_GPIOB);
 80013e8:	4928      	ldr	r1, [pc, #160]	; (800148c <main+0x1bc>)
 80013ea:	4829      	ldr	r0, [pc, #164]	; (8001490 <main+0x1c0>)
 80013ec:	f7ff fe49 	bl	8001082 <gpio_selftest_output_pp_1>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4a29      	ldr	r2, [pc, #164]	; (8001498 <main+0x1c8>)
 80013f4:	6053      	str	r3, [r2, #4]
		  gpio_xopp[2] = gpio_selftest_output_pp_1(GPIOC, List_GPIOC);
 80013f6:	4922      	ldr	r1, [pc, #136]	; (8001480 <main+0x1b0>)
 80013f8:	4822      	ldr	r0, [pc, #136]	; (8001484 <main+0x1b4>)
 80013fa:	f7ff fe42 	bl	8001082 <gpio_selftest_output_pp_1>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a25      	ldr	r2, [pc, #148]	; (8001498 <main+0x1c8>)
 8001402:	6093      	str	r3, [r2, #8]

		  HAL_Delay(5);
 8001404:	2005      	movs	r0, #5
 8001406:	f000 fe53 	bl	80020b0 <HAL_Delay>

		  gpio_xood[1] = gpio_selftest_output_od_1(GPIOB, List_GPIOB);
 800140a:	4920      	ldr	r1, [pc, #128]	; (800148c <main+0x1bc>)
 800140c:	4820      	ldr	r0, [pc, #128]	; (8001490 <main+0x1c0>)
 800140e:	f7ff feb9 	bl	8001184 <gpio_selftest_output_od_1>
 8001412:	4603      	mov	r3, r0
 8001414:	4a21      	ldr	r2, [pc, #132]	; (800149c <main+0x1cc>)
 8001416:	6053      	str	r3, [r2, #4]

		  //// ---------- Verita send 1 set --------------------------
		  static uint8_t gg = 0x66;
		  static uint8_t rg = 0x02;
		  uint8_t ggg[5] = {0x00, 0x11, 0x33, gg, 0x99};
 8001418:	2300      	movs	r3, #0
 800141a:	713b      	strb	r3, [r7, #4]
 800141c:	2311      	movs	r3, #17
 800141e:	717b      	strb	r3, [r7, #5]
 8001420:	2333      	movs	r3, #51	; 0x33
 8001422:	71bb      	strb	r3, [r7, #6]
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <main+0x1d0>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	71fb      	strb	r3, [r7, #7]
 800142a:	2399      	movs	r3, #153	; 0x99
 800142c:	723b      	strb	r3, [r7, #8]
		  Tx_UART_Verita_Packet(&huart6, rg, ggg, sizeof(ggg));
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <main+0x1d4>)
 8001430:	7819      	ldrb	r1, [r3, #0]
 8001432:	1d3a      	adds	r2, r7, #4
 8001434:	2305      	movs	r3, #5
 8001436:	481c      	ldr	r0, [pc, #112]	; (80014a8 <main+0x1d8>)
 8001438:	f000 fae8 	bl	8001a0c <Tx_UART_Verita_Packet>

		  flag_gpioselftest = 0;
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <main+0x1ac>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
		  gg++; rg++;
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <main+0x1d0>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <main+0x1d0>)
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <main+0x1d4>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	3301      	adds	r3, #1
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <main+0x1d4>)
 8001458:	701a      	strb	r2, [r3, #0]
	  if(HAL_GetTick() >= timestamp_one){
 800145a:	e767      	b.n	800132c <main+0x5c>
 800145c:	0800783c 	.word	0x0800783c
 8001460:	200002e0 	.word	0x200002e0
 8001464:	20000388 	.word	0x20000388
 8001468:	40020000 	.word	0x40020000
 800146c:	2000037c 	.word	0x2000037c
 8001470:	20000380 	.word	0x20000380
 8001474:	08007820 	.word	0x08007820
 8001478:	200003b8 	.word	0x200003b8
 800147c:	200003b4 	.word	0x200003b4
 8001480:	20000038 	.word	0x20000038
 8001484:	40020800 	.word	0x40020800
 8001488:	2000038c 	.word	0x2000038c
 800148c:	20000018 	.word	0x20000018
 8001490:	40020400 	.word	0x40020400
 8001494:	20000000 	.word	0x20000000
 8001498:	2000039c 	.word	0x2000039c
 800149c:	200003a8 	.word	0x200003a8
 80014a0:	20000056 	.word	0x20000056
 80014a4:	20000057 	.word	0x20000057
 80014a8:	20000324 	.word	0x20000324

080014ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b094      	sub	sp, #80	; 0x50
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 0320 	add.w	r3, r7, #32
 80014b6:	2230      	movs	r2, #48	; 0x30
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 faba 	bl	8004a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <SystemClock_Config+0xc8>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	4a26      	ldr	r2, [pc, #152]	; (8001574 <SystemClock_Config+0xc8>)
 80014da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014de:	6413      	str	r3, [r2, #64]	; 0x40
 80014e0:	4b24      	ldr	r3, [pc, #144]	; (8001574 <SystemClock_Config+0xc8>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ec:	2300      	movs	r3, #0
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	4b21      	ldr	r3, [pc, #132]	; (8001578 <SystemClock_Config+0xcc>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a20      	ldr	r2, [pc, #128]	; (8001578 <SystemClock_Config+0xcc>)
 80014f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <SystemClock_Config+0xcc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001508:	2302      	movs	r3, #2
 800150a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150c:	2301      	movs	r3, #1
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001510:	2310      	movs	r3, #16
 8001512:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001514:	2302      	movs	r3, #2
 8001516:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001518:	2300      	movs	r3, #0
 800151a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800151c:	2308      	movs	r3, #8
 800151e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001520:	2364      	movs	r3, #100	; 0x64
 8001522:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001524:	2302      	movs	r3, #2
 8001526:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001528:	2304      	movs	r3, #4
 800152a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152c:	f107 0320 	add.w	r3, r7, #32
 8001530:	4618      	mov	r0, r3
 8001532:	f001 fcb5 	bl	8002ea0 <HAL_RCC_OscConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800153c:	f000 faea 	bl	8001b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001540:	230f      	movs	r3, #15
 8001542:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001544:	2302      	movs	r3, #2
 8001546:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800154c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001550:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	2103      	movs	r1, #3
 800155c:	4618      	mov	r0, r3
 800155e:	f001 ff17 	bl	8003390 <HAL_RCC_ClockConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001568:	f000 fad4 	bl	8001b14 <Error_Handler>
  }
}
 800156c:	bf00      	nop
 800156e:	3750      	adds	r7, #80	; 0x50
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800
 8001578:	40007000 	.word	0x40007000

0800157c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001582:	463b      	mov	r3, r7
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800158e:	4b21      	ldr	r3, [pc, #132]	; (8001614 <MX_ADC1_Init+0x98>)
 8001590:	4a21      	ldr	r2, [pc, #132]	; (8001618 <MX_ADC1_Init+0x9c>)
 8001592:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001594:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <MX_ADC1_Init+0x98>)
 8001596:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800159a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <MX_ADC1_Init+0x98>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <MX_ADC1_Init+0x98>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015a8:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <MX_ADC1_Init+0x98>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <MX_ADC1_Init+0x98>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <MX_ADC1_Init+0x98>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <MX_ADC1_Init+0x98>)
 80015be:	4a17      	ldr	r2, [pc, #92]	; (800161c <MX_ADC1_Init+0xa0>)
 80015c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_ADC1_Init+0x98>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <MX_ADC1_Init+0x98>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_ADC1_Init+0x98>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <MX_ADC1_Init+0x98>)
 80015d8:	2200      	movs	r2, #0
 80015da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_ADC1_Init+0x98>)
 80015de:	f000 fd8b 	bl	80020f8 <HAL_ADC_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015e8:	f000 fa94 	bl	8001b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <MX_ADC1_Init+0xa4>)
 80015ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015f0:	2301      	movs	r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80015f4:	2307      	movs	r3, #7
 80015f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f8:	463b      	mov	r3, r7
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_ADC1_Init+0x98>)
 80015fe:	f000 ff3f 	bl	8002480 <HAL_ADC_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001608:	f000 fa84 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000250 	.word	0x20000250
 8001618:	40012000 	.word	0x40012000
 800161c:	0f000001 	.word	0x0f000001
 8001620:	10000012 	.word	0x10000012

08001624 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08e      	sub	sp, #56	; 0x38
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001638:	f107 0320 	add.w	r3, r7, #32
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
 8001650:	615a      	str	r2, [r3, #20]
 8001652:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001654:	4b2d      	ldr	r3, [pc, #180]	; (800170c <MX_TIM3_Init+0xe8>)
 8001656:	4a2e      	ldr	r2, [pc, #184]	; (8001710 <MX_TIM3_Init+0xec>)
 8001658:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 800165a:	4b2c      	ldr	r3, [pc, #176]	; (800170c <MX_TIM3_Init+0xe8>)
 800165c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001660:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001662:	4b2a      	ldr	r3, [pc, #168]	; (800170c <MX_TIM3_Init+0xe8>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <MX_TIM3_Init+0xe8>)
 800166a:	f242 720f 	movw	r2, #9999	; 0x270f
 800166e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001670:	4b26      	ldr	r3, [pc, #152]	; (800170c <MX_TIM3_Init+0xe8>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001676:	4b25      	ldr	r3, [pc, #148]	; (800170c <MX_TIM3_Init+0xe8>)
 8001678:	2280      	movs	r2, #128	; 0x80
 800167a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800167c:	4823      	ldr	r0, [pc, #140]	; (800170c <MX_TIM3_Init+0xe8>)
 800167e:	f002 f8a7 	bl	80037d0 <HAL_TIM_Base_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001688:	f000 fa44 	bl	8001b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001692:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001696:	4619      	mov	r1, r3
 8001698:	481c      	ldr	r0, [pc, #112]	; (800170c <MX_TIM3_Init+0xe8>)
 800169a:	f002 fa03 	bl	8003aa4 <HAL_TIM_ConfigClockSource>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80016a4:	f000 fa36 	bl	8001b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016a8:	4818      	ldr	r0, [pc, #96]	; (800170c <MX_TIM3_Init+0xe8>)
 80016aa:	f002 f8e0 	bl	800386e <HAL_TIM_PWM_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80016b4:	f000 fa2e 	bl	8001b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016c0:	f107 0320 	add.w	r3, r7, #32
 80016c4:	4619      	mov	r1, r3
 80016c6:	4811      	ldr	r0, [pc, #68]	; (800170c <MX_TIM3_Init+0xe8>)
 80016c8:	f002 fd5a 	bl	8004180 <HAL_TIMEx_MasterConfigSynchronization>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80016d2:	f000 fa1f 	bl	8001b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d6:	2360      	movs	r3, #96	; 0x60
 80016d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 80016da:	f241 3388 	movw	r3, #5000	; 0x1388
 80016de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	2200      	movs	r2, #0
 80016ec:	4619      	mov	r1, r3
 80016ee:	4807      	ldr	r0, [pc, #28]	; (800170c <MX_TIM3_Init+0xe8>)
 80016f0:	f002 f916 	bl	8003920 <HAL_TIM_PWM_ConfigChannel>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80016fa:	f000 fa0b 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016fe:	4803      	ldr	r0, [pc, #12]	; (800170c <MX_TIM3_Init+0xe8>)
 8001700:	f000 fa7a 	bl	8001bf8 <HAL_TIM_MspPostInit>

}
 8001704:	bf00      	nop
 8001706:	3738      	adds	r7, #56	; 0x38
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000298 	.word	0x20000298
 8001710:	40000400 	.word	0x40000400

08001714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <MX_USART2_UART_Init+0x4c>)
 800171a:	4a12      	ldr	r2, [pc, #72]	; (8001764 <MX_USART2_UART_Init+0x50>)
 800171c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <MX_USART2_UART_Init+0x4c>)
 8001720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <MX_USART2_UART_Init+0x4c>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <MX_USART2_UART_Init+0x4c>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <MX_USART2_UART_Init+0x4c>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <MX_USART2_UART_Init+0x4c>)
 800173a:	220c      	movs	r2, #12
 800173c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <MX_USART2_UART_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <MX_USART2_UART_Init+0x4c>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_USART2_UART_Init+0x4c>)
 800174c:	f002 fd86 	bl	800425c <HAL_UART_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001756:	f000 f9dd 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200002e0 	.word	0x200002e0
 8001764:	40004400 	.word	0x40004400

08001768 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_USART6_UART_Init+0x4c>)
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <MX_USART6_UART_Init+0x50>)
 8001770:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <MX_USART6_UART_Init+0x4c>)
 8001774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001778:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_USART6_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_USART6_UART_Init+0x4c>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_USART6_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_USART6_UART_Init+0x4c>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_USART6_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_USART6_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_USART6_UART_Init+0x4c>)
 80017a0:	f002 fd5c 	bl	800425c <HAL_UART_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017aa:	f000 f9b3 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000324 	.word	0x20000324
 80017b8:	40011400 	.word	0x40011400

080017bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	4b38      	ldr	r3, [pc, #224]	; (80018b8 <MX_GPIO_Init+0xfc>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a37      	ldr	r2, [pc, #220]	; (80018b8 <MX_GPIO_Init+0xfc>)
 80017dc:	f043 0304 	orr.w	r3, r3, #4
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b35      	ldr	r3, [pc, #212]	; (80018b8 <MX_GPIO_Init+0xfc>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <MX_GPIO_Init+0xfc>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a30      	ldr	r2, [pc, #192]	; (80018b8 <MX_GPIO_Init+0xfc>)
 80017f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <MX_GPIO_Init+0xfc>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <MX_GPIO_Init+0xfc>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a29      	ldr	r2, [pc, #164]	; (80018b8 <MX_GPIO_Init+0xfc>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <MX_GPIO_Init+0xfc>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <MX_GPIO_Init+0xfc>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a22      	ldr	r2, [pc, #136]	; (80018b8 <MX_GPIO_Init+0xfc>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <MX_GPIO_Init+0xfc>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001842:	2200      	movs	r2, #0
 8001844:	2120      	movs	r1, #32
 8001846:	481d      	ldr	r0, [pc, #116]	; (80018bc <MX_GPIO_Init+0x100>)
 8001848:	f001 fade 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800184c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001852:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	4817      	ldr	r0, [pc, #92]	; (80018c0 <MX_GPIO_Init+0x104>)
 8001864:	f001 f94c 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001868:	2320      	movs	r3, #32
 800186a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	480f      	ldr	r0, [pc, #60]	; (80018bc <MX_GPIO_Init+0x100>)
 8001880:	f001 f93e 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188a:	2300      	movs	r3, #0
 800188c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800188e:	2302      	movs	r3, #2
 8001890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	480a      	ldr	r0, [pc, #40]	; (80018c4 <MX_GPIO_Init+0x108>)
 800189a:	f001 f931 	bl	8002b00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	2028      	movs	r0, #40	; 0x28
 80018a4:	f001 f8f5 	bl	8002a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018a8:	2028      	movs	r0, #40	; 0x28
 80018aa:	f001 f90e 	bl	8002aca <HAL_NVIC_EnableIRQ>

}
 80018ae:	bf00      	nop
 80018b0:	3728      	adds	r7, #40	; 0x28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020000 	.word	0x40020000
 80018c0:	40020800 	.word	0x40020800
 80018c4:	40020400 	.word	0x40020400

080018c8 <CPUTemprdINIT>:

/* USER CODE BEGIN 4 */
void CPUTemprdINIT(){
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
	ADCChannell[0].Confix.Channel = ADC_CHANNEL_TEMPSENSOR;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <CPUTemprdINIT+0x20>)
 80018ce:	4a07      	ldr	r2, [pc, #28]	; (80018ec <CPUTemprdINIT+0x24>)
 80018d0:	601a      	str	r2, [r3, #0]
	ADCChannell[0].Confix.Rank = 1;
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <CPUTemprdINIT+0x20>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	605a      	str	r2, [r3, #4]
	ADCChannell[0].Confix.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <CPUTemprdINIT+0x20>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	20000368 	.word	0x20000368
 80018ec:	10000012 	.word	0x10000012

080018f0 <CPUTempread>:

uint16_t CPUTempread(){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
	uint16_t tmpbf;

	HAL_ADC_ConfigChannel(&hadc1, &ADCChannell[0].Confix); //
 80018f6:	490d      	ldr	r1, [pc, #52]	; (800192c <CPUTempread+0x3c>)
 80018f8:	480d      	ldr	r0, [pc, #52]	; (8001930 <CPUTempread+0x40>)
 80018fa:	f000 fdc1 	bl	8002480 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&hadc1);
 80018fe:	480c      	ldr	r0, [pc, #48]	; (8001930 <CPUTempread+0x40>)
 8001900:	f000 fc3e 	bl	8002180 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1, 10)==HAL_OK) //10mSec timeout
 8001904:	210a      	movs	r1, #10
 8001906:	480a      	ldr	r0, [pc, #40]	; (8001930 <CPUTempread+0x40>)
 8001908:	f000 fd21 	bl	800234e <HAL_ADC_PollForConversion>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d104      	bne.n	800191c <CPUTempread+0x2c>
		{
			//ReadData to confix channel
			tmpbf = HAL_ADC_GetValue(&hadc1);
 8001912:	4807      	ldr	r0, [pc, #28]	; (8001930 <CPUTempread+0x40>)
 8001914:	f000 fda6 	bl	8002464 <HAL_ADC_GetValue>
 8001918:	4603      	mov	r3, r0
 800191a:	80fb      	strh	r3, [r7, #6]
		}

	HAL_ADC_Stop(&hadc1);
 800191c:	4804      	ldr	r0, [pc, #16]	; (8001930 <CPUTempread+0x40>)
 800191e:	f000 fce3 	bl	80022e8 <HAL_ADC_Stop>

	return tmpbf;
 8001922:	88fb      	ldrh	r3, [r7, #6]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000368 	.word	0x20000368
 8001930:	20000250 	.word	0x20000250
 8001934:	00000000 	.word	0x00000000

08001938 <ADCTVolta>:

float ADCTVolta(uint16_t btt){
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
	// convert 0-4096 ADC bit -> 0-3.3V
	return (btt /4096.0) * 3.3;
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fdf5 	bl	8000534 <__aeabi_i2d>
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <ADCTVolta+0x58>)
 8001950:	f7fe ff84 	bl	800085c <__aeabi_ddiv>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	a30a      	add	r3, pc, #40	; (adr r3, 8001988 <ADCTVolta+0x50>)
 800195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001962:	f7fe fe51 	bl	8000608 <__aeabi_dmul>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f923 	bl	8000bb8 <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	ee07 3a90 	vmov	s15, r3
}
 8001978:	eeb0 0a67 	vmov.f32	s0, s15
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	f3af 8000 	nop.w
 8001988:	66666666 	.word	0x66666666
 800198c:	400a6666 	.word	0x400a6666
 8001990:	40b00000 	.word	0x40b00000
 8001994:	00000000 	.word	0x00000000

08001998 <TempEquat>:

float TempEquat(float Vs){
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	ed87 0a01 	vstr	s0, [r7, #4]
	//Vs = V tmp read , V25= 0.76V, Avg_slope = 2.5 mV
	return ((Vs - 0.76)/(0.0025)) + 25.0; //2.5*0.001
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7fe fdd8 	bl	8000558 <__aeabi_f2d>
 80019a8:	a314      	add	r3, pc, #80	; (adr r3, 80019fc <TempEquat+0x64>)
 80019aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ae:	f7fe fc73 	bl	8000298 <__aeabi_dsub>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	a312      	add	r3, pc, #72	; (adr r3, 8001a04 <TempEquat+0x6c>)
 80019bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c0:	f7fe ff4c 	bl	800085c <__aeabi_ddiv>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <TempEquat+0x60>)
 80019d2:	f7fe fc63 	bl	800029c <__adddf3>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f7ff f8eb 	bl	8000bb8 <__aeabi_d2f>
 80019e2:	4603      	mov	r3, r0
 80019e4:	ee07 3a90 	vmov	s15, r3
}
 80019e8:	eeb0 0a67 	vmov.f32	s0, s15
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	f3af 8000 	nop.w
 80019f8:	40390000 	.word	0x40390000
 80019fc:	851eb852 	.word	0x851eb852
 8001a00:	3fe851eb 	.word	0x3fe851eb
 8001a04:	47ae147b 	.word	0x47ae147b
 8001a08:	3f647ae1 	.word	0x3f647ae1

08001a0c <Tx_UART_Verita_Packet>:
	////temp |= ((GPIO_Init->Pull) << (position * 2U));
	////GPIOx->PUPDR = temp;
}


void Tx_UART_Verita_Packet(UART_HandleTypeDef *huart, uint8_t regis,uint8_t *pdata, uint8_t size){
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b08b      	sub	sp, #44	; 0x2c
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	461a      	mov	r2, r3
 8001a18:	460b      	mov	r3, r1
 8001a1a:	72fb      	strb	r3, [r7, #11]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	72bb      	strb	r3, [r7, #10]
	 /* ----------------------- UART Verita Frame -------------------------
	  *  V R T + Addr of regis sent data + Data + chksum
	  *  0x56 0x52 0x54 0xregis ...
 	  */

	uint8_t posit = 4; // start new position
 8001a20:	2304      	movs	r3, #4
 8001a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t pack[16] = {0x56, 0x52, 0x54, regis};
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	2356      	movs	r3, #86	; 0x56
 8001a36:	753b      	strb	r3, [r7, #20]
 8001a38:	2352      	movs	r3, #82	; 0x52
 8001a3a:	757b      	strb	r3, [r7, #21]
 8001a3c:	2354      	movs	r3, #84	; 0x54
 8001a3e:	75bb      	strb	r3, [r7, #22]
 8001a40:	7afb      	ldrb	r3, [r7, #11]
 8001a42:	75fb      	strb	r3, [r7, #23]
	uint8_t chksum = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	//// add data to packet
	for(register int j = 4; j < 4 + size ;j++){
 8001a4a:	2404      	movs	r4, #4
 8001a4c:	e00f      	b.n	8001a6e <Tx_UART_Verita_Packet+0x62>
			pack[j] = pdata[j-4];
 8001a4e:	4623      	mov	r3, r4
 8001a50:	3b04      	subs	r3, #4
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	781a      	ldrb	r2, [r3, #0]
 8001a58:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8001a5c:	443b      	add	r3, r7
 8001a5e:	f803 2c14 	strb.w	r2, [r3, #-20]
			posit++;
 8001a62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a66:	3301      	adds	r3, #1
 8001a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(register int j = 4; j < 4 + size ;j++){
 8001a6c:	3401      	adds	r4, #1
 8001a6e:	7abb      	ldrb	r3, [r7, #10]
 8001a70:	3303      	adds	r3, #3
 8001a72:	429c      	cmp	r4, r3
 8001a74:	ddeb      	ble.n	8001a4e <Tx_UART_Verita_Packet+0x42>
		}
	//// Checksum generate , +4 means +3 start pack & +1 regis
	for(register int j = 3; j < size + 4;j++){
 8001a76:	2403      	movs	r4, #3
 8001a78:	e00a      	b.n	8001a90 <Tx_UART_Verita_Packet+0x84>
		chksum += pack[j];
 8001a7a:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8001a7e:	443b      	add	r3, r7
 8001a80:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001a84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a88:	4413      	add	r3, r2
 8001a8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for(register int j = 3; j < size + 4;j++){
 8001a8e:	3401      	adds	r4, #1
 8001a90:	7abb      	ldrb	r3, [r7, #10]
 8001a92:	3303      	adds	r3, #3
 8001a94:	429c      	cmp	r4, r3
 8001a96:	ddf0      	ble.n	8001a7a <Tx_UART_Verita_Packet+0x6e>
	}
	pack[posit] = ~chksum;
 8001a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a9c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001aa0:	43d2      	mvns	r2, r2
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	3328      	adds	r3, #40	; 0x28
 8001aa6:	443b      	add	r3, r7
 8001aa8:	f803 2c14 	strb.w	r2, [r3, #-20]


	HAL_UART_Transmit(huart, (uint8_t*)pack, posit+1, 60);
 8001aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	f107 0114 	add.w	r1, r7, #20
 8001aba:	233c      	movs	r3, #60	; 0x3c
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f002 fc1a 	bl	80042f6 <HAL_UART_Transmit>
}
 8001ac2:	bf00      	nop
 8001ac4:	372c      	adds	r7, #44	; 0x2c
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd90      	pop	{r4, r7, pc}
	...

08001acc <HAL_GPIO_EXTI_Callback>:
//// ----------------GPIO_EXTI_Callback-----------------------------------------

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001adc:	d10f      	bne.n	8001afe <HAL_GPIO_EXTI_Callback+0x32>
		bluecounter++;
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_GPIO_EXTI_Callback+0x40>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_GPIO_EXTI_Callback+0x40>)
 8001ae8:	701a      	strb	r2, [r3, #0]
		bluecounter%=4;
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <HAL_GPIO_EXTI_Callback+0x40>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_GPIO_EXTI_Callback+0x40>)
 8001af6:	701a      	strb	r2, [r3, #0]

		flag_gpioselftest = 1;
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x44>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
		}
#endif


		}
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000384 	.word	0x20000384
 8001b10:	200003b4 	.word	0x200003b4

08001b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b18:	b672      	cpsid	i
}
 8001b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <Error_Handler+0x8>
	...

08001b20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <HAL_MspInit+0x4c>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	4a0f      	ldr	r2, [pc, #60]	; (8001b6c <HAL_MspInit+0x4c>)
 8001b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b34:	6453      	str	r3, [r2, #68]	; 0x44
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <HAL_MspInit+0x4c>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_MspInit+0x4c>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	4a08      	ldr	r2, [pc, #32]	; (8001b6c <HAL_MspInit+0x4c>)
 8001b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_MspInit+0x4c>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b5e:	2007      	movs	r0, #7
 8001b60:	f000 ff8c 	bl	8002a7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40023800 	.word	0x40023800

08001b70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <HAL_ADC_MspInit+0x3c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d10d      	bne.n	8001b9e <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <HAL_ADC_MspInit+0x40>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	4a09      	ldr	r2, [pc, #36]	; (8001bb0 <HAL_ADC_MspInit+0x40>)
 8001b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b90:	6453      	str	r3, [r2, #68]	; 0x44
 8001b92:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <HAL_ADC_MspInit+0x40>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b9e:	bf00      	nop
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40012000 	.word	0x40012000
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <HAL_TIM_Base_MspInit+0x3c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d10d      	bne.n	8001be2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_TIM_Base_MspInit+0x40>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	4a09      	ldr	r2, [pc, #36]	; (8001bf4 <HAL_TIM_Base_MspInit+0x40>)
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <HAL_TIM_Base_MspInit+0x40>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40000400 	.word	0x40000400
 8001bf4:	40023800 	.word	0x40023800

08001bf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <HAL_TIM_MspPostInit+0x68>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d11d      	bne.n	8001c56 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_TIM_MspPostInit+0x6c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <HAL_TIM_MspPostInit+0x6c>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <HAL_TIM_MspPostInit+0x6c>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c36:	2310      	movs	r3, #16
 8001c38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c46:	2302      	movs	r3, #2
 8001c48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <HAL_TIM_MspPostInit+0x70>)
 8001c52:	f000 ff55 	bl	8002b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c56:	bf00      	nop
 8001c58:	3720      	adds	r7, #32
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40000400 	.word	0x40000400
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020400 	.word	0x40020400

08001c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08c      	sub	sp, #48	; 0x30
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a32      	ldr	r2, [pc, #200]	; (8001d54 <HAL_UART_MspInit+0xe8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d12c      	bne.n	8001ce8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	4b31      	ldr	r3, [pc, #196]	; (8001d58 <HAL_UART_MspInit+0xec>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	4a30      	ldr	r2, [pc, #192]	; (8001d58 <HAL_UART_MspInit+0xec>)
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9e:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <HAL_UART_MspInit+0xec>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <HAL_UART_MspInit+0xec>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a29      	ldr	r2, [pc, #164]	; (8001d58 <HAL_UART_MspInit+0xec>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b27      	ldr	r3, [pc, #156]	; (8001d58 <HAL_UART_MspInit+0xec>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cc6:	230c      	movs	r3, #12
 8001cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cd6:	2307      	movs	r3, #7
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	4619      	mov	r1, r3
 8001ce0:	481e      	ldr	r0, [pc, #120]	; (8001d5c <HAL_UART_MspInit+0xf0>)
 8001ce2:	f000 ff0d 	bl	8002b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ce6:	e031      	b.n	8001d4c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <HAL_UART_MspInit+0xf4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d12c      	bne.n	8001d4c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <HAL_UART_MspInit+0xec>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	4a17      	ldr	r2, [pc, #92]	; (8001d58 <HAL_UART_MspInit+0xec>)
 8001cfc:	f043 0320 	orr.w	r3, r3, #32
 8001d00:	6453      	str	r3, [r2, #68]	; 0x44
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <HAL_UART_MspInit+0xec>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f003 0320 	and.w	r3, r3, #32
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_UART_MspInit+0xec>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a10      	ldr	r2, [pc, #64]	; (8001d58 <HAL_UART_MspInit+0xec>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_UART_MspInit+0xec>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d3c:	2308      	movs	r3, #8
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4619      	mov	r1, r3
 8001d46:	4805      	ldr	r0, [pc, #20]	; (8001d5c <HAL_UART_MspInit+0xf0>)
 8001d48:	f000 feda 	bl	8002b00 <HAL_GPIO_Init>
}
 8001d4c:	bf00      	nop
 8001d4e:	3730      	adds	r7, #48	; 0x30
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40004400 	.word	0x40004400
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020000 	.word	0x40020000
 8001d60:	40011400 	.word	0x40011400

08001d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <NMI_Handler+0x4>

08001d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <HardFault_Handler+0x4>

08001d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <MemManage_Handler+0x4>

08001d76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <BusFault_Handler+0x4>

08001d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <UsageFault_Handler+0x4>

08001d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db0:	f000 f95e 	bl	8002070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001dbc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001dc0:	f001 f856 	bl	8002e70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
	return 1;
 8001dcc:	2301      	movs	r3, #1
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <_kill>:

int _kill(int pid, int sig)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001de2:	f002 fdfd 	bl	80049e0 <__errno>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2216      	movs	r2, #22
 8001dea:	601a      	str	r2, [r3, #0]
	return -1;
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <_exit>:

void _exit (int status)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ffe7 	bl	8001dd8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e0a:	e7fe      	b.n	8001e0a <_exit+0x12>

08001e0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	e00a      	b.n	8001e34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e1e:	f3af 8000 	nop.w
 8001e22:	4601      	mov	r1, r0
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	60ba      	str	r2, [r7, #8]
 8001e2a:	b2ca      	uxtb	r2, r1
 8001e2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	3301      	adds	r3, #1
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	dbf0      	blt.n	8001e1e <_read+0x12>
	}

return len;
 8001e3c:	687b      	ldr	r3, [r7, #4]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	60f8      	str	r0, [r7, #12]
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	e009      	b.n	8001e6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	60ba      	str	r2, [r7, #8]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	dbf1      	blt.n	8001e58 <_write+0x12>
	}
	return len;
 8001e74:	687b      	ldr	r3, [r7, #4]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <_close>:

int _close(int file)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
	return -1;
 8001e86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ea6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <_isatty>:

int _isatty(int file)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
	return 1;
 8001ebe:	2301      	movs	r3, #1
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef0:	4a14      	ldr	r2, [pc, #80]	; (8001f44 <_sbrk+0x5c>)
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <_sbrk+0x60>)
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <_sbrk+0x64>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d102      	bne.n	8001f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <_sbrk+0x64>)
 8001f06:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <_sbrk+0x68>)
 8001f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <_sbrk+0x64>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d207      	bcs.n	8001f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f18:	f002 fd62 	bl	80049e0 <__errno>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	220c      	movs	r2, #12
 8001f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
 8001f26:	e009      	b.n	8001f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <_sbrk+0x64>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f2e:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <_sbrk+0x64>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	4a05      	ldr	r2, [pc, #20]	; (8001f4c <_sbrk+0x64>)
 8001f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20020000 	.word	0x20020000
 8001f48:	00000400 	.word	0x00000400
 8001f4c:	2000041c 	.word	0x2000041c
 8001f50:	20000438 	.word	0x20000438

08001f54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <SystemInit+0x20>)
 8001f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5e:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <SystemInit+0x20>)
 8001f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f7c:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f7e:	490e      	ldr	r1, [pc, #56]	; (8001fb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f80:	4a0e      	ldr	r2, [pc, #56]	; (8001fbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f84:	e002      	b.n	8001f8c <LoopCopyDataInit>

08001f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8a:	3304      	adds	r3, #4

08001f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f90:	d3f9      	bcc.n	8001f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f92:	4a0b      	ldr	r2, [pc, #44]	; (8001fc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f94:	4c0b      	ldr	r4, [pc, #44]	; (8001fc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f98:	e001      	b.n	8001f9e <LoopFillZerobss>

08001f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f9c:	3204      	adds	r2, #4

08001f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa0:	d3fb      	bcc.n	8001f9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fa2:	f7ff ffd7 	bl	8001f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fa6:	f002 fd21 	bl	80049ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001faa:	f7ff f991 	bl	80012d0 <main>
  bx  lr    
 8001fae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb8:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8001fbc:	08007c7c 	.word	0x08007c7c
  ldr r2, =_sbss
 8001fc0:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8001fc4:	20000434 	.word	0x20000434

08001fc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc8:	e7fe      	b.n	8001fc8 <ADC_IRQHandler>
	...

08001fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fd0:	4b0e      	ldr	r3, [pc, #56]	; (800200c <HAL_Init+0x40>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0d      	ldr	r2, [pc, #52]	; (800200c <HAL_Init+0x40>)
 8001fd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_Init+0x40>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	; (800200c <HAL_Init+0x40>)
 8001fe2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fe6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <HAL_Init+0x40>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a07      	ldr	r2, [pc, #28]	; (800200c <HAL_Init+0x40>)
 8001fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff4:	2003      	movs	r0, #3
 8001ff6:	f000 fd41 	bl	8002a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f000 f808 	bl	8002010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002000:	f7ff fd8e 	bl	8001b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023c00 	.word	0x40023c00

08002010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_InitTick+0x54>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_InitTick+0x58>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4619      	mov	r1, r3
 8002022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002026:	fbb3 f3f1 	udiv	r3, r3, r1
 800202a:	fbb2 f3f3 	udiv	r3, r2, r3
 800202e:	4618      	mov	r0, r3
 8002030:	f000 fd59 	bl	8002ae6 <HAL_SYSTICK_Config>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e00e      	b.n	800205c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b0f      	cmp	r3, #15
 8002042:	d80a      	bhi.n	800205a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002044:	2200      	movs	r2, #0
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	f04f 30ff 	mov.w	r0, #4294967295
 800204c:	f000 fd21 	bl	8002a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002050:	4a06      	ldr	r2, [pc, #24]	; (800206c <HAL_InitTick+0x5c>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	e000      	b.n	800205c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000058 	.word	0x20000058
 8002068:	20000060 	.word	0x20000060
 800206c:	2000005c 	.word	0x2000005c

08002070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_IncTick+0x20>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_IncTick+0x24>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4413      	add	r3, r2
 8002080:	4a04      	ldr	r2, [pc, #16]	; (8002094 <HAL_IncTick+0x24>)
 8002082:	6013      	str	r3, [r2, #0]
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000060 	.word	0x20000060
 8002094:	20000420 	.word	0x20000420

08002098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return uwTick;
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <HAL_GetTick+0x14>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000420 	.word	0x20000420

080020b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b8:	f7ff ffee 	bl	8002098 <HAL_GetTick>
 80020bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d005      	beq.n	80020d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_Delay+0x44>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4413      	add	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020d6:	bf00      	nop
 80020d8:	f7ff ffde 	bl	8002098 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d8f7      	bhi.n	80020d8 <HAL_Delay+0x28>
  {
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000060 	.word	0x20000060

080020f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e033      	b.n	8002176 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d109      	bne.n	800212a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff fd2a 	bl	8001b70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	2b00      	cmp	r3, #0
 8002134:	d118      	bne.n	8002168 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800213e:	f023 0302 	bic.w	r3, r3, #2
 8002142:	f043 0202 	orr.w	r2, r3, #2
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 faca 	bl	80026e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f023 0303 	bic.w	r3, r3, #3
 800215e:	f043 0201 	orr.w	r2, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	641a      	str	r2, [r3, #64]	; 0x40
 8002166:	e001      	b.n	800216c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002174:	7bfb      	ldrb	r3, [r7, #15]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_ADC_Start+0x1a>
 8002196:	2302      	movs	r3, #2
 8002198:	e097      	b.n	80022ca <HAL_ADC_Start+0x14a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d018      	beq.n	80021e2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021c0:	4b45      	ldr	r3, [pc, #276]	; (80022d8 <HAL_ADC_Start+0x158>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a45      	ldr	r2, [pc, #276]	; (80022dc <HAL_ADC_Start+0x15c>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	0c9a      	lsrs	r2, r3, #18
 80021cc:	4613      	mov	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4413      	add	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80021d4:	e002      	b.n	80021dc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	3b01      	subs	r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f9      	bne.n	80021d6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d15f      	bne.n	80022b0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220e:	2b00      	cmp	r3, #0
 8002210:	d007      	beq.n	8002222 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800221a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800222a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800222e:	d106      	bne.n	800223e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002234:	f023 0206 	bic.w	r2, r3, #6
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	645a      	str	r2, [r3, #68]	; 0x44
 800223c:	e002      	b.n	8002244 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800224c:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <HAL_ADC_Start+0x160>)
 800224e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002258:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10f      	bne.n	8002286 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d129      	bne.n	80022c8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	e020      	b.n	80022c8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a16      	ldr	r2, [pc, #88]	; (80022e4 <HAL_ADC_Start+0x164>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d11b      	bne.n	80022c8 <HAL_ADC_Start+0x148>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d114      	bne.n	80022c8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	e00b      	b.n	80022c8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	f043 0210 	orr.w	r2, r3, #16
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	f043 0201 	orr.w	r2, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000058 	.word	0x20000058
 80022dc:	431bde83 	.word	0x431bde83
 80022e0:	40012300 	.word	0x40012300
 80022e4:	40012000 	.word	0x40012000

080022e8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_Stop+0x16>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e021      	b.n	8002342 <HAL_ADC_Stop+0x5a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0201 	bic.w	r2, r2, #1
 8002314:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d109      	bne.n	8002338 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	f043 0201 	orr.w	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800236a:	d113      	bne.n	8002394 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800237a:	d10b      	bne.n	8002394 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f043 0220 	orr.w	r2, r3, #32
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e063      	b.n	800245c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002394:	f7ff fe80 	bl	8002098 <HAL_GetTick>
 8002398:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800239a:	e021      	b.n	80023e0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a2:	d01d      	beq.n	80023e0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d007      	beq.n	80023ba <HAL_ADC_PollForConversion+0x6c>
 80023aa:	f7ff fe75 	bl	8002098 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d212      	bcs.n	80023e0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d00b      	beq.n	80023e0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	f043 0204 	orr.w	r2, r3, #4
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e03d      	b.n	800245c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d1d6      	bne.n	800239c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f06f 0212 	mvn.w	r2, #18
 80023f6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d123      	bne.n	800245a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002416:	2b00      	cmp	r3, #0
 8002418:	d11f      	bne.n	800245a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002424:	2b00      	cmp	r3, #0
 8002426:	d006      	beq.n	8002436 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002432:	2b00      	cmp	r3, #0
 8002434:	d111      	bne.n	800245a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d105      	bne.n	800245a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f043 0201 	orr.w	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_ADC_ConfigChannel+0x1c>
 8002498:	2302      	movs	r3, #2
 800249a:	e113      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x244>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b09      	cmp	r3, #9
 80024aa:	d925      	bls.n	80024f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68d9      	ldr	r1, [r3, #12]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	4613      	mov	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4413      	add	r3, r2
 80024c0:	3b1e      	subs	r3, #30
 80024c2:	2207      	movs	r2, #7
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43da      	mvns	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	400a      	ands	r2, r1
 80024d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68d9      	ldr	r1, [r3, #12]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	4618      	mov	r0, r3
 80024e4:	4603      	mov	r3, r0
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4403      	add	r3, r0
 80024ea:	3b1e      	subs	r3, #30
 80024ec:	409a      	lsls	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	e022      	b.n	800253e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6919      	ldr	r1, [r3, #16]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	2207      	movs	r2, #7
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43da      	mvns	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	400a      	ands	r2, r1
 800251a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6919      	ldr	r1, [r3, #16]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	4618      	mov	r0, r3
 800252e:	4603      	mov	r3, r0
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4403      	add	r3, r0
 8002534:	409a      	lsls	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b06      	cmp	r3, #6
 8002544:	d824      	bhi.n	8002590 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	3b05      	subs	r3, #5
 8002558:	221f      	movs	r2, #31
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	400a      	ands	r2, r1
 8002566:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	4618      	mov	r0, r3
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	3b05      	subs	r3, #5
 8002582:	fa00 f203 	lsl.w	r2, r0, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	635a      	str	r2, [r3, #52]	; 0x34
 800258e:	e04c      	b.n	800262a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b0c      	cmp	r3, #12
 8002596:	d824      	bhi.n	80025e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	3b23      	subs	r3, #35	; 0x23
 80025aa:	221f      	movs	r2, #31
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43da      	mvns	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	400a      	ands	r2, r1
 80025b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	4618      	mov	r0, r3
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	3b23      	subs	r3, #35	; 0x23
 80025d4:	fa00 f203 	lsl.w	r2, r0, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	631a      	str	r2, [r3, #48]	; 0x30
 80025e0:	e023      	b.n	800262a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	3b41      	subs	r3, #65	; 0x41
 80025f4:	221f      	movs	r2, #31
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	400a      	ands	r2, r1
 8002602:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	4618      	mov	r0, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	3b41      	subs	r3, #65	; 0x41
 800261e:	fa00 f203 	lsl.w	r2, r0, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800262a:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <HAL_ADC_ConfigChannel+0x250>)
 800262c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a28      	ldr	r2, [pc, #160]	; (80026d4 <HAL_ADC_ConfigChannel+0x254>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d10f      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1d8>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b12      	cmp	r3, #18
 800263e:	d10b      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1d      	ldr	r2, [pc, #116]	; (80026d4 <HAL_ADC_ConfigChannel+0x254>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d12b      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x23a>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <HAL_ADC_ConfigChannel+0x258>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d003      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x1f4>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b11      	cmp	r3, #17
 8002672:	d122      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a11      	ldr	r2, [pc, #68]	; (80026d8 <HAL_ADC_ConfigChannel+0x258>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d111      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002696:	4b11      	ldr	r3, [pc, #68]	; (80026dc <HAL_ADC_ConfigChannel+0x25c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a11      	ldr	r2, [pc, #68]	; (80026e0 <HAL_ADC_ConfigChannel+0x260>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	0c9a      	lsrs	r2, r3, #18
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026ac:	e002      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f9      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	40012300 	.word	0x40012300
 80026d4:	40012000 	.word	0x40012000
 80026d8:	10000012 	.word	0x10000012
 80026dc:	20000058 	.word	0x20000058
 80026e0:	431bde83 	.word	0x431bde83

080026e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ec:	4b79      	ldr	r3, [pc, #484]	; (80028d4 <ADC_Init+0x1f0>)
 80026ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	431a      	orrs	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002718:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	021a      	lsls	r2, r3, #8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800273c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800275e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6899      	ldr	r1, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	4a58      	ldr	r2, [pc, #352]	; (80028d8 <ADC_Init+0x1f4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d022      	beq.n	80027c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800278a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6899      	ldr	r1, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6899      	ldr	r1, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	e00f      	b.n	80027e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0202 	bic.w	r2, r2, #2
 80027f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6899      	ldr	r1, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7e1b      	ldrb	r3, [r3, #24]
 80027fc:	005a      	lsls	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01b      	beq.n	8002848 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800281e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800282e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	3b01      	subs	r3, #1
 800283c:	035a      	lsls	r2, r3, #13
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	e007      	b.n	8002858 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002856:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	3b01      	subs	r3, #1
 8002874:	051a      	lsls	r2, r3, #20
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800288c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6899      	ldr	r1, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800289a:	025a      	lsls	r2, r3, #9
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6899      	ldr	r1, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	029a      	lsls	r2, r3, #10
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	609a      	str	r2, [r3, #8]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	40012300 	.word	0x40012300
 80028d8:	0f000001 	.word	0x0f000001

080028dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <__NVIC_SetPriorityGrouping+0x44>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028f8:	4013      	ands	r3, r2
 80028fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800290c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800290e:	4a04      	ldr	r2, [pc, #16]	; (8002920 <__NVIC_SetPriorityGrouping+0x44>)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	60d3      	str	r3, [r2, #12]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <__NVIC_GetPriorityGrouping+0x18>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	0a1b      	lsrs	r3, r3, #8
 800292e:	f003 0307 	and.w	r3, r3, #7
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	2b00      	cmp	r3, #0
 8002950:	db0b      	blt.n	800296a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	f003 021f 	and.w	r2, r3, #31
 8002958:	4907      	ldr	r1, [pc, #28]	; (8002978 <__NVIC_EnableIRQ+0x38>)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	2001      	movs	r0, #1
 8002962:	fa00 f202 	lsl.w	r2, r0, r2
 8002966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000e100 	.word	0xe000e100

0800297c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	6039      	str	r1, [r7, #0]
 8002986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298c:	2b00      	cmp	r3, #0
 800298e:	db0a      	blt.n	80029a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	b2da      	uxtb	r2, r3
 8002994:	490c      	ldr	r1, [pc, #48]	; (80029c8 <__NVIC_SetPriority+0x4c>)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	0112      	lsls	r2, r2, #4
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	440b      	add	r3, r1
 80029a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a4:	e00a      	b.n	80029bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4908      	ldr	r1, [pc, #32]	; (80029cc <__NVIC_SetPriority+0x50>)
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	3b04      	subs	r3, #4
 80029b4:	0112      	lsls	r2, r2, #4
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	440b      	add	r3, r1
 80029ba:	761a      	strb	r2, [r3, #24]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000e100 	.word	0xe000e100
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b089      	sub	sp, #36	; 0x24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f1c3 0307 	rsb	r3, r3, #7
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	bf28      	it	cs
 80029ee:	2304      	movcs	r3, #4
 80029f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3304      	adds	r3, #4
 80029f6:	2b06      	cmp	r3, #6
 80029f8:	d902      	bls.n	8002a00 <NVIC_EncodePriority+0x30>
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3b03      	subs	r3, #3
 80029fe:	e000      	b.n	8002a02 <NVIC_EncodePriority+0x32>
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	f04f 32ff 	mov.w	r2, #4294967295
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	401a      	ands	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a18:	f04f 31ff 	mov.w	r1, #4294967295
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	43d9      	mvns	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a28:	4313      	orrs	r3, r2
         );
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3724      	adds	r7, #36	; 0x24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a48:	d301      	bcc.n	8002a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00f      	b.n	8002a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <SysTick_Config+0x40>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a56:	210f      	movs	r1, #15
 8002a58:	f04f 30ff 	mov.w	r0, #4294967295
 8002a5c:	f7ff ff8e 	bl	800297c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <SysTick_Config+0x40>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a66:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <SysTick_Config+0x40>)
 8002a68:	2207      	movs	r2, #7
 8002a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	e000e010 	.word	0xe000e010

08002a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff ff29 	bl	80028dc <__NVIC_SetPriorityGrouping>
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b086      	sub	sp, #24
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa4:	f7ff ff3e 	bl	8002924 <__NVIC_GetPriorityGrouping>
 8002aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	6978      	ldr	r0, [r7, #20]
 8002ab0:	f7ff ff8e 	bl	80029d0 <NVIC_EncodePriority>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff5d 	bl	800297c <__NVIC_SetPriority>
}
 8002ac2:	bf00      	nop
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ff31 	bl	8002940 <__NVIC_EnableIRQ>
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff ffa2 	bl	8002a38 <SysTick_Config>
 8002af4:	4603      	mov	r3, r0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b089      	sub	sp, #36	; 0x24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	e159      	b.n	8002dd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	f040 8148 	bne.w	8002dca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d005      	beq.n	8002b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d130      	bne.n	8002bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b88:	2201      	movs	r2, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 0201 	and.w	r2, r3, #1
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d017      	beq.n	8002bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	2203      	movs	r2, #3
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d123      	bne.n	8002c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	08da      	lsrs	r2, r3, #3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3208      	adds	r2, #8
 8002c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	220f      	movs	r2, #15
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	08da      	lsrs	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3208      	adds	r2, #8
 8002c3e:	69b9      	ldr	r1, [r7, #24]
 8002c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	2203      	movs	r2, #3
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0203 	and.w	r2, r3, #3
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80a2 	beq.w	8002dca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	4b57      	ldr	r3, [pc, #348]	; (8002de8 <HAL_GPIO_Init+0x2e8>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	4a56      	ldr	r2, [pc, #344]	; (8002de8 <HAL_GPIO_Init+0x2e8>)
 8002c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c94:	6453      	str	r3, [r2, #68]	; 0x44
 8002c96:	4b54      	ldr	r3, [pc, #336]	; (8002de8 <HAL_GPIO_Init+0x2e8>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ca2:	4a52      	ldr	r2, [pc, #328]	; (8002dec <HAL_GPIO_Init+0x2ec>)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	3302      	adds	r3, #2
 8002caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	220f      	movs	r2, #15
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a49      	ldr	r2, [pc, #292]	; (8002df0 <HAL_GPIO_Init+0x2f0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d019      	beq.n	8002d02 <HAL_GPIO_Init+0x202>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a48      	ldr	r2, [pc, #288]	; (8002df4 <HAL_GPIO_Init+0x2f4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_GPIO_Init+0x1fe>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a47      	ldr	r2, [pc, #284]	; (8002df8 <HAL_GPIO_Init+0x2f8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <HAL_GPIO_Init+0x1fa>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a46      	ldr	r2, [pc, #280]	; (8002dfc <HAL_GPIO_Init+0x2fc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <HAL_GPIO_Init+0x1f6>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a45      	ldr	r2, [pc, #276]	; (8002e00 <HAL_GPIO_Init+0x300>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_GPIO_Init+0x1f2>
 8002cee:	2304      	movs	r3, #4
 8002cf0:	e008      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002cf2:	2307      	movs	r3, #7
 8002cf4:	e006      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e004      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e002      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002d02:	2300      	movs	r3, #0
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	f002 0203 	and.w	r2, r2, #3
 8002d0a:	0092      	lsls	r2, r2, #2
 8002d0c:	4093      	lsls	r3, r2
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d14:	4935      	ldr	r1, [pc, #212]	; (8002dec <HAL_GPIO_Init+0x2ec>)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d22:	4b38      	ldr	r3, [pc, #224]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d46:	4a2f      	ldr	r2, [pc, #188]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d4c:	4b2d      	ldr	r3, [pc, #180]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d70:	4a24      	ldr	r2, [pc, #144]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d76:	4b23      	ldr	r3, [pc, #140]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d9a:	4a1a      	ldr	r2, [pc, #104]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002da0:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dc4:	4a0f      	ldr	r2, [pc, #60]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	2b0f      	cmp	r3, #15
 8002dd4:	f67f aea2 	bls.w	8002b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3724      	adds	r7, #36	; 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40013800 	.word	0x40013800
 8002df0:	40020000 	.word	0x40020000
 8002df4:	40020400 	.word	0x40020400
 8002df8:	40020800 	.word	0x40020800
 8002dfc:	40020c00 	.word	0x40020c00
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40013c00 	.word	0x40013c00

08002e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
 8002e14:	4613      	mov	r3, r2
 8002e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e18:	787b      	ldrb	r3, [r7, #1]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e1e:	887a      	ldrh	r2, [r7, #2]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e24:	e003      	b.n	8002e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e26:	887b      	ldrh	r3, [r7, #2]
 8002e28:	041a      	lsls	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	619a      	str	r2, [r3, #24]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e4c:	887a      	ldrh	r2, [r7, #2]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4013      	ands	r3, r2
 8002e52:	041a      	lsls	r2, r3, #16
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	43d9      	mvns	r1, r3
 8002e58:	887b      	ldrh	r3, [r7, #2]
 8002e5a:	400b      	ands	r3, r1
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	619a      	str	r2, [r3, #24]
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e7a:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d006      	beq.n	8002e94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e86:	4a05      	ldr	r2, [pc, #20]	; (8002e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e88:	88fb      	ldrh	r3, [r7, #6]
 8002e8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe fe1c 	bl	8001acc <HAL_GPIO_EXTI_Callback>
  }
}
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40013c00 	.word	0x40013c00

08002ea0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e267      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d075      	beq.n	8002faa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ebe:	4b88      	ldr	r3, [pc, #544]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d00c      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eca:	4b85      	ldr	r3, [pc, #532]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d112      	bne.n	8002efc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ed6:	4b82      	ldr	r3, [pc, #520]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ee2:	d10b      	bne.n	8002efc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee4:	4b7e      	ldr	r3, [pc, #504]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d05b      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x108>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d157      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e242      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f04:	d106      	bne.n	8002f14 <HAL_RCC_OscConfig+0x74>
 8002f06:	4b76      	ldr	r3, [pc, #472]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a75      	ldr	r2, [pc, #468]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e01d      	b.n	8002f50 <HAL_RCC_OscConfig+0xb0>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f1c:	d10c      	bne.n	8002f38 <HAL_RCC_OscConfig+0x98>
 8002f1e:	4b70      	ldr	r3, [pc, #448]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a6f      	ldr	r2, [pc, #444]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	4b6d      	ldr	r3, [pc, #436]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a6c      	ldr	r2, [pc, #432]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	e00b      	b.n	8002f50 <HAL_RCC_OscConfig+0xb0>
 8002f38:	4b69      	ldr	r3, [pc, #420]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a68      	ldr	r2, [pc, #416]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	4b66      	ldr	r3, [pc, #408]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a65      	ldr	r2, [pc, #404]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d013      	beq.n	8002f80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7ff f89e 	bl	8002098 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f60:	f7ff f89a 	bl	8002098 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b64      	cmp	r3, #100	; 0x64
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e207      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	4b5b      	ldr	r3, [pc, #364]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0xc0>
 8002f7e:	e014      	b.n	8002faa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f80:	f7ff f88a 	bl	8002098 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f88:	f7ff f886 	bl	8002098 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	; 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e1f3      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9a:	4b51      	ldr	r3, [pc, #324]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0xe8>
 8002fa6:	e000      	b.n	8002faa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d063      	beq.n	800307e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fb6:	4b4a      	ldr	r3, [pc, #296]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00b      	beq.n	8002fda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fc2:	4b47      	ldr	r3, [pc, #284]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d11c      	bne.n	8003008 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fce:	4b44      	ldr	r3, [pc, #272]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d116      	bne.n	8003008 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fda:	4b41      	ldr	r3, [pc, #260]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d005      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x152>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d001      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e1c7      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff2:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4937      	ldr	r1, [pc, #220]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8003002:	4313      	orrs	r3, r2
 8003004:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003006:	e03a      	b.n	800307e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d020      	beq.n	8003052 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003010:	4b34      	ldr	r3, [pc, #208]	; (80030e4 <HAL_RCC_OscConfig+0x244>)
 8003012:	2201      	movs	r2, #1
 8003014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003016:	f7ff f83f 	bl	8002098 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800301e:	f7ff f83b 	bl	8002098 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e1a8      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003030:	4b2b      	ldr	r3, [pc, #172]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0f0      	beq.n	800301e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303c:	4b28      	ldr	r3, [pc, #160]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4925      	ldr	r1, [pc, #148]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]
 8003050:	e015      	b.n	800307e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003052:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <HAL_RCC_OscConfig+0x244>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7ff f81e 	bl	8002098 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003060:	f7ff f81a 	bl	8002098 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e187      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003072:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d036      	beq.n	80030f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d016      	beq.n	80030c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003092:	4b15      	ldr	r3, [pc, #84]	; (80030e8 <HAL_RCC_OscConfig+0x248>)
 8003094:	2201      	movs	r2, #1
 8003096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003098:	f7fe fffe 	bl	8002098 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030a0:	f7fe fffa 	bl	8002098 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e167      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCC_OscConfig+0x240>)
 80030b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0x200>
 80030be:	e01b      	b.n	80030f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c0:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <HAL_RCC_OscConfig+0x248>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c6:	f7fe ffe7 	bl	8002098 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030cc:	e00e      	b.n	80030ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ce:	f7fe ffe3 	bl	8002098 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d907      	bls.n	80030ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e150      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
 80030e0:	40023800 	.word	0x40023800
 80030e4:	42470000 	.word	0x42470000
 80030e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ec:	4b88      	ldr	r3, [pc, #544]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 80030ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1ea      	bne.n	80030ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 8097 	beq.w	8003234 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003106:	2300      	movs	r3, #0
 8003108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800310a:	4b81      	ldr	r3, [pc, #516]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10f      	bne.n	8003136 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	4b7d      	ldr	r3, [pc, #500]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	4a7c      	ldr	r2, [pc, #496]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 8003120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003124:	6413      	str	r3, [r2, #64]	; 0x40
 8003126:	4b7a      	ldr	r3, [pc, #488]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003132:	2301      	movs	r3, #1
 8003134:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003136:	4b77      	ldr	r3, [pc, #476]	; (8003314 <HAL_RCC_OscConfig+0x474>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313e:	2b00      	cmp	r3, #0
 8003140:	d118      	bne.n	8003174 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003142:	4b74      	ldr	r3, [pc, #464]	; (8003314 <HAL_RCC_OscConfig+0x474>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a73      	ldr	r2, [pc, #460]	; (8003314 <HAL_RCC_OscConfig+0x474>)
 8003148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314e:	f7fe ffa3 	bl	8002098 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003156:	f7fe ff9f 	bl	8002098 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e10c      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	4b6a      	ldr	r3, [pc, #424]	; (8003314 <HAL_RCC_OscConfig+0x474>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d106      	bne.n	800318a <HAL_RCC_OscConfig+0x2ea>
 800317c:	4b64      	ldr	r3, [pc, #400]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003180:	4a63      	ldr	r2, [pc, #396]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	6713      	str	r3, [r2, #112]	; 0x70
 8003188:	e01c      	b.n	80031c4 <HAL_RCC_OscConfig+0x324>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b05      	cmp	r3, #5
 8003190:	d10c      	bne.n	80031ac <HAL_RCC_OscConfig+0x30c>
 8003192:	4b5f      	ldr	r3, [pc, #380]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	4a5e      	ldr	r2, [pc, #376]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 8003198:	f043 0304 	orr.w	r3, r3, #4
 800319c:	6713      	str	r3, [r2, #112]	; 0x70
 800319e:	4b5c      	ldr	r3, [pc, #368]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	4a5b      	ldr	r2, [pc, #364]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	6713      	str	r3, [r2, #112]	; 0x70
 80031aa:	e00b      	b.n	80031c4 <HAL_RCC_OscConfig+0x324>
 80031ac:	4b58      	ldr	r3, [pc, #352]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b0:	4a57      	ldr	r2, [pc, #348]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	6713      	str	r3, [r2, #112]	; 0x70
 80031b8:	4b55      	ldr	r3, [pc, #340]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	4a54      	ldr	r2, [pc, #336]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 80031be:	f023 0304 	bic.w	r3, r3, #4
 80031c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d015      	beq.n	80031f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031cc:	f7fe ff64 	bl	8002098 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d2:	e00a      	b.n	80031ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d4:	f7fe ff60 	bl	8002098 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e0cb      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ea:	4b49      	ldr	r3, [pc, #292]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 80031ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0ee      	beq.n	80031d4 <HAL_RCC_OscConfig+0x334>
 80031f6:	e014      	b.n	8003222 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f8:	f7fe ff4e 	bl	8002098 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031fe:	e00a      	b.n	8003216 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003200:	f7fe ff4a 	bl	8002098 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f241 3288 	movw	r2, #5000	; 0x1388
 800320e:	4293      	cmp	r3, r2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e0b5      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003216:	4b3e      	ldr	r3, [pc, #248]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1ee      	bne.n	8003200 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003222:	7dfb      	ldrb	r3, [r7, #23]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d105      	bne.n	8003234 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003228:	4b39      	ldr	r3, [pc, #228]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	4a38      	ldr	r2, [pc, #224]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 800322e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003232:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80a1 	beq.w	8003380 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800323e:	4b34      	ldr	r3, [pc, #208]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b08      	cmp	r3, #8
 8003248:	d05c      	beq.n	8003304 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d141      	bne.n	80032d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003252:	4b31      	ldr	r3, [pc, #196]	; (8003318 <HAL_RCC_OscConfig+0x478>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fe ff1e 	bl	8002098 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003260:	f7fe ff1a 	bl	8002098 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e087      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003272:	4b27      	ldr	r3, [pc, #156]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69da      	ldr	r2, [r3, #28]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	019b      	lsls	r3, r3, #6
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003294:	085b      	lsrs	r3, r3, #1
 8003296:	3b01      	subs	r3, #1
 8003298:	041b      	lsls	r3, r3, #16
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	061b      	lsls	r3, r3, #24
 80032a2:	491b      	ldr	r1, [pc, #108]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a8:	4b1b      	ldr	r3, [pc, #108]	; (8003318 <HAL_RCC_OscConfig+0x478>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ae:	f7fe fef3 	bl	8002098 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b6:	f7fe feef 	bl	8002098 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e05c      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c8:	4b11      	ldr	r3, [pc, #68]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0f0      	beq.n	80032b6 <HAL_RCC_OscConfig+0x416>
 80032d4:	e054      	b.n	8003380 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d6:	4b10      	ldr	r3, [pc, #64]	; (8003318 <HAL_RCC_OscConfig+0x478>)
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032dc:	f7fe fedc 	bl	8002098 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e4:	f7fe fed8 	bl	8002098 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e045      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f6:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_RCC_OscConfig+0x470>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x444>
 8003302:	e03d      	b.n	8003380 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d107      	bne.n	800331c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e038      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
 8003310:	40023800 	.word	0x40023800
 8003314:	40007000 	.word	0x40007000
 8003318:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800331c:	4b1b      	ldr	r3, [pc, #108]	; (800338c <HAL_RCC_OscConfig+0x4ec>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d028      	beq.n	800337c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d121      	bne.n	800337c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003342:	429a      	cmp	r2, r3
 8003344:	d11a      	bne.n	800337c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800334c:	4013      	ands	r3, r2
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003352:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003354:	4293      	cmp	r3, r2
 8003356:	d111      	bne.n	800337c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	085b      	lsrs	r3, r3, #1
 8003364:	3b01      	subs	r3, #1
 8003366:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003368:	429a      	cmp	r2, r3
 800336a:	d107      	bne.n	800337c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40023800 	.word	0x40023800

08003390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0cc      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033a4:	4b68      	ldr	r3, [pc, #416]	; (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d90c      	bls.n	80033cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b2:	4b65      	ldr	r3, [pc, #404]	; (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ba:	4b63      	ldr	r3, [pc, #396]	; (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0b8      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d020      	beq.n	800341a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033e4:	4b59      	ldr	r3, [pc, #356]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	4a58      	ldr	r2, [pc, #352]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033fc:	4b53      	ldr	r3, [pc, #332]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	4a52      	ldr	r2, [pc, #328]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003408:	4b50      	ldr	r3, [pc, #320]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	494d      	ldr	r1, [pc, #308]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	4313      	orrs	r3, r2
 8003418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d044      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	4b47      	ldr	r3, [pc, #284]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d119      	bne.n	800346e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e07f      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d003      	beq.n	800344e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800344a:	2b03      	cmp	r3, #3
 800344c:	d107      	bne.n	800345e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344e:	4b3f      	ldr	r3, [pc, #252]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d109      	bne.n	800346e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e06f      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345e:	4b3b      	ldr	r3, [pc, #236]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e067      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800346e:	4b37      	ldr	r3, [pc, #220]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f023 0203 	bic.w	r2, r3, #3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4934      	ldr	r1, [pc, #208]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	4313      	orrs	r3, r2
 800347e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003480:	f7fe fe0a 	bl	8002098 <HAL_GetTick>
 8003484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003486:	e00a      	b.n	800349e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003488:	f7fe fe06 	bl	8002098 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f241 3288 	movw	r2, #5000	; 0x1388
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e04f      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349e:	4b2b      	ldr	r3, [pc, #172]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 020c 	and.w	r2, r3, #12
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d1eb      	bne.n	8003488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034b0:	4b25      	ldr	r3, [pc, #148]	; (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d20c      	bcs.n	80034d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b22      	ldr	r3, [pc, #136]	; (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	4b20      	ldr	r3, [pc, #128]	; (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e032      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e4:	4b19      	ldr	r3, [pc, #100]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4916      	ldr	r1, [pc, #88]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003502:	4b12      	ldr	r3, [pc, #72]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	490e      	ldr	r1, [pc, #56]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003516:	f000 f821 	bl	800355c <HAL_RCC_GetSysClockFreq>
 800351a:	4602      	mov	r2, r0
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	091b      	lsrs	r3, r3, #4
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	490a      	ldr	r1, [pc, #40]	; (8003550 <HAL_RCC_ClockConfig+0x1c0>)
 8003528:	5ccb      	ldrb	r3, [r1, r3]
 800352a:	fa22 f303 	lsr.w	r3, r2, r3
 800352e:	4a09      	ldr	r2, [pc, #36]	; (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 8003530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003532:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_RCC_ClockConfig+0x1c8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe fd6a 	bl	8002010 <HAL_InitTick>

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40023c00 	.word	0x40023c00
 800354c:	40023800 	.word	0x40023800
 8003550:	08007878 	.word	0x08007878
 8003554:	20000058 	.word	0x20000058
 8003558:	2000005c 	.word	0x2000005c

0800355c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800355c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003560:	b094      	sub	sp, #80	; 0x50
 8003562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	647b      	str	r3, [r7, #68]	; 0x44
 8003568:	2300      	movs	r3, #0
 800356a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800356c:	2300      	movs	r3, #0
 800356e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003574:	4b79      	ldr	r3, [pc, #484]	; (800375c <HAL_RCC_GetSysClockFreq+0x200>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 030c 	and.w	r3, r3, #12
 800357c:	2b08      	cmp	r3, #8
 800357e:	d00d      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0x40>
 8003580:	2b08      	cmp	r3, #8
 8003582:	f200 80e1 	bhi.w	8003748 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <HAL_RCC_GetSysClockFreq+0x34>
 800358a:	2b04      	cmp	r3, #4
 800358c:	d003      	beq.n	8003596 <HAL_RCC_GetSysClockFreq+0x3a>
 800358e:	e0db      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003590:	4b73      	ldr	r3, [pc, #460]	; (8003760 <HAL_RCC_GetSysClockFreq+0x204>)
 8003592:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003594:	e0db      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003596:	4b73      	ldr	r3, [pc, #460]	; (8003764 <HAL_RCC_GetSysClockFreq+0x208>)
 8003598:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800359a:	e0d8      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800359c:	4b6f      	ldr	r3, [pc, #444]	; (800375c <HAL_RCC_GetSysClockFreq+0x200>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035a6:	4b6d      	ldr	r3, [pc, #436]	; (800375c <HAL_RCC_GetSysClockFreq+0x200>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d063      	beq.n	800367a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b2:	4b6a      	ldr	r3, [pc, #424]	; (800375c <HAL_RCC_GetSysClockFreq+0x200>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	099b      	lsrs	r3, r3, #6
 80035b8:	2200      	movs	r2, #0
 80035ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80035bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c4:	633b      	str	r3, [r7, #48]	; 0x30
 80035c6:	2300      	movs	r3, #0
 80035c8:	637b      	str	r3, [r7, #52]	; 0x34
 80035ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035ce:	4622      	mov	r2, r4
 80035d0:	462b      	mov	r3, r5
 80035d2:	f04f 0000 	mov.w	r0, #0
 80035d6:	f04f 0100 	mov.w	r1, #0
 80035da:	0159      	lsls	r1, r3, #5
 80035dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035e0:	0150      	lsls	r0, r2, #5
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4621      	mov	r1, r4
 80035e8:	1a51      	subs	r1, r2, r1
 80035ea:	6139      	str	r1, [r7, #16]
 80035ec:	4629      	mov	r1, r5
 80035ee:	eb63 0301 	sbc.w	r3, r3, r1
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003600:	4659      	mov	r1, fp
 8003602:	018b      	lsls	r3, r1, #6
 8003604:	4651      	mov	r1, sl
 8003606:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800360a:	4651      	mov	r1, sl
 800360c:	018a      	lsls	r2, r1, #6
 800360e:	4651      	mov	r1, sl
 8003610:	ebb2 0801 	subs.w	r8, r2, r1
 8003614:	4659      	mov	r1, fp
 8003616:	eb63 0901 	sbc.w	r9, r3, r1
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800362a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800362e:	4690      	mov	r8, r2
 8003630:	4699      	mov	r9, r3
 8003632:	4623      	mov	r3, r4
 8003634:	eb18 0303 	adds.w	r3, r8, r3
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	462b      	mov	r3, r5
 800363c:	eb49 0303 	adc.w	r3, r9, r3
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800364e:	4629      	mov	r1, r5
 8003650:	024b      	lsls	r3, r1, #9
 8003652:	4621      	mov	r1, r4
 8003654:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003658:	4621      	mov	r1, r4
 800365a:	024a      	lsls	r2, r1, #9
 800365c:	4610      	mov	r0, r2
 800365e:	4619      	mov	r1, r3
 8003660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003662:	2200      	movs	r2, #0
 8003664:	62bb      	str	r3, [r7, #40]	; 0x28
 8003666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003668:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800366c:	f7fd faf4 	bl	8000c58 <__aeabi_uldivmod>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4613      	mov	r3, r2
 8003676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003678:	e058      	b.n	800372c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800367a:	4b38      	ldr	r3, [pc, #224]	; (800375c <HAL_RCC_GetSysClockFreq+0x200>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	099b      	lsrs	r3, r3, #6
 8003680:	2200      	movs	r2, #0
 8003682:	4618      	mov	r0, r3
 8003684:	4611      	mov	r1, r2
 8003686:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800368a:	623b      	str	r3, [r7, #32]
 800368c:	2300      	movs	r3, #0
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
 8003690:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003694:	4642      	mov	r2, r8
 8003696:	464b      	mov	r3, r9
 8003698:	f04f 0000 	mov.w	r0, #0
 800369c:	f04f 0100 	mov.w	r1, #0
 80036a0:	0159      	lsls	r1, r3, #5
 80036a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036a6:	0150      	lsls	r0, r2, #5
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4641      	mov	r1, r8
 80036ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80036b2:	4649      	mov	r1, r9
 80036b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036cc:	ebb2 040a 	subs.w	r4, r2, sl
 80036d0:	eb63 050b 	sbc.w	r5, r3, fp
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	00eb      	lsls	r3, r5, #3
 80036de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036e2:	00e2      	lsls	r2, r4, #3
 80036e4:	4614      	mov	r4, r2
 80036e6:	461d      	mov	r5, r3
 80036e8:	4643      	mov	r3, r8
 80036ea:	18e3      	adds	r3, r4, r3
 80036ec:	603b      	str	r3, [r7, #0]
 80036ee:	464b      	mov	r3, r9
 80036f0:	eb45 0303 	adc.w	r3, r5, r3
 80036f4:	607b      	str	r3, [r7, #4]
 80036f6:	f04f 0200 	mov.w	r2, #0
 80036fa:	f04f 0300 	mov.w	r3, #0
 80036fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003702:	4629      	mov	r1, r5
 8003704:	028b      	lsls	r3, r1, #10
 8003706:	4621      	mov	r1, r4
 8003708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800370c:	4621      	mov	r1, r4
 800370e:	028a      	lsls	r2, r1, #10
 8003710:	4610      	mov	r0, r2
 8003712:	4619      	mov	r1, r3
 8003714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003716:	2200      	movs	r2, #0
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	61fa      	str	r2, [r7, #28]
 800371c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003720:	f7fd fa9a 	bl	8000c58 <__aeabi_uldivmod>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4613      	mov	r3, r2
 800372a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_RCC_GetSysClockFreq+0x200>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	0c1b      	lsrs	r3, r3, #16
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	3301      	adds	r3, #1
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800373c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800373e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003740:	fbb2 f3f3 	udiv	r3, r2, r3
 8003744:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003746:	e002      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <HAL_RCC_GetSysClockFreq+0x204>)
 800374a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800374c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800374e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003750:	4618      	mov	r0, r3
 8003752:	3750      	adds	r7, #80	; 0x50
 8003754:	46bd      	mov	sp, r7
 8003756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800375a:	bf00      	nop
 800375c:	40023800 	.word	0x40023800
 8003760:	00f42400 	.word	0x00f42400
 8003764:	007a1200 	.word	0x007a1200

08003768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800376c:	4b03      	ldr	r3, [pc, #12]	; (800377c <HAL_RCC_GetHCLKFreq+0x14>)
 800376e:	681b      	ldr	r3, [r3, #0]
}
 8003770:	4618      	mov	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	20000058 	.word	0x20000058

08003780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003784:	f7ff fff0 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 8003788:	4602      	mov	r2, r0
 800378a:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	0a9b      	lsrs	r3, r3, #10
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	4903      	ldr	r1, [pc, #12]	; (80037a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003796:	5ccb      	ldrb	r3, [r1, r3]
 8003798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800379c:	4618      	mov	r0, r3
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40023800 	.word	0x40023800
 80037a4:	08007888 	.word	0x08007888

080037a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037ac:	f7ff ffdc 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 80037b0:	4602      	mov	r2, r0
 80037b2:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	0b5b      	lsrs	r3, r3, #13
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	4903      	ldr	r1, [pc, #12]	; (80037cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80037be:	5ccb      	ldrb	r3, [r1, r3]
 80037c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40023800 	.word	0x40023800
 80037cc:	08007888 	.word	0x08007888

080037d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e041      	b.n	8003866 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fe f9dc 	bl	8001bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3304      	adds	r3, #4
 800380c:	4619      	mov	r1, r3
 800380e:	4610      	mov	r0, r2
 8003810:	f000 fa10 	bl	8003c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b082      	sub	sp, #8
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e041      	b.n	8003904 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d106      	bne.n	800389a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f839 	bl	800390c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2202      	movs	r2, #2
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3304      	adds	r3, #4
 80038aa:	4619      	mov	r1, r3
 80038ac:	4610      	mov	r0, r2
 80038ae:	f000 f9c1 	bl	8003c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800393a:	2302      	movs	r3, #2
 800393c:	e0ae      	b.n	8003a9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b0c      	cmp	r3, #12
 800394a:	f200 809f 	bhi.w	8003a8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800394e:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003954:	08003989 	.word	0x08003989
 8003958:	08003a8d 	.word	0x08003a8d
 800395c:	08003a8d 	.word	0x08003a8d
 8003960:	08003a8d 	.word	0x08003a8d
 8003964:	080039c9 	.word	0x080039c9
 8003968:	08003a8d 	.word	0x08003a8d
 800396c:	08003a8d 	.word	0x08003a8d
 8003970:	08003a8d 	.word	0x08003a8d
 8003974:	08003a0b 	.word	0x08003a0b
 8003978:	08003a8d 	.word	0x08003a8d
 800397c:	08003a8d 	.word	0x08003a8d
 8003980:	08003a8d 	.word	0x08003a8d
 8003984:	08003a4b 	.word	0x08003a4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68b9      	ldr	r1, [r7, #8]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 f9d0 	bl	8003d34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0208 	orr.w	r2, r2, #8
 80039a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0204 	bic.w	r2, r2, #4
 80039b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6999      	ldr	r1, [r3, #24]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	691a      	ldr	r2, [r3, #16]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	619a      	str	r2, [r3, #24]
      break;
 80039c6:	e064      	b.n	8003a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fa16 	bl	8003e00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699a      	ldr	r2, [r3, #24]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6999      	ldr	r1, [r3, #24]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	021a      	lsls	r2, r3, #8
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	619a      	str	r2, [r3, #24]
      break;
 8003a08:	e043      	b.n	8003a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fa61 	bl	8003ed8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69da      	ldr	r2, [r3, #28]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f042 0208 	orr.w	r2, r2, #8
 8003a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69da      	ldr	r2, [r3, #28]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0204 	bic.w	r2, r2, #4
 8003a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69d9      	ldr	r1, [r3, #28]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	61da      	str	r2, [r3, #28]
      break;
 8003a48:	e023      	b.n	8003a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 faab 	bl	8003fac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69da      	ldr	r2, [r3, #28]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69da      	ldr	r2, [r3, #28]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69d9      	ldr	r1, [r3, #28]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	021a      	lsls	r2, r3, #8
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	61da      	str	r2, [r3, #28]
      break;
 8003a8a:	e002      	b.n	8003a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_TIM_ConfigClockSource+0x1c>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e0b4      	b.n	8003c2a <HAL_TIM_ConfigClockSource+0x186>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ae6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af8:	d03e      	beq.n	8003b78 <HAL_TIM_ConfigClockSource+0xd4>
 8003afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afe:	f200 8087 	bhi.w	8003c10 <HAL_TIM_ConfigClockSource+0x16c>
 8003b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b06:	f000 8086 	beq.w	8003c16 <HAL_TIM_ConfigClockSource+0x172>
 8003b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0e:	d87f      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x16c>
 8003b10:	2b70      	cmp	r3, #112	; 0x70
 8003b12:	d01a      	beq.n	8003b4a <HAL_TIM_ConfigClockSource+0xa6>
 8003b14:	2b70      	cmp	r3, #112	; 0x70
 8003b16:	d87b      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x16c>
 8003b18:	2b60      	cmp	r3, #96	; 0x60
 8003b1a:	d050      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x11a>
 8003b1c:	2b60      	cmp	r3, #96	; 0x60
 8003b1e:	d877      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x16c>
 8003b20:	2b50      	cmp	r3, #80	; 0x50
 8003b22:	d03c      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0xfa>
 8003b24:	2b50      	cmp	r3, #80	; 0x50
 8003b26:	d873      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x16c>
 8003b28:	2b40      	cmp	r3, #64	; 0x40
 8003b2a:	d058      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x13a>
 8003b2c:	2b40      	cmp	r3, #64	; 0x40
 8003b2e:	d86f      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x16c>
 8003b30:	2b30      	cmp	r3, #48	; 0x30
 8003b32:	d064      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x15a>
 8003b34:	2b30      	cmp	r3, #48	; 0x30
 8003b36:	d86b      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x16c>
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d060      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x15a>
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	d867      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x16c>
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d05c      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x15a>
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d05a      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x15a>
 8003b48:	e062      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	6899      	ldr	r1, [r3, #8]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f000 faf1 	bl	8004140 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	609a      	str	r2, [r3, #8]
      break;
 8003b76:	e04f      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	6899      	ldr	r1, [r3, #8]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f000 fada 	bl	8004140 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b9a:	609a      	str	r2, [r3, #8]
      break;
 8003b9c:	e03c      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	6859      	ldr	r1, [r3, #4]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f000 fa4e 	bl	800404c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2150      	movs	r1, #80	; 0x50
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 faa7 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 8003bbc:	e02c      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	6859      	ldr	r1, [r3, #4]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f000 fa6d 	bl	80040aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2160      	movs	r1, #96	; 0x60
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fa97 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 8003bdc:	e01c      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	6859      	ldr	r1, [r3, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	461a      	mov	r2, r3
 8003bec:	f000 fa2e 	bl	800404c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2140      	movs	r1, #64	; 0x40
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fa87 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 8003bfc:	e00c      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4619      	mov	r1, r3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	f000 fa7e 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 8003c0e:	e003      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
      break;
 8003c14:	e000      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a34      	ldr	r2, [pc, #208]	; (8003d18 <TIM_Base_SetConfig+0xe4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00f      	beq.n	8003c6c <TIM_Base_SetConfig+0x38>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c52:	d00b      	beq.n	8003c6c <TIM_Base_SetConfig+0x38>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a31      	ldr	r2, [pc, #196]	; (8003d1c <TIM_Base_SetConfig+0xe8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d007      	beq.n	8003c6c <TIM_Base_SetConfig+0x38>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a30      	ldr	r2, [pc, #192]	; (8003d20 <TIM_Base_SetConfig+0xec>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d003      	beq.n	8003c6c <TIM_Base_SetConfig+0x38>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a2f      	ldr	r2, [pc, #188]	; (8003d24 <TIM_Base_SetConfig+0xf0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d108      	bne.n	8003c7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a25      	ldr	r2, [pc, #148]	; (8003d18 <TIM_Base_SetConfig+0xe4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01b      	beq.n	8003cbe <TIM_Base_SetConfig+0x8a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8c:	d017      	beq.n	8003cbe <TIM_Base_SetConfig+0x8a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a22      	ldr	r2, [pc, #136]	; (8003d1c <TIM_Base_SetConfig+0xe8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <TIM_Base_SetConfig+0x8a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a21      	ldr	r2, [pc, #132]	; (8003d20 <TIM_Base_SetConfig+0xec>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00f      	beq.n	8003cbe <TIM_Base_SetConfig+0x8a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a20      	ldr	r2, [pc, #128]	; (8003d24 <TIM_Base_SetConfig+0xf0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00b      	beq.n	8003cbe <TIM_Base_SetConfig+0x8a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a1f      	ldr	r2, [pc, #124]	; (8003d28 <TIM_Base_SetConfig+0xf4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d007      	beq.n	8003cbe <TIM_Base_SetConfig+0x8a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a1e      	ldr	r2, [pc, #120]	; (8003d2c <TIM_Base_SetConfig+0xf8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d003      	beq.n	8003cbe <TIM_Base_SetConfig+0x8a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <TIM_Base_SetConfig+0xfc>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d108      	bne.n	8003cd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a08      	ldr	r2, [pc, #32]	; (8003d18 <TIM_Base_SetConfig+0xe4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d103      	bne.n	8003d04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	615a      	str	r2, [r3, #20]
}
 8003d0a:	bf00      	nop
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40010000 	.word	0x40010000
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	40000800 	.word	0x40000800
 8003d24:	40000c00 	.word	0x40000c00
 8003d28:	40014000 	.word	0x40014000
 8003d2c:	40014400 	.word	0x40014400
 8003d30:	40014800 	.word	0x40014800

08003d34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f023 0201 	bic.w	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f023 0302 	bic.w	r3, r3, #2
 8003d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a1c      	ldr	r2, [pc, #112]	; (8003dfc <TIM_OC1_SetConfig+0xc8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d10c      	bne.n	8003daa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f023 0308 	bic.w	r3, r3, #8
 8003d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f023 0304 	bic.w	r3, r3, #4
 8003da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a13      	ldr	r2, [pc, #76]	; (8003dfc <TIM_OC1_SetConfig+0xc8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d111      	bne.n	8003dd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	621a      	str	r2, [r3, #32]
}
 8003df0:	bf00      	nop
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	40010000 	.word	0x40010000

08003e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	f023 0210 	bic.w	r2, r3, #16
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	021b      	lsls	r3, r3, #8
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f023 0320 	bic.w	r3, r3, #32
 8003e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a1e      	ldr	r2, [pc, #120]	; (8003ed4 <TIM_OC2_SetConfig+0xd4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d10d      	bne.n	8003e7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a15      	ldr	r2, [pc, #84]	; (8003ed4 <TIM_OC2_SetConfig+0xd4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d113      	bne.n	8003eac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	621a      	str	r2, [r3, #32]
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40010000 	.word	0x40010000

08003ed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0303 	bic.w	r3, r3, #3
 8003f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	021b      	lsls	r3, r3, #8
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a1d      	ldr	r2, [pc, #116]	; (8003fa8 <TIM_OC3_SetConfig+0xd0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d10d      	bne.n	8003f52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	021b      	lsls	r3, r3, #8
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a14      	ldr	r2, [pc, #80]	; (8003fa8 <TIM_OC3_SetConfig+0xd0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d113      	bne.n	8003f82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	621a      	str	r2, [r3, #32]
}
 8003f9c:	bf00      	nop
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	40010000 	.word	0x40010000

08003fac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	031b      	lsls	r3, r3, #12
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a10      	ldr	r2, [pc, #64]	; (8004048 <TIM_OC4_SetConfig+0x9c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d109      	bne.n	8004020 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004012:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	019b      	lsls	r3, r3, #6
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40010000 	.word	0x40010000

0800404c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	f023 0201 	bic.w	r2, r3, #1
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f023 030a 	bic.w	r3, r3, #10
 8004088:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4313      	orrs	r3, r2
 8004090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	621a      	str	r2, [r3, #32]
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b087      	sub	sp, #28
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f023 0210 	bic.w	r2, r3, #16
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	031b      	lsls	r3, r3, #12
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	621a      	str	r2, [r3, #32]
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800410a:	b480      	push	{r7}
 800410c:	b085      	sub	sp, #20
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004120:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	f043 0307 	orr.w	r3, r3, #7
 800412c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	609a      	str	r2, [r3, #8]
}
 8004134:	bf00      	nop
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800415a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	021a      	lsls	r2, r3, #8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	431a      	orrs	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4313      	orrs	r3, r2
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	609a      	str	r2, [r3, #8]
}
 8004174:	bf00      	nop
 8004176:	371c      	adds	r7, #28
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004194:	2302      	movs	r3, #2
 8004196:	e050      	b.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1c      	ldr	r2, [pc, #112]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d018      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e4:	d013      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a18      	ldr	r2, [pc, #96]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d00e      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a16      	ldr	r2, [pc, #88]	; (8004250 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d009      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a15      	ldr	r2, [pc, #84]	; (8004254 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d004      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a13      	ldr	r2, [pc, #76]	; (8004258 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d10c      	bne.n	8004228 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004214:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	4313      	orrs	r3, r2
 800421e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40010000 	.word	0x40010000
 800424c:	40000400 	.word	0x40000400
 8004250:	40000800 	.word	0x40000800
 8004254:	40000c00 	.word	0x40000c00
 8004258:	40014000 	.word	0x40014000

0800425c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e03f      	b.n	80042ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fd fcf2 	bl	8001c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2224      	movs	r2, #36	; 0x24
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800429e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f929 	bl	80044f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695a      	ldr	r2, [r3, #20]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b08a      	sub	sp, #40	; 0x28
 80042fa:	af02      	add	r7, sp, #8
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	603b      	str	r3, [r7, #0]
 8004302:	4613      	mov	r3, r2
 8004304:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b20      	cmp	r3, #32
 8004314:	d17c      	bne.n	8004410 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <HAL_UART_Transmit+0x2c>
 800431c:	88fb      	ldrh	r3, [r7, #6]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e075      	b.n	8004412 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_UART_Transmit+0x3e>
 8004330:	2302      	movs	r3, #2
 8004332:	e06e      	b.n	8004412 <HAL_UART_Transmit+0x11c>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2221      	movs	r2, #33	; 0x21
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800434a:	f7fd fea5 	bl	8002098 <HAL_GetTick>
 800434e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	88fa      	ldrh	r2, [r7, #6]
 8004354:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	88fa      	ldrh	r2, [r7, #6]
 800435a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004364:	d108      	bne.n	8004378 <HAL_UART_Transmit+0x82>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d104      	bne.n	8004378 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800436e:	2300      	movs	r3, #0
 8004370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	e003      	b.n	8004380 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800437c:	2300      	movs	r3, #0
 800437e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004388:	e02a      	b.n	80043e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2200      	movs	r2, #0
 8004392:	2180      	movs	r1, #128	; 0x80
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 f840 	bl	800441a <UART_WaitOnFlagUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e036      	b.n	8004412 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10b      	bne.n	80043c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	3302      	adds	r3, #2
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	e007      	b.n	80043d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	781a      	ldrb	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	3301      	adds	r3, #1
 80043d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1cf      	bne.n	800438a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2200      	movs	r2, #0
 80043f2:	2140      	movs	r1, #64	; 0x40
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 f810 	bl	800441a <UART_WaitOnFlagUntilTimeout>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e006      	b.n	8004412 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	e000      	b.n	8004412 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004410:	2302      	movs	r3, #2
  }
}
 8004412:	4618      	mov	r0, r3
 8004414:	3720      	adds	r7, #32
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b090      	sub	sp, #64	; 0x40
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	603b      	str	r3, [r7, #0]
 8004426:	4613      	mov	r3, r2
 8004428:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800442a:	e050      	b.n	80044ce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800442c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800442e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004432:	d04c      	beq.n	80044ce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004436:	2b00      	cmp	r3, #0
 8004438:	d007      	beq.n	800444a <UART_WaitOnFlagUntilTimeout+0x30>
 800443a:	f7fd fe2d 	bl	8002098 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004446:	429a      	cmp	r2, r3
 8004448:	d241      	bcs.n	80044ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	330c      	adds	r3, #12
 8004450:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004460:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	330c      	adds	r3, #12
 8004468:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800446a:	637a      	str	r2, [r7, #52]	; 0x34
 800446c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e5      	bne.n	800444a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3314      	adds	r3, #20
 8004484:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	e853 3f00 	ldrex	r3, [r3]
 800448c:	613b      	str	r3, [r7, #16]
   return(result);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f023 0301 	bic.w	r3, r3, #1
 8004494:	63bb      	str	r3, [r7, #56]	; 0x38
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3314      	adds	r3, #20
 800449c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800449e:	623a      	str	r2, [r7, #32]
 80044a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a2:	69f9      	ldr	r1, [r7, #28]
 80044a4:	6a3a      	ldr	r2, [r7, #32]
 80044a6:	e841 2300 	strex	r3, r2, [r1]
 80044aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1e5      	bne.n	800447e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e00f      	b.n	80044ee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4013      	ands	r3, r2
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	429a      	cmp	r2, r3
 80044dc:	bf0c      	ite	eq
 80044de:	2301      	moveq	r3, #1
 80044e0:	2300      	movne	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d09f      	beq.n	800442c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3740      	adds	r7, #64	; 0x40
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044fc:	b0c0      	sub	sp, #256	; 0x100
 80044fe:	af00      	add	r7, sp, #0
 8004500:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004514:	68d9      	ldr	r1, [r3, #12]
 8004516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	ea40 0301 	orr.w	r3, r0, r1
 8004520:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	431a      	orrs	r2, r3
 8004530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	431a      	orrs	r2, r3
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004550:	f021 010c 	bic.w	r1, r1, #12
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800455e:	430b      	orrs	r3, r1
 8004560:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800456e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004572:	6999      	ldr	r1, [r3, #24]
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	ea40 0301 	orr.w	r3, r0, r1
 800457e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	4b8f      	ldr	r3, [pc, #572]	; (80047c4 <UART_SetConfig+0x2cc>)
 8004588:	429a      	cmp	r2, r3
 800458a:	d005      	beq.n	8004598 <UART_SetConfig+0xa0>
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4b8d      	ldr	r3, [pc, #564]	; (80047c8 <UART_SetConfig+0x2d0>)
 8004594:	429a      	cmp	r2, r3
 8004596:	d104      	bne.n	80045a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004598:	f7ff f906 	bl	80037a8 <HAL_RCC_GetPCLK2Freq>
 800459c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045a0:	e003      	b.n	80045aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045a2:	f7ff f8ed 	bl	8003780 <HAL_RCC_GetPCLK1Freq>
 80045a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b4:	f040 810c 	bne.w	80047d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045bc:	2200      	movs	r2, #0
 80045be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80045c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80045ca:	4622      	mov	r2, r4
 80045cc:	462b      	mov	r3, r5
 80045ce:	1891      	adds	r1, r2, r2
 80045d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80045d2:	415b      	adcs	r3, r3
 80045d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045da:	4621      	mov	r1, r4
 80045dc:	eb12 0801 	adds.w	r8, r2, r1
 80045e0:	4629      	mov	r1, r5
 80045e2:	eb43 0901 	adc.w	r9, r3, r1
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045fa:	4690      	mov	r8, r2
 80045fc:	4699      	mov	r9, r3
 80045fe:	4623      	mov	r3, r4
 8004600:	eb18 0303 	adds.w	r3, r8, r3
 8004604:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004608:	462b      	mov	r3, r5
 800460a:	eb49 0303 	adc.w	r3, r9, r3
 800460e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800461e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004622:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004626:	460b      	mov	r3, r1
 8004628:	18db      	adds	r3, r3, r3
 800462a:	653b      	str	r3, [r7, #80]	; 0x50
 800462c:	4613      	mov	r3, r2
 800462e:	eb42 0303 	adc.w	r3, r2, r3
 8004632:	657b      	str	r3, [r7, #84]	; 0x54
 8004634:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004638:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800463c:	f7fc fb0c 	bl	8000c58 <__aeabi_uldivmod>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4b61      	ldr	r3, [pc, #388]	; (80047cc <UART_SetConfig+0x2d4>)
 8004646:	fba3 2302 	umull	r2, r3, r3, r2
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	011c      	lsls	r4, r3, #4
 800464e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004652:	2200      	movs	r2, #0
 8004654:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004658:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800465c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004660:	4642      	mov	r2, r8
 8004662:	464b      	mov	r3, r9
 8004664:	1891      	adds	r1, r2, r2
 8004666:	64b9      	str	r1, [r7, #72]	; 0x48
 8004668:	415b      	adcs	r3, r3
 800466a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800466c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004670:	4641      	mov	r1, r8
 8004672:	eb12 0a01 	adds.w	sl, r2, r1
 8004676:	4649      	mov	r1, r9
 8004678:	eb43 0b01 	adc.w	fp, r3, r1
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004688:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800468c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004690:	4692      	mov	sl, r2
 8004692:	469b      	mov	fp, r3
 8004694:	4643      	mov	r3, r8
 8004696:	eb1a 0303 	adds.w	r3, sl, r3
 800469a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800469e:	464b      	mov	r3, r9
 80046a0:	eb4b 0303 	adc.w	r3, fp, r3
 80046a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80046b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80046bc:	460b      	mov	r3, r1
 80046be:	18db      	adds	r3, r3, r3
 80046c0:	643b      	str	r3, [r7, #64]	; 0x40
 80046c2:	4613      	mov	r3, r2
 80046c4:	eb42 0303 	adc.w	r3, r2, r3
 80046c8:	647b      	str	r3, [r7, #68]	; 0x44
 80046ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80046d2:	f7fc fac1 	bl	8000c58 <__aeabi_uldivmod>
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	4b3b      	ldr	r3, [pc, #236]	; (80047cc <UART_SetConfig+0x2d4>)
 80046de:	fba3 2301 	umull	r2, r3, r3, r1
 80046e2:	095b      	lsrs	r3, r3, #5
 80046e4:	2264      	movs	r2, #100	; 0x64
 80046e6:	fb02 f303 	mul.w	r3, r2, r3
 80046ea:	1acb      	subs	r3, r1, r3
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046f2:	4b36      	ldr	r3, [pc, #216]	; (80047cc <UART_SetConfig+0x2d4>)
 80046f4:	fba3 2302 	umull	r2, r3, r3, r2
 80046f8:	095b      	lsrs	r3, r3, #5
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004700:	441c      	add	r4, r3
 8004702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004706:	2200      	movs	r2, #0
 8004708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800470c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004710:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004714:	4642      	mov	r2, r8
 8004716:	464b      	mov	r3, r9
 8004718:	1891      	adds	r1, r2, r2
 800471a:	63b9      	str	r1, [r7, #56]	; 0x38
 800471c:	415b      	adcs	r3, r3
 800471e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004720:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004724:	4641      	mov	r1, r8
 8004726:	1851      	adds	r1, r2, r1
 8004728:	6339      	str	r1, [r7, #48]	; 0x30
 800472a:	4649      	mov	r1, r9
 800472c:	414b      	adcs	r3, r1
 800472e:	637b      	str	r3, [r7, #52]	; 0x34
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800473c:	4659      	mov	r1, fp
 800473e:	00cb      	lsls	r3, r1, #3
 8004740:	4651      	mov	r1, sl
 8004742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004746:	4651      	mov	r1, sl
 8004748:	00ca      	lsls	r2, r1, #3
 800474a:	4610      	mov	r0, r2
 800474c:	4619      	mov	r1, r3
 800474e:	4603      	mov	r3, r0
 8004750:	4642      	mov	r2, r8
 8004752:	189b      	adds	r3, r3, r2
 8004754:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004758:	464b      	mov	r3, r9
 800475a:	460a      	mov	r2, r1
 800475c:	eb42 0303 	adc.w	r3, r2, r3
 8004760:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004770:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004774:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004778:	460b      	mov	r3, r1
 800477a:	18db      	adds	r3, r3, r3
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
 800477e:	4613      	mov	r3, r2
 8004780:	eb42 0303 	adc.w	r3, r2, r3
 8004784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004786:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800478a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800478e:	f7fc fa63 	bl	8000c58 <__aeabi_uldivmod>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	4b0d      	ldr	r3, [pc, #52]	; (80047cc <UART_SetConfig+0x2d4>)
 8004798:	fba3 1302 	umull	r1, r3, r3, r2
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	2164      	movs	r1, #100	; 0x64
 80047a0:	fb01 f303 	mul.w	r3, r1, r3
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	3332      	adds	r3, #50	; 0x32
 80047aa:	4a08      	ldr	r2, [pc, #32]	; (80047cc <UART_SetConfig+0x2d4>)
 80047ac:	fba2 2303 	umull	r2, r3, r2, r3
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	f003 0207 	and.w	r2, r3, #7
 80047b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4422      	add	r2, r4
 80047be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047c0:	e105      	b.n	80049ce <UART_SetConfig+0x4d6>
 80047c2:	bf00      	nop
 80047c4:	40011000 	.word	0x40011000
 80047c8:	40011400 	.word	0x40011400
 80047cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047d4:	2200      	movs	r2, #0
 80047d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80047de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80047e2:	4642      	mov	r2, r8
 80047e4:	464b      	mov	r3, r9
 80047e6:	1891      	adds	r1, r2, r2
 80047e8:	6239      	str	r1, [r7, #32]
 80047ea:	415b      	adcs	r3, r3
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
 80047ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047f2:	4641      	mov	r1, r8
 80047f4:	1854      	adds	r4, r2, r1
 80047f6:	4649      	mov	r1, r9
 80047f8:	eb43 0501 	adc.w	r5, r3, r1
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	00eb      	lsls	r3, r5, #3
 8004806:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800480a:	00e2      	lsls	r2, r4, #3
 800480c:	4614      	mov	r4, r2
 800480e:	461d      	mov	r5, r3
 8004810:	4643      	mov	r3, r8
 8004812:	18e3      	adds	r3, r4, r3
 8004814:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004818:	464b      	mov	r3, r9
 800481a:	eb45 0303 	adc.w	r3, r5, r3
 800481e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800482e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800483e:	4629      	mov	r1, r5
 8004840:	008b      	lsls	r3, r1, #2
 8004842:	4621      	mov	r1, r4
 8004844:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004848:	4621      	mov	r1, r4
 800484a:	008a      	lsls	r2, r1, #2
 800484c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004850:	f7fc fa02 	bl	8000c58 <__aeabi_uldivmod>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4b60      	ldr	r3, [pc, #384]	; (80049dc <UART_SetConfig+0x4e4>)
 800485a:	fba3 2302 	umull	r2, r3, r3, r2
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	011c      	lsls	r4, r3, #4
 8004862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004866:	2200      	movs	r2, #0
 8004868:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800486c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004870:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004874:	4642      	mov	r2, r8
 8004876:	464b      	mov	r3, r9
 8004878:	1891      	adds	r1, r2, r2
 800487a:	61b9      	str	r1, [r7, #24]
 800487c:	415b      	adcs	r3, r3
 800487e:	61fb      	str	r3, [r7, #28]
 8004880:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004884:	4641      	mov	r1, r8
 8004886:	1851      	adds	r1, r2, r1
 8004888:	6139      	str	r1, [r7, #16]
 800488a:	4649      	mov	r1, r9
 800488c:	414b      	adcs	r3, r1
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800489c:	4659      	mov	r1, fp
 800489e:	00cb      	lsls	r3, r1, #3
 80048a0:	4651      	mov	r1, sl
 80048a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048a6:	4651      	mov	r1, sl
 80048a8:	00ca      	lsls	r2, r1, #3
 80048aa:	4610      	mov	r0, r2
 80048ac:	4619      	mov	r1, r3
 80048ae:	4603      	mov	r3, r0
 80048b0:	4642      	mov	r2, r8
 80048b2:	189b      	adds	r3, r3, r2
 80048b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048b8:	464b      	mov	r3, r9
 80048ba:	460a      	mov	r2, r1
 80048bc:	eb42 0303 	adc.w	r3, r2, r3
 80048c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80048ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048dc:	4649      	mov	r1, r9
 80048de:	008b      	lsls	r3, r1, #2
 80048e0:	4641      	mov	r1, r8
 80048e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048e6:	4641      	mov	r1, r8
 80048e8:	008a      	lsls	r2, r1, #2
 80048ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048ee:	f7fc f9b3 	bl	8000c58 <__aeabi_uldivmod>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4b39      	ldr	r3, [pc, #228]	; (80049dc <UART_SetConfig+0x4e4>)
 80048f8:	fba3 1302 	umull	r1, r3, r3, r2
 80048fc:	095b      	lsrs	r3, r3, #5
 80048fe:	2164      	movs	r1, #100	; 0x64
 8004900:	fb01 f303 	mul.w	r3, r1, r3
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	3332      	adds	r3, #50	; 0x32
 800490a:	4a34      	ldr	r2, [pc, #208]	; (80049dc <UART_SetConfig+0x4e4>)
 800490c:	fba2 2303 	umull	r2, r3, r2, r3
 8004910:	095b      	lsrs	r3, r3, #5
 8004912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004916:	441c      	add	r4, r3
 8004918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800491c:	2200      	movs	r2, #0
 800491e:	673b      	str	r3, [r7, #112]	; 0x70
 8004920:	677a      	str	r2, [r7, #116]	; 0x74
 8004922:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004926:	4642      	mov	r2, r8
 8004928:	464b      	mov	r3, r9
 800492a:	1891      	adds	r1, r2, r2
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	415b      	adcs	r3, r3
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004936:	4641      	mov	r1, r8
 8004938:	1851      	adds	r1, r2, r1
 800493a:	6039      	str	r1, [r7, #0]
 800493c:	4649      	mov	r1, r9
 800493e:	414b      	adcs	r3, r1
 8004940:	607b      	str	r3, [r7, #4]
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800494e:	4659      	mov	r1, fp
 8004950:	00cb      	lsls	r3, r1, #3
 8004952:	4651      	mov	r1, sl
 8004954:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004958:	4651      	mov	r1, sl
 800495a:	00ca      	lsls	r2, r1, #3
 800495c:	4610      	mov	r0, r2
 800495e:	4619      	mov	r1, r3
 8004960:	4603      	mov	r3, r0
 8004962:	4642      	mov	r2, r8
 8004964:	189b      	adds	r3, r3, r2
 8004966:	66bb      	str	r3, [r7, #104]	; 0x68
 8004968:	464b      	mov	r3, r9
 800496a:	460a      	mov	r2, r1
 800496c:	eb42 0303 	adc.w	r3, r2, r3
 8004970:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	663b      	str	r3, [r7, #96]	; 0x60
 800497c:	667a      	str	r2, [r7, #100]	; 0x64
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800498a:	4649      	mov	r1, r9
 800498c:	008b      	lsls	r3, r1, #2
 800498e:	4641      	mov	r1, r8
 8004990:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004994:	4641      	mov	r1, r8
 8004996:	008a      	lsls	r2, r1, #2
 8004998:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800499c:	f7fc f95c 	bl	8000c58 <__aeabi_uldivmod>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4b0d      	ldr	r3, [pc, #52]	; (80049dc <UART_SetConfig+0x4e4>)
 80049a6:	fba3 1302 	umull	r1, r3, r3, r2
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	2164      	movs	r1, #100	; 0x64
 80049ae:	fb01 f303 	mul.w	r3, r1, r3
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	3332      	adds	r3, #50	; 0x32
 80049b8:	4a08      	ldr	r2, [pc, #32]	; (80049dc <UART_SetConfig+0x4e4>)
 80049ba:	fba2 2303 	umull	r2, r3, r2, r3
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	f003 020f 	and.w	r2, r3, #15
 80049c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4422      	add	r2, r4
 80049cc:	609a      	str	r2, [r3, #8]
}
 80049ce:	bf00      	nop
 80049d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80049d4:	46bd      	mov	sp, r7
 80049d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049da:	bf00      	nop
 80049dc:	51eb851f 	.word	0x51eb851f

080049e0 <__errno>:
 80049e0:	4b01      	ldr	r3, [pc, #4]	; (80049e8 <__errno+0x8>)
 80049e2:	6818      	ldr	r0, [r3, #0]
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	20000064 	.word	0x20000064

080049ec <__libc_init_array>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	4d0d      	ldr	r5, [pc, #52]	; (8004a24 <__libc_init_array+0x38>)
 80049f0:	4c0d      	ldr	r4, [pc, #52]	; (8004a28 <__libc_init_array+0x3c>)
 80049f2:	1b64      	subs	r4, r4, r5
 80049f4:	10a4      	asrs	r4, r4, #2
 80049f6:	2600      	movs	r6, #0
 80049f8:	42a6      	cmp	r6, r4
 80049fa:	d109      	bne.n	8004a10 <__libc_init_array+0x24>
 80049fc:	4d0b      	ldr	r5, [pc, #44]	; (8004a2c <__libc_init_array+0x40>)
 80049fe:	4c0c      	ldr	r4, [pc, #48]	; (8004a30 <__libc_init_array+0x44>)
 8004a00:	f002 ff02 	bl	8007808 <_init>
 8004a04:	1b64      	subs	r4, r4, r5
 8004a06:	10a4      	asrs	r4, r4, #2
 8004a08:	2600      	movs	r6, #0
 8004a0a:	42a6      	cmp	r6, r4
 8004a0c:	d105      	bne.n	8004a1a <__libc_init_array+0x2e>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a14:	4798      	blx	r3
 8004a16:	3601      	adds	r6, #1
 8004a18:	e7ee      	b.n	80049f8 <__libc_init_array+0xc>
 8004a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1e:	4798      	blx	r3
 8004a20:	3601      	adds	r6, #1
 8004a22:	e7f2      	b.n	8004a0a <__libc_init_array+0x1e>
 8004a24:	08007c74 	.word	0x08007c74
 8004a28:	08007c74 	.word	0x08007c74
 8004a2c:	08007c74 	.word	0x08007c74
 8004a30:	08007c78 	.word	0x08007c78

08004a34 <memset>:
 8004a34:	4402      	add	r2, r0
 8004a36:	4603      	mov	r3, r0
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d100      	bne.n	8004a3e <memset+0xa>
 8004a3c:	4770      	bx	lr
 8004a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a42:	e7f9      	b.n	8004a38 <memset+0x4>

08004a44 <__cvt>:
 8004a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a48:	ec55 4b10 	vmov	r4, r5, d0
 8004a4c:	2d00      	cmp	r5, #0
 8004a4e:	460e      	mov	r6, r1
 8004a50:	4619      	mov	r1, r3
 8004a52:	462b      	mov	r3, r5
 8004a54:	bfbb      	ittet	lt
 8004a56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004a5a:	461d      	movlt	r5, r3
 8004a5c:	2300      	movge	r3, #0
 8004a5e:	232d      	movlt	r3, #45	; 0x2d
 8004a60:	700b      	strb	r3, [r1, #0]
 8004a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004a68:	4691      	mov	r9, r2
 8004a6a:	f023 0820 	bic.w	r8, r3, #32
 8004a6e:	bfbc      	itt	lt
 8004a70:	4622      	movlt	r2, r4
 8004a72:	4614      	movlt	r4, r2
 8004a74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a78:	d005      	beq.n	8004a86 <__cvt+0x42>
 8004a7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004a7e:	d100      	bne.n	8004a82 <__cvt+0x3e>
 8004a80:	3601      	adds	r6, #1
 8004a82:	2102      	movs	r1, #2
 8004a84:	e000      	b.n	8004a88 <__cvt+0x44>
 8004a86:	2103      	movs	r1, #3
 8004a88:	ab03      	add	r3, sp, #12
 8004a8a:	9301      	str	r3, [sp, #4]
 8004a8c:	ab02      	add	r3, sp, #8
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	ec45 4b10 	vmov	d0, r4, r5
 8004a94:	4653      	mov	r3, sl
 8004a96:	4632      	mov	r2, r6
 8004a98:	f000 fcea 	bl	8005470 <_dtoa_r>
 8004a9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004aa0:	4607      	mov	r7, r0
 8004aa2:	d102      	bne.n	8004aaa <__cvt+0x66>
 8004aa4:	f019 0f01 	tst.w	r9, #1
 8004aa8:	d022      	beq.n	8004af0 <__cvt+0xac>
 8004aaa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004aae:	eb07 0906 	add.w	r9, r7, r6
 8004ab2:	d110      	bne.n	8004ad6 <__cvt+0x92>
 8004ab4:	783b      	ldrb	r3, [r7, #0]
 8004ab6:	2b30      	cmp	r3, #48	; 0x30
 8004ab8:	d10a      	bne.n	8004ad0 <__cvt+0x8c>
 8004aba:	2200      	movs	r2, #0
 8004abc:	2300      	movs	r3, #0
 8004abe:	4620      	mov	r0, r4
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	f7fc f809 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ac6:	b918      	cbnz	r0, 8004ad0 <__cvt+0x8c>
 8004ac8:	f1c6 0601 	rsb	r6, r6, #1
 8004acc:	f8ca 6000 	str.w	r6, [sl]
 8004ad0:	f8da 3000 	ldr.w	r3, [sl]
 8004ad4:	4499      	add	r9, r3
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	2300      	movs	r3, #0
 8004ada:	4620      	mov	r0, r4
 8004adc:	4629      	mov	r1, r5
 8004ade:	f7fb fffb 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ae2:	b108      	cbz	r0, 8004ae8 <__cvt+0xa4>
 8004ae4:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ae8:	2230      	movs	r2, #48	; 0x30
 8004aea:	9b03      	ldr	r3, [sp, #12]
 8004aec:	454b      	cmp	r3, r9
 8004aee:	d307      	bcc.n	8004b00 <__cvt+0xbc>
 8004af0:	9b03      	ldr	r3, [sp, #12]
 8004af2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004af4:	1bdb      	subs	r3, r3, r7
 8004af6:	4638      	mov	r0, r7
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	b004      	add	sp, #16
 8004afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b00:	1c59      	adds	r1, r3, #1
 8004b02:	9103      	str	r1, [sp, #12]
 8004b04:	701a      	strb	r2, [r3, #0]
 8004b06:	e7f0      	b.n	8004aea <__cvt+0xa6>

08004b08 <__exponent>:
 8004b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2900      	cmp	r1, #0
 8004b0e:	bfb8      	it	lt
 8004b10:	4249      	neglt	r1, r1
 8004b12:	f803 2b02 	strb.w	r2, [r3], #2
 8004b16:	bfb4      	ite	lt
 8004b18:	222d      	movlt	r2, #45	; 0x2d
 8004b1a:	222b      	movge	r2, #43	; 0x2b
 8004b1c:	2909      	cmp	r1, #9
 8004b1e:	7042      	strb	r2, [r0, #1]
 8004b20:	dd2a      	ble.n	8004b78 <__exponent+0x70>
 8004b22:	f10d 0407 	add.w	r4, sp, #7
 8004b26:	46a4      	mov	ip, r4
 8004b28:	270a      	movs	r7, #10
 8004b2a:	46a6      	mov	lr, r4
 8004b2c:	460a      	mov	r2, r1
 8004b2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004b32:	fb07 1516 	mls	r5, r7, r6, r1
 8004b36:	3530      	adds	r5, #48	; 0x30
 8004b38:	2a63      	cmp	r2, #99	; 0x63
 8004b3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004b3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004b42:	4631      	mov	r1, r6
 8004b44:	dcf1      	bgt.n	8004b2a <__exponent+0x22>
 8004b46:	3130      	adds	r1, #48	; 0x30
 8004b48:	f1ae 0502 	sub.w	r5, lr, #2
 8004b4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004b50:	1c44      	adds	r4, r0, #1
 8004b52:	4629      	mov	r1, r5
 8004b54:	4561      	cmp	r1, ip
 8004b56:	d30a      	bcc.n	8004b6e <__exponent+0x66>
 8004b58:	f10d 0209 	add.w	r2, sp, #9
 8004b5c:	eba2 020e 	sub.w	r2, r2, lr
 8004b60:	4565      	cmp	r5, ip
 8004b62:	bf88      	it	hi
 8004b64:	2200      	movhi	r2, #0
 8004b66:	4413      	add	r3, r2
 8004b68:	1a18      	subs	r0, r3, r0
 8004b6a:	b003      	add	sp, #12
 8004b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b72:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004b76:	e7ed      	b.n	8004b54 <__exponent+0x4c>
 8004b78:	2330      	movs	r3, #48	; 0x30
 8004b7a:	3130      	adds	r1, #48	; 0x30
 8004b7c:	7083      	strb	r3, [r0, #2]
 8004b7e:	70c1      	strb	r1, [r0, #3]
 8004b80:	1d03      	adds	r3, r0, #4
 8004b82:	e7f1      	b.n	8004b68 <__exponent+0x60>

08004b84 <_printf_float>:
 8004b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b88:	ed2d 8b02 	vpush	{d8}
 8004b8c:	b08d      	sub	sp, #52	; 0x34
 8004b8e:	460c      	mov	r4, r1
 8004b90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004b94:	4616      	mov	r6, r2
 8004b96:	461f      	mov	r7, r3
 8004b98:	4605      	mov	r5, r0
 8004b9a:	f001 fa57 	bl	800604c <_localeconv_r>
 8004b9e:	f8d0 a000 	ldr.w	sl, [r0]
 8004ba2:	4650      	mov	r0, sl
 8004ba4:	f7fb fb1c 	bl	80001e0 <strlen>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	930a      	str	r3, [sp, #40]	; 0x28
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	9305      	str	r3, [sp, #20]
 8004bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8004bb4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004bb8:	3307      	adds	r3, #7
 8004bba:	f023 0307 	bic.w	r3, r3, #7
 8004bbe:	f103 0208 	add.w	r2, r3, #8
 8004bc2:	f8c8 2000 	str.w	r2, [r8]
 8004bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004bce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004bd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004bd6:	9307      	str	r3, [sp, #28]
 8004bd8:	f8cd 8018 	str.w	r8, [sp, #24]
 8004bdc:	ee08 0a10 	vmov	s16, r0
 8004be0:	4b9f      	ldr	r3, [pc, #636]	; (8004e60 <_printf_float+0x2dc>)
 8004be2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004be6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bea:	f7fb ffa7 	bl	8000b3c <__aeabi_dcmpun>
 8004bee:	bb88      	cbnz	r0, 8004c54 <_printf_float+0xd0>
 8004bf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bf4:	4b9a      	ldr	r3, [pc, #616]	; (8004e60 <_printf_float+0x2dc>)
 8004bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfa:	f7fb ff81 	bl	8000b00 <__aeabi_dcmple>
 8004bfe:	bb48      	cbnz	r0, 8004c54 <_printf_float+0xd0>
 8004c00:	2200      	movs	r2, #0
 8004c02:	2300      	movs	r3, #0
 8004c04:	4640      	mov	r0, r8
 8004c06:	4649      	mov	r1, r9
 8004c08:	f7fb ff70 	bl	8000aec <__aeabi_dcmplt>
 8004c0c:	b110      	cbz	r0, 8004c14 <_printf_float+0x90>
 8004c0e:	232d      	movs	r3, #45	; 0x2d
 8004c10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c14:	4b93      	ldr	r3, [pc, #588]	; (8004e64 <_printf_float+0x2e0>)
 8004c16:	4894      	ldr	r0, [pc, #592]	; (8004e68 <_printf_float+0x2e4>)
 8004c18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004c1c:	bf94      	ite	ls
 8004c1e:	4698      	movls	r8, r3
 8004c20:	4680      	movhi	r8, r0
 8004c22:	2303      	movs	r3, #3
 8004c24:	6123      	str	r3, [r4, #16]
 8004c26:	9b05      	ldr	r3, [sp, #20]
 8004c28:	f023 0204 	bic.w	r2, r3, #4
 8004c2c:	6022      	str	r2, [r4, #0]
 8004c2e:	f04f 0900 	mov.w	r9, #0
 8004c32:	9700      	str	r7, [sp, #0]
 8004c34:	4633      	mov	r3, r6
 8004c36:	aa0b      	add	r2, sp, #44	; 0x2c
 8004c38:	4621      	mov	r1, r4
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	f000 f9d8 	bl	8004ff0 <_printf_common>
 8004c40:	3001      	adds	r0, #1
 8004c42:	f040 8090 	bne.w	8004d66 <_printf_float+0x1e2>
 8004c46:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4a:	b00d      	add	sp, #52	; 0x34
 8004c4c:	ecbd 8b02 	vpop	{d8}
 8004c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c54:	4642      	mov	r2, r8
 8004c56:	464b      	mov	r3, r9
 8004c58:	4640      	mov	r0, r8
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	f7fb ff6e 	bl	8000b3c <__aeabi_dcmpun>
 8004c60:	b140      	cbz	r0, 8004c74 <_printf_float+0xf0>
 8004c62:	464b      	mov	r3, r9
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	bfbc      	itt	lt
 8004c68:	232d      	movlt	r3, #45	; 0x2d
 8004c6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004c6e:	487f      	ldr	r0, [pc, #508]	; (8004e6c <_printf_float+0x2e8>)
 8004c70:	4b7f      	ldr	r3, [pc, #508]	; (8004e70 <_printf_float+0x2ec>)
 8004c72:	e7d1      	b.n	8004c18 <_printf_float+0x94>
 8004c74:	6863      	ldr	r3, [r4, #4]
 8004c76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004c7a:	9206      	str	r2, [sp, #24]
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	d13f      	bne.n	8004d00 <_printf_float+0x17c>
 8004c80:	2306      	movs	r3, #6
 8004c82:	6063      	str	r3, [r4, #4]
 8004c84:	9b05      	ldr	r3, [sp, #20]
 8004c86:	6861      	ldr	r1, [r4, #4]
 8004c88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	9303      	str	r3, [sp, #12]
 8004c90:	ab0a      	add	r3, sp, #40	; 0x28
 8004c92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004c96:	ab09      	add	r3, sp, #36	; 0x24
 8004c98:	ec49 8b10 	vmov	d0, r8, r9
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	6022      	str	r2, [r4, #0]
 8004ca0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	f7ff fecd 	bl	8004a44 <__cvt>
 8004caa:	9b06      	ldr	r3, [sp, #24]
 8004cac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cae:	2b47      	cmp	r3, #71	; 0x47
 8004cb0:	4680      	mov	r8, r0
 8004cb2:	d108      	bne.n	8004cc6 <_printf_float+0x142>
 8004cb4:	1cc8      	adds	r0, r1, #3
 8004cb6:	db02      	blt.n	8004cbe <_printf_float+0x13a>
 8004cb8:	6863      	ldr	r3, [r4, #4]
 8004cba:	4299      	cmp	r1, r3
 8004cbc:	dd41      	ble.n	8004d42 <_printf_float+0x1be>
 8004cbe:	f1ab 0b02 	sub.w	fp, fp, #2
 8004cc2:	fa5f fb8b 	uxtb.w	fp, fp
 8004cc6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004cca:	d820      	bhi.n	8004d0e <_printf_float+0x18a>
 8004ccc:	3901      	subs	r1, #1
 8004cce:	465a      	mov	r2, fp
 8004cd0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004cd4:	9109      	str	r1, [sp, #36]	; 0x24
 8004cd6:	f7ff ff17 	bl	8004b08 <__exponent>
 8004cda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cdc:	1813      	adds	r3, r2, r0
 8004cde:	2a01      	cmp	r2, #1
 8004ce0:	4681      	mov	r9, r0
 8004ce2:	6123      	str	r3, [r4, #16]
 8004ce4:	dc02      	bgt.n	8004cec <_printf_float+0x168>
 8004ce6:	6822      	ldr	r2, [r4, #0]
 8004ce8:	07d2      	lsls	r2, r2, #31
 8004cea:	d501      	bpl.n	8004cf0 <_printf_float+0x16c>
 8004cec:	3301      	adds	r3, #1
 8004cee:	6123      	str	r3, [r4, #16]
 8004cf0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d09c      	beq.n	8004c32 <_printf_float+0xae>
 8004cf8:	232d      	movs	r3, #45	; 0x2d
 8004cfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cfe:	e798      	b.n	8004c32 <_printf_float+0xae>
 8004d00:	9a06      	ldr	r2, [sp, #24]
 8004d02:	2a47      	cmp	r2, #71	; 0x47
 8004d04:	d1be      	bne.n	8004c84 <_printf_float+0x100>
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1bc      	bne.n	8004c84 <_printf_float+0x100>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e7b9      	b.n	8004c82 <_printf_float+0xfe>
 8004d0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004d12:	d118      	bne.n	8004d46 <_printf_float+0x1c2>
 8004d14:	2900      	cmp	r1, #0
 8004d16:	6863      	ldr	r3, [r4, #4]
 8004d18:	dd0b      	ble.n	8004d32 <_printf_float+0x1ae>
 8004d1a:	6121      	str	r1, [r4, #16]
 8004d1c:	b913      	cbnz	r3, 8004d24 <_printf_float+0x1a0>
 8004d1e:	6822      	ldr	r2, [r4, #0]
 8004d20:	07d0      	lsls	r0, r2, #31
 8004d22:	d502      	bpl.n	8004d2a <_printf_float+0x1a6>
 8004d24:	3301      	adds	r3, #1
 8004d26:	440b      	add	r3, r1
 8004d28:	6123      	str	r3, [r4, #16]
 8004d2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d2c:	f04f 0900 	mov.w	r9, #0
 8004d30:	e7de      	b.n	8004cf0 <_printf_float+0x16c>
 8004d32:	b913      	cbnz	r3, 8004d3a <_printf_float+0x1b6>
 8004d34:	6822      	ldr	r2, [r4, #0]
 8004d36:	07d2      	lsls	r2, r2, #31
 8004d38:	d501      	bpl.n	8004d3e <_printf_float+0x1ba>
 8004d3a:	3302      	adds	r3, #2
 8004d3c:	e7f4      	b.n	8004d28 <_printf_float+0x1a4>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e7f2      	b.n	8004d28 <_printf_float+0x1a4>
 8004d42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d48:	4299      	cmp	r1, r3
 8004d4a:	db05      	blt.n	8004d58 <_printf_float+0x1d4>
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	6121      	str	r1, [r4, #16]
 8004d50:	07d8      	lsls	r0, r3, #31
 8004d52:	d5ea      	bpl.n	8004d2a <_printf_float+0x1a6>
 8004d54:	1c4b      	adds	r3, r1, #1
 8004d56:	e7e7      	b.n	8004d28 <_printf_float+0x1a4>
 8004d58:	2900      	cmp	r1, #0
 8004d5a:	bfd4      	ite	le
 8004d5c:	f1c1 0202 	rsble	r2, r1, #2
 8004d60:	2201      	movgt	r2, #1
 8004d62:	4413      	add	r3, r2
 8004d64:	e7e0      	b.n	8004d28 <_printf_float+0x1a4>
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	055a      	lsls	r2, r3, #21
 8004d6a:	d407      	bmi.n	8004d7c <_printf_float+0x1f8>
 8004d6c:	6923      	ldr	r3, [r4, #16]
 8004d6e:	4642      	mov	r2, r8
 8004d70:	4631      	mov	r1, r6
 8004d72:	4628      	mov	r0, r5
 8004d74:	47b8      	blx	r7
 8004d76:	3001      	adds	r0, #1
 8004d78:	d12c      	bne.n	8004dd4 <_printf_float+0x250>
 8004d7a:	e764      	b.n	8004c46 <_printf_float+0xc2>
 8004d7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004d80:	f240 80e0 	bls.w	8004f44 <_printf_float+0x3c0>
 8004d84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	f7fb fea4 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	d034      	beq.n	8004dfe <_printf_float+0x27a>
 8004d94:	4a37      	ldr	r2, [pc, #220]	; (8004e74 <_printf_float+0x2f0>)
 8004d96:	2301      	movs	r3, #1
 8004d98:	4631      	mov	r1, r6
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	47b8      	blx	r7
 8004d9e:	3001      	adds	r0, #1
 8004da0:	f43f af51 	beq.w	8004c46 <_printf_float+0xc2>
 8004da4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004da8:	429a      	cmp	r2, r3
 8004daa:	db02      	blt.n	8004db2 <_printf_float+0x22e>
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	07d8      	lsls	r0, r3, #31
 8004db0:	d510      	bpl.n	8004dd4 <_printf_float+0x250>
 8004db2:	ee18 3a10 	vmov	r3, s16
 8004db6:	4652      	mov	r2, sl
 8004db8:	4631      	mov	r1, r6
 8004dba:	4628      	mov	r0, r5
 8004dbc:	47b8      	blx	r7
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	f43f af41 	beq.w	8004c46 <_printf_float+0xc2>
 8004dc4:	f04f 0800 	mov.w	r8, #0
 8004dc8:	f104 091a 	add.w	r9, r4, #26
 8004dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	4543      	cmp	r3, r8
 8004dd2:	dc09      	bgt.n	8004de8 <_printf_float+0x264>
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	079b      	lsls	r3, r3, #30
 8004dd8:	f100 8105 	bmi.w	8004fe6 <_printf_float+0x462>
 8004ddc:	68e0      	ldr	r0, [r4, #12]
 8004dde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004de0:	4298      	cmp	r0, r3
 8004de2:	bfb8      	it	lt
 8004de4:	4618      	movlt	r0, r3
 8004de6:	e730      	b.n	8004c4a <_printf_float+0xc6>
 8004de8:	2301      	movs	r3, #1
 8004dea:	464a      	mov	r2, r9
 8004dec:	4631      	mov	r1, r6
 8004dee:	4628      	mov	r0, r5
 8004df0:	47b8      	blx	r7
 8004df2:	3001      	adds	r0, #1
 8004df4:	f43f af27 	beq.w	8004c46 <_printf_float+0xc2>
 8004df8:	f108 0801 	add.w	r8, r8, #1
 8004dfc:	e7e6      	b.n	8004dcc <_printf_float+0x248>
 8004dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	dc39      	bgt.n	8004e78 <_printf_float+0x2f4>
 8004e04:	4a1b      	ldr	r2, [pc, #108]	; (8004e74 <_printf_float+0x2f0>)
 8004e06:	2301      	movs	r3, #1
 8004e08:	4631      	mov	r1, r6
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	47b8      	blx	r7
 8004e0e:	3001      	adds	r0, #1
 8004e10:	f43f af19 	beq.w	8004c46 <_printf_float+0xc2>
 8004e14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	d102      	bne.n	8004e22 <_printf_float+0x29e>
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	07d9      	lsls	r1, r3, #31
 8004e20:	d5d8      	bpl.n	8004dd4 <_printf_float+0x250>
 8004e22:	ee18 3a10 	vmov	r3, s16
 8004e26:	4652      	mov	r2, sl
 8004e28:	4631      	mov	r1, r6
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	47b8      	blx	r7
 8004e2e:	3001      	adds	r0, #1
 8004e30:	f43f af09 	beq.w	8004c46 <_printf_float+0xc2>
 8004e34:	f04f 0900 	mov.w	r9, #0
 8004e38:	f104 0a1a 	add.w	sl, r4, #26
 8004e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e3e:	425b      	negs	r3, r3
 8004e40:	454b      	cmp	r3, r9
 8004e42:	dc01      	bgt.n	8004e48 <_printf_float+0x2c4>
 8004e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e46:	e792      	b.n	8004d6e <_printf_float+0x1ea>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	4652      	mov	r2, sl
 8004e4c:	4631      	mov	r1, r6
 8004e4e:	4628      	mov	r0, r5
 8004e50:	47b8      	blx	r7
 8004e52:	3001      	adds	r0, #1
 8004e54:	f43f aef7 	beq.w	8004c46 <_printf_float+0xc2>
 8004e58:	f109 0901 	add.w	r9, r9, #1
 8004e5c:	e7ee      	b.n	8004e3c <_printf_float+0x2b8>
 8004e5e:	bf00      	nop
 8004e60:	7fefffff 	.word	0x7fefffff
 8004e64:	08007894 	.word	0x08007894
 8004e68:	08007898 	.word	0x08007898
 8004e6c:	080078a0 	.word	0x080078a0
 8004e70:	0800789c 	.word	0x0800789c
 8004e74:	080078a4 	.word	0x080078a4
 8004e78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	bfa8      	it	ge
 8004e80:	461a      	movge	r2, r3
 8004e82:	2a00      	cmp	r2, #0
 8004e84:	4691      	mov	r9, r2
 8004e86:	dc37      	bgt.n	8004ef8 <_printf_float+0x374>
 8004e88:	f04f 0b00 	mov.w	fp, #0
 8004e8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e90:	f104 021a 	add.w	r2, r4, #26
 8004e94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e96:	9305      	str	r3, [sp, #20]
 8004e98:	eba3 0309 	sub.w	r3, r3, r9
 8004e9c:	455b      	cmp	r3, fp
 8004e9e:	dc33      	bgt.n	8004f08 <_printf_float+0x384>
 8004ea0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	db3b      	blt.n	8004f20 <_printf_float+0x39c>
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	07da      	lsls	r2, r3, #31
 8004eac:	d438      	bmi.n	8004f20 <_printf_float+0x39c>
 8004eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eb0:	9a05      	ldr	r2, [sp, #20]
 8004eb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004eb4:	1a9a      	subs	r2, r3, r2
 8004eb6:	eba3 0901 	sub.w	r9, r3, r1
 8004eba:	4591      	cmp	r9, r2
 8004ebc:	bfa8      	it	ge
 8004ebe:	4691      	movge	r9, r2
 8004ec0:	f1b9 0f00 	cmp.w	r9, #0
 8004ec4:	dc35      	bgt.n	8004f32 <_printf_float+0x3ae>
 8004ec6:	f04f 0800 	mov.w	r8, #0
 8004eca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ece:	f104 0a1a 	add.w	sl, r4, #26
 8004ed2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ed6:	1a9b      	subs	r3, r3, r2
 8004ed8:	eba3 0309 	sub.w	r3, r3, r9
 8004edc:	4543      	cmp	r3, r8
 8004ede:	f77f af79 	ble.w	8004dd4 <_printf_float+0x250>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	4652      	mov	r2, sl
 8004ee6:	4631      	mov	r1, r6
 8004ee8:	4628      	mov	r0, r5
 8004eea:	47b8      	blx	r7
 8004eec:	3001      	adds	r0, #1
 8004eee:	f43f aeaa 	beq.w	8004c46 <_printf_float+0xc2>
 8004ef2:	f108 0801 	add.w	r8, r8, #1
 8004ef6:	e7ec      	b.n	8004ed2 <_printf_float+0x34e>
 8004ef8:	4613      	mov	r3, r2
 8004efa:	4631      	mov	r1, r6
 8004efc:	4642      	mov	r2, r8
 8004efe:	4628      	mov	r0, r5
 8004f00:	47b8      	blx	r7
 8004f02:	3001      	adds	r0, #1
 8004f04:	d1c0      	bne.n	8004e88 <_printf_float+0x304>
 8004f06:	e69e      	b.n	8004c46 <_printf_float+0xc2>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	9205      	str	r2, [sp, #20]
 8004f10:	47b8      	blx	r7
 8004f12:	3001      	adds	r0, #1
 8004f14:	f43f ae97 	beq.w	8004c46 <_printf_float+0xc2>
 8004f18:	9a05      	ldr	r2, [sp, #20]
 8004f1a:	f10b 0b01 	add.w	fp, fp, #1
 8004f1e:	e7b9      	b.n	8004e94 <_printf_float+0x310>
 8004f20:	ee18 3a10 	vmov	r3, s16
 8004f24:	4652      	mov	r2, sl
 8004f26:	4631      	mov	r1, r6
 8004f28:	4628      	mov	r0, r5
 8004f2a:	47b8      	blx	r7
 8004f2c:	3001      	adds	r0, #1
 8004f2e:	d1be      	bne.n	8004eae <_printf_float+0x32a>
 8004f30:	e689      	b.n	8004c46 <_printf_float+0xc2>
 8004f32:	9a05      	ldr	r2, [sp, #20]
 8004f34:	464b      	mov	r3, r9
 8004f36:	4442      	add	r2, r8
 8004f38:	4631      	mov	r1, r6
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	47b8      	blx	r7
 8004f3e:	3001      	adds	r0, #1
 8004f40:	d1c1      	bne.n	8004ec6 <_printf_float+0x342>
 8004f42:	e680      	b.n	8004c46 <_printf_float+0xc2>
 8004f44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f46:	2a01      	cmp	r2, #1
 8004f48:	dc01      	bgt.n	8004f4e <_printf_float+0x3ca>
 8004f4a:	07db      	lsls	r3, r3, #31
 8004f4c:	d538      	bpl.n	8004fc0 <_printf_float+0x43c>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	4642      	mov	r2, r8
 8004f52:	4631      	mov	r1, r6
 8004f54:	4628      	mov	r0, r5
 8004f56:	47b8      	blx	r7
 8004f58:	3001      	adds	r0, #1
 8004f5a:	f43f ae74 	beq.w	8004c46 <_printf_float+0xc2>
 8004f5e:	ee18 3a10 	vmov	r3, s16
 8004f62:	4652      	mov	r2, sl
 8004f64:	4631      	mov	r1, r6
 8004f66:	4628      	mov	r0, r5
 8004f68:	47b8      	blx	r7
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	f43f ae6b 	beq.w	8004c46 <_printf_float+0xc2>
 8004f70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f74:	2200      	movs	r2, #0
 8004f76:	2300      	movs	r3, #0
 8004f78:	f7fb fdae 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f7c:	b9d8      	cbnz	r0, 8004fb6 <_printf_float+0x432>
 8004f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f80:	f108 0201 	add.w	r2, r8, #1
 8004f84:	3b01      	subs	r3, #1
 8004f86:	4631      	mov	r1, r6
 8004f88:	4628      	mov	r0, r5
 8004f8a:	47b8      	blx	r7
 8004f8c:	3001      	adds	r0, #1
 8004f8e:	d10e      	bne.n	8004fae <_printf_float+0x42a>
 8004f90:	e659      	b.n	8004c46 <_printf_float+0xc2>
 8004f92:	2301      	movs	r3, #1
 8004f94:	4652      	mov	r2, sl
 8004f96:	4631      	mov	r1, r6
 8004f98:	4628      	mov	r0, r5
 8004f9a:	47b8      	blx	r7
 8004f9c:	3001      	adds	r0, #1
 8004f9e:	f43f ae52 	beq.w	8004c46 <_printf_float+0xc2>
 8004fa2:	f108 0801 	add.w	r8, r8, #1
 8004fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	4543      	cmp	r3, r8
 8004fac:	dcf1      	bgt.n	8004f92 <_printf_float+0x40e>
 8004fae:	464b      	mov	r3, r9
 8004fb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004fb4:	e6dc      	b.n	8004d70 <_printf_float+0x1ec>
 8004fb6:	f04f 0800 	mov.w	r8, #0
 8004fba:	f104 0a1a 	add.w	sl, r4, #26
 8004fbe:	e7f2      	b.n	8004fa6 <_printf_float+0x422>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	4642      	mov	r2, r8
 8004fc4:	e7df      	b.n	8004f86 <_printf_float+0x402>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	464a      	mov	r2, r9
 8004fca:	4631      	mov	r1, r6
 8004fcc:	4628      	mov	r0, r5
 8004fce:	47b8      	blx	r7
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	f43f ae38 	beq.w	8004c46 <_printf_float+0xc2>
 8004fd6:	f108 0801 	add.w	r8, r8, #1
 8004fda:	68e3      	ldr	r3, [r4, #12]
 8004fdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fde:	1a5b      	subs	r3, r3, r1
 8004fe0:	4543      	cmp	r3, r8
 8004fe2:	dcf0      	bgt.n	8004fc6 <_printf_float+0x442>
 8004fe4:	e6fa      	b.n	8004ddc <_printf_float+0x258>
 8004fe6:	f04f 0800 	mov.w	r8, #0
 8004fea:	f104 0919 	add.w	r9, r4, #25
 8004fee:	e7f4      	b.n	8004fda <_printf_float+0x456>

08004ff0 <_printf_common>:
 8004ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff4:	4616      	mov	r6, r2
 8004ff6:	4699      	mov	r9, r3
 8004ff8:	688a      	ldr	r2, [r1, #8]
 8004ffa:	690b      	ldr	r3, [r1, #16]
 8004ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005000:	4293      	cmp	r3, r2
 8005002:	bfb8      	it	lt
 8005004:	4613      	movlt	r3, r2
 8005006:	6033      	str	r3, [r6, #0]
 8005008:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800500c:	4607      	mov	r7, r0
 800500e:	460c      	mov	r4, r1
 8005010:	b10a      	cbz	r2, 8005016 <_printf_common+0x26>
 8005012:	3301      	adds	r3, #1
 8005014:	6033      	str	r3, [r6, #0]
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	0699      	lsls	r1, r3, #26
 800501a:	bf42      	ittt	mi
 800501c:	6833      	ldrmi	r3, [r6, #0]
 800501e:	3302      	addmi	r3, #2
 8005020:	6033      	strmi	r3, [r6, #0]
 8005022:	6825      	ldr	r5, [r4, #0]
 8005024:	f015 0506 	ands.w	r5, r5, #6
 8005028:	d106      	bne.n	8005038 <_printf_common+0x48>
 800502a:	f104 0a19 	add.w	sl, r4, #25
 800502e:	68e3      	ldr	r3, [r4, #12]
 8005030:	6832      	ldr	r2, [r6, #0]
 8005032:	1a9b      	subs	r3, r3, r2
 8005034:	42ab      	cmp	r3, r5
 8005036:	dc26      	bgt.n	8005086 <_printf_common+0x96>
 8005038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800503c:	1e13      	subs	r3, r2, #0
 800503e:	6822      	ldr	r2, [r4, #0]
 8005040:	bf18      	it	ne
 8005042:	2301      	movne	r3, #1
 8005044:	0692      	lsls	r2, r2, #26
 8005046:	d42b      	bmi.n	80050a0 <_printf_common+0xb0>
 8005048:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800504c:	4649      	mov	r1, r9
 800504e:	4638      	mov	r0, r7
 8005050:	47c0      	blx	r8
 8005052:	3001      	adds	r0, #1
 8005054:	d01e      	beq.n	8005094 <_printf_common+0xa4>
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	68e5      	ldr	r5, [r4, #12]
 800505a:	6832      	ldr	r2, [r6, #0]
 800505c:	f003 0306 	and.w	r3, r3, #6
 8005060:	2b04      	cmp	r3, #4
 8005062:	bf08      	it	eq
 8005064:	1aad      	subeq	r5, r5, r2
 8005066:	68a3      	ldr	r3, [r4, #8]
 8005068:	6922      	ldr	r2, [r4, #16]
 800506a:	bf0c      	ite	eq
 800506c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005070:	2500      	movne	r5, #0
 8005072:	4293      	cmp	r3, r2
 8005074:	bfc4      	itt	gt
 8005076:	1a9b      	subgt	r3, r3, r2
 8005078:	18ed      	addgt	r5, r5, r3
 800507a:	2600      	movs	r6, #0
 800507c:	341a      	adds	r4, #26
 800507e:	42b5      	cmp	r5, r6
 8005080:	d11a      	bne.n	80050b8 <_printf_common+0xc8>
 8005082:	2000      	movs	r0, #0
 8005084:	e008      	b.n	8005098 <_printf_common+0xa8>
 8005086:	2301      	movs	r3, #1
 8005088:	4652      	mov	r2, sl
 800508a:	4649      	mov	r1, r9
 800508c:	4638      	mov	r0, r7
 800508e:	47c0      	blx	r8
 8005090:	3001      	adds	r0, #1
 8005092:	d103      	bne.n	800509c <_printf_common+0xac>
 8005094:	f04f 30ff 	mov.w	r0, #4294967295
 8005098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800509c:	3501      	adds	r5, #1
 800509e:	e7c6      	b.n	800502e <_printf_common+0x3e>
 80050a0:	18e1      	adds	r1, r4, r3
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	2030      	movs	r0, #48	; 0x30
 80050a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050aa:	4422      	add	r2, r4
 80050ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050b4:	3302      	adds	r3, #2
 80050b6:	e7c7      	b.n	8005048 <_printf_common+0x58>
 80050b8:	2301      	movs	r3, #1
 80050ba:	4622      	mov	r2, r4
 80050bc:	4649      	mov	r1, r9
 80050be:	4638      	mov	r0, r7
 80050c0:	47c0      	blx	r8
 80050c2:	3001      	adds	r0, #1
 80050c4:	d0e6      	beq.n	8005094 <_printf_common+0xa4>
 80050c6:	3601      	adds	r6, #1
 80050c8:	e7d9      	b.n	800507e <_printf_common+0x8e>
	...

080050cc <_printf_i>:
 80050cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050d0:	7e0f      	ldrb	r7, [r1, #24]
 80050d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050d4:	2f78      	cmp	r7, #120	; 0x78
 80050d6:	4691      	mov	r9, r2
 80050d8:	4680      	mov	r8, r0
 80050da:	460c      	mov	r4, r1
 80050dc:	469a      	mov	sl, r3
 80050de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050e2:	d807      	bhi.n	80050f4 <_printf_i+0x28>
 80050e4:	2f62      	cmp	r7, #98	; 0x62
 80050e6:	d80a      	bhi.n	80050fe <_printf_i+0x32>
 80050e8:	2f00      	cmp	r7, #0
 80050ea:	f000 80d8 	beq.w	800529e <_printf_i+0x1d2>
 80050ee:	2f58      	cmp	r7, #88	; 0x58
 80050f0:	f000 80a3 	beq.w	800523a <_printf_i+0x16e>
 80050f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050fc:	e03a      	b.n	8005174 <_printf_i+0xa8>
 80050fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005102:	2b15      	cmp	r3, #21
 8005104:	d8f6      	bhi.n	80050f4 <_printf_i+0x28>
 8005106:	a101      	add	r1, pc, #4	; (adr r1, 800510c <_printf_i+0x40>)
 8005108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800510c:	08005165 	.word	0x08005165
 8005110:	08005179 	.word	0x08005179
 8005114:	080050f5 	.word	0x080050f5
 8005118:	080050f5 	.word	0x080050f5
 800511c:	080050f5 	.word	0x080050f5
 8005120:	080050f5 	.word	0x080050f5
 8005124:	08005179 	.word	0x08005179
 8005128:	080050f5 	.word	0x080050f5
 800512c:	080050f5 	.word	0x080050f5
 8005130:	080050f5 	.word	0x080050f5
 8005134:	080050f5 	.word	0x080050f5
 8005138:	08005285 	.word	0x08005285
 800513c:	080051a9 	.word	0x080051a9
 8005140:	08005267 	.word	0x08005267
 8005144:	080050f5 	.word	0x080050f5
 8005148:	080050f5 	.word	0x080050f5
 800514c:	080052a7 	.word	0x080052a7
 8005150:	080050f5 	.word	0x080050f5
 8005154:	080051a9 	.word	0x080051a9
 8005158:	080050f5 	.word	0x080050f5
 800515c:	080050f5 	.word	0x080050f5
 8005160:	0800526f 	.word	0x0800526f
 8005164:	682b      	ldr	r3, [r5, #0]
 8005166:	1d1a      	adds	r2, r3, #4
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	602a      	str	r2, [r5, #0]
 800516c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005170:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005174:	2301      	movs	r3, #1
 8005176:	e0a3      	b.n	80052c0 <_printf_i+0x1f4>
 8005178:	6820      	ldr	r0, [r4, #0]
 800517a:	6829      	ldr	r1, [r5, #0]
 800517c:	0606      	lsls	r6, r0, #24
 800517e:	f101 0304 	add.w	r3, r1, #4
 8005182:	d50a      	bpl.n	800519a <_printf_i+0xce>
 8005184:	680e      	ldr	r6, [r1, #0]
 8005186:	602b      	str	r3, [r5, #0]
 8005188:	2e00      	cmp	r6, #0
 800518a:	da03      	bge.n	8005194 <_printf_i+0xc8>
 800518c:	232d      	movs	r3, #45	; 0x2d
 800518e:	4276      	negs	r6, r6
 8005190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005194:	485e      	ldr	r0, [pc, #376]	; (8005310 <_printf_i+0x244>)
 8005196:	230a      	movs	r3, #10
 8005198:	e019      	b.n	80051ce <_printf_i+0x102>
 800519a:	680e      	ldr	r6, [r1, #0]
 800519c:	602b      	str	r3, [r5, #0]
 800519e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051a2:	bf18      	it	ne
 80051a4:	b236      	sxthne	r6, r6
 80051a6:	e7ef      	b.n	8005188 <_printf_i+0xbc>
 80051a8:	682b      	ldr	r3, [r5, #0]
 80051aa:	6820      	ldr	r0, [r4, #0]
 80051ac:	1d19      	adds	r1, r3, #4
 80051ae:	6029      	str	r1, [r5, #0]
 80051b0:	0601      	lsls	r1, r0, #24
 80051b2:	d501      	bpl.n	80051b8 <_printf_i+0xec>
 80051b4:	681e      	ldr	r6, [r3, #0]
 80051b6:	e002      	b.n	80051be <_printf_i+0xf2>
 80051b8:	0646      	lsls	r6, r0, #25
 80051ba:	d5fb      	bpl.n	80051b4 <_printf_i+0xe8>
 80051bc:	881e      	ldrh	r6, [r3, #0]
 80051be:	4854      	ldr	r0, [pc, #336]	; (8005310 <_printf_i+0x244>)
 80051c0:	2f6f      	cmp	r7, #111	; 0x6f
 80051c2:	bf0c      	ite	eq
 80051c4:	2308      	moveq	r3, #8
 80051c6:	230a      	movne	r3, #10
 80051c8:	2100      	movs	r1, #0
 80051ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051ce:	6865      	ldr	r5, [r4, #4]
 80051d0:	60a5      	str	r5, [r4, #8]
 80051d2:	2d00      	cmp	r5, #0
 80051d4:	bfa2      	ittt	ge
 80051d6:	6821      	ldrge	r1, [r4, #0]
 80051d8:	f021 0104 	bicge.w	r1, r1, #4
 80051dc:	6021      	strge	r1, [r4, #0]
 80051de:	b90e      	cbnz	r6, 80051e4 <_printf_i+0x118>
 80051e0:	2d00      	cmp	r5, #0
 80051e2:	d04d      	beq.n	8005280 <_printf_i+0x1b4>
 80051e4:	4615      	mov	r5, r2
 80051e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80051ea:	fb03 6711 	mls	r7, r3, r1, r6
 80051ee:	5dc7      	ldrb	r7, [r0, r7]
 80051f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80051f4:	4637      	mov	r7, r6
 80051f6:	42bb      	cmp	r3, r7
 80051f8:	460e      	mov	r6, r1
 80051fa:	d9f4      	bls.n	80051e6 <_printf_i+0x11a>
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d10b      	bne.n	8005218 <_printf_i+0x14c>
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	07de      	lsls	r6, r3, #31
 8005204:	d508      	bpl.n	8005218 <_printf_i+0x14c>
 8005206:	6923      	ldr	r3, [r4, #16]
 8005208:	6861      	ldr	r1, [r4, #4]
 800520a:	4299      	cmp	r1, r3
 800520c:	bfde      	ittt	le
 800520e:	2330      	movle	r3, #48	; 0x30
 8005210:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005214:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005218:	1b52      	subs	r2, r2, r5
 800521a:	6122      	str	r2, [r4, #16]
 800521c:	f8cd a000 	str.w	sl, [sp]
 8005220:	464b      	mov	r3, r9
 8005222:	aa03      	add	r2, sp, #12
 8005224:	4621      	mov	r1, r4
 8005226:	4640      	mov	r0, r8
 8005228:	f7ff fee2 	bl	8004ff0 <_printf_common>
 800522c:	3001      	adds	r0, #1
 800522e:	d14c      	bne.n	80052ca <_printf_i+0x1fe>
 8005230:	f04f 30ff 	mov.w	r0, #4294967295
 8005234:	b004      	add	sp, #16
 8005236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800523a:	4835      	ldr	r0, [pc, #212]	; (8005310 <_printf_i+0x244>)
 800523c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005240:	6829      	ldr	r1, [r5, #0]
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	f851 6b04 	ldr.w	r6, [r1], #4
 8005248:	6029      	str	r1, [r5, #0]
 800524a:	061d      	lsls	r5, r3, #24
 800524c:	d514      	bpl.n	8005278 <_printf_i+0x1ac>
 800524e:	07df      	lsls	r7, r3, #31
 8005250:	bf44      	itt	mi
 8005252:	f043 0320 	orrmi.w	r3, r3, #32
 8005256:	6023      	strmi	r3, [r4, #0]
 8005258:	b91e      	cbnz	r6, 8005262 <_printf_i+0x196>
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	f023 0320 	bic.w	r3, r3, #32
 8005260:	6023      	str	r3, [r4, #0]
 8005262:	2310      	movs	r3, #16
 8005264:	e7b0      	b.n	80051c8 <_printf_i+0xfc>
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	f043 0320 	orr.w	r3, r3, #32
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	2378      	movs	r3, #120	; 0x78
 8005270:	4828      	ldr	r0, [pc, #160]	; (8005314 <_printf_i+0x248>)
 8005272:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005276:	e7e3      	b.n	8005240 <_printf_i+0x174>
 8005278:	0659      	lsls	r1, r3, #25
 800527a:	bf48      	it	mi
 800527c:	b2b6      	uxthmi	r6, r6
 800527e:	e7e6      	b.n	800524e <_printf_i+0x182>
 8005280:	4615      	mov	r5, r2
 8005282:	e7bb      	b.n	80051fc <_printf_i+0x130>
 8005284:	682b      	ldr	r3, [r5, #0]
 8005286:	6826      	ldr	r6, [r4, #0]
 8005288:	6961      	ldr	r1, [r4, #20]
 800528a:	1d18      	adds	r0, r3, #4
 800528c:	6028      	str	r0, [r5, #0]
 800528e:	0635      	lsls	r5, r6, #24
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	d501      	bpl.n	8005298 <_printf_i+0x1cc>
 8005294:	6019      	str	r1, [r3, #0]
 8005296:	e002      	b.n	800529e <_printf_i+0x1d2>
 8005298:	0670      	lsls	r0, r6, #25
 800529a:	d5fb      	bpl.n	8005294 <_printf_i+0x1c8>
 800529c:	8019      	strh	r1, [r3, #0]
 800529e:	2300      	movs	r3, #0
 80052a0:	6123      	str	r3, [r4, #16]
 80052a2:	4615      	mov	r5, r2
 80052a4:	e7ba      	b.n	800521c <_printf_i+0x150>
 80052a6:	682b      	ldr	r3, [r5, #0]
 80052a8:	1d1a      	adds	r2, r3, #4
 80052aa:	602a      	str	r2, [r5, #0]
 80052ac:	681d      	ldr	r5, [r3, #0]
 80052ae:	6862      	ldr	r2, [r4, #4]
 80052b0:	2100      	movs	r1, #0
 80052b2:	4628      	mov	r0, r5
 80052b4:	f7fa ff9c 	bl	80001f0 <memchr>
 80052b8:	b108      	cbz	r0, 80052be <_printf_i+0x1f2>
 80052ba:	1b40      	subs	r0, r0, r5
 80052bc:	6060      	str	r0, [r4, #4]
 80052be:	6863      	ldr	r3, [r4, #4]
 80052c0:	6123      	str	r3, [r4, #16]
 80052c2:	2300      	movs	r3, #0
 80052c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052c8:	e7a8      	b.n	800521c <_printf_i+0x150>
 80052ca:	6923      	ldr	r3, [r4, #16]
 80052cc:	462a      	mov	r2, r5
 80052ce:	4649      	mov	r1, r9
 80052d0:	4640      	mov	r0, r8
 80052d2:	47d0      	blx	sl
 80052d4:	3001      	adds	r0, #1
 80052d6:	d0ab      	beq.n	8005230 <_printf_i+0x164>
 80052d8:	6823      	ldr	r3, [r4, #0]
 80052da:	079b      	lsls	r3, r3, #30
 80052dc:	d413      	bmi.n	8005306 <_printf_i+0x23a>
 80052de:	68e0      	ldr	r0, [r4, #12]
 80052e0:	9b03      	ldr	r3, [sp, #12]
 80052e2:	4298      	cmp	r0, r3
 80052e4:	bfb8      	it	lt
 80052e6:	4618      	movlt	r0, r3
 80052e8:	e7a4      	b.n	8005234 <_printf_i+0x168>
 80052ea:	2301      	movs	r3, #1
 80052ec:	4632      	mov	r2, r6
 80052ee:	4649      	mov	r1, r9
 80052f0:	4640      	mov	r0, r8
 80052f2:	47d0      	blx	sl
 80052f4:	3001      	adds	r0, #1
 80052f6:	d09b      	beq.n	8005230 <_printf_i+0x164>
 80052f8:	3501      	adds	r5, #1
 80052fa:	68e3      	ldr	r3, [r4, #12]
 80052fc:	9903      	ldr	r1, [sp, #12]
 80052fe:	1a5b      	subs	r3, r3, r1
 8005300:	42ab      	cmp	r3, r5
 8005302:	dcf2      	bgt.n	80052ea <_printf_i+0x21e>
 8005304:	e7eb      	b.n	80052de <_printf_i+0x212>
 8005306:	2500      	movs	r5, #0
 8005308:	f104 0619 	add.w	r6, r4, #25
 800530c:	e7f5      	b.n	80052fa <_printf_i+0x22e>
 800530e:	bf00      	nop
 8005310:	080078a6 	.word	0x080078a6
 8005314:	080078b7 	.word	0x080078b7

08005318 <siprintf>:
 8005318:	b40e      	push	{r1, r2, r3}
 800531a:	b500      	push	{lr}
 800531c:	b09c      	sub	sp, #112	; 0x70
 800531e:	ab1d      	add	r3, sp, #116	; 0x74
 8005320:	9002      	str	r0, [sp, #8]
 8005322:	9006      	str	r0, [sp, #24]
 8005324:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005328:	4809      	ldr	r0, [pc, #36]	; (8005350 <siprintf+0x38>)
 800532a:	9107      	str	r1, [sp, #28]
 800532c:	9104      	str	r1, [sp, #16]
 800532e:	4909      	ldr	r1, [pc, #36]	; (8005354 <siprintf+0x3c>)
 8005330:	f853 2b04 	ldr.w	r2, [r3], #4
 8005334:	9105      	str	r1, [sp, #20]
 8005336:	6800      	ldr	r0, [r0, #0]
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	a902      	add	r1, sp, #8
 800533c:	f001 fb76 	bl	8006a2c <_svfiprintf_r>
 8005340:	9b02      	ldr	r3, [sp, #8]
 8005342:	2200      	movs	r2, #0
 8005344:	701a      	strb	r2, [r3, #0]
 8005346:	b01c      	add	sp, #112	; 0x70
 8005348:	f85d eb04 	ldr.w	lr, [sp], #4
 800534c:	b003      	add	sp, #12
 800534e:	4770      	bx	lr
 8005350:	20000064 	.word	0x20000064
 8005354:	ffff0208 	.word	0xffff0208

08005358 <quorem>:
 8005358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535c:	6903      	ldr	r3, [r0, #16]
 800535e:	690c      	ldr	r4, [r1, #16]
 8005360:	42a3      	cmp	r3, r4
 8005362:	4607      	mov	r7, r0
 8005364:	f2c0 8081 	blt.w	800546a <quorem+0x112>
 8005368:	3c01      	subs	r4, #1
 800536a:	f101 0814 	add.w	r8, r1, #20
 800536e:	f100 0514 	add.w	r5, r0, #20
 8005372:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800537c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005380:	3301      	adds	r3, #1
 8005382:	429a      	cmp	r2, r3
 8005384:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005388:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800538c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005390:	d331      	bcc.n	80053f6 <quorem+0x9e>
 8005392:	f04f 0e00 	mov.w	lr, #0
 8005396:	4640      	mov	r0, r8
 8005398:	46ac      	mov	ip, r5
 800539a:	46f2      	mov	sl, lr
 800539c:	f850 2b04 	ldr.w	r2, [r0], #4
 80053a0:	b293      	uxth	r3, r2
 80053a2:	fb06 e303 	mla	r3, r6, r3, lr
 80053a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	ebaa 0303 	sub.w	r3, sl, r3
 80053b0:	f8dc a000 	ldr.w	sl, [ip]
 80053b4:	0c12      	lsrs	r2, r2, #16
 80053b6:	fa13 f38a 	uxtah	r3, r3, sl
 80053ba:	fb06 e202 	mla	r2, r6, r2, lr
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	9b00      	ldr	r3, [sp, #0]
 80053c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80053c6:	b292      	uxth	r2, r2
 80053c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80053cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80053d4:	4581      	cmp	r9, r0
 80053d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053da:	f84c 3b04 	str.w	r3, [ip], #4
 80053de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80053e2:	d2db      	bcs.n	800539c <quorem+0x44>
 80053e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80053e8:	b92b      	cbnz	r3, 80053f6 <quorem+0x9e>
 80053ea:	9b01      	ldr	r3, [sp, #4]
 80053ec:	3b04      	subs	r3, #4
 80053ee:	429d      	cmp	r5, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	d32e      	bcc.n	8005452 <quorem+0xfa>
 80053f4:	613c      	str	r4, [r7, #16]
 80053f6:	4638      	mov	r0, r7
 80053f8:	f001 f8c4 	bl	8006584 <__mcmp>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	db24      	blt.n	800544a <quorem+0xf2>
 8005400:	3601      	adds	r6, #1
 8005402:	4628      	mov	r0, r5
 8005404:	f04f 0c00 	mov.w	ip, #0
 8005408:	f858 2b04 	ldr.w	r2, [r8], #4
 800540c:	f8d0 e000 	ldr.w	lr, [r0]
 8005410:	b293      	uxth	r3, r2
 8005412:	ebac 0303 	sub.w	r3, ip, r3
 8005416:	0c12      	lsrs	r2, r2, #16
 8005418:	fa13 f38e 	uxtah	r3, r3, lr
 800541c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005420:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005424:	b29b      	uxth	r3, r3
 8005426:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800542a:	45c1      	cmp	r9, r8
 800542c:	f840 3b04 	str.w	r3, [r0], #4
 8005430:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005434:	d2e8      	bcs.n	8005408 <quorem+0xb0>
 8005436:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800543a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800543e:	b922      	cbnz	r2, 800544a <quorem+0xf2>
 8005440:	3b04      	subs	r3, #4
 8005442:	429d      	cmp	r5, r3
 8005444:	461a      	mov	r2, r3
 8005446:	d30a      	bcc.n	800545e <quorem+0x106>
 8005448:	613c      	str	r4, [r7, #16]
 800544a:	4630      	mov	r0, r6
 800544c:	b003      	add	sp, #12
 800544e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	3b04      	subs	r3, #4
 8005456:	2a00      	cmp	r2, #0
 8005458:	d1cc      	bne.n	80053f4 <quorem+0x9c>
 800545a:	3c01      	subs	r4, #1
 800545c:	e7c7      	b.n	80053ee <quorem+0x96>
 800545e:	6812      	ldr	r2, [r2, #0]
 8005460:	3b04      	subs	r3, #4
 8005462:	2a00      	cmp	r2, #0
 8005464:	d1f0      	bne.n	8005448 <quorem+0xf0>
 8005466:	3c01      	subs	r4, #1
 8005468:	e7eb      	b.n	8005442 <quorem+0xea>
 800546a:	2000      	movs	r0, #0
 800546c:	e7ee      	b.n	800544c <quorem+0xf4>
	...

08005470 <_dtoa_r>:
 8005470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005474:	ed2d 8b04 	vpush	{d8-d9}
 8005478:	ec57 6b10 	vmov	r6, r7, d0
 800547c:	b093      	sub	sp, #76	; 0x4c
 800547e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005480:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005484:	9106      	str	r1, [sp, #24]
 8005486:	ee10 aa10 	vmov	sl, s0
 800548a:	4604      	mov	r4, r0
 800548c:	9209      	str	r2, [sp, #36]	; 0x24
 800548e:	930c      	str	r3, [sp, #48]	; 0x30
 8005490:	46bb      	mov	fp, r7
 8005492:	b975      	cbnz	r5, 80054b2 <_dtoa_r+0x42>
 8005494:	2010      	movs	r0, #16
 8005496:	f000 fddd 	bl	8006054 <malloc>
 800549a:	4602      	mov	r2, r0
 800549c:	6260      	str	r0, [r4, #36]	; 0x24
 800549e:	b920      	cbnz	r0, 80054aa <_dtoa_r+0x3a>
 80054a0:	4ba7      	ldr	r3, [pc, #668]	; (8005740 <_dtoa_r+0x2d0>)
 80054a2:	21ea      	movs	r1, #234	; 0xea
 80054a4:	48a7      	ldr	r0, [pc, #668]	; (8005744 <_dtoa_r+0x2d4>)
 80054a6:	f001 fbd1 	bl	8006c4c <__assert_func>
 80054aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80054ae:	6005      	str	r5, [r0, #0]
 80054b0:	60c5      	str	r5, [r0, #12]
 80054b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054b4:	6819      	ldr	r1, [r3, #0]
 80054b6:	b151      	cbz	r1, 80054ce <_dtoa_r+0x5e>
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	604a      	str	r2, [r1, #4]
 80054bc:	2301      	movs	r3, #1
 80054be:	4093      	lsls	r3, r2
 80054c0:	608b      	str	r3, [r1, #8]
 80054c2:	4620      	mov	r0, r4
 80054c4:	f000 fe1c 	bl	8006100 <_Bfree>
 80054c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	1e3b      	subs	r3, r7, #0
 80054d0:	bfaa      	itet	ge
 80054d2:	2300      	movge	r3, #0
 80054d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80054d8:	f8c8 3000 	strge.w	r3, [r8]
 80054dc:	4b9a      	ldr	r3, [pc, #616]	; (8005748 <_dtoa_r+0x2d8>)
 80054de:	bfbc      	itt	lt
 80054e0:	2201      	movlt	r2, #1
 80054e2:	f8c8 2000 	strlt.w	r2, [r8]
 80054e6:	ea33 030b 	bics.w	r3, r3, fp
 80054ea:	d11b      	bne.n	8005524 <_dtoa_r+0xb4>
 80054ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80054f2:	6013      	str	r3, [r2, #0]
 80054f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80054f8:	4333      	orrs	r3, r6
 80054fa:	f000 8592 	beq.w	8006022 <_dtoa_r+0xbb2>
 80054fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005500:	b963      	cbnz	r3, 800551c <_dtoa_r+0xac>
 8005502:	4b92      	ldr	r3, [pc, #584]	; (800574c <_dtoa_r+0x2dc>)
 8005504:	e022      	b.n	800554c <_dtoa_r+0xdc>
 8005506:	4b92      	ldr	r3, [pc, #584]	; (8005750 <_dtoa_r+0x2e0>)
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	3308      	adds	r3, #8
 800550c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800550e:	6013      	str	r3, [r2, #0]
 8005510:	9801      	ldr	r0, [sp, #4]
 8005512:	b013      	add	sp, #76	; 0x4c
 8005514:	ecbd 8b04 	vpop	{d8-d9}
 8005518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800551c:	4b8b      	ldr	r3, [pc, #556]	; (800574c <_dtoa_r+0x2dc>)
 800551e:	9301      	str	r3, [sp, #4]
 8005520:	3303      	adds	r3, #3
 8005522:	e7f3      	b.n	800550c <_dtoa_r+0x9c>
 8005524:	2200      	movs	r2, #0
 8005526:	2300      	movs	r3, #0
 8005528:	4650      	mov	r0, sl
 800552a:	4659      	mov	r1, fp
 800552c:	f7fb fad4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005530:	ec4b ab19 	vmov	d9, sl, fp
 8005534:	4680      	mov	r8, r0
 8005536:	b158      	cbz	r0, 8005550 <_dtoa_r+0xe0>
 8005538:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800553a:	2301      	movs	r3, #1
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 856b 	beq.w	800601c <_dtoa_r+0xbac>
 8005546:	4883      	ldr	r0, [pc, #524]	; (8005754 <_dtoa_r+0x2e4>)
 8005548:	6018      	str	r0, [r3, #0]
 800554a:	1e43      	subs	r3, r0, #1
 800554c:	9301      	str	r3, [sp, #4]
 800554e:	e7df      	b.n	8005510 <_dtoa_r+0xa0>
 8005550:	ec4b ab10 	vmov	d0, sl, fp
 8005554:	aa10      	add	r2, sp, #64	; 0x40
 8005556:	a911      	add	r1, sp, #68	; 0x44
 8005558:	4620      	mov	r0, r4
 800555a:	f001 f8b9 	bl	80066d0 <__d2b>
 800555e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005562:	ee08 0a10 	vmov	s16, r0
 8005566:	2d00      	cmp	r5, #0
 8005568:	f000 8084 	beq.w	8005674 <_dtoa_r+0x204>
 800556c:	ee19 3a90 	vmov	r3, s19
 8005570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005574:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005578:	4656      	mov	r6, sl
 800557a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800557e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005582:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005586:	4b74      	ldr	r3, [pc, #464]	; (8005758 <_dtoa_r+0x2e8>)
 8005588:	2200      	movs	r2, #0
 800558a:	4630      	mov	r0, r6
 800558c:	4639      	mov	r1, r7
 800558e:	f7fa fe83 	bl	8000298 <__aeabi_dsub>
 8005592:	a365      	add	r3, pc, #404	; (adr r3, 8005728 <_dtoa_r+0x2b8>)
 8005594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005598:	f7fb f836 	bl	8000608 <__aeabi_dmul>
 800559c:	a364      	add	r3, pc, #400	; (adr r3, 8005730 <_dtoa_r+0x2c0>)
 800559e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a2:	f7fa fe7b 	bl	800029c <__adddf3>
 80055a6:	4606      	mov	r6, r0
 80055a8:	4628      	mov	r0, r5
 80055aa:	460f      	mov	r7, r1
 80055ac:	f7fa ffc2 	bl	8000534 <__aeabi_i2d>
 80055b0:	a361      	add	r3, pc, #388	; (adr r3, 8005738 <_dtoa_r+0x2c8>)
 80055b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b6:	f7fb f827 	bl	8000608 <__aeabi_dmul>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	4630      	mov	r0, r6
 80055c0:	4639      	mov	r1, r7
 80055c2:	f7fa fe6b 	bl	800029c <__adddf3>
 80055c6:	4606      	mov	r6, r0
 80055c8:	460f      	mov	r7, r1
 80055ca:	f7fb facd 	bl	8000b68 <__aeabi_d2iz>
 80055ce:	2200      	movs	r2, #0
 80055d0:	9000      	str	r0, [sp, #0]
 80055d2:	2300      	movs	r3, #0
 80055d4:	4630      	mov	r0, r6
 80055d6:	4639      	mov	r1, r7
 80055d8:	f7fb fa88 	bl	8000aec <__aeabi_dcmplt>
 80055dc:	b150      	cbz	r0, 80055f4 <_dtoa_r+0x184>
 80055de:	9800      	ldr	r0, [sp, #0]
 80055e0:	f7fa ffa8 	bl	8000534 <__aeabi_i2d>
 80055e4:	4632      	mov	r2, r6
 80055e6:	463b      	mov	r3, r7
 80055e8:	f7fb fa76 	bl	8000ad8 <__aeabi_dcmpeq>
 80055ec:	b910      	cbnz	r0, 80055f4 <_dtoa_r+0x184>
 80055ee:	9b00      	ldr	r3, [sp, #0]
 80055f0:	3b01      	subs	r3, #1
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	9b00      	ldr	r3, [sp, #0]
 80055f6:	2b16      	cmp	r3, #22
 80055f8:	d85a      	bhi.n	80056b0 <_dtoa_r+0x240>
 80055fa:	9a00      	ldr	r2, [sp, #0]
 80055fc:	4b57      	ldr	r3, [pc, #348]	; (800575c <_dtoa_r+0x2ec>)
 80055fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005606:	ec51 0b19 	vmov	r0, r1, d9
 800560a:	f7fb fa6f 	bl	8000aec <__aeabi_dcmplt>
 800560e:	2800      	cmp	r0, #0
 8005610:	d050      	beq.n	80056b4 <_dtoa_r+0x244>
 8005612:	9b00      	ldr	r3, [sp, #0]
 8005614:	3b01      	subs	r3, #1
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	2300      	movs	r3, #0
 800561a:	930b      	str	r3, [sp, #44]	; 0x2c
 800561c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800561e:	1b5d      	subs	r5, r3, r5
 8005620:	1e6b      	subs	r3, r5, #1
 8005622:	9305      	str	r3, [sp, #20]
 8005624:	bf45      	ittet	mi
 8005626:	f1c5 0301 	rsbmi	r3, r5, #1
 800562a:	9304      	strmi	r3, [sp, #16]
 800562c:	2300      	movpl	r3, #0
 800562e:	2300      	movmi	r3, #0
 8005630:	bf4c      	ite	mi
 8005632:	9305      	strmi	r3, [sp, #20]
 8005634:	9304      	strpl	r3, [sp, #16]
 8005636:	9b00      	ldr	r3, [sp, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	db3d      	blt.n	80056b8 <_dtoa_r+0x248>
 800563c:	9b05      	ldr	r3, [sp, #20]
 800563e:	9a00      	ldr	r2, [sp, #0]
 8005640:	920a      	str	r2, [sp, #40]	; 0x28
 8005642:	4413      	add	r3, r2
 8005644:	9305      	str	r3, [sp, #20]
 8005646:	2300      	movs	r3, #0
 8005648:	9307      	str	r3, [sp, #28]
 800564a:	9b06      	ldr	r3, [sp, #24]
 800564c:	2b09      	cmp	r3, #9
 800564e:	f200 8089 	bhi.w	8005764 <_dtoa_r+0x2f4>
 8005652:	2b05      	cmp	r3, #5
 8005654:	bfc4      	itt	gt
 8005656:	3b04      	subgt	r3, #4
 8005658:	9306      	strgt	r3, [sp, #24]
 800565a:	9b06      	ldr	r3, [sp, #24]
 800565c:	f1a3 0302 	sub.w	r3, r3, #2
 8005660:	bfcc      	ite	gt
 8005662:	2500      	movgt	r5, #0
 8005664:	2501      	movle	r5, #1
 8005666:	2b03      	cmp	r3, #3
 8005668:	f200 8087 	bhi.w	800577a <_dtoa_r+0x30a>
 800566c:	e8df f003 	tbb	[pc, r3]
 8005670:	59383a2d 	.word	0x59383a2d
 8005674:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005678:	441d      	add	r5, r3
 800567a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800567e:	2b20      	cmp	r3, #32
 8005680:	bfc1      	itttt	gt
 8005682:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005686:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800568a:	fa0b f303 	lslgt.w	r3, fp, r3
 800568e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005692:	bfda      	itte	le
 8005694:	f1c3 0320 	rsble	r3, r3, #32
 8005698:	fa06 f003 	lslle.w	r0, r6, r3
 800569c:	4318      	orrgt	r0, r3
 800569e:	f7fa ff39 	bl	8000514 <__aeabi_ui2d>
 80056a2:	2301      	movs	r3, #1
 80056a4:	4606      	mov	r6, r0
 80056a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80056aa:	3d01      	subs	r5, #1
 80056ac:	930e      	str	r3, [sp, #56]	; 0x38
 80056ae:	e76a      	b.n	8005586 <_dtoa_r+0x116>
 80056b0:	2301      	movs	r3, #1
 80056b2:	e7b2      	b.n	800561a <_dtoa_r+0x1aa>
 80056b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80056b6:	e7b1      	b.n	800561c <_dtoa_r+0x1ac>
 80056b8:	9b04      	ldr	r3, [sp, #16]
 80056ba:	9a00      	ldr	r2, [sp, #0]
 80056bc:	1a9b      	subs	r3, r3, r2
 80056be:	9304      	str	r3, [sp, #16]
 80056c0:	4253      	negs	r3, r2
 80056c2:	9307      	str	r3, [sp, #28]
 80056c4:	2300      	movs	r3, #0
 80056c6:	930a      	str	r3, [sp, #40]	; 0x28
 80056c8:	e7bf      	b.n	800564a <_dtoa_r+0x1da>
 80056ca:	2300      	movs	r3, #0
 80056cc:	9308      	str	r3, [sp, #32]
 80056ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	dc55      	bgt.n	8005780 <_dtoa_r+0x310>
 80056d4:	2301      	movs	r3, #1
 80056d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80056da:	461a      	mov	r2, r3
 80056dc:	9209      	str	r2, [sp, #36]	; 0x24
 80056de:	e00c      	b.n	80056fa <_dtoa_r+0x28a>
 80056e0:	2301      	movs	r3, #1
 80056e2:	e7f3      	b.n	80056cc <_dtoa_r+0x25c>
 80056e4:	2300      	movs	r3, #0
 80056e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056e8:	9308      	str	r3, [sp, #32]
 80056ea:	9b00      	ldr	r3, [sp, #0]
 80056ec:	4413      	add	r3, r2
 80056ee:	9302      	str	r3, [sp, #8]
 80056f0:	3301      	adds	r3, #1
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	9303      	str	r3, [sp, #12]
 80056f6:	bfb8      	it	lt
 80056f8:	2301      	movlt	r3, #1
 80056fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80056fc:	2200      	movs	r2, #0
 80056fe:	6042      	str	r2, [r0, #4]
 8005700:	2204      	movs	r2, #4
 8005702:	f102 0614 	add.w	r6, r2, #20
 8005706:	429e      	cmp	r6, r3
 8005708:	6841      	ldr	r1, [r0, #4]
 800570a:	d93d      	bls.n	8005788 <_dtoa_r+0x318>
 800570c:	4620      	mov	r0, r4
 800570e:	f000 fcb7 	bl	8006080 <_Balloc>
 8005712:	9001      	str	r0, [sp, #4]
 8005714:	2800      	cmp	r0, #0
 8005716:	d13b      	bne.n	8005790 <_dtoa_r+0x320>
 8005718:	4b11      	ldr	r3, [pc, #68]	; (8005760 <_dtoa_r+0x2f0>)
 800571a:	4602      	mov	r2, r0
 800571c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005720:	e6c0      	b.n	80054a4 <_dtoa_r+0x34>
 8005722:	2301      	movs	r3, #1
 8005724:	e7df      	b.n	80056e6 <_dtoa_r+0x276>
 8005726:	bf00      	nop
 8005728:	636f4361 	.word	0x636f4361
 800572c:	3fd287a7 	.word	0x3fd287a7
 8005730:	8b60c8b3 	.word	0x8b60c8b3
 8005734:	3fc68a28 	.word	0x3fc68a28
 8005738:	509f79fb 	.word	0x509f79fb
 800573c:	3fd34413 	.word	0x3fd34413
 8005740:	080078d5 	.word	0x080078d5
 8005744:	080078ec 	.word	0x080078ec
 8005748:	7ff00000 	.word	0x7ff00000
 800574c:	080078d1 	.word	0x080078d1
 8005750:	080078c8 	.word	0x080078c8
 8005754:	080078a5 	.word	0x080078a5
 8005758:	3ff80000 	.word	0x3ff80000
 800575c:	080079e0 	.word	0x080079e0
 8005760:	08007947 	.word	0x08007947
 8005764:	2501      	movs	r5, #1
 8005766:	2300      	movs	r3, #0
 8005768:	9306      	str	r3, [sp, #24]
 800576a:	9508      	str	r5, [sp, #32]
 800576c:	f04f 33ff 	mov.w	r3, #4294967295
 8005770:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005774:	2200      	movs	r2, #0
 8005776:	2312      	movs	r3, #18
 8005778:	e7b0      	b.n	80056dc <_dtoa_r+0x26c>
 800577a:	2301      	movs	r3, #1
 800577c:	9308      	str	r3, [sp, #32]
 800577e:	e7f5      	b.n	800576c <_dtoa_r+0x2fc>
 8005780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005782:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005786:	e7b8      	b.n	80056fa <_dtoa_r+0x28a>
 8005788:	3101      	adds	r1, #1
 800578a:	6041      	str	r1, [r0, #4]
 800578c:	0052      	lsls	r2, r2, #1
 800578e:	e7b8      	b.n	8005702 <_dtoa_r+0x292>
 8005790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005792:	9a01      	ldr	r2, [sp, #4]
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	9b03      	ldr	r3, [sp, #12]
 8005798:	2b0e      	cmp	r3, #14
 800579a:	f200 809d 	bhi.w	80058d8 <_dtoa_r+0x468>
 800579e:	2d00      	cmp	r5, #0
 80057a0:	f000 809a 	beq.w	80058d8 <_dtoa_r+0x468>
 80057a4:	9b00      	ldr	r3, [sp, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	dd32      	ble.n	8005810 <_dtoa_r+0x3a0>
 80057aa:	4ab7      	ldr	r2, [pc, #732]	; (8005a88 <_dtoa_r+0x618>)
 80057ac:	f003 030f 	and.w	r3, r3, #15
 80057b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80057b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057b8:	9b00      	ldr	r3, [sp, #0]
 80057ba:	05d8      	lsls	r0, r3, #23
 80057bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80057c0:	d516      	bpl.n	80057f0 <_dtoa_r+0x380>
 80057c2:	4bb2      	ldr	r3, [pc, #712]	; (8005a8c <_dtoa_r+0x61c>)
 80057c4:	ec51 0b19 	vmov	r0, r1, d9
 80057c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057cc:	f7fb f846 	bl	800085c <__aeabi_ddiv>
 80057d0:	f007 070f 	and.w	r7, r7, #15
 80057d4:	4682      	mov	sl, r0
 80057d6:	468b      	mov	fp, r1
 80057d8:	2503      	movs	r5, #3
 80057da:	4eac      	ldr	r6, [pc, #688]	; (8005a8c <_dtoa_r+0x61c>)
 80057dc:	b957      	cbnz	r7, 80057f4 <_dtoa_r+0x384>
 80057de:	4642      	mov	r2, r8
 80057e0:	464b      	mov	r3, r9
 80057e2:	4650      	mov	r0, sl
 80057e4:	4659      	mov	r1, fp
 80057e6:	f7fb f839 	bl	800085c <__aeabi_ddiv>
 80057ea:	4682      	mov	sl, r0
 80057ec:	468b      	mov	fp, r1
 80057ee:	e028      	b.n	8005842 <_dtoa_r+0x3d2>
 80057f0:	2502      	movs	r5, #2
 80057f2:	e7f2      	b.n	80057da <_dtoa_r+0x36a>
 80057f4:	07f9      	lsls	r1, r7, #31
 80057f6:	d508      	bpl.n	800580a <_dtoa_r+0x39a>
 80057f8:	4640      	mov	r0, r8
 80057fa:	4649      	mov	r1, r9
 80057fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005800:	f7fa ff02 	bl	8000608 <__aeabi_dmul>
 8005804:	3501      	adds	r5, #1
 8005806:	4680      	mov	r8, r0
 8005808:	4689      	mov	r9, r1
 800580a:	107f      	asrs	r7, r7, #1
 800580c:	3608      	adds	r6, #8
 800580e:	e7e5      	b.n	80057dc <_dtoa_r+0x36c>
 8005810:	f000 809b 	beq.w	800594a <_dtoa_r+0x4da>
 8005814:	9b00      	ldr	r3, [sp, #0]
 8005816:	4f9d      	ldr	r7, [pc, #628]	; (8005a8c <_dtoa_r+0x61c>)
 8005818:	425e      	negs	r6, r3
 800581a:	4b9b      	ldr	r3, [pc, #620]	; (8005a88 <_dtoa_r+0x618>)
 800581c:	f006 020f 	and.w	r2, r6, #15
 8005820:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005828:	ec51 0b19 	vmov	r0, r1, d9
 800582c:	f7fa feec 	bl	8000608 <__aeabi_dmul>
 8005830:	1136      	asrs	r6, r6, #4
 8005832:	4682      	mov	sl, r0
 8005834:	468b      	mov	fp, r1
 8005836:	2300      	movs	r3, #0
 8005838:	2502      	movs	r5, #2
 800583a:	2e00      	cmp	r6, #0
 800583c:	d17a      	bne.n	8005934 <_dtoa_r+0x4c4>
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1d3      	bne.n	80057ea <_dtoa_r+0x37a>
 8005842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 8082 	beq.w	800594e <_dtoa_r+0x4de>
 800584a:	4b91      	ldr	r3, [pc, #580]	; (8005a90 <_dtoa_r+0x620>)
 800584c:	2200      	movs	r2, #0
 800584e:	4650      	mov	r0, sl
 8005850:	4659      	mov	r1, fp
 8005852:	f7fb f94b 	bl	8000aec <__aeabi_dcmplt>
 8005856:	2800      	cmp	r0, #0
 8005858:	d079      	beq.n	800594e <_dtoa_r+0x4de>
 800585a:	9b03      	ldr	r3, [sp, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d076      	beq.n	800594e <_dtoa_r+0x4de>
 8005860:	9b02      	ldr	r3, [sp, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	dd36      	ble.n	80058d4 <_dtoa_r+0x464>
 8005866:	9b00      	ldr	r3, [sp, #0]
 8005868:	4650      	mov	r0, sl
 800586a:	4659      	mov	r1, fp
 800586c:	1e5f      	subs	r7, r3, #1
 800586e:	2200      	movs	r2, #0
 8005870:	4b88      	ldr	r3, [pc, #544]	; (8005a94 <_dtoa_r+0x624>)
 8005872:	f7fa fec9 	bl	8000608 <__aeabi_dmul>
 8005876:	9e02      	ldr	r6, [sp, #8]
 8005878:	4682      	mov	sl, r0
 800587a:	468b      	mov	fp, r1
 800587c:	3501      	adds	r5, #1
 800587e:	4628      	mov	r0, r5
 8005880:	f7fa fe58 	bl	8000534 <__aeabi_i2d>
 8005884:	4652      	mov	r2, sl
 8005886:	465b      	mov	r3, fp
 8005888:	f7fa febe 	bl	8000608 <__aeabi_dmul>
 800588c:	4b82      	ldr	r3, [pc, #520]	; (8005a98 <_dtoa_r+0x628>)
 800588e:	2200      	movs	r2, #0
 8005890:	f7fa fd04 	bl	800029c <__adddf3>
 8005894:	46d0      	mov	r8, sl
 8005896:	46d9      	mov	r9, fp
 8005898:	4682      	mov	sl, r0
 800589a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800589e:	2e00      	cmp	r6, #0
 80058a0:	d158      	bne.n	8005954 <_dtoa_r+0x4e4>
 80058a2:	4b7e      	ldr	r3, [pc, #504]	; (8005a9c <_dtoa_r+0x62c>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	4640      	mov	r0, r8
 80058a8:	4649      	mov	r1, r9
 80058aa:	f7fa fcf5 	bl	8000298 <__aeabi_dsub>
 80058ae:	4652      	mov	r2, sl
 80058b0:	465b      	mov	r3, fp
 80058b2:	4680      	mov	r8, r0
 80058b4:	4689      	mov	r9, r1
 80058b6:	f7fb f937 	bl	8000b28 <__aeabi_dcmpgt>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	f040 8295 	bne.w	8005dea <_dtoa_r+0x97a>
 80058c0:	4652      	mov	r2, sl
 80058c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80058c6:	4640      	mov	r0, r8
 80058c8:	4649      	mov	r1, r9
 80058ca:	f7fb f90f 	bl	8000aec <__aeabi_dcmplt>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	f040 8289 	bne.w	8005de6 <_dtoa_r+0x976>
 80058d4:	ec5b ab19 	vmov	sl, fp, d9
 80058d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f2c0 8148 	blt.w	8005b70 <_dtoa_r+0x700>
 80058e0:	9a00      	ldr	r2, [sp, #0]
 80058e2:	2a0e      	cmp	r2, #14
 80058e4:	f300 8144 	bgt.w	8005b70 <_dtoa_r+0x700>
 80058e8:	4b67      	ldr	r3, [pc, #412]	; (8005a88 <_dtoa_r+0x618>)
 80058ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f280 80d5 	bge.w	8005aa4 <_dtoa_r+0x634>
 80058fa:	9b03      	ldr	r3, [sp, #12]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f300 80d1 	bgt.w	8005aa4 <_dtoa_r+0x634>
 8005902:	f040 826f 	bne.w	8005de4 <_dtoa_r+0x974>
 8005906:	4b65      	ldr	r3, [pc, #404]	; (8005a9c <_dtoa_r+0x62c>)
 8005908:	2200      	movs	r2, #0
 800590a:	4640      	mov	r0, r8
 800590c:	4649      	mov	r1, r9
 800590e:	f7fa fe7b 	bl	8000608 <__aeabi_dmul>
 8005912:	4652      	mov	r2, sl
 8005914:	465b      	mov	r3, fp
 8005916:	f7fb f8fd 	bl	8000b14 <__aeabi_dcmpge>
 800591a:	9e03      	ldr	r6, [sp, #12]
 800591c:	4637      	mov	r7, r6
 800591e:	2800      	cmp	r0, #0
 8005920:	f040 8245 	bne.w	8005dae <_dtoa_r+0x93e>
 8005924:	9d01      	ldr	r5, [sp, #4]
 8005926:	2331      	movs	r3, #49	; 0x31
 8005928:	f805 3b01 	strb.w	r3, [r5], #1
 800592c:	9b00      	ldr	r3, [sp, #0]
 800592e:	3301      	adds	r3, #1
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	e240      	b.n	8005db6 <_dtoa_r+0x946>
 8005934:	07f2      	lsls	r2, r6, #31
 8005936:	d505      	bpl.n	8005944 <_dtoa_r+0x4d4>
 8005938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800593c:	f7fa fe64 	bl	8000608 <__aeabi_dmul>
 8005940:	3501      	adds	r5, #1
 8005942:	2301      	movs	r3, #1
 8005944:	1076      	asrs	r6, r6, #1
 8005946:	3708      	adds	r7, #8
 8005948:	e777      	b.n	800583a <_dtoa_r+0x3ca>
 800594a:	2502      	movs	r5, #2
 800594c:	e779      	b.n	8005842 <_dtoa_r+0x3d2>
 800594e:	9f00      	ldr	r7, [sp, #0]
 8005950:	9e03      	ldr	r6, [sp, #12]
 8005952:	e794      	b.n	800587e <_dtoa_r+0x40e>
 8005954:	9901      	ldr	r1, [sp, #4]
 8005956:	4b4c      	ldr	r3, [pc, #304]	; (8005a88 <_dtoa_r+0x618>)
 8005958:	4431      	add	r1, r6
 800595a:	910d      	str	r1, [sp, #52]	; 0x34
 800595c:	9908      	ldr	r1, [sp, #32]
 800595e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005962:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005966:	2900      	cmp	r1, #0
 8005968:	d043      	beq.n	80059f2 <_dtoa_r+0x582>
 800596a:	494d      	ldr	r1, [pc, #308]	; (8005aa0 <_dtoa_r+0x630>)
 800596c:	2000      	movs	r0, #0
 800596e:	f7fa ff75 	bl	800085c <__aeabi_ddiv>
 8005972:	4652      	mov	r2, sl
 8005974:	465b      	mov	r3, fp
 8005976:	f7fa fc8f 	bl	8000298 <__aeabi_dsub>
 800597a:	9d01      	ldr	r5, [sp, #4]
 800597c:	4682      	mov	sl, r0
 800597e:	468b      	mov	fp, r1
 8005980:	4649      	mov	r1, r9
 8005982:	4640      	mov	r0, r8
 8005984:	f7fb f8f0 	bl	8000b68 <__aeabi_d2iz>
 8005988:	4606      	mov	r6, r0
 800598a:	f7fa fdd3 	bl	8000534 <__aeabi_i2d>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	4640      	mov	r0, r8
 8005994:	4649      	mov	r1, r9
 8005996:	f7fa fc7f 	bl	8000298 <__aeabi_dsub>
 800599a:	3630      	adds	r6, #48	; 0x30
 800599c:	f805 6b01 	strb.w	r6, [r5], #1
 80059a0:	4652      	mov	r2, sl
 80059a2:	465b      	mov	r3, fp
 80059a4:	4680      	mov	r8, r0
 80059a6:	4689      	mov	r9, r1
 80059a8:	f7fb f8a0 	bl	8000aec <__aeabi_dcmplt>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d163      	bne.n	8005a78 <_dtoa_r+0x608>
 80059b0:	4642      	mov	r2, r8
 80059b2:	464b      	mov	r3, r9
 80059b4:	4936      	ldr	r1, [pc, #216]	; (8005a90 <_dtoa_r+0x620>)
 80059b6:	2000      	movs	r0, #0
 80059b8:	f7fa fc6e 	bl	8000298 <__aeabi_dsub>
 80059bc:	4652      	mov	r2, sl
 80059be:	465b      	mov	r3, fp
 80059c0:	f7fb f894 	bl	8000aec <__aeabi_dcmplt>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	f040 80b5 	bne.w	8005b34 <_dtoa_r+0x6c4>
 80059ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059cc:	429d      	cmp	r5, r3
 80059ce:	d081      	beq.n	80058d4 <_dtoa_r+0x464>
 80059d0:	4b30      	ldr	r3, [pc, #192]	; (8005a94 <_dtoa_r+0x624>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	4650      	mov	r0, sl
 80059d6:	4659      	mov	r1, fp
 80059d8:	f7fa fe16 	bl	8000608 <__aeabi_dmul>
 80059dc:	4b2d      	ldr	r3, [pc, #180]	; (8005a94 <_dtoa_r+0x624>)
 80059de:	4682      	mov	sl, r0
 80059e0:	468b      	mov	fp, r1
 80059e2:	4640      	mov	r0, r8
 80059e4:	4649      	mov	r1, r9
 80059e6:	2200      	movs	r2, #0
 80059e8:	f7fa fe0e 	bl	8000608 <__aeabi_dmul>
 80059ec:	4680      	mov	r8, r0
 80059ee:	4689      	mov	r9, r1
 80059f0:	e7c6      	b.n	8005980 <_dtoa_r+0x510>
 80059f2:	4650      	mov	r0, sl
 80059f4:	4659      	mov	r1, fp
 80059f6:	f7fa fe07 	bl	8000608 <__aeabi_dmul>
 80059fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059fc:	9d01      	ldr	r5, [sp, #4]
 80059fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a00:	4682      	mov	sl, r0
 8005a02:	468b      	mov	fp, r1
 8005a04:	4649      	mov	r1, r9
 8005a06:	4640      	mov	r0, r8
 8005a08:	f7fb f8ae 	bl	8000b68 <__aeabi_d2iz>
 8005a0c:	4606      	mov	r6, r0
 8005a0e:	f7fa fd91 	bl	8000534 <__aeabi_i2d>
 8005a12:	3630      	adds	r6, #48	; 0x30
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4640      	mov	r0, r8
 8005a1a:	4649      	mov	r1, r9
 8005a1c:	f7fa fc3c 	bl	8000298 <__aeabi_dsub>
 8005a20:	f805 6b01 	strb.w	r6, [r5], #1
 8005a24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a26:	429d      	cmp	r5, r3
 8005a28:	4680      	mov	r8, r0
 8005a2a:	4689      	mov	r9, r1
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	d124      	bne.n	8005a7c <_dtoa_r+0x60c>
 8005a32:	4b1b      	ldr	r3, [pc, #108]	; (8005aa0 <_dtoa_r+0x630>)
 8005a34:	4650      	mov	r0, sl
 8005a36:	4659      	mov	r1, fp
 8005a38:	f7fa fc30 	bl	800029c <__adddf3>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4640      	mov	r0, r8
 8005a42:	4649      	mov	r1, r9
 8005a44:	f7fb f870 	bl	8000b28 <__aeabi_dcmpgt>
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	d173      	bne.n	8005b34 <_dtoa_r+0x6c4>
 8005a4c:	4652      	mov	r2, sl
 8005a4e:	465b      	mov	r3, fp
 8005a50:	4913      	ldr	r1, [pc, #76]	; (8005aa0 <_dtoa_r+0x630>)
 8005a52:	2000      	movs	r0, #0
 8005a54:	f7fa fc20 	bl	8000298 <__aeabi_dsub>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4640      	mov	r0, r8
 8005a5e:	4649      	mov	r1, r9
 8005a60:	f7fb f844 	bl	8000aec <__aeabi_dcmplt>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	f43f af35 	beq.w	80058d4 <_dtoa_r+0x464>
 8005a6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005a6c:	1e6b      	subs	r3, r5, #1
 8005a6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a74:	2b30      	cmp	r3, #48	; 0x30
 8005a76:	d0f8      	beq.n	8005a6a <_dtoa_r+0x5fa>
 8005a78:	9700      	str	r7, [sp, #0]
 8005a7a:	e049      	b.n	8005b10 <_dtoa_r+0x6a0>
 8005a7c:	4b05      	ldr	r3, [pc, #20]	; (8005a94 <_dtoa_r+0x624>)
 8005a7e:	f7fa fdc3 	bl	8000608 <__aeabi_dmul>
 8005a82:	4680      	mov	r8, r0
 8005a84:	4689      	mov	r9, r1
 8005a86:	e7bd      	b.n	8005a04 <_dtoa_r+0x594>
 8005a88:	080079e0 	.word	0x080079e0
 8005a8c:	080079b8 	.word	0x080079b8
 8005a90:	3ff00000 	.word	0x3ff00000
 8005a94:	40240000 	.word	0x40240000
 8005a98:	401c0000 	.word	0x401c0000
 8005a9c:	40140000 	.word	0x40140000
 8005aa0:	3fe00000 	.word	0x3fe00000
 8005aa4:	9d01      	ldr	r5, [sp, #4]
 8005aa6:	4656      	mov	r6, sl
 8005aa8:	465f      	mov	r7, fp
 8005aaa:	4642      	mov	r2, r8
 8005aac:	464b      	mov	r3, r9
 8005aae:	4630      	mov	r0, r6
 8005ab0:	4639      	mov	r1, r7
 8005ab2:	f7fa fed3 	bl	800085c <__aeabi_ddiv>
 8005ab6:	f7fb f857 	bl	8000b68 <__aeabi_d2iz>
 8005aba:	4682      	mov	sl, r0
 8005abc:	f7fa fd3a 	bl	8000534 <__aeabi_i2d>
 8005ac0:	4642      	mov	r2, r8
 8005ac2:	464b      	mov	r3, r9
 8005ac4:	f7fa fda0 	bl	8000608 <__aeabi_dmul>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	4630      	mov	r0, r6
 8005ace:	4639      	mov	r1, r7
 8005ad0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005ad4:	f7fa fbe0 	bl	8000298 <__aeabi_dsub>
 8005ad8:	f805 6b01 	strb.w	r6, [r5], #1
 8005adc:	9e01      	ldr	r6, [sp, #4]
 8005ade:	9f03      	ldr	r7, [sp, #12]
 8005ae0:	1bae      	subs	r6, r5, r6
 8005ae2:	42b7      	cmp	r7, r6
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	d135      	bne.n	8005b56 <_dtoa_r+0x6e6>
 8005aea:	f7fa fbd7 	bl	800029c <__adddf3>
 8005aee:	4642      	mov	r2, r8
 8005af0:	464b      	mov	r3, r9
 8005af2:	4606      	mov	r6, r0
 8005af4:	460f      	mov	r7, r1
 8005af6:	f7fb f817 	bl	8000b28 <__aeabi_dcmpgt>
 8005afa:	b9d0      	cbnz	r0, 8005b32 <_dtoa_r+0x6c2>
 8005afc:	4642      	mov	r2, r8
 8005afe:	464b      	mov	r3, r9
 8005b00:	4630      	mov	r0, r6
 8005b02:	4639      	mov	r1, r7
 8005b04:	f7fa ffe8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b08:	b110      	cbz	r0, 8005b10 <_dtoa_r+0x6a0>
 8005b0a:	f01a 0f01 	tst.w	sl, #1
 8005b0e:	d110      	bne.n	8005b32 <_dtoa_r+0x6c2>
 8005b10:	4620      	mov	r0, r4
 8005b12:	ee18 1a10 	vmov	r1, s16
 8005b16:	f000 faf3 	bl	8006100 <_Bfree>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	9800      	ldr	r0, [sp, #0]
 8005b1e:	702b      	strb	r3, [r5, #0]
 8005b20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b22:	3001      	adds	r0, #1
 8005b24:	6018      	str	r0, [r3, #0]
 8005b26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f43f acf1 	beq.w	8005510 <_dtoa_r+0xa0>
 8005b2e:	601d      	str	r5, [r3, #0]
 8005b30:	e4ee      	b.n	8005510 <_dtoa_r+0xa0>
 8005b32:	9f00      	ldr	r7, [sp, #0]
 8005b34:	462b      	mov	r3, r5
 8005b36:	461d      	mov	r5, r3
 8005b38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b3c:	2a39      	cmp	r2, #57	; 0x39
 8005b3e:	d106      	bne.n	8005b4e <_dtoa_r+0x6de>
 8005b40:	9a01      	ldr	r2, [sp, #4]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d1f7      	bne.n	8005b36 <_dtoa_r+0x6c6>
 8005b46:	9901      	ldr	r1, [sp, #4]
 8005b48:	2230      	movs	r2, #48	; 0x30
 8005b4a:	3701      	adds	r7, #1
 8005b4c:	700a      	strb	r2, [r1, #0]
 8005b4e:	781a      	ldrb	r2, [r3, #0]
 8005b50:	3201      	adds	r2, #1
 8005b52:	701a      	strb	r2, [r3, #0]
 8005b54:	e790      	b.n	8005a78 <_dtoa_r+0x608>
 8005b56:	4ba6      	ldr	r3, [pc, #664]	; (8005df0 <_dtoa_r+0x980>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f7fa fd55 	bl	8000608 <__aeabi_dmul>
 8005b5e:	2200      	movs	r2, #0
 8005b60:	2300      	movs	r3, #0
 8005b62:	4606      	mov	r6, r0
 8005b64:	460f      	mov	r7, r1
 8005b66:	f7fa ffb7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	d09d      	beq.n	8005aaa <_dtoa_r+0x63a>
 8005b6e:	e7cf      	b.n	8005b10 <_dtoa_r+0x6a0>
 8005b70:	9a08      	ldr	r2, [sp, #32]
 8005b72:	2a00      	cmp	r2, #0
 8005b74:	f000 80d7 	beq.w	8005d26 <_dtoa_r+0x8b6>
 8005b78:	9a06      	ldr	r2, [sp, #24]
 8005b7a:	2a01      	cmp	r2, #1
 8005b7c:	f300 80ba 	bgt.w	8005cf4 <_dtoa_r+0x884>
 8005b80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b82:	2a00      	cmp	r2, #0
 8005b84:	f000 80b2 	beq.w	8005cec <_dtoa_r+0x87c>
 8005b88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b8c:	9e07      	ldr	r6, [sp, #28]
 8005b8e:	9d04      	ldr	r5, [sp, #16]
 8005b90:	9a04      	ldr	r2, [sp, #16]
 8005b92:	441a      	add	r2, r3
 8005b94:	9204      	str	r2, [sp, #16]
 8005b96:	9a05      	ldr	r2, [sp, #20]
 8005b98:	2101      	movs	r1, #1
 8005b9a:	441a      	add	r2, r3
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	9205      	str	r2, [sp, #20]
 8005ba0:	f000 fb66 	bl	8006270 <__i2b>
 8005ba4:	4607      	mov	r7, r0
 8005ba6:	2d00      	cmp	r5, #0
 8005ba8:	dd0c      	ble.n	8005bc4 <_dtoa_r+0x754>
 8005baa:	9b05      	ldr	r3, [sp, #20]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	dd09      	ble.n	8005bc4 <_dtoa_r+0x754>
 8005bb0:	42ab      	cmp	r3, r5
 8005bb2:	9a04      	ldr	r2, [sp, #16]
 8005bb4:	bfa8      	it	ge
 8005bb6:	462b      	movge	r3, r5
 8005bb8:	1ad2      	subs	r2, r2, r3
 8005bba:	9204      	str	r2, [sp, #16]
 8005bbc:	9a05      	ldr	r2, [sp, #20]
 8005bbe:	1aed      	subs	r5, r5, r3
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	9305      	str	r3, [sp, #20]
 8005bc4:	9b07      	ldr	r3, [sp, #28]
 8005bc6:	b31b      	cbz	r3, 8005c10 <_dtoa_r+0x7a0>
 8005bc8:	9b08      	ldr	r3, [sp, #32]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 80af 	beq.w	8005d2e <_dtoa_r+0x8be>
 8005bd0:	2e00      	cmp	r6, #0
 8005bd2:	dd13      	ble.n	8005bfc <_dtoa_r+0x78c>
 8005bd4:	4639      	mov	r1, r7
 8005bd6:	4632      	mov	r2, r6
 8005bd8:	4620      	mov	r0, r4
 8005bda:	f000 fc09 	bl	80063f0 <__pow5mult>
 8005bde:	ee18 2a10 	vmov	r2, s16
 8005be2:	4601      	mov	r1, r0
 8005be4:	4607      	mov	r7, r0
 8005be6:	4620      	mov	r0, r4
 8005be8:	f000 fb58 	bl	800629c <__multiply>
 8005bec:	ee18 1a10 	vmov	r1, s16
 8005bf0:	4680      	mov	r8, r0
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f000 fa84 	bl	8006100 <_Bfree>
 8005bf8:	ee08 8a10 	vmov	s16, r8
 8005bfc:	9b07      	ldr	r3, [sp, #28]
 8005bfe:	1b9a      	subs	r2, r3, r6
 8005c00:	d006      	beq.n	8005c10 <_dtoa_r+0x7a0>
 8005c02:	ee18 1a10 	vmov	r1, s16
 8005c06:	4620      	mov	r0, r4
 8005c08:	f000 fbf2 	bl	80063f0 <__pow5mult>
 8005c0c:	ee08 0a10 	vmov	s16, r0
 8005c10:	2101      	movs	r1, #1
 8005c12:	4620      	mov	r0, r4
 8005c14:	f000 fb2c 	bl	8006270 <__i2b>
 8005c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	4606      	mov	r6, r0
 8005c1e:	f340 8088 	ble.w	8005d32 <_dtoa_r+0x8c2>
 8005c22:	461a      	mov	r2, r3
 8005c24:	4601      	mov	r1, r0
 8005c26:	4620      	mov	r0, r4
 8005c28:	f000 fbe2 	bl	80063f0 <__pow5mult>
 8005c2c:	9b06      	ldr	r3, [sp, #24]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	4606      	mov	r6, r0
 8005c32:	f340 8081 	ble.w	8005d38 <_dtoa_r+0x8c8>
 8005c36:	f04f 0800 	mov.w	r8, #0
 8005c3a:	6933      	ldr	r3, [r6, #16]
 8005c3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005c40:	6918      	ldr	r0, [r3, #16]
 8005c42:	f000 fac5 	bl	80061d0 <__hi0bits>
 8005c46:	f1c0 0020 	rsb	r0, r0, #32
 8005c4a:	9b05      	ldr	r3, [sp, #20]
 8005c4c:	4418      	add	r0, r3
 8005c4e:	f010 001f 	ands.w	r0, r0, #31
 8005c52:	f000 8092 	beq.w	8005d7a <_dtoa_r+0x90a>
 8005c56:	f1c0 0320 	rsb	r3, r0, #32
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	f340 808a 	ble.w	8005d74 <_dtoa_r+0x904>
 8005c60:	f1c0 001c 	rsb	r0, r0, #28
 8005c64:	9b04      	ldr	r3, [sp, #16]
 8005c66:	4403      	add	r3, r0
 8005c68:	9304      	str	r3, [sp, #16]
 8005c6a:	9b05      	ldr	r3, [sp, #20]
 8005c6c:	4403      	add	r3, r0
 8005c6e:	4405      	add	r5, r0
 8005c70:	9305      	str	r3, [sp, #20]
 8005c72:	9b04      	ldr	r3, [sp, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	dd07      	ble.n	8005c88 <_dtoa_r+0x818>
 8005c78:	ee18 1a10 	vmov	r1, s16
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	4620      	mov	r0, r4
 8005c80:	f000 fc10 	bl	80064a4 <__lshift>
 8005c84:	ee08 0a10 	vmov	s16, r0
 8005c88:	9b05      	ldr	r3, [sp, #20]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	dd05      	ble.n	8005c9a <_dtoa_r+0x82a>
 8005c8e:	4631      	mov	r1, r6
 8005c90:	461a      	mov	r2, r3
 8005c92:	4620      	mov	r0, r4
 8005c94:	f000 fc06 	bl	80064a4 <__lshift>
 8005c98:	4606      	mov	r6, r0
 8005c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d06e      	beq.n	8005d7e <_dtoa_r+0x90e>
 8005ca0:	ee18 0a10 	vmov	r0, s16
 8005ca4:	4631      	mov	r1, r6
 8005ca6:	f000 fc6d 	bl	8006584 <__mcmp>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	da67      	bge.n	8005d7e <_dtoa_r+0x90e>
 8005cae:	9b00      	ldr	r3, [sp, #0]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	ee18 1a10 	vmov	r1, s16
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	220a      	movs	r2, #10
 8005cba:	2300      	movs	r3, #0
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f000 fa41 	bl	8006144 <__multadd>
 8005cc2:	9b08      	ldr	r3, [sp, #32]
 8005cc4:	ee08 0a10 	vmov	s16, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 81b1 	beq.w	8006030 <_dtoa_r+0xbc0>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	4639      	mov	r1, r7
 8005cd2:	220a      	movs	r2, #10
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f000 fa35 	bl	8006144 <__multadd>
 8005cda:	9b02      	ldr	r3, [sp, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	4607      	mov	r7, r0
 8005ce0:	f300 808e 	bgt.w	8005e00 <_dtoa_r+0x990>
 8005ce4:	9b06      	ldr	r3, [sp, #24]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	dc51      	bgt.n	8005d8e <_dtoa_r+0x91e>
 8005cea:	e089      	b.n	8005e00 <_dtoa_r+0x990>
 8005cec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005cee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005cf2:	e74b      	b.n	8005b8c <_dtoa_r+0x71c>
 8005cf4:	9b03      	ldr	r3, [sp, #12]
 8005cf6:	1e5e      	subs	r6, r3, #1
 8005cf8:	9b07      	ldr	r3, [sp, #28]
 8005cfa:	42b3      	cmp	r3, r6
 8005cfc:	bfbf      	itttt	lt
 8005cfe:	9b07      	ldrlt	r3, [sp, #28]
 8005d00:	9607      	strlt	r6, [sp, #28]
 8005d02:	1af2      	sublt	r2, r6, r3
 8005d04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005d06:	bfb6      	itet	lt
 8005d08:	189b      	addlt	r3, r3, r2
 8005d0a:	1b9e      	subge	r6, r3, r6
 8005d0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005d0e:	9b03      	ldr	r3, [sp, #12]
 8005d10:	bfb8      	it	lt
 8005d12:	2600      	movlt	r6, #0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	bfb7      	itett	lt
 8005d18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005d1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005d20:	1a9d      	sublt	r5, r3, r2
 8005d22:	2300      	movlt	r3, #0
 8005d24:	e734      	b.n	8005b90 <_dtoa_r+0x720>
 8005d26:	9e07      	ldr	r6, [sp, #28]
 8005d28:	9d04      	ldr	r5, [sp, #16]
 8005d2a:	9f08      	ldr	r7, [sp, #32]
 8005d2c:	e73b      	b.n	8005ba6 <_dtoa_r+0x736>
 8005d2e:	9a07      	ldr	r2, [sp, #28]
 8005d30:	e767      	b.n	8005c02 <_dtoa_r+0x792>
 8005d32:	9b06      	ldr	r3, [sp, #24]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	dc18      	bgt.n	8005d6a <_dtoa_r+0x8fa>
 8005d38:	f1ba 0f00 	cmp.w	sl, #0
 8005d3c:	d115      	bne.n	8005d6a <_dtoa_r+0x8fa>
 8005d3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d42:	b993      	cbnz	r3, 8005d6a <_dtoa_r+0x8fa>
 8005d44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d48:	0d1b      	lsrs	r3, r3, #20
 8005d4a:	051b      	lsls	r3, r3, #20
 8005d4c:	b183      	cbz	r3, 8005d70 <_dtoa_r+0x900>
 8005d4e:	9b04      	ldr	r3, [sp, #16]
 8005d50:	3301      	adds	r3, #1
 8005d52:	9304      	str	r3, [sp, #16]
 8005d54:	9b05      	ldr	r3, [sp, #20]
 8005d56:	3301      	adds	r3, #1
 8005d58:	9305      	str	r3, [sp, #20]
 8005d5a:	f04f 0801 	mov.w	r8, #1
 8005d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f47f af6a 	bne.w	8005c3a <_dtoa_r+0x7ca>
 8005d66:	2001      	movs	r0, #1
 8005d68:	e76f      	b.n	8005c4a <_dtoa_r+0x7da>
 8005d6a:	f04f 0800 	mov.w	r8, #0
 8005d6e:	e7f6      	b.n	8005d5e <_dtoa_r+0x8ee>
 8005d70:	4698      	mov	r8, r3
 8005d72:	e7f4      	b.n	8005d5e <_dtoa_r+0x8ee>
 8005d74:	f43f af7d 	beq.w	8005c72 <_dtoa_r+0x802>
 8005d78:	4618      	mov	r0, r3
 8005d7a:	301c      	adds	r0, #28
 8005d7c:	e772      	b.n	8005c64 <_dtoa_r+0x7f4>
 8005d7e:	9b03      	ldr	r3, [sp, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	dc37      	bgt.n	8005df4 <_dtoa_r+0x984>
 8005d84:	9b06      	ldr	r3, [sp, #24]
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	dd34      	ble.n	8005df4 <_dtoa_r+0x984>
 8005d8a:	9b03      	ldr	r3, [sp, #12]
 8005d8c:	9302      	str	r3, [sp, #8]
 8005d8e:	9b02      	ldr	r3, [sp, #8]
 8005d90:	b96b      	cbnz	r3, 8005dae <_dtoa_r+0x93e>
 8005d92:	4631      	mov	r1, r6
 8005d94:	2205      	movs	r2, #5
 8005d96:	4620      	mov	r0, r4
 8005d98:	f000 f9d4 	bl	8006144 <__multadd>
 8005d9c:	4601      	mov	r1, r0
 8005d9e:	4606      	mov	r6, r0
 8005da0:	ee18 0a10 	vmov	r0, s16
 8005da4:	f000 fbee 	bl	8006584 <__mcmp>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	f73f adbb 	bgt.w	8005924 <_dtoa_r+0x4b4>
 8005dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db0:	9d01      	ldr	r5, [sp, #4]
 8005db2:	43db      	mvns	r3, r3
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	f04f 0800 	mov.w	r8, #0
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f000 f99f 	bl	8006100 <_Bfree>
 8005dc2:	2f00      	cmp	r7, #0
 8005dc4:	f43f aea4 	beq.w	8005b10 <_dtoa_r+0x6a0>
 8005dc8:	f1b8 0f00 	cmp.w	r8, #0
 8005dcc:	d005      	beq.n	8005dda <_dtoa_r+0x96a>
 8005dce:	45b8      	cmp	r8, r7
 8005dd0:	d003      	beq.n	8005dda <_dtoa_r+0x96a>
 8005dd2:	4641      	mov	r1, r8
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	f000 f993 	bl	8006100 <_Bfree>
 8005dda:	4639      	mov	r1, r7
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f000 f98f 	bl	8006100 <_Bfree>
 8005de2:	e695      	b.n	8005b10 <_dtoa_r+0x6a0>
 8005de4:	2600      	movs	r6, #0
 8005de6:	4637      	mov	r7, r6
 8005de8:	e7e1      	b.n	8005dae <_dtoa_r+0x93e>
 8005dea:	9700      	str	r7, [sp, #0]
 8005dec:	4637      	mov	r7, r6
 8005dee:	e599      	b.n	8005924 <_dtoa_r+0x4b4>
 8005df0:	40240000 	.word	0x40240000
 8005df4:	9b08      	ldr	r3, [sp, #32]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 80ca 	beq.w	8005f90 <_dtoa_r+0xb20>
 8005dfc:	9b03      	ldr	r3, [sp, #12]
 8005dfe:	9302      	str	r3, [sp, #8]
 8005e00:	2d00      	cmp	r5, #0
 8005e02:	dd05      	ble.n	8005e10 <_dtoa_r+0x9a0>
 8005e04:	4639      	mov	r1, r7
 8005e06:	462a      	mov	r2, r5
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f000 fb4b 	bl	80064a4 <__lshift>
 8005e0e:	4607      	mov	r7, r0
 8005e10:	f1b8 0f00 	cmp.w	r8, #0
 8005e14:	d05b      	beq.n	8005ece <_dtoa_r+0xa5e>
 8005e16:	6879      	ldr	r1, [r7, #4]
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 f931 	bl	8006080 <_Balloc>
 8005e1e:	4605      	mov	r5, r0
 8005e20:	b928      	cbnz	r0, 8005e2e <_dtoa_r+0x9be>
 8005e22:	4b87      	ldr	r3, [pc, #540]	; (8006040 <_dtoa_r+0xbd0>)
 8005e24:	4602      	mov	r2, r0
 8005e26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005e2a:	f7ff bb3b 	b.w	80054a4 <_dtoa_r+0x34>
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	3202      	adds	r2, #2
 8005e32:	0092      	lsls	r2, r2, #2
 8005e34:	f107 010c 	add.w	r1, r7, #12
 8005e38:	300c      	adds	r0, #12
 8005e3a:	f000 f913 	bl	8006064 <memcpy>
 8005e3e:	2201      	movs	r2, #1
 8005e40:	4629      	mov	r1, r5
 8005e42:	4620      	mov	r0, r4
 8005e44:	f000 fb2e 	bl	80064a4 <__lshift>
 8005e48:	9b01      	ldr	r3, [sp, #4]
 8005e4a:	f103 0901 	add.w	r9, r3, #1
 8005e4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005e52:	4413      	add	r3, r2
 8005e54:	9305      	str	r3, [sp, #20]
 8005e56:	f00a 0301 	and.w	r3, sl, #1
 8005e5a:	46b8      	mov	r8, r7
 8005e5c:	9304      	str	r3, [sp, #16]
 8005e5e:	4607      	mov	r7, r0
 8005e60:	4631      	mov	r1, r6
 8005e62:	ee18 0a10 	vmov	r0, s16
 8005e66:	f7ff fa77 	bl	8005358 <quorem>
 8005e6a:	4641      	mov	r1, r8
 8005e6c:	9002      	str	r0, [sp, #8]
 8005e6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005e72:	ee18 0a10 	vmov	r0, s16
 8005e76:	f000 fb85 	bl	8006584 <__mcmp>
 8005e7a:	463a      	mov	r2, r7
 8005e7c:	9003      	str	r0, [sp, #12]
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4620      	mov	r0, r4
 8005e82:	f000 fb9b 	bl	80065bc <__mdiff>
 8005e86:	68c2      	ldr	r2, [r0, #12]
 8005e88:	f109 3bff 	add.w	fp, r9, #4294967295
 8005e8c:	4605      	mov	r5, r0
 8005e8e:	bb02      	cbnz	r2, 8005ed2 <_dtoa_r+0xa62>
 8005e90:	4601      	mov	r1, r0
 8005e92:	ee18 0a10 	vmov	r0, s16
 8005e96:	f000 fb75 	bl	8006584 <__mcmp>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	4629      	mov	r1, r5
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	9207      	str	r2, [sp, #28]
 8005ea2:	f000 f92d 	bl	8006100 <_Bfree>
 8005ea6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005eaa:	ea43 0102 	orr.w	r1, r3, r2
 8005eae:	9b04      	ldr	r3, [sp, #16]
 8005eb0:	430b      	orrs	r3, r1
 8005eb2:	464d      	mov	r5, r9
 8005eb4:	d10f      	bne.n	8005ed6 <_dtoa_r+0xa66>
 8005eb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005eba:	d02a      	beq.n	8005f12 <_dtoa_r+0xaa2>
 8005ebc:	9b03      	ldr	r3, [sp, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	dd02      	ble.n	8005ec8 <_dtoa_r+0xa58>
 8005ec2:	9b02      	ldr	r3, [sp, #8]
 8005ec4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005ec8:	f88b a000 	strb.w	sl, [fp]
 8005ecc:	e775      	b.n	8005dba <_dtoa_r+0x94a>
 8005ece:	4638      	mov	r0, r7
 8005ed0:	e7ba      	b.n	8005e48 <_dtoa_r+0x9d8>
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	e7e2      	b.n	8005e9c <_dtoa_r+0xa2c>
 8005ed6:	9b03      	ldr	r3, [sp, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	db04      	blt.n	8005ee6 <_dtoa_r+0xa76>
 8005edc:	9906      	ldr	r1, [sp, #24]
 8005ede:	430b      	orrs	r3, r1
 8005ee0:	9904      	ldr	r1, [sp, #16]
 8005ee2:	430b      	orrs	r3, r1
 8005ee4:	d122      	bne.n	8005f2c <_dtoa_r+0xabc>
 8005ee6:	2a00      	cmp	r2, #0
 8005ee8:	ddee      	ble.n	8005ec8 <_dtoa_r+0xa58>
 8005eea:	ee18 1a10 	vmov	r1, s16
 8005eee:	2201      	movs	r2, #1
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	f000 fad7 	bl	80064a4 <__lshift>
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	ee08 0a10 	vmov	s16, r0
 8005efc:	f000 fb42 	bl	8006584 <__mcmp>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	dc03      	bgt.n	8005f0c <_dtoa_r+0xa9c>
 8005f04:	d1e0      	bne.n	8005ec8 <_dtoa_r+0xa58>
 8005f06:	f01a 0f01 	tst.w	sl, #1
 8005f0a:	d0dd      	beq.n	8005ec8 <_dtoa_r+0xa58>
 8005f0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005f10:	d1d7      	bne.n	8005ec2 <_dtoa_r+0xa52>
 8005f12:	2339      	movs	r3, #57	; 0x39
 8005f14:	f88b 3000 	strb.w	r3, [fp]
 8005f18:	462b      	mov	r3, r5
 8005f1a:	461d      	mov	r5, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005f22:	2a39      	cmp	r2, #57	; 0x39
 8005f24:	d071      	beq.n	800600a <_dtoa_r+0xb9a>
 8005f26:	3201      	adds	r2, #1
 8005f28:	701a      	strb	r2, [r3, #0]
 8005f2a:	e746      	b.n	8005dba <_dtoa_r+0x94a>
 8005f2c:	2a00      	cmp	r2, #0
 8005f2e:	dd07      	ble.n	8005f40 <_dtoa_r+0xad0>
 8005f30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005f34:	d0ed      	beq.n	8005f12 <_dtoa_r+0xaa2>
 8005f36:	f10a 0301 	add.w	r3, sl, #1
 8005f3a:	f88b 3000 	strb.w	r3, [fp]
 8005f3e:	e73c      	b.n	8005dba <_dtoa_r+0x94a>
 8005f40:	9b05      	ldr	r3, [sp, #20]
 8005f42:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005f46:	4599      	cmp	r9, r3
 8005f48:	d047      	beq.n	8005fda <_dtoa_r+0xb6a>
 8005f4a:	ee18 1a10 	vmov	r1, s16
 8005f4e:	2300      	movs	r3, #0
 8005f50:	220a      	movs	r2, #10
 8005f52:	4620      	mov	r0, r4
 8005f54:	f000 f8f6 	bl	8006144 <__multadd>
 8005f58:	45b8      	cmp	r8, r7
 8005f5a:	ee08 0a10 	vmov	s16, r0
 8005f5e:	f04f 0300 	mov.w	r3, #0
 8005f62:	f04f 020a 	mov.w	r2, #10
 8005f66:	4641      	mov	r1, r8
 8005f68:	4620      	mov	r0, r4
 8005f6a:	d106      	bne.n	8005f7a <_dtoa_r+0xb0a>
 8005f6c:	f000 f8ea 	bl	8006144 <__multadd>
 8005f70:	4680      	mov	r8, r0
 8005f72:	4607      	mov	r7, r0
 8005f74:	f109 0901 	add.w	r9, r9, #1
 8005f78:	e772      	b.n	8005e60 <_dtoa_r+0x9f0>
 8005f7a:	f000 f8e3 	bl	8006144 <__multadd>
 8005f7e:	4639      	mov	r1, r7
 8005f80:	4680      	mov	r8, r0
 8005f82:	2300      	movs	r3, #0
 8005f84:	220a      	movs	r2, #10
 8005f86:	4620      	mov	r0, r4
 8005f88:	f000 f8dc 	bl	8006144 <__multadd>
 8005f8c:	4607      	mov	r7, r0
 8005f8e:	e7f1      	b.n	8005f74 <_dtoa_r+0xb04>
 8005f90:	9b03      	ldr	r3, [sp, #12]
 8005f92:	9302      	str	r3, [sp, #8]
 8005f94:	9d01      	ldr	r5, [sp, #4]
 8005f96:	ee18 0a10 	vmov	r0, s16
 8005f9a:	4631      	mov	r1, r6
 8005f9c:	f7ff f9dc 	bl	8005358 <quorem>
 8005fa0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005fa4:	9b01      	ldr	r3, [sp, #4]
 8005fa6:	f805 ab01 	strb.w	sl, [r5], #1
 8005faa:	1aea      	subs	r2, r5, r3
 8005fac:	9b02      	ldr	r3, [sp, #8]
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	dd09      	ble.n	8005fc6 <_dtoa_r+0xb56>
 8005fb2:	ee18 1a10 	vmov	r1, s16
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	220a      	movs	r2, #10
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f000 f8c2 	bl	8006144 <__multadd>
 8005fc0:	ee08 0a10 	vmov	s16, r0
 8005fc4:	e7e7      	b.n	8005f96 <_dtoa_r+0xb26>
 8005fc6:	9b02      	ldr	r3, [sp, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	bfc8      	it	gt
 8005fcc:	461d      	movgt	r5, r3
 8005fce:	9b01      	ldr	r3, [sp, #4]
 8005fd0:	bfd8      	it	le
 8005fd2:	2501      	movle	r5, #1
 8005fd4:	441d      	add	r5, r3
 8005fd6:	f04f 0800 	mov.w	r8, #0
 8005fda:	ee18 1a10 	vmov	r1, s16
 8005fde:	2201      	movs	r2, #1
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f000 fa5f 	bl	80064a4 <__lshift>
 8005fe6:	4631      	mov	r1, r6
 8005fe8:	ee08 0a10 	vmov	s16, r0
 8005fec:	f000 faca 	bl	8006584 <__mcmp>
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	dc91      	bgt.n	8005f18 <_dtoa_r+0xaa8>
 8005ff4:	d102      	bne.n	8005ffc <_dtoa_r+0xb8c>
 8005ff6:	f01a 0f01 	tst.w	sl, #1
 8005ffa:	d18d      	bne.n	8005f18 <_dtoa_r+0xaa8>
 8005ffc:	462b      	mov	r3, r5
 8005ffe:	461d      	mov	r5, r3
 8006000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006004:	2a30      	cmp	r2, #48	; 0x30
 8006006:	d0fa      	beq.n	8005ffe <_dtoa_r+0xb8e>
 8006008:	e6d7      	b.n	8005dba <_dtoa_r+0x94a>
 800600a:	9a01      	ldr	r2, [sp, #4]
 800600c:	429a      	cmp	r2, r3
 800600e:	d184      	bne.n	8005f1a <_dtoa_r+0xaaa>
 8006010:	9b00      	ldr	r3, [sp, #0]
 8006012:	3301      	adds	r3, #1
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	2331      	movs	r3, #49	; 0x31
 8006018:	7013      	strb	r3, [r2, #0]
 800601a:	e6ce      	b.n	8005dba <_dtoa_r+0x94a>
 800601c:	4b09      	ldr	r3, [pc, #36]	; (8006044 <_dtoa_r+0xbd4>)
 800601e:	f7ff ba95 	b.w	800554c <_dtoa_r+0xdc>
 8006022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006024:	2b00      	cmp	r3, #0
 8006026:	f47f aa6e 	bne.w	8005506 <_dtoa_r+0x96>
 800602a:	4b07      	ldr	r3, [pc, #28]	; (8006048 <_dtoa_r+0xbd8>)
 800602c:	f7ff ba8e 	b.w	800554c <_dtoa_r+0xdc>
 8006030:	9b02      	ldr	r3, [sp, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	dcae      	bgt.n	8005f94 <_dtoa_r+0xb24>
 8006036:	9b06      	ldr	r3, [sp, #24]
 8006038:	2b02      	cmp	r3, #2
 800603a:	f73f aea8 	bgt.w	8005d8e <_dtoa_r+0x91e>
 800603e:	e7a9      	b.n	8005f94 <_dtoa_r+0xb24>
 8006040:	08007947 	.word	0x08007947
 8006044:	080078a4 	.word	0x080078a4
 8006048:	080078c8 	.word	0x080078c8

0800604c <_localeconv_r>:
 800604c:	4800      	ldr	r0, [pc, #0]	; (8006050 <_localeconv_r+0x4>)
 800604e:	4770      	bx	lr
 8006050:	200001b8 	.word	0x200001b8

08006054 <malloc>:
 8006054:	4b02      	ldr	r3, [pc, #8]	; (8006060 <malloc+0xc>)
 8006056:	4601      	mov	r1, r0
 8006058:	6818      	ldr	r0, [r3, #0]
 800605a:	f000 bc17 	b.w	800688c <_malloc_r>
 800605e:	bf00      	nop
 8006060:	20000064 	.word	0x20000064

08006064 <memcpy>:
 8006064:	440a      	add	r2, r1
 8006066:	4291      	cmp	r1, r2
 8006068:	f100 33ff 	add.w	r3, r0, #4294967295
 800606c:	d100      	bne.n	8006070 <memcpy+0xc>
 800606e:	4770      	bx	lr
 8006070:	b510      	push	{r4, lr}
 8006072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006076:	f803 4f01 	strb.w	r4, [r3, #1]!
 800607a:	4291      	cmp	r1, r2
 800607c:	d1f9      	bne.n	8006072 <memcpy+0xe>
 800607e:	bd10      	pop	{r4, pc}

08006080 <_Balloc>:
 8006080:	b570      	push	{r4, r5, r6, lr}
 8006082:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006084:	4604      	mov	r4, r0
 8006086:	460d      	mov	r5, r1
 8006088:	b976      	cbnz	r6, 80060a8 <_Balloc+0x28>
 800608a:	2010      	movs	r0, #16
 800608c:	f7ff ffe2 	bl	8006054 <malloc>
 8006090:	4602      	mov	r2, r0
 8006092:	6260      	str	r0, [r4, #36]	; 0x24
 8006094:	b920      	cbnz	r0, 80060a0 <_Balloc+0x20>
 8006096:	4b18      	ldr	r3, [pc, #96]	; (80060f8 <_Balloc+0x78>)
 8006098:	4818      	ldr	r0, [pc, #96]	; (80060fc <_Balloc+0x7c>)
 800609a:	2166      	movs	r1, #102	; 0x66
 800609c:	f000 fdd6 	bl	8006c4c <__assert_func>
 80060a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060a4:	6006      	str	r6, [r0, #0]
 80060a6:	60c6      	str	r6, [r0, #12]
 80060a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80060aa:	68f3      	ldr	r3, [r6, #12]
 80060ac:	b183      	cbz	r3, 80060d0 <_Balloc+0x50>
 80060ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80060b6:	b9b8      	cbnz	r0, 80060e8 <_Balloc+0x68>
 80060b8:	2101      	movs	r1, #1
 80060ba:	fa01 f605 	lsl.w	r6, r1, r5
 80060be:	1d72      	adds	r2, r6, #5
 80060c0:	0092      	lsls	r2, r2, #2
 80060c2:	4620      	mov	r0, r4
 80060c4:	f000 fb60 	bl	8006788 <_calloc_r>
 80060c8:	b160      	cbz	r0, 80060e4 <_Balloc+0x64>
 80060ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80060ce:	e00e      	b.n	80060ee <_Balloc+0x6e>
 80060d0:	2221      	movs	r2, #33	; 0x21
 80060d2:	2104      	movs	r1, #4
 80060d4:	4620      	mov	r0, r4
 80060d6:	f000 fb57 	bl	8006788 <_calloc_r>
 80060da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060dc:	60f0      	str	r0, [r6, #12]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e4      	bne.n	80060ae <_Balloc+0x2e>
 80060e4:	2000      	movs	r0, #0
 80060e6:	bd70      	pop	{r4, r5, r6, pc}
 80060e8:	6802      	ldr	r2, [r0, #0]
 80060ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80060ee:	2300      	movs	r3, #0
 80060f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80060f4:	e7f7      	b.n	80060e6 <_Balloc+0x66>
 80060f6:	bf00      	nop
 80060f8:	080078d5 	.word	0x080078d5
 80060fc:	08007958 	.word	0x08007958

08006100 <_Bfree>:
 8006100:	b570      	push	{r4, r5, r6, lr}
 8006102:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006104:	4605      	mov	r5, r0
 8006106:	460c      	mov	r4, r1
 8006108:	b976      	cbnz	r6, 8006128 <_Bfree+0x28>
 800610a:	2010      	movs	r0, #16
 800610c:	f7ff ffa2 	bl	8006054 <malloc>
 8006110:	4602      	mov	r2, r0
 8006112:	6268      	str	r0, [r5, #36]	; 0x24
 8006114:	b920      	cbnz	r0, 8006120 <_Bfree+0x20>
 8006116:	4b09      	ldr	r3, [pc, #36]	; (800613c <_Bfree+0x3c>)
 8006118:	4809      	ldr	r0, [pc, #36]	; (8006140 <_Bfree+0x40>)
 800611a:	218a      	movs	r1, #138	; 0x8a
 800611c:	f000 fd96 	bl	8006c4c <__assert_func>
 8006120:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006124:	6006      	str	r6, [r0, #0]
 8006126:	60c6      	str	r6, [r0, #12]
 8006128:	b13c      	cbz	r4, 800613a <_Bfree+0x3a>
 800612a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800612c:	6862      	ldr	r2, [r4, #4]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006134:	6021      	str	r1, [r4, #0]
 8006136:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800613a:	bd70      	pop	{r4, r5, r6, pc}
 800613c:	080078d5 	.word	0x080078d5
 8006140:	08007958 	.word	0x08007958

08006144 <__multadd>:
 8006144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006148:	690d      	ldr	r5, [r1, #16]
 800614a:	4607      	mov	r7, r0
 800614c:	460c      	mov	r4, r1
 800614e:	461e      	mov	r6, r3
 8006150:	f101 0c14 	add.w	ip, r1, #20
 8006154:	2000      	movs	r0, #0
 8006156:	f8dc 3000 	ldr.w	r3, [ip]
 800615a:	b299      	uxth	r1, r3
 800615c:	fb02 6101 	mla	r1, r2, r1, r6
 8006160:	0c1e      	lsrs	r6, r3, #16
 8006162:	0c0b      	lsrs	r3, r1, #16
 8006164:	fb02 3306 	mla	r3, r2, r6, r3
 8006168:	b289      	uxth	r1, r1
 800616a:	3001      	adds	r0, #1
 800616c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006170:	4285      	cmp	r5, r0
 8006172:	f84c 1b04 	str.w	r1, [ip], #4
 8006176:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800617a:	dcec      	bgt.n	8006156 <__multadd+0x12>
 800617c:	b30e      	cbz	r6, 80061c2 <__multadd+0x7e>
 800617e:	68a3      	ldr	r3, [r4, #8]
 8006180:	42ab      	cmp	r3, r5
 8006182:	dc19      	bgt.n	80061b8 <__multadd+0x74>
 8006184:	6861      	ldr	r1, [r4, #4]
 8006186:	4638      	mov	r0, r7
 8006188:	3101      	adds	r1, #1
 800618a:	f7ff ff79 	bl	8006080 <_Balloc>
 800618e:	4680      	mov	r8, r0
 8006190:	b928      	cbnz	r0, 800619e <__multadd+0x5a>
 8006192:	4602      	mov	r2, r0
 8006194:	4b0c      	ldr	r3, [pc, #48]	; (80061c8 <__multadd+0x84>)
 8006196:	480d      	ldr	r0, [pc, #52]	; (80061cc <__multadd+0x88>)
 8006198:	21b5      	movs	r1, #181	; 0xb5
 800619a:	f000 fd57 	bl	8006c4c <__assert_func>
 800619e:	6922      	ldr	r2, [r4, #16]
 80061a0:	3202      	adds	r2, #2
 80061a2:	f104 010c 	add.w	r1, r4, #12
 80061a6:	0092      	lsls	r2, r2, #2
 80061a8:	300c      	adds	r0, #12
 80061aa:	f7ff ff5b 	bl	8006064 <memcpy>
 80061ae:	4621      	mov	r1, r4
 80061b0:	4638      	mov	r0, r7
 80061b2:	f7ff ffa5 	bl	8006100 <_Bfree>
 80061b6:	4644      	mov	r4, r8
 80061b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80061bc:	3501      	adds	r5, #1
 80061be:	615e      	str	r6, [r3, #20]
 80061c0:	6125      	str	r5, [r4, #16]
 80061c2:	4620      	mov	r0, r4
 80061c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061c8:	08007947 	.word	0x08007947
 80061cc:	08007958 	.word	0x08007958

080061d0 <__hi0bits>:
 80061d0:	0c03      	lsrs	r3, r0, #16
 80061d2:	041b      	lsls	r3, r3, #16
 80061d4:	b9d3      	cbnz	r3, 800620c <__hi0bits+0x3c>
 80061d6:	0400      	lsls	r0, r0, #16
 80061d8:	2310      	movs	r3, #16
 80061da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80061de:	bf04      	itt	eq
 80061e0:	0200      	lsleq	r0, r0, #8
 80061e2:	3308      	addeq	r3, #8
 80061e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80061e8:	bf04      	itt	eq
 80061ea:	0100      	lsleq	r0, r0, #4
 80061ec:	3304      	addeq	r3, #4
 80061ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80061f2:	bf04      	itt	eq
 80061f4:	0080      	lsleq	r0, r0, #2
 80061f6:	3302      	addeq	r3, #2
 80061f8:	2800      	cmp	r0, #0
 80061fa:	db05      	blt.n	8006208 <__hi0bits+0x38>
 80061fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006200:	f103 0301 	add.w	r3, r3, #1
 8006204:	bf08      	it	eq
 8006206:	2320      	moveq	r3, #32
 8006208:	4618      	mov	r0, r3
 800620a:	4770      	bx	lr
 800620c:	2300      	movs	r3, #0
 800620e:	e7e4      	b.n	80061da <__hi0bits+0xa>

08006210 <__lo0bits>:
 8006210:	6803      	ldr	r3, [r0, #0]
 8006212:	f013 0207 	ands.w	r2, r3, #7
 8006216:	4601      	mov	r1, r0
 8006218:	d00b      	beq.n	8006232 <__lo0bits+0x22>
 800621a:	07da      	lsls	r2, r3, #31
 800621c:	d423      	bmi.n	8006266 <__lo0bits+0x56>
 800621e:	0798      	lsls	r0, r3, #30
 8006220:	bf49      	itett	mi
 8006222:	085b      	lsrmi	r3, r3, #1
 8006224:	089b      	lsrpl	r3, r3, #2
 8006226:	2001      	movmi	r0, #1
 8006228:	600b      	strmi	r3, [r1, #0]
 800622a:	bf5c      	itt	pl
 800622c:	600b      	strpl	r3, [r1, #0]
 800622e:	2002      	movpl	r0, #2
 8006230:	4770      	bx	lr
 8006232:	b298      	uxth	r0, r3
 8006234:	b9a8      	cbnz	r0, 8006262 <__lo0bits+0x52>
 8006236:	0c1b      	lsrs	r3, r3, #16
 8006238:	2010      	movs	r0, #16
 800623a:	b2da      	uxtb	r2, r3
 800623c:	b90a      	cbnz	r2, 8006242 <__lo0bits+0x32>
 800623e:	3008      	adds	r0, #8
 8006240:	0a1b      	lsrs	r3, r3, #8
 8006242:	071a      	lsls	r2, r3, #28
 8006244:	bf04      	itt	eq
 8006246:	091b      	lsreq	r3, r3, #4
 8006248:	3004      	addeq	r0, #4
 800624a:	079a      	lsls	r2, r3, #30
 800624c:	bf04      	itt	eq
 800624e:	089b      	lsreq	r3, r3, #2
 8006250:	3002      	addeq	r0, #2
 8006252:	07da      	lsls	r2, r3, #31
 8006254:	d403      	bmi.n	800625e <__lo0bits+0x4e>
 8006256:	085b      	lsrs	r3, r3, #1
 8006258:	f100 0001 	add.w	r0, r0, #1
 800625c:	d005      	beq.n	800626a <__lo0bits+0x5a>
 800625e:	600b      	str	r3, [r1, #0]
 8006260:	4770      	bx	lr
 8006262:	4610      	mov	r0, r2
 8006264:	e7e9      	b.n	800623a <__lo0bits+0x2a>
 8006266:	2000      	movs	r0, #0
 8006268:	4770      	bx	lr
 800626a:	2020      	movs	r0, #32
 800626c:	4770      	bx	lr
	...

08006270 <__i2b>:
 8006270:	b510      	push	{r4, lr}
 8006272:	460c      	mov	r4, r1
 8006274:	2101      	movs	r1, #1
 8006276:	f7ff ff03 	bl	8006080 <_Balloc>
 800627a:	4602      	mov	r2, r0
 800627c:	b928      	cbnz	r0, 800628a <__i2b+0x1a>
 800627e:	4b05      	ldr	r3, [pc, #20]	; (8006294 <__i2b+0x24>)
 8006280:	4805      	ldr	r0, [pc, #20]	; (8006298 <__i2b+0x28>)
 8006282:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006286:	f000 fce1 	bl	8006c4c <__assert_func>
 800628a:	2301      	movs	r3, #1
 800628c:	6144      	str	r4, [r0, #20]
 800628e:	6103      	str	r3, [r0, #16]
 8006290:	bd10      	pop	{r4, pc}
 8006292:	bf00      	nop
 8006294:	08007947 	.word	0x08007947
 8006298:	08007958 	.word	0x08007958

0800629c <__multiply>:
 800629c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a0:	4691      	mov	r9, r2
 80062a2:	690a      	ldr	r2, [r1, #16]
 80062a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	bfb8      	it	lt
 80062ac:	460b      	movlt	r3, r1
 80062ae:	460c      	mov	r4, r1
 80062b0:	bfbc      	itt	lt
 80062b2:	464c      	movlt	r4, r9
 80062b4:	4699      	movlt	r9, r3
 80062b6:	6927      	ldr	r7, [r4, #16]
 80062b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80062bc:	68a3      	ldr	r3, [r4, #8]
 80062be:	6861      	ldr	r1, [r4, #4]
 80062c0:	eb07 060a 	add.w	r6, r7, sl
 80062c4:	42b3      	cmp	r3, r6
 80062c6:	b085      	sub	sp, #20
 80062c8:	bfb8      	it	lt
 80062ca:	3101      	addlt	r1, #1
 80062cc:	f7ff fed8 	bl	8006080 <_Balloc>
 80062d0:	b930      	cbnz	r0, 80062e0 <__multiply+0x44>
 80062d2:	4602      	mov	r2, r0
 80062d4:	4b44      	ldr	r3, [pc, #272]	; (80063e8 <__multiply+0x14c>)
 80062d6:	4845      	ldr	r0, [pc, #276]	; (80063ec <__multiply+0x150>)
 80062d8:	f240 115d 	movw	r1, #349	; 0x15d
 80062dc:	f000 fcb6 	bl	8006c4c <__assert_func>
 80062e0:	f100 0514 	add.w	r5, r0, #20
 80062e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80062e8:	462b      	mov	r3, r5
 80062ea:	2200      	movs	r2, #0
 80062ec:	4543      	cmp	r3, r8
 80062ee:	d321      	bcc.n	8006334 <__multiply+0x98>
 80062f0:	f104 0314 	add.w	r3, r4, #20
 80062f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80062f8:	f109 0314 	add.w	r3, r9, #20
 80062fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006300:	9202      	str	r2, [sp, #8]
 8006302:	1b3a      	subs	r2, r7, r4
 8006304:	3a15      	subs	r2, #21
 8006306:	f022 0203 	bic.w	r2, r2, #3
 800630a:	3204      	adds	r2, #4
 800630c:	f104 0115 	add.w	r1, r4, #21
 8006310:	428f      	cmp	r7, r1
 8006312:	bf38      	it	cc
 8006314:	2204      	movcc	r2, #4
 8006316:	9201      	str	r2, [sp, #4]
 8006318:	9a02      	ldr	r2, [sp, #8]
 800631a:	9303      	str	r3, [sp, #12]
 800631c:	429a      	cmp	r2, r3
 800631e:	d80c      	bhi.n	800633a <__multiply+0x9e>
 8006320:	2e00      	cmp	r6, #0
 8006322:	dd03      	ble.n	800632c <__multiply+0x90>
 8006324:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006328:	2b00      	cmp	r3, #0
 800632a:	d05a      	beq.n	80063e2 <__multiply+0x146>
 800632c:	6106      	str	r6, [r0, #16]
 800632e:	b005      	add	sp, #20
 8006330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006334:	f843 2b04 	str.w	r2, [r3], #4
 8006338:	e7d8      	b.n	80062ec <__multiply+0x50>
 800633a:	f8b3 a000 	ldrh.w	sl, [r3]
 800633e:	f1ba 0f00 	cmp.w	sl, #0
 8006342:	d024      	beq.n	800638e <__multiply+0xf2>
 8006344:	f104 0e14 	add.w	lr, r4, #20
 8006348:	46a9      	mov	r9, r5
 800634a:	f04f 0c00 	mov.w	ip, #0
 800634e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006352:	f8d9 1000 	ldr.w	r1, [r9]
 8006356:	fa1f fb82 	uxth.w	fp, r2
 800635a:	b289      	uxth	r1, r1
 800635c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006360:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006364:	f8d9 2000 	ldr.w	r2, [r9]
 8006368:	4461      	add	r1, ip
 800636a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800636e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006372:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006376:	b289      	uxth	r1, r1
 8006378:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800637c:	4577      	cmp	r7, lr
 800637e:	f849 1b04 	str.w	r1, [r9], #4
 8006382:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006386:	d8e2      	bhi.n	800634e <__multiply+0xb2>
 8006388:	9a01      	ldr	r2, [sp, #4]
 800638a:	f845 c002 	str.w	ip, [r5, r2]
 800638e:	9a03      	ldr	r2, [sp, #12]
 8006390:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006394:	3304      	adds	r3, #4
 8006396:	f1b9 0f00 	cmp.w	r9, #0
 800639a:	d020      	beq.n	80063de <__multiply+0x142>
 800639c:	6829      	ldr	r1, [r5, #0]
 800639e:	f104 0c14 	add.w	ip, r4, #20
 80063a2:	46ae      	mov	lr, r5
 80063a4:	f04f 0a00 	mov.w	sl, #0
 80063a8:	f8bc b000 	ldrh.w	fp, [ip]
 80063ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80063b0:	fb09 220b 	mla	r2, r9, fp, r2
 80063b4:	4492      	add	sl, r2
 80063b6:	b289      	uxth	r1, r1
 80063b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80063bc:	f84e 1b04 	str.w	r1, [lr], #4
 80063c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80063c4:	f8be 1000 	ldrh.w	r1, [lr]
 80063c8:	0c12      	lsrs	r2, r2, #16
 80063ca:	fb09 1102 	mla	r1, r9, r2, r1
 80063ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80063d2:	4567      	cmp	r7, ip
 80063d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80063d8:	d8e6      	bhi.n	80063a8 <__multiply+0x10c>
 80063da:	9a01      	ldr	r2, [sp, #4]
 80063dc:	50a9      	str	r1, [r5, r2]
 80063de:	3504      	adds	r5, #4
 80063e0:	e79a      	b.n	8006318 <__multiply+0x7c>
 80063e2:	3e01      	subs	r6, #1
 80063e4:	e79c      	b.n	8006320 <__multiply+0x84>
 80063e6:	bf00      	nop
 80063e8:	08007947 	.word	0x08007947
 80063ec:	08007958 	.word	0x08007958

080063f0 <__pow5mult>:
 80063f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063f4:	4615      	mov	r5, r2
 80063f6:	f012 0203 	ands.w	r2, r2, #3
 80063fa:	4606      	mov	r6, r0
 80063fc:	460f      	mov	r7, r1
 80063fe:	d007      	beq.n	8006410 <__pow5mult+0x20>
 8006400:	4c25      	ldr	r4, [pc, #148]	; (8006498 <__pow5mult+0xa8>)
 8006402:	3a01      	subs	r2, #1
 8006404:	2300      	movs	r3, #0
 8006406:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800640a:	f7ff fe9b 	bl	8006144 <__multadd>
 800640e:	4607      	mov	r7, r0
 8006410:	10ad      	asrs	r5, r5, #2
 8006412:	d03d      	beq.n	8006490 <__pow5mult+0xa0>
 8006414:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006416:	b97c      	cbnz	r4, 8006438 <__pow5mult+0x48>
 8006418:	2010      	movs	r0, #16
 800641a:	f7ff fe1b 	bl	8006054 <malloc>
 800641e:	4602      	mov	r2, r0
 8006420:	6270      	str	r0, [r6, #36]	; 0x24
 8006422:	b928      	cbnz	r0, 8006430 <__pow5mult+0x40>
 8006424:	4b1d      	ldr	r3, [pc, #116]	; (800649c <__pow5mult+0xac>)
 8006426:	481e      	ldr	r0, [pc, #120]	; (80064a0 <__pow5mult+0xb0>)
 8006428:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800642c:	f000 fc0e 	bl	8006c4c <__assert_func>
 8006430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006434:	6004      	str	r4, [r0, #0]
 8006436:	60c4      	str	r4, [r0, #12]
 8006438:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800643c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006440:	b94c      	cbnz	r4, 8006456 <__pow5mult+0x66>
 8006442:	f240 2171 	movw	r1, #625	; 0x271
 8006446:	4630      	mov	r0, r6
 8006448:	f7ff ff12 	bl	8006270 <__i2b>
 800644c:	2300      	movs	r3, #0
 800644e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006452:	4604      	mov	r4, r0
 8006454:	6003      	str	r3, [r0, #0]
 8006456:	f04f 0900 	mov.w	r9, #0
 800645a:	07eb      	lsls	r3, r5, #31
 800645c:	d50a      	bpl.n	8006474 <__pow5mult+0x84>
 800645e:	4639      	mov	r1, r7
 8006460:	4622      	mov	r2, r4
 8006462:	4630      	mov	r0, r6
 8006464:	f7ff ff1a 	bl	800629c <__multiply>
 8006468:	4639      	mov	r1, r7
 800646a:	4680      	mov	r8, r0
 800646c:	4630      	mov	r0, r6
 800646e:	f7ff fe47 	bl	8006100 <_Bfree>
 8006472:	4647      	mov	r7, r8
 8006474:	106d      	asrs	r5, r5, #1
 8006476:	d00b      	beq.n	8006490 <__pow5mult+0xa0>
 8006478:	6820      	ldr	r0, [r4, #0]
 800647a:	b938      	cbnz	r0, 800648c <__pow5mult+0x9c>
 800647c:	4622      	mov	r2, r4
 800647e:	4621      	mov	r1, r4
 8006480:	4630      	mov	r0, r6
 8006482:	f7ff ff0b 	bl	800629c <__multiply>
 8006486:	6020      	str	r0, [r4, #0]
 8006488:	f8c0 9000 	str.w	r9, [r0]
 800648c:	4604      	mov	r4, r0
 800648e:	e7e4      	b.n	800645a <__pow5mult+0x6a>
 8006490:	4638      	mov	r0, r7
 8006492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006496:	bf00      	nop
 8006498:	08007aa8 	.word	0x08007aa8
 800649c:	080078d5 	.word	0x080078d5
 80064a0:	08007958 	.word	0x08007958

080064a4 <__lshift>:
 80064a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a8:	460c      	mov	r4, r1
 80064aa:	6849      	ldr	r1, [r1, #4]
 80064ac:	6923      	ldr	r3, [r4, #16]
 80064ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80064b2:	68a3      	ldr	r3, [r4, #8]
 80064b4:	4607      	mov	r7, r0
 80064b6:	4691      	mov	r9, r2
 80064b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064bc:	f108 0601 	add.w	r6, r8, #1
 80064c0:	42b3      	cmp	r3, r6
 80064c2:	db0b      	blt.n	80064dc <__lshift+0x38>
 80064c4:	4638      	mov	r0, r7
 80064c6:	f7ff fddb 	bl	8006080 <_Balloc>
 80064ca:	4605      	mov	r5, r0
 80064cc:	b948      	cbnz	r0, 80064e2 <__lshift+0x3e>
 80064ce:	4602      	mov	r2, r0
 80064d0:	4b2a      	ldr	r3, [pc, #168]	; (800657c <__lshift+0xd8>)
 80064d2:	482b      	ldr	r0, [pc, #172]	; (8006580 <__lshift+0xdc>)
 80064d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80064d8:	f000 fbb8 	bl	8006c4c <__assert_func>
 80064dc:	3101      	adds	r1, #1
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	e7ee      	b.n	80064c0 <__lshift+0x1c>
 80064e2:	2300      	movs	r3, #0
 80064e4:	f100 0114 	add.w	r1, r0, #20
 80064e8:	f100 0210 	add.w	r2, r0, #16
 80064ec:	4618      	mov	r0, r3
 80064ee:	4553      	cmp	r3, sl
 80064f0:	db37      	blt.n	8006562 <__lshift+0xbe>
 80064f2:	6920      	ldr	r0, [r4, #16]
 80064f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064f8:	f104 0314 	add.w	r3, r4, #20
 80064fc:	f019 091f 	ands.w	r9, r9, #31
 8006500:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006504:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006508:	d02f      	beq.n	800656a <__lshift+0xc6>
 800650a:	f1c9 0e20 	rsb	lr, r9, #32
 800650e:	468a      	mov	sl, r1
 8006510:	f04f 0c00 	mov.w	ip, #0
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	fa02 f209 	lsl.w	r2, r2, r9
 800651a:	ea42 020c 	orr.w	r2, r2, ip
 800651e:	f84a 2b04 	str.w	r2, [sl], #4
 8006522:	f853 2b04 	ldr.w	r2, [r3], #4
 8006526:	4298      	cmp	r0, r3
 8006528:	fa22 fc0e 	lsr.w	ip, r2, lr
 800652c:	d8f2      	bhi.n	8006514 <__lshift+0x70>
 800652e:	1b03      	subs	r3, r0, r4
 8006530:	3b15      	subs	r3, #21
 8006532:	f023 0303 	bic.w	r3, r3, #3
 8006536:	3304      	adds	r3, #4
 8006538:	f104 0215 	add.w	r2, r4, #21
 800653c:	4290      	cmp	r0, r2
 800653e:	bf38      	it	cc
 8006540:	2304      	movcc	r3, #4
 8006542:	f841 c003 	str.w	ip, [r1, r3]
 8006546:	f1bc 0f00 	cmp.w	ip, #0
 800654a:	d001      	beq.n	8006550 <__lshift+0xac>
 800654c:	f108 0602 	add.w	r6, r8, #2
 8006550:	3e01      	subs	r6, #1
 8006552:	4638      	mov	r0, r7
 8006554:	612e      	str	r6, [r5, #16]
 8006556:	4621      	mov	r1, r4
 8006558:	f7ff fdd2 	bl	8006100 <_Bfree>
 800655c:	4628      	mov	r0, r5
 800655e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006562:	f842 0f04 	str.w	r0, [r2, #4]!
 8006566:	3301      	adds	r3, #1
 8006568:	e7c1      	b.n	80064ee <__lshift+0x4a>
 800656a:	3904      	subs	r1, #4
 800656c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006570:	f841 2f04 	str.w	r2, [r1, #4]!
 8006574:	4298      	cmp	r0, r3
 8006576:	d8f9      	bhi.n	800656c <__lshift+0xc8>
 8006578:	e7ea      	b.n	8006550 <__lshift+0xac>
 800657a:	bf00      	nop
 800657c:	08007947 	.word	0x08007947
 8006580:	08007958 	.word	0x08007958

08006584 <__mcmp>:
 8006584:	b530      	push	{r4, r5, lr}
 8006586:	6902      	ldr	r2, [r0, #16]
 8006588:	690c      	ldr	r4, [r1, #16]
 800658a:	1b12      	subs	r2, r2, r4
 800658c:	d10e      	bne.n	80065ac <__mcmp+0x28>
 800658e:	f100 0314 	add.w	r3, r0, #20
 8006592:	3114      	adds	r1, #20
 8006594:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006598:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800659c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80065a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80065a4:	42a5      	cmp	r5, r4
 80065a6:	d003      	beq.n	80065b0 <__mcmp+0x2c>
 80065a8:	d305      	bcc.n	80065b6 <__mcmp+0x32>
 80065aa:	2201      	movs	r2, #1
 80065ac:	4610      	mov	r0, r2
 80065ae:	bd30      	pop	{r4, r5, pc}
 80065b0:	4283      	cmp	r3, r0
 80065b2:	d3f3      	bcc.n	800659c <__mcmp+0x18>
 80065b4:	e7fa      	b.n	80065ac <__mcmp+0x28>
 80065b6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ba:	e7f7      	b.n	80065ac <__mcmp+0x28>

080065bc <__mdiff>:
 80065bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c0:	460c      	mov	r4, r1
 80065c2:	4606      	mov	r6, r0
 80065c4:	4611      	mov	r1, r2
 80065c6:	4620      	mov	r0, r4
 80065c8:	4690      	mov	r8, r2
 80065ca:	f7ff ffdb 	bl	8006584 <__mcmp>
 80065ce:	1e05      	subs	r5, r0, #0
 80065d0:	d110      	bne.n	80065f4 <__mdiff+0x38>
 80065d2:	4629      	mov	r1, r5
 80065d4:	4630      	mov	r0, r6
 80065d6:	f7ff fd53 	bl	8006080 <_Balloc>
 80065da:	b930      	cbnz	r0, 80065ea <__mdiff+0x2e>
 80065dc:	4b3a      	ldr	r3, [pc, #232]	; (80066c8 <__mdiff+0x10c>)
 80065de:	4602      	mov	r2, r0
 80065e0:	f240 2132 	movw	r1, #562	; 0x232
 80065e4:	4839      	ldr	r0, [pc, #228]	; (80066cc <__mdiff+0x110>)
 80065e6:	f000 fb31 	bl	8006c4c <__assert_func>
 80065ea:	2301      	movs	r3, #1
 80065ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80065f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f4:	bfa4      	itt	ge
 80065f6:	4643      	movge	r3, r8
 80065f8:	46a0      	movge	r8, r4
 80065fa:	4630      	mov	r0, r6
 80065fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006600:	bfa6      	itte	ge
 8006602:	461c      	movge	r4, r3
 8006604:	2500      	movge	r5, #0
 8006606:	2501      	movlt	r5, #1
 8006608:	f7ff fd3a 	bl	8006080 <_Balloc>
 800660c:	b920      	cbnz	r0, 8006618 <__mdiff+0x5c>
 800660e:	4b2e      	ldr	r3, [pc, #184]	; (80066c8 <__mdiff+0x10c>)
 8006610:	4602      	mov	r2, r0
 8006612:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006616:	e7e5      	b.n	80065e4 <__mdiff+0x28>
 8006618:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800661c:	6926      	ldr	r6, [r4, #16]
 800661e:	60c5      	str	r5, [r0, #12]
 8006620:	f104 0914 	add.w	r9, r4, #20
 8006624:	f108 0514 	add.w	r5, r8, #20
 8006628:	f100 0e14 	add.w	lr, r0, #20
 800662c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006630:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006634:	f108 0210 	add.w	r2, r8, #16
 8006638:	46f2      	mov	sl, lr
 800663a:	2100      	movs	r1, #0
 800663c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006640:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006644:	fa1f f883 	uxth.w	r8, r3
 8006648:	fa11 f18b 	uxtah	r1, r1, fp
 800664c:	0c1b      	lsrs	r3, r3, #16
 800664e:	eba1 0808 	sub.w	r8, r1, r8
 8006652:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006656:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800665a:	fa1f f888 	uxth.w	r8, r8
 800665e:	1419      	asrs	r1, r3, #16
 8006660:	454e      	cmp	r6, r9
 8006662:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006666:	f84a 3b04 	str.w	r3, [sl], #4
 800666a:	d8e7      	bhi.n	800663c <__mdiff+0x80>
 800666c:	1b33      	subs	r3, r6, r4
 800666e:	3b15      	subs	r3, #21
 8006670:	f023 0303 	bic.w	r3, r3, #3
 8006674:	3304      	adds	r3, #4
 8006676:	3415      	adds	r4, #21
 8006678:	42a6      	cmp	r6, r4
 800667a:	bf38      	it	cc
 800667c:	2304      	movcc	r3, #4
 800667e:	441d      	add	r5, r3
 8006680:	4473      	add	r3, lr
 8006682:	469e      	mov	lr, r3
 8006684:	462e      	mov	r6, r5
 8006686:	4566      	cmp	r6, ip
 8006688:	d30e      	bcc.n	80066a8 <__mdiff+0xec>
 800668a:	f10c 0203 	add.w	r2, ip, #3
 800668e:	1b52      	subs	r2, r2, r5
 8006690:	f022 0203 	bic.w	r2, r2, #3
 8006694:	3d03      	subs	r5, #3
 8006696:	45ac      	cmp	ip, r5
 8006698:	bf38      	it	cc
 800669a:	2200      	movcc	r2, #0
 800669c:	441a      	add	r2, r3
 800669e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80066a2:	b17b      	cbz	r3, 80066c4 <__mdiff+0x108>
 80066a4:	6107      	str	r7, [r0, #16]
 80066a6:	e7a3      	b.n	80065f0 <__mdiff+0x34>
 80066a8:	f856 8b04 	ldr.w	r8, [r6], #4
 80066ac:	fa11 f288 	uxtah	r2, r1, r8
 80066b0:	1414      	asrs	r4, r2, #16
 80066b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80066b6:	b292      	uxth	r2, r2
 80066b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80066bc:	f84e 2b04 	str.w	r2, [lr], #4
 80066c0:	1421      	asrs	r1, r4, #16
 80066c2:	e7e0      	b.n	8006686 <__mdiff+0xca>
 80066c4:	3f01      	subs	r7, #1
 80066c6:	e7ea      	b.n	800669e <__mdiff+0xe2>
 80066c8:	08007947 	.word	0x08007947
 80066cc:	08007958 	.word	0x08007958

080066d0 <__d2b>:
 80066d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80066d4:	4689      	mov	r9, r1
 80066d6:	2101      	movs	r1, #1
 80066d8:	ec57 6b10 	vmov	r6, r7, d0
 80066dc:	4690      	mov	r8, r2
 80066de:	f7ff fccf 	bl	8006080 <_Balloc>
 80066e2:	4604      	mov	r4, r0
 80066e4:	b930      	cbnz	r0, 80066f4 <__d2b+0x24>
 80066e6:	4602      	mov	r2, r0
 80066e8:	4b25      	ldr	r3, [pc, #148]	; (8006780 <__d2b+0xb0>)
 80066ea:	4826      	ldr	r0, [pc, #152]	; (8006784 <__d2b+0xb4>)
 80066ec:	f240 310a 	movw	r1, #778	; 0x30a
 80066f0:	f000 faac 	bl	8006c4c <__assert_func>
 80066f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80066f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80066fc:	bb35      	cbnz	r5, 800674c <__d2b+0x7c>
 80066fe:	2e00      	cmp	r6, #0
 8006700:	9301      	str	r3, [sp, #4]
 8006702:	d028      	beq.n	8006756 <__d2b+0x86>
 8006704:	4668      	mov	r0, sp
 8006706:	9600      	str	r6, [sp, #0]
 8006708:	f7ff fd82 	bl	8006210 <__lo0bits>
 800670c:	9900      	ldr	r1, [sp, #0]
 800670e:	b300      	cbz	r0, 8006752 <__d2b+0x82>
 8006710:	9a01      	ldr	r2, [sp, #4]
 8006712:	f1c0 0320 	rsb	r3, r0, #32
 8006716:	fa02 f303 	lsl.w	r3, r2, r3
 800671a:	430b      	orrs	r3, r1
 800671c:	40c2      	lsrs	r2, r0
 800671e:	6163      	str	r3, [r4, #20]
 8006720:	9201      	str	r2, [sp, #4]
 8006722:	9b01      	ldr	r3, [sp, #4]
 8006724:	61a3      	str	r3, [r4, #24]
 8006726:	2b00      	cmp	r3, #0
 8006728:	bf14      	ite	ne
 800672a:	2202      	movne	r2, #2
 800672c:	2201      	moveq	r2, #1
 800672e:	6122      	str	r2, [r4, #16]
 8006730:	b1d5      	cbz	r5, 8006768 <__d2b+0x98>
 8006732:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006736:	4405      	add	r5, r0
 8006738:	f8c9 5000 	str.w	r5, [r9]
 800673c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006740:	f8c8 0000 	str.w	r0, [r8]
 8006744:	4620      	mov	r0, r4
 8006746:	b003      	add	sp, #12
 8006748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800674c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006750:	e7d5      	b.n	80066fe <__d2b+0x2e>
 8006752:	6161      	str	r1, [r4, #20]
 8006754:	e7e5      	b.n	8006722 <__d2b+0x52>
 8006756:	a801      	add	r0, sp, #4
 8006758:	f7ff fd5a 	bl	8006210 <__lo0bits>
 800675c:	9b01      	ldr	r3, [sp, #4]
 800675e:	6163      	str	r3, [r4, #20]
 8006760:	2201      	movs	r2, #1
 8006762:	6122      	str	r2, [r4, #16]
 8006764:	3020      	adds	r0, #32
 8006766:	e7e3      	b.n	8006730 <__d2b+0x60>
 8006768:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800676c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006770:	f8c9 0000 	str.w	r0, [r9]
 8006774:	6918      	ldr	r0, [r3, #16]
 8006776:	f7ff fd2b 	bl	80061d0 <__hi0bits>
 800677a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800677e:	e7df      	b.n	8006740 <__d2b+0x70>
 8006780:	08007947 	.word	0x08007947
 8006784:	08007958 	.word	0x08007958

08006788 <_calloc_r>:
 8006788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800678a:	fba1 2402 	umull	r2, r4, r1, r2
 800678e:	b94c      	cbnz	r4, 80067a4 <_calloc_r+0x1c>
 8006790:	4611      	mov	r1, r2
 8006792:	9201      	str	r2, [sp, #4]
 8006794:	f000 f87a 	bl	800688c <_malloc_r>
 8006798:	9a01      	ldr	r2, [sp, #4]
 800679a:	4605      	mov	r5, r0
 800679c:	b930      	cbnz	r0, 80067ac <_calloc_r+0x24>
 800679e:	4628      	mov	r0, r5
 80067a0:	b003      	add	sp, #12
 80067a2:	bd30      	pop	{r4, r5, pc}
 80067a4:	220c      	movs	r2, #12
 80067a6:	6002      	str	r2, [r0, #0]
 80067a8:	2500      	movs	r5, #0
 80067aa:	e7f8      	b.n	800679e <_calloc_r+0x16>
 80067ac:	4621      	mov	r1, r4
 80067ae:	f7fe f941 	bl	8004a34 <memset>
 80067b2:	e7f4      	b.n	800679e <_calloc_r+0x16>

080067b4 <_free_r>:
 80067b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067b6:	2900      	cmp	r1, #0
 80067b8:	d044      	beq.n	8006844 <_free_r+0x90>
 80067ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067be:	9001      	str	r0, [sp, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f1a1 0404 	sub.w	r4, r1, #4
 80067c6:	bfb8      	it	lt
 80067c8:	18e4      	addlt	r4, r4, r3
 80067ca:	f000 fa9b 	bl	8006d04 <__malloc_lock>
 80067ce:	4a1e      	ldr	r2, [pc, #120]	; (8006848 <_free_r+0x94>)
 80067d0:	9801      	ldr	r0, [sp, #4]
 80067d2:	6813      	ldr	r3, [r2, #0]
 80067d4:	b933      	cbnz	r3, 80067e4 <_free_r+0x30>
 80067d6:	6063      	str	r3, [r4, #4]
 80067d8:	6014      	str	r4, [r2, #0]
 80067da:	b003      	add	sp, #12
 80067dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067e0:	f000 ba96 	b.w	8006d10 <__malloc_unlock>
 80067e4:	42a3      	cmp	r3, r4
 80067e6:	d908      	bls.n	80067fa <_free_r+0x46>
 80067e8:	6825      	ldr	r5, [r4, #0]
 80067ea:	1961      	adds	r1, r4, r5
 80067ec:	428b      	cmp	r3, r1
 80067ee:	bf01      	itttt	eq
 80067f0:	6819      	ldreq	r1, [r3, #0]
 80067f2:	685b      	ldreq	r3, [r3, #4]
 80067f4:	1949      	addeq	r1, r1, r5
 80067f6:	6021      	streq	r1, [r4, #0]
 80067f8:	e7ed      	b.n	80067d6 <_free_r+0x22>
 80067fa:	461a      	mov	r2, r3
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	b10b      	cbz	r3, 8006804 <_free_r+0x50>
 8006800:	42a3      	cmp	r3, r4
 8006802:	d9fa      	bls.n	80067fa <_free_r+0x46>
 8006804:	6811      	ldr	r1, [r2, #0]
 8006806:	1855      	adds	r5, r2, r1
 8006808:	42a5      	cmp	r5, r4
 800680a:	d10b      	bne.n	8006824 <_free_r+0x70>
 800680c:	6824      	ldr	r4, [r4, #0]
 800680e:	4421      	add	r1, r4
 8006810:	1854      	adds	r4, r2, r1
 8006812:	42a3      	cmp	r3, r4
 8006814:	6011      	str	r1, [r2, #0]
 8006816:	d1e0      	bne.n	80067da <_free_r+0x26>
 8006818:	681c      	ldr	r4, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	6053      	str	r3, [r2, #4]
 800681e:	4421      	add	r1, r4
 8006820:	6011      	str	r1, [r2, #0]
 8006822:	e7da      	b.n	80067da <_free_r+0x26>
 8006824:	d902      	bls.n	800682c <_free_r+0x78>
 8006826:	230c      	movs	r3, #12
 8006828:	6003      	str	r3, [r0, #0]
 800682a:	e7d6      	b.n	80067da <_free_r+0x26>
 800682c:	6825      	ldr	r5, [r4, #0]
 800682e:	1961      	adds	r1, r4, r5
 8006830:	428b      	cmp	r3, r1
 8006832:	bf04      	itt	eq
 8006834:	6819      	ldreq	r1, [r3, #0]
 8006836:	685b      	ldreq	r3, [r3, #4]
 8006838:	6063      	str	r3, [r4, #4]
 800683a:	bf04      	itt	eq
 800683c:	1949      	addeq	r1, r1, r5
 800683e:	6021      	streq	r1, [r4, #0]
 8006840:	6054      	str	r4, [r2, #4]
 8006842:	e7ca      	b.n	80067da <_free_r+0x26>
 8006844:	b003      	add	sp, #12
 8006846:	bd30      	pop	{r4, r5, pc}
 8006848:	20000424 	.word	0x20000424

0800684c <sbrk_aligned>:
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	4e0e      	ldr	r6, [pc, #56]	; (8006888 <sbrk_aligned+0x3c>)
 8006850:	460c      	mov	r4, r1
 8006852:	6831      	ldr	r1, [r6, #0]
 8006854:	4605      	mov	r5, r0
 8006856:	b911      	cbnz	r1, 800685e <sbrk_aligned+0x12>
 8006858:	f000 f9e8 	bl	8006c2c <_sbrk_r>
 800685c:	6030      	str	r0, [r6, #0]
 800685e:	4621      	mov	r1, r4
 8006860:	4628      	mov	r0, r5
 8006862:	f000 f9e3 	bl	8006c2c <_sbrk_r>
 8006866:	1c43      	adds	r3, r0, #1
 8006868:	d00a      	beq.n	8006880 <sbrk_aligned+0x34>
 800686a:	1cc4      	adds	r4, r0, #3
 800686c:	f024 0403 	bic.w	r4, r4, #3
 8006870:	42a0      	cmp	r0, r4
 8006872:	d007      	beq.n	8006884 <sbrk_aligned+0x38>
 8006874:	1a21      	subs	r1, r4, r0
 8006876:	4628      	mov	r0, r5
 8006878:	f000 f9d8 	bl	8006c2c <_sbrk_r>
 800687c:	3001      	adds	r0, #1
 800687e:	d101      	bne.n	8006884 <sbrk_aligned+0x38>
 8006880:	f04f 34ff 	mov.w	r4, #4294967295
 8006884:	4620      	mov	r0, r4
 8006886:	bd70      	pop	{r4, r5, r6, pc}
 8006888:	20000428 	.word	0x20000428

0800688c <_malloc_r>:
 800688c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006890:	1ccd      	adds	r5, r1, #3
 8006892:	f025 0503 	bic.w	r5, r5, #3
 8006896:	3508      	adds	r5, #8
 8006898:	2d0c      	cmp	r5, #12
 800689a:	bf38      	it	cc
 800689c:	250c      	movcc	r5, #12
 800689e:	2d00      	cmp	r5, #0
 80068a0:	4607      	mov	r7, r0
 80068a2:	db01      	blt.n	80068a8 <_malloc_r+0x1c>
 80068a4:	42a9      	cmp	r1, r5
 80068a6:	d905      	bls.n	80068b4 <_malloc_r+0x28>
 80068a8:	230c      	movs	r3, #12
 80068aa:	603b      	str	r3, [r7, #0]
 80068ac:	2600      	movs	r6, #0
 80068ae:	4630      	mov	r0, r6
 80068b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068b4:	4e2e      	ldr	r6, [pc, #184]	; (8006970 <_malloc_r+0xe4>)
 80068b6:	f000 fa25 	bl	8006d04 <__malloc_lock>
 80068ba:	6833      	ldr	r3, [r6, #0]
 80068bc:	461c      	mov	r4, r3
 80068be:	bb34      	cbnz	r4, 800690e <_malloc_r+0x82>
 80068c0:	4629      	mov	r1, r5
 80068c2:	4638      	mov	r0, r7
 80068c4:	f7ff ffc2 	bl	800684c <sbrk_aligned>
 80068c8:	1c43      	adds	r3, r0, #1
 80068ca:	4604      	mov	r4, r0
 80068cc:	d14d      	bne.n	800696a <_malloc_r+0xde>
 80068ce:	6834      	ldr	r4, [r6, #0]
 80068d0:	4626      	mov	r6, r4
 80068d2:	2e00      	cmp	r6, #0
 80068d4:	d140      	bne.n	8006958 <_malloc_r+0xcc>
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	4631      	mov	r1, r6
 80068da:	4638      	mov	r0, r7
 80068dc:	eb04 0803 	add.w	r8, r4, r3
 80068e0:	f000 f9a4 	bl	8006c2c <_sbrk_r>
 80068e4:	4580      	cmp	r8, r0
 80068e6:	d13a      	bne.n	800695e <_malloc_r+0xd2>
 80068e8:	6821      	ldr	r1, [r4, #0]
 80068ea:	3503      	adds	r5, #3
 80068ec:	1a6d      	subs	r5, r5, r1
 80068ee:	f025 0503 	bic.w	r5, r5, #3
 80068f2:	3508      	adds	r5, #8
 80068f4:	2d0c      	cmp	r5, #12
 80068f6:	bf38      	it	cc
 80068f8:	250c      	movcc	r5, #12
 80068fa:	4629      	mov	r1, r5
 80068fc:	4638      	mov	r0, r7
 80068fe:	f7ff ffa5 	bl	800684c <sbrk_aligned>
 8006902:	3001      	adds	r0, #1
 8006904:	d02b      	beq.n	800695e <_malloc_r+0xd2>
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	442b      	add	r3, r5
 800690a:	6023      	str	r3, [r4, #0]
 800690c:	e00e      	b.n	800692c <_malloc_r+0xa0>
 800690e:	6822      	ldr	r2, [r4, #0]
 8006910:	1b52      	subs	r2, r2, r5
 8006912:	d41e      	bmi.n	8006952 <_malloc_r+0xc6>
 8006914:	2a0b      	cmp	r2, #11
 8006916:	d916      	bls.n	8006946 <_malloc_r+0xba>
 8006918:	1961      	adds	r1, r4, r5
 800691a:	42a3      	cmp	r3, r4
 800691c:	6025      	str	r5, [r4, #0]
 800691e:	bf18      	it	ne
 8006920:	6059      	strne	r1, [r3, #4]
 8006922:	6863      	ldr	r3, [r4, #4]
 8006924:	bf08      	it	eq
 8006926:	6031      	streq	r1, [r6, #0]
 8006928:	5162      	str	r2, [r4, r5]
 800692a:	604b      	str	r3, [r1, #4]
 800692c:	4638      	mov	r0, r7
 800692e:	f104 060b 	add.w	r6, r4, #11
 8006932:	f000 f9ed 	bl	8006d10 <__malloc_unlock>
 8006936:	f026 0607 	bic.w	r6, r6, #7
 800693a:	1d23      	adds	r3, r4, #4
 800693c:	1af2      	subs	r2, r6, r3
 800693e:	d0b6      	beq.n	80068ae <_malloc_r+0x22>
 8006940:	1b9b      	subs	r3, r3, r6
 8006942:	50a3      	str	r3, [r4, r2]
 8006944:	e7b3      	b.n	80068ae <_malloc_r+0x22>
 8006946:	6862      	ldr	r2, [r4, #4]
 8006948:	42a3      	cmp	r3, r4
 800694a:	bf0c      	ite	eq
 800694c:	6032      	streq	r2, [r6, #0]
 800694e:	605a      	strne	r2, [r3, #4]
 8006950:	e7ec      	b.n	800692c <_malloc_r+0xa0>
 8006952:	4623      	mov	r3, r4
 8006954:	6864      	ldr	r4, [r4, #4]
 8006956:	e7b2      	b.n	80068be <_malloc_r+0x32>
 8006958:	4634      	mov	r4, r6
 800695a:	6876      	ldr	r6, [r6, #4]
 800695c:	e7b9      	b.n	80068d2 <_malloc_r+0x46>
 800695e:	230c      	movs	r3, #12
 8006960:	603b      	str	r3, [r7, #0]
 8006962:	4638      	mov	r0, r7
 8006964:	f000 f9d4 	bl	8006d10 <__malloc_unlock>
 8006968:	e7a1      	b.n	80068ae <_malloc_r+0x22>
 800696a:	6025      	str	r5, [r4, #0]
 800696c:	e7de      	b.n	800692c <_malloc_r+0xa0>
 800696e:	bf00      	nop
 8006970:	20000424 	.word	0x20000424

08006974 <__ssputs_r>:
 8006974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006978:	688e      	ldr	r6, [r1, #8]
 800697a:	429e      	cmp	r6, r3
 800697c:	4682      	mov	sl, r0
 800697e:	460c      	mov	r4, r1
 8006980:	4690      	mov	r8, r2
 8006982:	461f      	mov	r7, r3
 8006984:	d838      	bhi.n	80069f8 <__ssputs_r+0x84>
 8006986:	898a      	ldrh	r2, [r1, #12]
 8006988:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800698c:	d032      	beq.n	80069f4 <__ssputs_r+0x80>
 800698e:	6825      	ldr	r5, [r4, #0]
 8006990:	6909      	ldr	r1, [r1, #16]
 8006992:	eba5 0901 	sub.w	r9, r5, r1
 8006996:	6965      	ldr	r5, [r4, #20]
 8006998:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800699c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069a0:	3301      	adds	r3, #1
 80069a2:	444b      	add	r3, r9
 80069a4:	106d      	asrs	r5, r5, #1
 80069a6:	429d      	cmp	r5, r3
 80069a8:	bf38      	it	cc
 80069aa:	461d      	movcc	r5, r3
 80069ac:	0553      	lsls	r3, r2, #21
 80069ae:	d531      	bpl.n	8006a14 <__ssputs_r+0xa0>
 80069b0:	4629      	mov	r1, r5
 80069b2:	f7ff ff6b 	bl	800688c <_malloc_r>
 80069b6:	4606      	mov	r6, r0
 80069b8:	b950      	cbnz	r0, 80069d0 <__ssputs_r+0x5c>
 80069ba:	230c      	movs	r3, #12
 80069bc:	f8ca 3000 	str.w	r3, [sl]
 80069c0:	89a3      	ldrh	r3, [r4, #12]
 80069c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069c6:	81a3      	strh	r3, [r4, #12]
 80069c8:	f04f 30ff 	mov.w	r0, #4294967295
 80069cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d0:	6921      	ldr	r1, [r4, #16]
 80069d2:	464a      	mov	r2, r9
 80069d4:	f7ff fb46 	bl	8006064 <memcpy>
 80069d8:	89a3      	ldrh	r3, [r4, #12]
 80069da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069e2:	81a3      	strh	r3, [r4, #12]
 80069e4:	6126      	str	r6, [r4, #16]
 80069e6:	6165      	str	r5, [r4, #20]
 80069e8:	444e      	add	r6, r9
 80069ea:	eba5 0509 	sub.w	r5, r5, r9
 80069ee:	6026      	str	r6, [r4, #0]
 80069f0:	60a5      	str	r5, [r4, #8]
 80069f2:	463e      	mov	r6, r7
 80069f4:	42be      	cmp	r6, r7
 80069f6:	d900      	bls.n	80069fa <__ssputs_r+0x86>
 80069f8:	463e      	mov	r6, r7
 80069fa:	6820      	ldr	r0, [r4, #0]
 80069fc:	4632      	mov	r2, r6
 80069fe:	4641      	mov	r1, r8
 8006a00:	f000 f966 	bl	8006cd0 <memmove>
 8006a04:	68a3      	ldr	r3, [r4, #8]
 8006a06:	1b9b      	subs	r3, r3, r6
 8006a08:	60a3      	str	r3, [r4, #8]
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	4433      	add	r3, r6
 8006a0e:	6023      	str	r3, [r4, #0]
 8006a10:	2000      	movs	r0, #0
 8006a12:	e7db      	b.n	80069cc <__ssputs_r+0x58>
 8006a14:	462a      	mov	r2, r5
 8006a16:	f000 f981 	bl	8006d1c <_realloc_r>
 8006a1a:	4606      	mov	r6, r0
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	d1e1      	bne.n	80069e4 <__ssputs_r+0x70>
 8006a20:	6921      	ldr	r1, [r4, #16]
 8006a22:	4650      	mov	r0, sl
 8006a24:	f7ff fec6 	bl	80067b4 <_free_r>
 8006a28:	e7c7      	b.n	80069ba <__ssputs_r+0x46>
	...

08006a2c <_svfiprintf_r>:
 8006a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a30:	4698      	mov	r8, r3
 8006a32:	898b      	ldrh	r3, [r1, #12]
 8006a34:	061b      	lsls	r3, r3, #24
 8006a36:	b09d      	sub	sp, #116	; 0x74
 8006a38:	4607      	mov	r7, r0
 8006a3a:	460d      	mov	r5, r1
 8006a3c:	4614      	mov	r4, r2
 8006a3e:	d50e      	bpl.n	8006a5e <_svfiprintf_r+0x32>
 8006a40:	690b      	ldr	r3, [r1, #16]
 8006a42:	b963      	cbnz	r3, 8006a5e <_svfiprintf_r+0x32>
 8006a44:	2140      	movs	r1, #64	; 0x40
 8006a46:	f7ff ff21 	bl	800688c <_malloc_r>
 8006a4a:	6028      	str	r0, [r5, #0]
 8006a4c:	6128      	str	r0, [r5, #16]
 8006a4e:	b920      	cbnz	r0, 8006a5a <_svfiprintf_r+0x2e>
 8006a50:	230c      	movs	r3, #12
 8006a52:	603b      	str	r3, [r7, #0]
 8006a54:	f04f 30ff 	mov.w	r0, #4294967295
 8006a58:	e0d1      	b.n	8006bfe <_svfiprintf_r+0x1d2>
 8006a5a:	2340      	movs	r3, #64	; 0x40
 8006a5c:	616b      	str	r3, [r5, #20]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	9309      	str	r3, [sp, #36]	; 0x24
 8006a62:	2320      	movs	r3, #32
 8006a64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a68:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a6c:	2330      	movs	r3, #48	; 0x30
 8006a6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c18 <_svfiprintf_r+0x1ec>
 8006a72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a76:	f04f 0901 	mov.w	r9, #1
 8006a7a:	4623      	mov	r3, r4
 8006a7c:	469a      	mov	sl, r3
 8006a7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a82:	b10a      	cbz	r2, 8006a88 <_svfiprintf_r+0x5c>
 8006a84:	2a25      	cmp	r2, #37	; 0x25
 8006a86:	d1f9      	bne.n	8006a7c <_svfiprintf_r+0x50>
 8006a88:	ebba 0b04 	subs.w	fp, sl, r4
 8006a8c:	d00b      	beq.n	8006aa6 <_svfiprintf_r+0x7a>
 8006a8e:	465b      	mov	r3, fp
 8006a90:	4622      	mov	r2, r4
 8006a92:	4629      	mov	r1, r5
 8006a94:	4638      	mov	r0, r7
 8006a96:	f7ff ff6d 	bl	8006974 <__ssputs_r>
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	f000 80aa 	beq.w	8006bf4 <_svfiprintf_r+0x1c8>
 8006aa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aa2:	445a      	add	r2, fp
 8006aa4:	9209      	str	r2, [sp, #36]	; 0x24
 8006aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 80a2 	beq.w	8006bf4 <_svfiprintf_r+0x1c8>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006aba:	f10a 0a01 	add.w	sl, sl, #1
 8006abe:	9304      	str	r3, [sp, #16]
 8006ac0:	9307      	str	r3, [sp, #28]
 8006ac2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ac6:	931a      	str	r3, [sp, #104]	; 0x68
 8006ac8:	4654      	mov	r4, sl
 8006aca:	2205      	movs	r2, #5
 8006acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad0:	4851      	ldr	r0, [pc, #324]	; (8006c18 <_svfiprintf_r+0x1ec>)
 8006ad2:	f7f9 fb8d 	bl	80001f0 <memchr>
 8006ad6:	9a04      	ldr	r2, [sp, #16]
 8006ad8:	b9d8      	cbnz	r0, 8006b12 <_svfiprintf_r+0xe6>
 8006ada:	06d0      	lsls	r0, r2, #27
 8006adc:	bf44      	itt	mi
 8006ade:	2320      	movmi	r3, #32
 8006ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ae4:	0711      	lsls	r1, r2, #28
 8006ae6:	bf44      	itt	mi
 8006ae8:	232b      	movmi	r3, #43	; 0x2b
 8006aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aee:	f89a 3000 	ldrb.w	r3, [sl]
 8006af2:	2b2a      	cmp	r3, #42	; 0x2a
 8006af4:	d015      	beq.n	8006b22 <_svfiprintf_r+0xf6>
 8006af6:	9a07      	ldr	r2, [sp, #28]
 8006af8:	4654      	mov	r4, sl
 8006afa:	2000      	movs	r0, #0
 8006afc:	f04f 0c0a 	mov.w	ip, #10
 8006b00:	4621      	mov	r1, r4
 8006b02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b06:	3b30      	subs	r3, #48	; 0x30
 8006b08:	2b09      	cmp	r3, #9
 8006b0a:	d94e      	bls.n	8006baa <_svfiprintf_r+0x17e>
 8006b0c:	b1b0      	cbz	r0, 8006b3c <_svfiprintf_r+0x110>
 8006b0e:	9207      	str	r2, [sp, #28]
 8006b10:	e014      	b.n	8006b3c <_svfiprintf_r+0x110>
 8006b12:	eba0 0308 	sub.w	r3, r0, r8
 8006b16:	fa09 f303 	lsl.w	r3, r9, r3
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	9304      	str	r3, [sp, #16]
 8006b1e:	46a2      	mov	sl, r4
 8006b20:	e7d2      	b.n	8006ac8 <_svfiprintf_r+0x9c>
 8006b22:	9b03      	ldr	r3, [sp, #12]
 8006b24:	1d19      	adds	r1, r3, #4
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	9103      	str	r1, [sp, #12]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	bfbb      	ittet	lt
 8006b2e:	425b      	neglt	r3, r3
 8006b30:	f042 0202 	orrlt.w	r2, r2, #2
 8006b34:	9307      	strge	r3, [sp, #28]
 8006b36:	9307      	strlt	r3, [sp, #28]
 8006b38:	bfb8      	it	lt
 8006b3a:	9204      	strlt	r2, [sp, #16]
 8006b3c:	7823      	ldrb	r3, [r4, #0]
 8006b3e:	2b2e      	cmp	r3, #46	; 0x2e
 8006b40:	d10c      	bne.n	8006b5c <_svfiprintf_r+0x130>
 8006b42:	7863      	ldrb	r3, [r4, #1]
 8006b44:	2b2a      	cmp	r3, #42	; 0x2a
 8006b46:	d135      	bne.n	8006bb4 <_svfiprintf_r+0x188>
 8006b48:	9b03      	ldr	r3, [sp, #12]
 8006b4a:	1d1a      	adds	r2, r3, #4
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	9203      	str	r2, [sp, #12]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	bfb8      	it	lt
 8006b54:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b58:	3402      	adds	r4, #2
 8006b5a:	9305      	str	r3, [sp, #20]
 8006b5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c28 <_svfiprintf_r+0x1fc>
 8006b60:	7821      	ldrb	r1, [r4, #0]
 8006b62:	2203      	movs	r2, #3
 8006b64:	4650      	mov	r0, sl
 8006b66:	f7f9 fb43 	bl	80001f0 <memchr>
 8006b6a:	b140      	cbz	r0, 8006b7e <_svfiprintf_r+0x152>
 8006b6c:	2340      	movs	r3, #64	; 0x40
 8006b6e:	eba0 000a 	sub.w	r0, r0, sl
 8006b72:	fa03 f000 	lsl.w	r0, r3, r0
 8006b76:	9b04      	ldr	r3, [sp, #16]
 8006b78:	4303      	orrs	r3, r0
 8006b7a:	3401      	adds	r4, #1
 8006b7c:	9304      	str	r3, [sp, #16]
 8006b7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b82:	4826      	ldr	r0, [pc, #152]	; (8006c1c <_svfiprintf_r+0x1f0>)
 8006b84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b88:	2206      	movs	r2, #6
 8006b8a:	f7f9 fb31 	bl	80001f0 <memchr>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d038      	beq.n	8006c04 <_svfiprintf_r+0x1d8>
 8006b92:	4b23      	ldr	r3, [pc, #140]	; (8006c20 <_svfiprintf_r+0x1f4>)
 8006b94:	bb1b      	cbnz	r3, 8006bde <_svfiprintf_r+0x1b2>
 8006b96:	9b03      	ldr	r3, [sp, #12]
 8006b98:	3307      	adds	r3, #7
 8006b9a:	f023 0307 	bic.w	r3, r3, #7
 8006b9e:	3308      	adds	r3, #8
 8006ba0:	9303      	str	r3, [sp, #12]
 8006ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba4:	4433      	add	r3, r6
 8006ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ba8:	e767      	b.n	8006a7a <_svfiprintf_r+0x4e>
 8006baa:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bae:	460c      	mov	r4, r1
 8006bb0:	2001      	movs	r0, #1
 8006bb2:	e7a5      	b.n	8006b00 <_svfiprintf_r+0xd4>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	3401      	adds	r4, #1
 8006bb8:	9305      	str	r3, [sp, #20]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	f04f 0c0a 	mov.w	ip, #10
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bc6:	3a30      	subs	r2, #48	; 0x30
 8006bc8:	2a09      	cmp	r2, #9
 8006bca:	d903      	bls.n	8006bd4 <_svfiprintf_r+0x1a8>
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d0c5      	beq.n	8006b5c <_svfiprintf_r+0x130>
 8006bd0:	9105      	str	r1, [sp, #20]
 8006bd2:	e7c3      	b.n	8006b5c <_svfiprintf_r+0x130>
 8006bd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bd8:	4604      	mov	r4, r0
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e7f0      	b.n	8006bc0 <_svfiprintf_r+0x194>
 8006bde:	ab03      	add	r3, sp, #12
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	462a      	mov	r2, r5
 8006be4:	4b0f      	ldr	r3, [pc, #60]	; (8006c24 <_svfiprintf_r+0x1f8>)
 8006be6:	a904      	add	r1, sp, #16
 8006be8:	4638      	mov	r0, r7
 8006bea:	f7fd ffcb 	bl	8004b84 <_printf_float>
 8006bee:	1c42      	adds	r2, r0, #1
 8006bf0:	4606      	mov	r6, r0
 8006bf2:	d1d6      	bne.n	8006ba2 <_svfiprintf_r+0x176>
 8006bf4:	89ab      	ldrh	r3, [r5, #12]
 8006bf6:	065b      	lsls	r3, r3, #25
 8006bf8:	f53f af2c 	bmi.w	8006a54 <_svfiprintf_r+0x28>
 8006bfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bfe:	b01d      	add	sp, #116	; 0x74
 8006c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c04:	ab03      	add	r3, sp, #12
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	462a      	mov	r2, r5
 8006c0a:	4b06      	ldr	r3, [pc, #24]	; (8006c24 <_svfiprintf_r+0x1f8>)
 8006c0c:	a904      	add	r1, sp, #16
 8006c0e:	4638      	mov	r0, r7
 8006c10:	f7fe fa5c 	bl	80050cc <_printf_i>
 8006c14:	e7eb      	b.n	8006bee <_svfiprintf_r+0x1c2>
 8006c16:	bf00      	nop
 8006c18:	08007ab4 	.word	0x08007ab4
 8006c1c:	08007abe 	.word	0x08007abe
 8006c20:	08004b85 	.word	0x08004b85
 8006c24:	08006975 	.word	0x08006975
 8006c28:	08007aba 	.word	0x08007aba

08006c2c <_sbrk_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	4d06      	ldr	r5, [pc, #24]	; (8006c48 <_sbrk_r+0x1c>)
 8006c30:	2300      	movs	r3, #0
 8006c32:	4604      	mov	r4, r0
 8006c34:	4608      	mov	r0, r1
 8006c36:	602b      	str	r3, [r5, #0]
 8006c38:	f7fb f956 	bl	8001ee8 <_sbrk>
 8006c3c:	1c43      	adds	r3, r0, #1
 8006c3e:	d102      	bne.n	8006c46 <_sbrk_r+0x1a>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	b103      	cbz	r3, 8006c46 <_sbrk_r+0x1a>
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
 8006c48:	2000042c 	.word	0x2000042c

08006c4c <__assert_func>:
 8006c4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c4e:	4614      	mov	r4, r2
 8006c50:	461a      	mov	r2, r3
 8006c52:	4b09      	ldr	r3, [pc, #36]	; (8006c78 <__assert_func+0x2c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4605      	mov	r5, r0
 8006c58:	68d8      	ldr	r0, [r3, #12]
 8006c5a:	b14c      	cbz	r4, 8006c70 <__assert_func+0x24>
 8006c5c:	4b07      	ldr	r3, [pc, #28]	; (8006c7c <__assert_func+0x30>)
 8006c5e:	9100      	str	r1, [sp, #0]
 8006c60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c64:	4906      	ldr	r1, [pc, #24]	; (8006c80 <__assert_func+0x34>)
 8006c66:	462b      	mov	r3, r5
 8006c68:	f000 f80e 	bl	8006c88 <fiprintf>
 8006c6c:	f000 faac 	bl	80071c8 <abort>
 8006c70:	4b04      	ldr	r3, [pc, #16]	; (8006c84 <__assert_func+0x38>)
 8006c72:	461c      	mov	r4, r3
 8006c74:	e7f3      	b.n	8006c5e <__assert_func+0x12>
 8006c76:	bf00      	nop
 8006c78:	20000064 	.word	0x20000064
 8006c7c:	08007ac5 	.word	0x08007ac5
 8006c80:	08007ad2 	.word	0x08007ad2
 8006c84:	08007b00 	.word	0x08007b00

08006c88 <fiprintf>:
 8006c88:	b40e      	push	{r1, r2, r3}
 8006c8a:	b503      	push	{r0, r1, lr}
 8006c8c:	4601      	mov	r1, r0
 8006c8e:	ab03      	add	r3, sp, #12
 8006c90:	4805      	ldr	r0, [pc, #20]	; (8006ca8 <fiprintf+0x20>)
 8006c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c96:	6800      	ldr	r0, [r0, #0]
 8006c98:	9301      	str	r3, [sp, #4]
 8006c9a:	f000 f897 	bl	8006dcc <_vfiprintf_r>
 8006c9e:	b002      	add	sp, #8
 8006ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ca4:	b003      	add	sp, #12
 8006ca6:	4770      	bx	lr
 8006ca8:	20000064 	.word	0x20000064

08006cac <__ascii_mbtowc>:
 8006cac:	b082      	sub	sp, #8
 8006cae:	b901      	cbnz	r1, 8006cb2 <__ascii_mbtowc+0x6>
 8006cb0:	a901      	add	r1, sp, #4
 8006cb2:	b142      	cbz	r2, 8006cc6 <__ascii_mbtowc+0x1a>
 8006cb4:	b14b      	cbz	r3, 8006cca <__ascii_mbtowc+0x1e>
 8006cb6:	7813      	ldrb	r3, [r2, #0]
 8006cb8:	600b      	str	r3, [r1, #0]
 8006cba:	7812      	ldrb	r2, [r2, #0]
 8006cbc:	1e10      	subs	r0, r2, #0
 8006cbe:	bf18      	it	ne
 8006cc0:	2001      	movne	r0, #1
 8006cc2:	b002      	add	sp, #8
 8006cc4:	4770      	bx	lr
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	e7fb      	b.n	8006cc2 <__ascii_mbtowc+0x16>
 8006cca:	f06f 0001 	mvn.w	r0, #1
 8006cce:	e7f8      	b.n	8006cc2 <__ascii_mbtowc+0x16>

08006cd0 <memmove>:
 8006cd0:	4288      	cmp	r0, r1
 8006cd2:	b510      	push	{r4, lr}
 8006cd4:	eb01 0402 	add.w	r4, r1, r2
 8006cd8:	d902      	bls.n	8006ce0 <memmove+0x10>
 8006cda:	4284      	cmp	r4, r0
 8006cdc:	4623      	mov	r3, r4
 8006cde:	d807      	bhi.n	8006cf0 <memmove+0x20>
 8006ce0:	1e43      	subs	r3, r0, #1
 8006ce2:	42a1      	cmp	r1, r4
 8006ce4:	d008      	beq.n	8006cf8 <memmove+0x28>
 8006ce6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cee:	e7f8      	b.n	8006ce2 <memmove+0x12>
 8006cf0:	4402      	add	r2, r0
 8006cf2:	4601      	mov	r1, r0
 8006cf4:	428a      	cmp	r2, r1
 8006cf6:	d100      	bne.n	8006cfa <memmove+0x2a>
 8006cf8:	bd10      	pop	{r4, pc}
 8006cfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d02:	e7f7      	b.n	8006cf4 <memmove+0x24>

08006d04 <__malloc_lock>:
 8006d04:	4801      	ldr	r0, [pc, #4]	; (8006d0c <__malloc_lock+0x8>)
 8006d06:	f000 bc1f 	b.w	8007548 <__retarget_lock_acquire_recursive>
 8006d0a:	bf00      	nop
 8006d0c:	20000430 	.word	0x20000430

08006d10 <__malloc_unlock>:
 8006d10:	4801      	ldr	r0, [pc, #4]	; (8006d18 <__malloc_unlock+0x8>)
 8006d12:	f000 bc1a 	b.w	800754a <__retarget_lock_release_recursive>
 8006d16:	bf00      	nop
 8006d18:	20000430 	.word	0x20000430

08006d1c <_realloc_r>:
 8006d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d20:	4680      	mov	r8, r0
 8006d22:	4614      	mov	r4, r2
 8006d24:	460e      	mov	r6, r1
 8006d26:	b921      	cbnz	r1, 8006d32 <_realloc_r+0x16>
 8006d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	f7ff bdad 	b.w	800688c <_malloc_r>
 8006d32:	b92a      	cbnz	r2, 8006d40 <_realloc_r+0x24>
 8006d34:	f7ff fd3e 	bl	80067b4 <_free_r>
 8006d38:	4625      	mov	r5, r4
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d40:	f000 fc6a 	bl	8007618 <_malloc_usable_size_r>
 8006d44:	4284      	cmp	r4, r0
 8006d46:	4607      	mov	r7, r0
 8006d48:	d802      	bhi.n	8006d50 <_realloc_r+0x34>
 8006d4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d4e:	d812      	bhi.n	8006d76 <_realloc_r+0x5a>
 8006d50:	4621      	mov	r1, r4
 8006d52:	4640      	mov	r0, r8
 8006d54:	f7ff fd9a 	bl	800688c <_malloc_r>
 8006d58:	4605      	mov	r5, r0
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d0ed      	beq.n	8006d3a <_realloc_r+0x1e>
 8006d5e:	42bc      	cmp	r4, r7
 8006d60:	4622      	mov	r2, r4
 8006d62:	4631      	mov	r1, r6
 8006d64:	bf28      	it	cs
 8006d66:	463a      	movcs	r2, r7
 8006d68:	f7ff f97c 	bl	8006064 <memcpy>
 8006d6c:	4631      	mov	r1, r6
 8006d6e:	4640      	mov	r0, r8
 8006d70:	f7ff fd20 	bl	80067b4 <_free_r>
 8006d74:	e7e1      	b.n	8006d3a <_realloc_r+0x1e>
 8006d76:	4635      	mov	r5, r6
 8006d78:	e7df      	b.n	8006d3a <_realloc_r+0x1e>

08006d7a <__sfputc_r>:
 8006d7a:	6893      	ldr	r3, [r2, #8]
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	b410      	push	{r4}
 8006d82:	6093      	str	r3, [r2, #8]
 8006d84:	da08      	bge.n	8006d98 <__sfputc_r+0x1e>
 8006d86:	6994      	ldr	r4, [r2, #24]
 8006d88:	42a3      	cmp	r3, r4
 8006d8a:	db01      	blt.n	8006d90 <__sfputc_r+0x16>
 8006d8c:	290a      	cmp	r1, #10
 8006d8e:	d103      	bne.n	8006d98 <__sfputc_r+0x1e>
 8006d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d94:	f000 b94a 	b.w	800702c <__swbuf_r>
 8006d98:	6813      	ldr	r3, [r2, #0]
 8006d9a:	1c58      	adds	r0, r3, #1
 8006d9c:	6010      	str	r0, [r2, #0]
 8006d9e:	7019      	strb	r1, [r3, #0]
 8006da0:	4608      	mov	r0, r1
 8006da2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <__sfputs_r>:
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	4606      	mov	r6, r0
 8006dac:	460f      	mov	r7, r1
 8006dae:	4614      	mov	r4, r2
 8006db0:	18d5      	adds	r5, r2, r3
 8006db2:	42ac      	cmp	r4, r5
 8006db4:	d101      	bne.n	8006dba <__sfputs_r+0x12>
 8006db6:	2000      	movs	r0, #0
 8006db8:	e007      	b.n	8006dca <__sfputs_r+0x22>
 8006dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dbe:	463a      	mov	r2, r7
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	f7ff ffda 	bl	8006d7a <__sfputc_r>
 8006dc6:	1c43      	adds	r3, r0, #1
 8006dc8:	d1f3      	bne.n	8006db2 <__sfputs_r+0xa>
 8006dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006dcc <_vfiprintf_r>:
 8006dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd0:	460d      	mov	r5, r1
 8006dd2:	b09d      	sub	sp, #116	; 0x74
 8006dd4:	4614      	mov	r4, r2
 8006dd6:	4698      	mov	r8, r3
 8006dd8:	4606      	mov	r6, r0
 8006dda:	b118      	cbz	r0, 8006de4 <_vfiprintf_r+0x18>
 8006ddc:	6983      	ldr	r3, [r0, #24]
 8006dde:	b90b      	cbnz	r3, 8006de4 <_vfiprintf_r+0x18>
 8006de0:	f000 fb14 	bl	800740c <__sinit>
 8006de4:	4b89      	ldr	r3, [pc, #548]	; (800700c <_vfiprintf_r+0x240>)
 8006de6:	429d      	cmp	r5, r3
 8006de8:	d11b      	bne.n	8006e22 <_vfiprintf_r+0x56>
 8006dea:	6875      	ldr	r5, [r6, #4]
 8006dec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dee:	07d9      	lsls	r1, r3, #31
 8006df0:	d405      	bmi.n	8006dfe <_vfiprintf_r+0x32>
 8006df2:	89ab      	ldrh	r3, [r5, #12]
 8006df4:	059a      	lsls	r2, r3, #22
 8006df6:	d402      	bmi.n	8006dfe <_vfiprintf_r+0x32>
 8006df8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dfa:	f000 fba5 	bl	8007548 <__retarget_lock_acquire_recursive>
 8006dfe:	89ab      	ldrh	r3, [r5, #12]
 8006e00:	071b      	lsls	r3, r3, #28
 8006e02:	d501      	bpl.n	8006e08 <_vfiprintf_r+0x3c>
 8006e04:	692b      	ldr	r3, [r5, #16]
 8006e06:	b9eb      	cbnz	r3, 8006e44 <_vfiprintf_r+0x78>
 8006e08:	4629      	mov	r1, r5
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	f000 f96e 	bl	80070ec <__swsetup_r>
 8006e10:	b1c0      	cbz	r0, 8006e44 <_vfiprintf_r+0x78>
 8006e12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e14:	07dc      	lsls	r4, r3, #31
 8006e16:	d50e      	bpl.n	8006e36 <_vfiprintf_r+0x6a>
 8006e18:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1c:	b01d      	add	sp, #116	; 0x74
 8006e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e22:	4b7b      	ldr	r3, [pc, #492]	; (8007010 <_vfiprintf_r+0x244>)
 8006e24:	429d      	cmp	r5, r3
 8006e26:	d101      	bne.n	8006e2c <_vfiprintf_r+0x60>
 8006e28:	68b5      	ldr	r5, [r6, #8]
 8006e2a:	e7df      	b.n	8006dec <_vfiprintf_r+0x20>
 8006e2c:	4b79      	ldr	r3, [pc, #484]	; (8007014 <_vfiprintf_r+0x248>)
 8006e2e:	429d      	cmp	r5, r3
 8006e30:	bf08      	it	eq
 8006e32:	68f5      	ldreq	r5, [r6, #12]
 8006e34:	e7da      	b.n	8006dec <_vfiprintf_r+0x20>
 8006e36:	89ab      	ldrh	r3, [r5, #12]
 8006e38:	0598      	lsls	r0, r3, #22
 8006e3a:	d4ed      	bmi.n	8006e18 <_vfiprintf_r+0x4c>
 8006e3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e3e:	f000 fb84 	bl	800754a <__retarget_lock_release_recursive>
 8006e42:	e7e9      	b.n	8006e18 <_vfiprintf_r+0x4c>
 8006e44:	2300      	movs	r3, #0
 8006e46:	9309      	str	r3, [sp, #36]	; 0x24
 8006e48:	2320      	movs	r3, #32
 8006e4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e52:	2330      	movs	r3, #48	; 0x30
 8006e54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007018 <_vfiprintf_r+0x24c>
 8006e58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e5c:	f04f 0901 	mov.w	r9, #1
 8006e60:	4623      	mov	r3, r4
 8006e62:	469a      	mov	sl, r3
 8006e64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e68:	b10a      	cbz	r2, 8006e6e <_vfiprintf_r+0xa2>
 8006e6a:	2a25      	cmp	r2, #37	; 0x25
 8006e6c:	d1f9      	bne.n	8006e62 <_vfiprintf_r+0x96>
 8006e6e:	ebba 0b04 	subs.w	fp, sl, r4
 8006e72:	d00b      	beq.n	8006e8c <_vfiprintf_r+0xc0>
 8006e74:	465b      	mov	r3, fp
 8006e76:	4622      	mov	r2, r4
 8006e78:	4629      	mov	r1, r5
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	f7ff ff94 	bl	8006da8 <__sfputs_r>
 8006e80:	3001      	adds	r0, #1
 8006e82:	f000 80aa 	beq.w	8006fda <_vfiprintf_r+0x20e>
 8006e86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e88:	445a      	add	r2, fp
 8006e8a:	9209      	str	r2, [sp, #36]	; 0x24
 8006e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 80a2 	beq.w	8006fda <_vfiprintf_r+0x20e>
 8006e96:	2300      	movs	r3, #0
 8006e98:	f04f 32ff 	mov.w	r2, #4294967295
 8006e9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ea0:	f10a 0a01 	add.w	sl, sl, #1
 8006ea4:	9304      	str	r3, [sp, #16]
 8006ea6:	9307      	str	r3, [sp, #28]
 8006ea8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006eac:	931a      	str	r3, [sp, #104]	; 0x68
 8006eae:	4654      	mov	r4, sl
 8006eb0:	2205      	movs	r2, #5
 8006eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eb6:	4858      	ldr	r0, [pc, #352]	; (8007018 <_vfiprintf_r+0x24c>)
 8006eb8:	f7f9 f99a 	bl	80001f0 <memchr>
 8006ebc:	9a04      	ldr	r2, [sp, #16]
 8006ebe:	b9d8      	cbnz	r0, 8006ef8 <_vfiprintf_r+0x12c>
 8006ec0:	06d1      	lsls	r1, r2, #27
 8006ec2:	bf44      	itt	mi
 8006ec4:	2320      	movmi	r3, #32
 8006ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eca:	0713      	lsls	r3, r2, #28
 8006ecc:	bf44      	itt	mi
 8006ece:	232b      	movmi	r3, #43	; 0x2b
 8006ed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8006eda:	d015      	beq.n	8006f08 <_vfiprintf_r+0x13c>
 8006edc:	9a07      	ldr	r2, [sp, #28]
 8006ede:	4654      	mov	r4, sl
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	f04f 0c0a 	mov.w	ip, #10
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006eec:	3b30      	subs	r3, #48	; 0x30
 8006eee:	2b09      	cmp	r3, #9
 8006ef0:	d94e      	bls.n	8006f90 <_vfiprintf_r+0x1c4>
 8006ef2:	b1b0      	cbz	r0, 8006f22 <_vfiprintf_r+0x156>
 8006ef4:	9207      	str	r2, [sp, #28]
 8006ef6:	e014      	b.n	8006f22 <_vfiprintf_r+0x156>
 8006ef8:	eba0 0308 	sub.w	r3, r0, r8
 8006efc:	fa09 f303 	lsl.w	r3, r9, r3
 8006f00:	4313      	orrs	r3, r2
 8006f02:	9304      	str	r3, [sp, #16]
 8006f04:	46a2      	mov	sl, r4
 8006f06:	e7d2      	b.n	8006eae <_vfiprintf_r+0xe2>
 8006f08:	9b03      	ldr	r3, [sp, #12]
 8006f0a:	1d19      	adds	r1, r3, #4
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	9103      	str	r1, [sp, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	bfbb      	ittet	lt
 8006f14:	425b      	neglt	r3, r3
 8006f16:	f042 0202 	orrlt.w	r2, r2, #2
 8006f1a:	9307      	strge	r3, [sp, #28]
 8006f1c:	9307      	strlt	r3, [sp, #28]
 8006f1e:	bfb8      	it	lt
 8006f20:	9204      	strlt	r2, [sp, #16]
 8006f22:	7823      	ldrb	r3, [r4, #0]
 8006f24:	2b2e      	cmp	r3, #46	; 0x2e
 8006f26:	d10c      	bne.n	8006f42 <_vfiprintf_r+0x176>
 8006f28:	7863      	ldrb	r3, [r4, #1]
 8006f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f2c:	d135      	bne.n	8006f9a <_vfiprintf_r+0x1ce>
 8006f2e:	9b03      	ldr	r3, [sp, #12]
 8006f30:	1d1a      	adds	r2, r3, #4
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	9203      	str	r2, [sp, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	bfb8      	it	lt
 8006f3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f3e:	3402      	adds	r4, #2
 8006f40:	9305      	str	r3, [sp, #20]
 8006f42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007028 <_vfiprintf_r+0x25c>
 8006f46:	7821      	ldrb	r1, [r4, #0]
 8006f48:	2203      	movs	r2, #3
 8006f4a:	4650      	mov	r0, sl
 8006f4c:	f7f9 f950 	bl	80001f0 <memchr>
 8006f50:	b140      	cbz	r0, 8006f64 <_vfiprintf_r+0x198>
 8006f52:	2340      	movs	r3, #64	; 0x40
 8006f54:	eba0 000a 	sub.w	r0, r0, sl
 8006f58:	fa03 f000 	lsl.w	r0, r3, r0
 8006f5c:	9b04      	ldr	r3, [sp, #16]
 8006f5e:	4303      	orrs	r3, r0
 8006f60:	3401      	adds	r4, #1
 8006f62:	9304      	str	r3, [sp, #16]
 8006f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f68:	482c      	ldr	r0, [pc, #176]	; (800701c <_vfiprintf_r+0x250>)
 8006f6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f6e:	2206      	movs	r2, #6
 8006f70:	f7f9 f93e 	bl	80001f0 <memchr>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d03f      	beq.n	8006ff8 <_vfiprintf_r+0x22c>
 8006f78:	4b29      	ldr	r3, [pc, #164]	; (8007020 <_vfiprintf_r+0x254>)
 8006f7a:	bb1b      	cbnz	r3, 8006fc4 <_vfiprintf_r+0x1f8>
 8006f7c:	9b03      	ldr	r3, [sp, #12]
 8006f7e:	3307      	adds	r3, #7
 8006f80:	f023 0307 	bic.w	r3, r3, #7
 8006f84:	3308      	adds	r3, #8
 8006f86:	9303      	str	r3, [sp, #12]
 8006f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f8a:	443b      	add	r3, r7
 8006f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f8e:	e767      	b.n	8006e60 <_vfiprintf_r+0x94>
 8006f90:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f94:	460c      	mov	r4, r1
 8006f96:	2001      	movs	r0, #1
 8006f98:	e7a5      	b.n	8006ee6 <_vfiprintf_r+0x11a>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	3401      	adds	r4, #1
 8006f9e:	9305      	str	r3, [sp, #20]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	f04f 0c0a 	mov.w	ip, #10
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fac:	3a30      	subs	r2, #48	; 0x30
 8006fae:	2a09      	cmp	r2, #9
 8006fb0:	d903      	bls.n	8006fba <_vfiprintf_r+0x1ee>
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0c5      	beq.n	8006f42 <_vfiprintf_r+0x176>
 8006fb6:	9105      	str	r1, [sp, #20]
 8006fb8:	e7c3      	b.n	8006f42 <_vfiprintf_r+0x176>
 8006fba:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e7f0      	b.n	8006fa6 <_vfiprintf_r+0x1da>
 8006fc4:	ab03      	add	r3, sp, #12
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	462a      	mov	r2, r5
 8006fca:	4b16      	ldr	r3, [pc, #88]	; (8007024 <_vfiprintf_r+0x258>)
 8006fcc:	a904      	add	r1, sp, #16
 8006fce:	4630      	mov	r0, r6
 8006fd0:	f7fd fdd8 	bl	8004b84 <_printf_float>
 8006fd4:	4607      	mov	r7, r0
 8006fd6:	1c78      	adds	r0, r7, #1
 8006fd8:	d1d6      	bne.n	8006f88 <_vfiprintf_r+0x1bc>
 8006fda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fdc:	07d9      	lsls	r1, r3, #31
 8006fde:	d405      	bmi.n	8006fec <_vfiprintf_r+0x220>
 8006fe0:	89ab      	ldrh	r3, [r5, #12]
 8006fe2:	059a      	lsls	r2, r3, #22
 8006fe4:	d402      	bmi.n	8006fec <_vfiprintf_r+0x220>
 8006fe6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fe8:	f000 faaf 	bl	800754a <__retarget_lock_release_recursive>
 8006fec:	89ab      	ldrh	r3, [r5, #12]
 8006fee:	065b      	lsls	r3, r3, #25
 8006ff0:	f53f af12 	bmi.w	8006e18 <_vfiprintf_r+0x4c>
 8006ff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ff6:	e711      	b.n	8006e1c <_vfiprintf_r+0x50>
 8006ff8:	ab03      	add	r3, sp, #12
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	462a      	mov	r2, r5
 8006ffe:	4b09      	ldr	r3, [pc, #36]	; (8007024 <_vfiprintf_r+0x258>)
 8007000:	a904      	add	r1, sp, #16
 8007002:	4630      	mov	r0, r6
 8007004:	f7fe f862 	bl	80050cc <_printf_i>
 8007008:	e7e4      	b.n	8006fd4 <_vfiprintf_r+0x208>
 800700a:	bf00      	nop
 800700c:	08007c2c 	.word	0x08007c2c
 8007010:	08007c4c 	.word	0x08007c4c
 8007014:	08007c0c 	.word	0x08007c0c
 8007018:	08007ab4 	.word	0x08007ab4
 800701c:	08007abe 	.word	0x08007abe
 8007020:	08004b85 	.word	0x08004b85
 8007024:	08006da9 	.word	0x08006da9
 8007028:	08007aba 	.word	0x08007aba

0800702c <__swbuf_r>:
 800702c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702e:	460e      	mov	r6, r1
 8007030:	4614      	mov	r4, r2
 8007032:	4605      	mov	r5, r0
 8007034:	b118      	cbz	r0, 800703e <__swbuf_r+0x12>
 8007036:	6983      	ldr	r3, [r0, #24]
 8007038:	b90b      	cbnz	r3, 800703e <__swbuf_r+0x12>
 800703a:	f000 f9e7 	bl	800740c <__sinit>
 800703e:	4b21      	ldr	r3, [pc, #132]	; (80070c4 <__swbuf_r+0x98>)
 8007040:	429c      	cmp	r4, r3
 8007042:	d12b      	bne.n	800709c <__swbuf_r+0x70>
 8007044:	686c      	ldr	r4, [r5, #4]
 8007046:	69a3      	ldr	r3, [r4, #24]
 8007048:	60a3      	str	r3, [r4, #8]
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	071a      	lsls	r2, r3, #28
 800704e:	d52f      	bpl.n	80070b0 <__swbuf_r+0x84>
 8007050:	6923      	ldr	r3, [r4, #16]
 8007052:	b36b      	cbz	r3, 80070b0 <__swbuf_r+0x84>
 8007054:	6923      	ldr	r3, [r4, #16]
 8007056:	6820      	ldr	r0, [r4, #0]
 8007058:	1ac0      	subs	r0, r0, r3
 800705a:	6963      	ldr	r3, [r4, #20]
 800705c:	b2f6      	uxtb	r6, r6
 800705e:	4283      	cmp	r3, r0
 8007060:	4637      	mov	r7, r6
 8007062:	dc04      	bgt.n	800706e <__swbuf_r+0x42>
 8007064:	4621      	mov	r1, r4
 8007066:	4628      	mov	r0, r5
 8007068:	f000 f93c 	bl	80072e4 <_fflush_r>
 800706c:	bb30      	cbnz	r0, 80070bc <__swbuf_r+0x90>
 800706e:	68a3      	ldr	r3, [r4, #8]
 8007070:	3b01      	subs	r3, #1
 8007072:	60a3      	str	r3, [r4, #8]
 8007074:	6823      	ldr	r3, [r4, #0]
 8007076:	1c5a      	adds	r2, r3, #1
 8007078:	6022      	str	r2, [r4, #0]
 800707a:	701e      	strb	r6, [r3, #0]
 800707c:	6963      	ldr	r3, [r4, #20]
 800707e:	3001      	adds	r0, #1
 8007080:	4283      	cmp	r3, r0
 8007082:	d004      	beq.n	800708e <__swbuf_r+0x62>
 8007084:	89a3      	ldrh	r3, [r4, #12]
 8007086:	07db      	lsls	r3, r3, #31
 8007088:	d506      	bpl.n	8007098 <__swbuf_r+0x6c>
 800708a:	2e0a      	cmp	r6, #10
 800708c:	d104      	bne.n	8007098 <__swbuf_r+0x6c>
 800708e:	4621      	mov	r1, r4
 8007090:	4628      	mov	r0, r5
 8007092:	f000 f927 	bl	80072e4 <_fflush_r>
 8007096:	b988      	cbnz	r0, 80070bc <__swbuf_r+0x90>
 8007098:	4638      	mov	r0, r7
 800709a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800709c:	4b0a      	ldr	r3, [pc, #40]	; (80070c8 <__swbuf_r+0x9c>)
 800709e:	429c      	cmp	r4, r3
 80070a0:	d101      	bne.n	80070a6 <__swbuf_r+0x7a>
 80070a2:	68ac      	ldr	r4, [r5, #8]
 80070a4:	e7cf      	b.n	8007046 <__swbuf_r+0x1a>
 80070a6:	4b09      	ldr	r3, [pc, #36]	; (80070cc <__swbuf_r+0xa0>)
 80070a8:	429c      	cmp	r4, r3
 80070aa:	bf08      	it	eq
 80070ac:	68ec      	ldreq	r4, [r5, #12]
 80070ae:	e7ca      	b.n	8007046 <__swbuf_r+0x1a>
 80070b0:	4621      	mov	r1, r4
 80070b2:	4628      	mov	r0, r5
 80070b4:	f000 f81a 	bl	80070ec <__swsetup_r>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	d0cb      	beq.n	8007054 <__swbuf_r+0x28>
 80070bc:	f04f 37ff 	mov.w	r7, #4294967295
 80070c0:	e7ea      	b.n	8007098 <__swbuf_r+0x6c>
 80070c2:	bf00      	nop
 80070c4:	08007c2c 	.word	0x08007c2c
 80070c8:	08007c4c 	.word	0x08007c4c
 80070cc:	08007c0c 	.word	0x08007c0c

080070d0 <__ascii_wctomb>:
 80070d0:	b149      	cbz	r1, 80070e6 <__ascii_wctomb+0x16>
 80070d2:	2aff      	cmp	r2, #255	; 0xff
 80070d4:	bf85      	ittet	hi
 80070d6:	238a      	movhi	r3, #138	; 0x8a
 80070d8:	6003      	strhi	r3, [r0, #0]
 80070da:	700a      	strbls	r2, [r1, #0]
 80070dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80070e0:	bf98      	it	ls
 80070e2:	2001      	movls	r0, #1
 80070e4:	4770      	bx	lr
 80070e6:	4608      	mov	r0, r1
 80070e8:	4770      	bx	lr
	...

080070ec <__swsetup_r>:
 80070ec:	4b32      	ldr	r3, [pc, #200]	; (80071b8 <__swsetup_r+0xcc>)
 80070ee:	b570      	push	{r4, r5, r6, lr}
 80070f0:	681d      	ldr	r5, [r3, #0]
 80070f2:	4606      	mov	r6, r0
 80070f4:	460c      	mov	r4, r1
 80070f6:	b125      	cbz	r5, 8007102 <__swsetup_r+0x16>
 80070f8:	69ab      	ldr	r3, [r5, #24]
 80070fa:	b913      	cbnz	r3, 8007102 <__swsetup_r+0x16>
 80070fc:	4628      	mov	r0, r5
 80070fe:	f000 f985 	bl	800740c <__sinit>
 8007102:	4b2e      	ldr	r3, [pc, #184]	; (80071bc <__swsetup_r+0xd0>)
 8007104:	429c      	cmp	r4, r3
 8007106:	d10f      	bne.n	8007128 <__swsetup_r+0x3c>
 8007108:	686c      	ldr	r4, [r5, #4]
 800710a:	89a3      	ldrh	r3, [r4, #12]
 800710c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007110:	0719      	lsls	r1, r3, #28
 8007112:	d42c      	bmi.n	800716e <__swsetup_r+0x82>
 8007114:	06dd      	lsls	r5, r3, #27
 8007116:	d411      	bmi.n	800713c <__swsetup_r+0x50>
 8007118:	2309      	movs	r3, #9
 800711a:	6033      	str	r3, [r6, #0]
 800711c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007120:	81a3      	strh	r3, [r4, #12]
 8007122:	f04f 30ff 	mov.w	r0, #4294967295
 8007126:	e03e      	b.n	80071a6 <__swsetup_r+0xba>
 8007128:	4b25      	ldr	r3, [pc, #148]	; (80071c0 <__swsetup_r+0xd4>)
 800712a:	429c      	cmp	r4, r3
 800712c:	d101      	bne.n	8007132 <__swsetup_r+0x46>
 800712e:	68ac      	ldr	r4, [r5, #8]
 8007130:	e7eb      	b.n	800710a <__swsetup_r+0x1e>
 8007132:	4b24      	ldr	r3, [pc, #144]	; (80071c4 <__swsetup_r+0xd8>)
 8007134:	429c      	cmp	r4, r3
 8007136:	bf08      	it	eq
 8007138:	68ec      	ldreq	r4, [r5, #12]
 800713a:	e7e6      	b.n	800710a <__swsetup_r+0x1e>
 800713c:	0758      	lsls	r0, r3, #29
 800713e:	d512      	bpl.n	8007166 <__swsetup_r+0x7a>
 8007140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007142:	b141      	cbz	r1, 8007156 <__swsetup_r+0x6a>
 8007144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007148:	4299      	cmp	r1, r3
 800714a:	d002      	beq.n	8007152 <__swsetup_r+0x66>
 800714c:	4630      	mov	r0, r6
 800714e:	f7ff fb31 	bl	80067b4 <_free_r>
 8007152:	2300      	movs	r3, #0
 8007154:	6363      	str	r3, [r4, #52]	; 0x34
 8007156:	89a3      	ldrh	r3, [r4, #12]
 8007158:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800715c:	81a3      	strh	r3, [r4, #12]
 800715e:	2300      	movs	r3, #0
 8007160:	6063      	str	r3, [r4, #4]
 8007162:	6923      	ldr	r3, [r4, #16]
 8007164:	6023      	str	r3, [r4, #0]
 8007166:	89a3      	ldrh	r3, [r4, #12]
 8007168:	f043 0308 	orr.w	r3, r3, #8
 800716c:	81a3      	strh	r3, [r4, #12]
 800716e:	6923      	ldr	r3, [r4, #16]
 8007170:	b94b      	cbnz	r3, 8007186 <__swsetup_r+0x9a>
 8007172:	89a3      	ldrh	r3, [r4, #12]
 8007174:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800717c:	d003      	beq.n	8007186 <__swsetup_r+0x9a>
 800717e:	4621      	mov	r1, r4
 8007180:	4630      	mov	r0, r6
 8007182:	f000 fa09 	bl	8007598 <__smakebuf_r>
 8007186:	89a0      	ldrh	r0, [r4, #12]
 8007188:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800718c:	f010 0301 	ands.w	r3, r0, #1
 8007190:	d00a      	beq.n	80071a8 <__swsetup_r+0xbc>
 8007192:	2300      	movs	r3, #0
 8007194:	60a3      	str	r3, [r4, #8]
 8007196:	6963      	ldr	r3, [r4, #20]
 8007198:	425b      	negs	r3, r3
 800719a:	61a3      	str	r3, [r4, #24]
 800719c:	6923      	ldr	r3, [r4, #16]
 800719e:	b943      	cbnz	r3, 80071b2 <__swsetup_r+0xc6>
 80071a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80071a4:	d1ba      	bne.n	800711c <__swsetup_r+0x30>
 80071a6:	bd70      	pop	{r4, r5, r6, pc}
 80071a8:	0781      	lsls	r1, r0, #30
 80071aa:	bf58      	it	pl
 80071ac:	6963      	ldrpl	r3, [r4, #20]
 80071ae:	60a3      	str	r3, [r4, #8]
 80071b0:	e7f4      	b.n	800719c <__swsetup_r+0xb0>
 80071b2:	2000      	movs	r0, #0
 80071b4:	e7f7      	b.n	80071a6 <__swsetup_r+0xba>
 80071b6:	bf00      	nop
 80071b8:	20000064 	.word	0x20000064
 80071bc:	08007c2c 	.word	0x08007c2c
 80071c0:	08007c4c 	.word	0x08007c4c
 80071c4:	08007c0c 	.word	0x08007c0c

080071c8 <abort>:
 80071c8:	b508      	push	{r3, lr}
 80071ca:	2006      	movs	r0, #6
 80071cc:	f000 fa54 	bl	8007678 <raise>
 80071d0:	2001      	movs	r0, #1
 80071d2:	f7fa fe11 	bl	8001df8 <_exit>
	...

080071d8 <__sflush_r>:
 80071d8:	898a      	ldrh	r2, [r1, #12]
 80071da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071de:	4605      	mov	r5, r0
 80071e0:	0710      	lsls	r0, r2, #28
 80071e2:	460c      	mov	r4, r1
 80071e4:	d458      	bmi.n	8007298 <__sflush_r+0xc0>
 80071e6:	684b      	ldr	r3, [r1, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	dc05      	bgt.n	80071f8 <__sflush_r+0x20>
 80071ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	dc02      	bgt.n	80071f8 <__sflush_r+0x20>
 80071f2:	2000      	movs	r0, #0
 80071f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071fa:	2e00      	cmp	r6, #0
 80071fc:	d0f9      	beq.n	80071f2 <__sflush_r+0x1a>
 80071fe:	2300      	movs	r3, #0
 8007200:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007204:	682f      	ldr	r7, [r5, #0]
 8007206:	602b      	str	r3, [r5, #0]
 8007208:	d032      	beq.n	8007270 <__sflush_r+0x98>
 800720a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800720c:	89a3      	ldrh	r3, [r4, #12]
 800720e:	075a      	lsls	r2, r3, #29
 8007210:	d505      	bpl.n	800721e <__sflush_r+0x46>
 8007212:	6863      	ldr	r3, [r4, #4]
 8007214:	1ac0      	subs	r0, r0, r3
 8007216:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007218:	b10b      	cbz	r3, 800721e <__sflush_r+0x46>
 800721a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800721c:	1ac0      	subs	r0, r0, r3
 800721e:	2300      	movs	r3, #0
 8007220:	4602      	mov	r2, r0
 8007222:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007224:	6a21      	ldr	r1, [r4, #32]
 8007226:	4628      	mov	r0, r5
 8007228:	47b0      	blx	r6
 800722a:	1c43      	adds	r3, r0, #1
 800722c:	89a3      	ldrh	r3, [r4, #12]
 800722e:	d106      	bne.n	800723e <__sflush_r+0x66>
 8007230:	6829      	ldr	r1, [r5, #0]
 8007232:	291d      	cmp	r1, #29
 8007234:	d82c      	bhi.n	8007290 <__sflush_r+0xb8>
 8007236:	4a2a      	ldr	r2, [pc, #168]	; (80072e0 <__sflush_r+0x108>)
 8007238:	40ca      	lsrs	r2, r1
 800723a:	07d6      	lsls	r6, r2, #31
 800723c:	d528      	bpl.n	8007290 <__sflush_r+0xb8>
 800723e:	2200      	movs	r2, #0
 8007240:	6062      	str	r2, [r4, #4]
 8007242:	04d9      	lsls	r1, r3, #19
 8007244:	6922      	ldr	r2, [r4, #16]
 8007246:	6022      	str	r2, [r4, #0]
 8007248:	d504      	bpl.n	8007254 <__sflush_r+0x7c>
 800724a:	1c42      	adds	r2, r0, #1
 800724c:	d101      	bne.n	8007252 <__sflush_r+0x7a>
 800724e:	682b      	ldr	r3, [r5, #0]
 8007250:	b903      	cbnz	r3, 8007254 <__sflush_r+0x7c>
 8007252:	6560      	str	r0, [r4, #84]	; 0x54
 8007254:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007256:	602f      	str	r7, [r5, #0]
 8007258:	2900      	cmp	r1, #0
 800725a:	d0ca      	beq.n	80071f2 <__sflush_r+0x1a>
 800725c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007260:	4299      	cmp	r1, r3
 8007262:	d002      	beq.n	800726a <__sflush_r+0x92>
 8007264:	4628      	mov	r0, r5
 8007266:	f7ff faa5 	bl	80067b4 <_free_r>
 800726a:	2000      	movs	r0, #0
 800726c:	6360      	str	r0, [r4, #52]	; 0x34
 800726e:	e7c1      	b.n	80071f4 <__sflush_r+0x1c>
 8007270:	6a21      	ldr	r1, [r4, #32]
 8007272:	2301      	movs	r3, #1
 8007274:	4628      	mov	r0, r5
 8007276:	47b0      	blx	r6
 8007278:	1c41      	adds	r1, r0, #1
 800727a:	d1c7      	bne.n	800720c <__sflush_r+0x34>
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0c4      	beq.n	800720c <__sflush_r+0x34>
 8007282:	2b1d      	cmp	r3, #29
 8007284:	d001      	beq.n	800728a <__sflush_r+0xb2>
 8007286:	2b16      	cmp	r3, #22
 8007288:	d101      	bne.n	800728e <__sflush_r+0xb6>
 800728a:	602f      	str	r7, [r5, #0]
 800728c:	e7b1      	b.n	80071f2 <__sflush_r+0x1a>
 800728e:	89a3      	ldrh	r3, [r4, #12]
 8007290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007294:	81a3      	strh	r3, [r4, #12]
 8007296:	e7ad      	b.n	80071f4 <__sflush_r+0x1c>
 8007298:	690f      	ldr	r7, [r1, #16]
 800729a:	2f00      	cmp	r7, #0
 800729c:	d0a9      	beq.n	80071f2 <__sflush_r+0x1a>
 800729e:	0793      	lsls	r3, r2, #30
 80072a0:	680e      	ldr	r6, [r1, #0]
 80072a2:	bf08      	it	eq
 80072a4:	694b      	ldreq	r3, [r1, #20]
 80072a6:	600f      	str	r7, [r1, #0]
 80072a8:	bf18      	it	ne
 80072aa:	2300      	movne	r3, #0
 80072ac:	eba6 0807 	sub.w	r8, r6, r7
 80072b0:	608b      	str	r3, [r1, #8]
 80072b2:	f1b8 0f00 	cmp.w	r8, #0
 80072b6:	dd9c      	ble.n	80071f2 <__sflush_r+0x1a>
 80072b8:	6a21      	ldr	r1, [r4, #32]
 80072ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072bc:	4643      	mov	r3, r8
 80072be:	463a      	mov	r2, r7
 80072c0:	4628      	mov	r0, r5
 80072c2:	47b0      	blx	r6
 80072c4:	2800      	cmp	r0, #0
 80072c6:	dc06      	bgt.n	80072d6 <__sflush_r+0xfe>
 80072c8:	89a3      	ldrh	r3, [r4, #12]
 80072ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072ce:	81a3      	strh	r3, [r4, #12]
 80072d0:	f04f 30ff 	mov.w	r0, #4294967295
 80072d4:	e78e      	b.n	80071f4 <__sflush_r+0x1c>
 80072d6:	4407      	add	r7, r0
 80072d8:	eba8 0800 	sub.w	r8, r8, r0
 80072dc:	e7e9      	b.n	80072b2 <__sflush_r+0xda>
 80072de:	bf00      	nop
 80072e0:	20400001 	.word	0x20400001

080072e4 <_fflush_r>:
 80072e4:	b538      	push	{r3, r4, r5, lr}
 80072e6:	690b      	ldr	r3, [r1, #16]
 80072e8:	4605      	mov	r5, r0
 80072ea:	460c      	mov	r4, r1
 80072ec:	b913      	cbnz	r3, 80072f4 <_fflush_r+0x10>
 80072ee:	2500      	movs	r5, #0
 80072f0:	4628      	mov	r0, r5
 80072f2:	bd38      	pop	{r3, r4, r5, pc}
 80072f4:	b118      	cbz	r0, 80072fe <_fflush_r+0x1a>
 80072f6:	6983      	ldr	r3, [r0, #24]
 80072f8:	b90b      	cbnz	r3, 80072fe <_fflush_r+0x1a>
 80072fa:	f000 f887 	bl	800740c <__sinit>
 80072fe:	4b14      	ldr	r3, [pc, #80]	; (8007350 <_fflush_r+0x6c>)
 8007300:	429c      	cmp	r4, r3
 8007302:	d11b      	bne.n	800733c <_fflush_r+0x58>
 8007304:	686c      	ldr	r4, [r5, #4]
 8007306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d0ef      	beq.n	80072ee <_fflush_r+0xa>
 800730e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007310:	07d0      	lsls	r0, r2, #31
 8007312:	d404      	bmi.n	800731e <_fflush_r+0x3a>
 8007314:	0599      	lsls	r1, r3, #22
 8007316:	d402      	bmi.n	800731e <_fflush_r+0x3a>
 8007318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800731a:	f000 f915 	bl	8007548 <__retarget_lock_acquire_recursive>
 800731e:	4628      	mov	r0, r5
 8007320:	4621      	mov	r1, r4
 8007322:	f7ff ff59 	bl	80071d8 <__sflush_r>
 8007326:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007328:	07da      	lsls	r2, r3, #31
 800732a:	4605      	mov	r5, r0
 800732c:	d4e0      	bmi.n	80072f0 <_fflush_r+0xc>
 800732e:	89a3      	ldrh	r3, [r4, #12]
 8007330:	059b      	lsls	r3, r3, #22
 8007332:	d4dd      	bmi.n	80072f0 <_fflush_r+0xc>
 8007334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007336:	f000 f908 	bl	800754a <__retarget_lock_release_recursive>
 800733a:	e7d9      	b.n	80072f0 <_fflush_r+0xc>
 800733c:	4b05      	ldr	r3, [pc, #20]	; (8007354 <_fflush_r+0x70>)
 800733e:	429c      	cmp	r4, r3
 8007340:	d101      	bne.n	8007346 <_fflush_r+0x62>
 8007342:	68ac      	ldr	r4, [r5, #8]
 8007344:	e7df      	b.n	8007306 <_fflush_r+0x22>
 8007346:	4b04      	ldr	r3, [pc, #16]	; (8007358 <_fflush_r+0x74>)
 8007348:	429c      	cmp	r4, r3
 800734a:	bf08      	it	eq
 800734c:	68ec      	ldreq	r4, [r5, #12]
 800734e:	e7da      	b.n	8007306 <_fflush_r+0x22>
 8007350:	08007c2c 	.word	0x08007c2c
 8007354:	08007c4c 	.word	0x08007c4c
 8007358:	08007c0c 	.word	0x08007c0c

0800735c <std>:
 800735c:	2300      	movs	r3, #0
 800735e:	b510      	push	{r4, lr}
 8007360:	4604      	mov	r4, r0
 8007362:	e9c0 3300 	strd	r3, r3, [r0]
 8007366:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800736a:	6083      	str	r3, [r0, #8]
 800736c:	8181      	strh	r1, [r0, #12]
 800736e:	6643      	str	r3, [r0, #100]	; 0x64
 8007370:	81c2      	strh	r2, [r0, #14]
 8007372:	6183      	str	r3, [r0, #24]
 8007374:	4619      	mov	r1, r3
 8007376:	2208      	movs	r2, #8
 8007378:	305c      	adds	r0, #92	; 0x5c
 800737a:	f7fd fb5b 	bl	8004a34 <memset>
 800737e:	4b05      	ldr	r3, [pc, #20]	; (8007394 <std+0x38>)
 8007380:	6263      	str	r3, [r4, #36]	; 0x24
 8007382:	4b05      	ldr	r3, [pc, #20]	; (8007398 <std+0x3c>)
 8007384:	62a3      	str	r3, [r4, #40]	; 0x28
 8007386:	4b05      	ldr	r3, [pc, #20]	; (800739c <std+0x40>)
 8007388:	62e3      	str	r3, [r4, #44]	; 0x2c
 800738a:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <std+0x44>)
 800738c:	6224      	str	r4, [r4, #32]
 800738e:	6323      	str	r3, [r4, #48]	; 0x30
 8007390:	bd10      	pop	{r4, pc}
 8007392:	bf00      	nop
 8007394:	080076b1 	.word	0x080076b1
 8007398:	080076d3 	.word	0x080076d3
 800739c:	0800770b 	.word	0x0800770b
 80073a0:	0800772f 	.word	0x0800772f

080073a4 <_cleanup_r>:
 80073a4:	4901      	ldr	r1, [pc, #4]	; (80073ac <_cleanup_r+0x8>)
 80073a6:	f000 b8af 	b.w	8007508 <_fwalk_reent>
 80073aa:	bf00      	nop
 80073ac:	080072e5 	.word	0x080072e5

080073b0 <__sfmoreglue>:
 80073b0:	b570      	push	{r4, r5, r6, lr}
 80073b2:	2268      	movs	r2, #104	; 0x68
 80073b4:	1e4d      	subs	r5, r1, #1
 80073b6:	4355      	muls	r5, r2
 80073b8:	460e      	mov	r6, r1
 80073ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073be:	f7ff fa65 	bl	800688c <_malloc_r>
 80073c2:	4604      	mov	r4, r0
 80073c4:	b140      	cbz	r0, 80073d8 <__sfmoreglue+0x28>
 80073c6:	2100      	movs	r1, #0
 80073c8:	e9c0 1600 	strd	r1, r6, [r0]
 80073cc:	300c      	adds	r0, #12
 80073ce:	60a0      	str	r0, [r4, #8]
 80073d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073d4:	f7fd fb2e 	bl	8004a34 <memset>
 80073d8:	4620      	mov	r0, r4
 80073da:	bd70      	pop	{r4, r5, r6, pc}

080073dc <__sfp_lock_acquire>:
 80073dc:	4801      	ldr	r0, [pc, #4]	; (80073e4 <__sfp_lock_acquire+0x8>)
 80073de:	f000 b8b3 	b.w	8007548 <__retarget_lock_acquire_recursive>
 80073e2:	bf00      	nop
 80073e4:	20000431 	.word	0x20000431

080073e8 <__sfp_lock_release>:
 80073e8:	4801      	ldr	r0, [pc, #4]	; (80073f0 <__sfp_lock_release+0x8>)
 80073ea:	f000 b8ae 	b.w	800754a <__retarget_lock_release_recursive>
 80073ee:	bf00      	nop
 80073f0:	20000431 	.word	0x20000431

080073f4 <__sinit_lock_acquire>:
 80073f4:	4801      	ldr	r0, [pc, #4]	; (80073fc <__sinit_lock_acquire+0x8>)
 80073f6:	f000 b8a7 	b.w	8007548 <__retarget_lock_acquire_recursive>
 80073fa:	bf00      	nop
 80073fc:	20000432 	.word	0x20000432

08007400 <__sinit_lock_release>:
 8007400:	4801      	ldr	r0, [pc, #4]	; (8007408 <__sinit_lock_release+0x8>)
 8007402:	f000 b8a2 	b.w	800754a <__retarget_lock_release_recursive>
 8007406:	bf00      	nop
 8007408:	20000432 	.word	0x20000432

0800740c <__sinit>:
 800740c:	b510      	push	{r4, lr}
 800740e:	4604      	mov	r4, r0
 8007410:	f7ff fff0 	bl	80073f4 <__sinit_lock_acquire>
 8007414:	69a3      	ldr	r3, [r4, #24]
 8007416:	b11b      	cbz	r3, 8007420 <__sinit+0x14>
 8007418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800741c:	f7ff bff0 	b.w	8007400 <__sinit_lock_release>
 8007420:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007424:	6523      	str	r3, [r4, #80]	; 0x50
 8007426:	4b13      	ldr	r3, [pc, #76]	; (8007474 <__sinit+0x68>)
 8007428:	4a13      	ldr	r2, [pc, #76]	; (8007478 <__sinit+0x6c>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	62a2      	str	r2, [r4, #40]	; 0x28
 800742e:	42a3      	cmp	r3, r4
 8007430:	bf04      	itt	eq
 8007432:	2301      	moveq	r3, #1
 8007434:	61a3      	streq	r3, [r4, #24]
 8007436:	4620      	mov	r0, r4
 8007438:	f000 f820 	bl	800747c <__sfp>
 800743c:	6060      	str	r0, [r4, #4]
 800743e:	4620      	mov	r0, r4
 8007440:	f000 f81c 	bl	800747c <__sfp>
 8007444:	60a0      	str	r0, [r4, #8]
 8007446:	4620      	mov	r0, r4
 8007448:	f000 f818 	bl	800747c <__sfp>
 800744c:	2200      	movs	r2, #0
 800744e:	60e0      	str	r0, [r4, #12]
 8007450:	2104      	movs	r1, #4
 8007452:	6860      	ldr	r0, [r4, #4]
 8007454:	f7ff ff82 	bl	800735c <std>
 8007458:	68a0      	ldr	r0, [r4, #8]
 800745a:	2201      	movs	r2, #1
 800745c:	2109      	movs	r1, #9
 800745e:	f7ff ff7d 	bl	800735c <std>
 8007462:	68e0      	ldr	r0, [r4, #12]
 8007464:	2202      	movs	r2, #2
 8007466:	2112      	movs	r1, #18
 8007468:	f7ff ff78 	bl	800735c <std>
 800746c:	2301      	movs	r3, #1
 800746e:	61a3      	str	r3, [r4, #24]
 8007470:	e7d2      	b.n	8007418 <__sinit+0xc>
 8007472:	bf00      	nop
 8007474:	08007890 	.word	0x08007890
 8007478:	080073a5 	.word	0x080073a5

0800747c <__sfp>:
 800747c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747e:	4607      	mov	r7, r0
 8007480:	f7ff ffac 	bl	80073dc <__sfp_lock_acquire>
 8007484:	4b1e      	ldr	r3, [pc, #120]	; (8007500 <__sfp+0x84>)
 8007486:	681e      	ldr	r6, [r3, #0]
 8007488:	69b3      	ldr	r3, [r6, #24]
 800748a:	b913      	cbnz	r3, 8007492 <__sfp+0x16>
 800748c:	4630      	mov	r0, r6
 800748e:	f7ff ffbd 	bl	800740c <__sinit>
 8007492:	3648      	adds	r6, #72	; 0x48
 8007494:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007498:	3b01      	subs	r3, #1
 800749a:	d503      	bpl.n	80074a4 <__sfp+0x28>
 800749c:	6833      	ldr	r3, [r6, #0]
 800749e:	b30b      	cbz	r3, 80074e4 <__sfp+0x68>
 80074a0:	6836      	ldr	r6, [r6, #0]
 80074a2:	e7f7      	b.n	8007494 <__sfp+0x18>
 80074a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80074a8:	b9d5      	cbnz	r5, 80074e0 <__sfp+0x64>
 80074aa:	4b16      	ldr	r3, [pc, #88]	; (8007504 <__sfp+0x88>)
 80074ac:	60e3      	str	r3, [r4, #12]
 80074ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074b2:	6665      	str	r5, [r4, #100]	; 0x64
 80074b4:	f000 f847 	bl	8007546 <__retarget_lock_init_recursive>
 80074b8:	f7ff ff96 	bl	80073e8 <__sfp_lock_release>
 80074bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074c4:	6025      	str	r5, [r4, #0]
 80074c6:	61a5      	str	r5, [r4, #24]
 80074c8:	2208      	movs	r2, #8
 80074ca:	4629      	mov	r1, r5
 80074cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074d0:	f7fd fab0 	bl	8004a34 <memset>
 80074d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074dc:	4620      	mov	r0, r4
 80074de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074e0:	3468      	adds	r4, #104	; 0x68
 80074e2:	e7d9      	b.n	8007498 <__sfp+0x1c>
 80074e4:	2104      	movs	r1, #4
 80074e6:	4638      	mov	r0, r7
 80074e8:	f7ff ff62 	bl	80073b0 <__sfmoreglue>
 80074ec:	4604      	mov	r4, r0
 80074ee:	6030      	str	r0, [r6, #0]
 80074f0:	2800      	cmp	r0, #0
 80074f2:	d1d5      	bne.n	80074a0 <__sfp+0x24>
 80074f4:	f7ff ff78 	bl	80073e8 <__sfp_lock_release>
 80074f8:	230c      	movs	r3, #12
 80074fa:	603b      	str	r3, [r7, #0]
 80074fc:	e7ee      	b.n	80074dc <__sfp+0x60>
 80074fe:	bf00      	nop
 8007500:	08007890 	.word	0x08007890
 8007504:	ffff0001 	.word	0xffff0001

08007508 <_fwalk_reent>:
 8007508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800750c:	4606      	mov	r6, r0
 800750e:	4688      	mov	r8, r1
 8007510:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007514:	2700      	movs	r7, #0
 8007516:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800751a:	f1b9 0901 	subs.w	r9, r9, #1
 800751e:	d505      	bpl.n	800752c <_fwalk_reent+0x24>
 8007520:	6824      	ldr	r4, [r4, #0]
 8007522:	2c00      	cmp	r4, #0
 8007524:	d1f7      	bne.n	8007516 <_fwalk_reent+0xe>
 8007526:	4638      	mov	r0, r7
 8007528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800752c:	89ab      	ldrh	r3, [r5, #12]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d907      	bls.n	8007542 <_fwalk_reent+0x3a>
 8007532:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007536:	3301      	adds	r3, #1
 8007538:	d003      	beq.n	8007542 <_fwalk_reent+0x3a>
 800753a:	4629      	mov	r1, r5
 800753c:	4630      	mov	r0, r6
 800753e:	47c0      	blx	r8
 8007540:	4307      	orrs	r7, r0
 8007542:	3568      	adds	r5, #104	; 0x68
 8007544:	e7e9      	b.n	800751a <_fwalk_reent+0x12>

08007546 <__retarget_lock_init_recursive>:
 8007546:	4770      	bx	lr

08007548 <__retarget_lock_acquire_recursive>:
 8007548:	4770      	bx	lr

0800754a <__retarget_lock_release_recursive>:
 800754a:	4770      	bx	lr

0800754c <__swhatbuf_r>:
 800754c:	b570      	push	{r4, r5, r6, lr}
 800754e:	460e      	mov	r6, r1
 8007550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007554:	2900      	cmp	r1, #0
 8007556:	b096      	sub	sp, #88	; 0x58
 8007558:	4614      	mov	r4, r2
 800755a:	461d      	mov	r5, r3
 800755c:	da08      	bge.n	8007570 <__swhatbuf_r+0x24>
 800755e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	602a      	str	r2, [r5, #0]
 8007566:	061a      	lsls	r2, r3, #24
 8007568:	d410      	bmi.n	800758c <__swhatbuf_r+0x40>
 800756a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800756e:	e00e      	b.n	800758e <__swhatbuf_r+0x42>
 8007570:	466a      	mov	r2, sp
 8007572:	f000 f903 	bl	800777c <_fstat_r>
 8007576:	2800      	cmp	r0, #0
 8007578:	dbf1      	blt.n	800755e <__swhatbuf_r+0x12>
 800757a:	9a01      	ldr	r2, [sp, #4]
 800757c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007580:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007584:	425a      	negs	r2, r3
 8007586:	415a      	adcs	r2, r3
 8007588:	602a      	str	r2, [r5, #0]
 800758a:	e7ee      	b.n	800756a <__swhatbuf_r+0x1e>
 800758c:	2340      	movs	r3, #64	; 0x40
 800758e:	2000      	movs	r0, #0
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	b016      	add	sp, #88	; 0x58
 8007594:	bd70      	pop	{r4, r5, r6, pc}
	...

08007598 <__smakebuf_r>:
 8007598:	898b      	ldrh	r3, [r1, #12]
 800759a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800759c:	079d      	lsls	r5, r3, #30
 800759e:	4606      	mov	r6, r0
 80075a0:	460c      	mov	r4, r1
 80075a2:	d507      	bpl.n	80075b4 <__smakebuf_r+0x1c>
 80075a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	6123      	str	r3, [r4, #16]
 80075ac:	2301      	movs	r3, #1
 80075ae:	6163      	str	r3, [r4, #20]
 80075b0:	b002      	add	sp, #8
 80075b2:	bd70      	pop	{r4, r5, r6, pc}
 80075b4:	ab01      	add	r3, sp, #4
 80075b6:	466a      	mov	r2, sp
 80075b8:	f7ff ffc8 	bl	800754c <__swhatbuf_r>
 80075bc:	9900      	ldr	r1, [sp, #0]
 80075be:	4605      	mov	r5, r0
 80075c0:	4630      	mov	r0, r6
 80075c2:	f7ff f963 	bl	800688c <_malloc_r>
 80075c6:	b948      	cbnz	r0, 80075dc <__smakebuf_r+0x44>
 80075c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075cc:	059a      	lsls	r2, r3, #22
 80075ce:	d4ef      	bmi.n	80075b0 <__smakebuf_r+0x18>
 80075d0:	f023 0303 	bic.w	r3, r3, #3
 80075d4:	f043 0302 	orr.w	r3, r3, #2
 80075d8:	81a3      	strh	r3, [r4, #12]
 80075da:	e7e3      	b.n	80075a4 <__smakebuf_r+0xc>
 80075dc:	4b0d      	ldr	r3, [pc, #52]	; (8007614 <__smakebuf_r+0x7c>)
 80075de:	62b3      	str	r3, [r6, #40]	; 0x28
 80075e0:	89a3      	ldrh	r3, [r4, #12]
 80075e2:	6020      	str	r0, [r4, #0]
 80075e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e8:	81a3      	strh	r3, [r4, #12]
 80075ea:	9b00      	ldr	r3, [sp, #0]
 80075ec:	6163      	str	r3, [r4, #20]
 80075ee:	9b01      	ldr	r3, [sp, #4]
 80075f0:	6120      	str	r0, [r4, #16]
 80075f2:	b15b      	cbz	r3, 800760c <__smakebuf_r+0x74>
 80075f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075f8:	4630      	mov	r0, r6
 80075fa:	f000 f8d1 	bl	80077a0 <_isatty_r>
 80075fe:	b128      	cbz	r0, 800760c <__smakebuf_r+0x74>
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	f023 0303 	bic.w	r3, r3, #3
 8007606:	f043 0301 	orr.w	r3, r3, #1
 800760a:	81a3      	strh	r3, [r4, #12]
 800760c:	89a0      	ldrh	r0, [r4, #12]
 800760e:	4305      	orrs	r5, r0
 8007610:	81a5      	strh	r5, [r4, #12]
 8007612:	e7cd      	b.n	80075b0 <__smakebuf_r+0x18>
 8007614:	080073a5 	.word	0x080073a5

08007618 <_malloc_usable_size_r>:
 8007618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800761c:	1f18      	subs	r0, r3, #4
 800761e:	2b00      	cmp	r3, #0
 8007620:	bfbc      	itt	lt
 8007622:	580b      	ldrlt	r3, [r1, r0]
 8007624:	18c0      	addlt	r0, r0, r3
 8007626:	4770      	bx	lr

08007628 <_raise_r>:
 8007628:	291f      	cmp	r1, #31
 800762a:	b538      	push	{r3, r4, r5, lr}
 800762c:	4604      	mov	r4, r0
 800762e:	460d      	mov	r5, r1
 8007630:	d904      	bls.n	800763c <_raise_r+0x14>
 8007632:	2316      	movs	r3, #22
 8007634:	6003      	str	r3, [r0, #0]
 8007636:	f04f 30ff 	mov.w	r0, #4294967295
 800763a:	bd38      	pop	{r3, r4, r5, pc}
 800763c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800763e:	b112      	cbz	r2, 8007646 <_raise_r+0x1e>
 8007640:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007644:	b94b      	cbnz	r3, 800765a <_raise_r+0x32>
 8007646:	4620      	mov	r0, r4
 8007648:	f000 f830 	bl	80076ac <_getpid_r>
 800764c:	462a      	mov	r2, r5
 800764e:	4601      	mov	r1, r0
 8007650:	4620      	mov	r0, r4
 8007652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007656:	f000 b817 	b.w	8007688 <_kill_r>
 800765a:	2b01      	cmp	r3, #1
 800765c:	d00a      	beq.n	8007674 <_raise_r+0x4c>
 800765e:	1c59      	adds	r1, r3, #1
 8007660:	d103      	bne.n	800766a <_raise_r+0x42>
 8007662:	2316      	movs	r3, #22
 8007664:	6003      	str	r3, [r0, #0]
 8007666:	2001      	movs	r0, #1
 8007668:	e7e7      	b.n	800763a <_raise_r+0x12>
 800766a:	2400      	movs	r4, #0
 800766c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007670:	4628      	mov	r0, r5
 8007672:	4798      	blx	r3
 8007674:	2000      	movs	r0, #0
 8007676:	e7e0      	b.n	800763a <_raise_r+0x12>

08007678 <raise>:
 8007678:	4b02      	ldr	r3, [pc, #8]	; (8007684 <raise+0xc>)
 800767a:	4601      	mov	r1, r0
 800767c:	6818      	ldr	r0, [r3, #0]
 800767e:	f7ff bfd3 	b.w	8007628 <_raise_r>
 8007682:	bf00      	nop
 8007684:	20000064 	.word	0x20000064

08007688 <_kill_r>:
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	4d07      	ldr	r5, [pc, #28]	; (80076a8 <_kill_r+0x20>)
 800768c:	2300      	movs	r3, #0
 800768e:	4604      	mov	r4, r0
 8007690:	4608      	mov	r0, r1
 8007692:	4611      	mov	r1, r2
 8007694:	602b      	str	r3, [r5, #0]
 8007696:	f7fa fb9f 	bl	8001dd8 <_kill>
 800769a:	1c43      	adds	r3, r0, #1
 800769c:	d102      	bne.n	80076a4 <_kill_r+0x1c>
 800769e:	682b      	ldr	r3, [r5, #0]
 80076a0:	b103      	cbz	r3, 80076a4 <_kill_r+0x1c>
 80076a2:	6023      	str	r3, [r4, #0]
 80076a4:	bd38      	pop	{r3, r4, r5, pc}
 80076a6:	bf00      	nop
 80076a8:	2000042c 	.word	0x2000042c

080076ac <_getpid_r>:
 80076ac:	f7fa bb8c 	b.w	8001dc8 <_getpid>

080076b0 <__sread>:
 80076b0:	b510      	push	{r4, lr}
 80076b2:	460c      	mov	r4, r1
 80076b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b8:	f000 f894 	bl	80077e4 <_read_r>
 80076bc:	2800      	cmp	r0, #0
 80076be:	bfab      	itete	ge
 80076c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076c2:	89a3      	ldrhlt	r3, [r4, #12]
 80076c4:	181b      	addge	r3, r3, r0
 80076c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076ca:	bfac      	ite	ge
 80076cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80076ce:	81a3      	strhlt	r3, [r4, #12]
 80076d0:	bd10      	pop	{r4, pc}

080076d2 <__swrite>:
 80076d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d6:	461f      	mov	r7, r3
 80076d8:	898b      	ldrh	r3, [r1, #12]
 80076da:	05db      	lsls	r3, r3, #23
 80076dc:	4605      	mov	r5, r0
 80076de:	460c      	mov	r4, r1
 80076e0:	4616      	mov	r6, r2
 80076e2:	d505      	bpl.n	80076f0 <__swrite+0x1e>
 80076e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e8:	2302      	movs	r3, #2
 80076ea:	2200      	movs	r2, #0
 80076ec:	f000 f868 	bl	80077c0 <_lseek_r>
 80076f0:	89a3      	ldrh	r3, [r4, #12]
 80076f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076fa:	81a3      	strh	r3, [r4, #12]
 80076fc:	4632      	mov	r2, r6
 80076fe:	463b      	mov	r3, r7
 8007700:	4628      	mov	r0, r5
 8007702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007706:	f000 b817 	b.w	8007738 <_write_r>

0800770a <__sseek>:
 800770a:	b510      	push	{r4, lr}
 800770c:	460c      	mov	r4, r1
 800770e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007712:	f000 f855 	bl	80077c0 <_lseek_r>
 8007716:	1c43      	adds	r3, r0, #1
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	bf15      	itete	ne
 800771c:	6560      	strne	r0, [r4, #84]	; 0x54
 800771e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007722:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007726:	81a3      	strheq	r3, [r4, #12]
 8007728:	bf18      	it	ne
 800772a:	81a3      	strhne	r3, [r4, #12]
 800772c:	bd10      	pop	{r4, pc}

0800772e <__sclose>:
 800772e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007732:	f000 b813 	b.w	800775c <_close_r>
	...

08007738 <_write_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	4d07      	ldr	r5, [pc, #28]	; (8007758 <_write_r+0x20>)
 800773c:	4604      	mov	r4, r0
 800773e:	4608      	mov	r0, r1
 8007740:	4611      	mov	r1, r2
 8007742:	2200      	movs	r2, #0
 8007744:	602a      	str	r2, [r5, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	f7fa fb7d 	bl	8001e46 <_write>
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	d102      	bne.n	8007756 <_write_r+0x1e>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	b103      	cbz	r3, 8007756 <_write_r+0x1e>
 8007754:	6023      	str	r3, [r4, #0]
 8007756:	bd38      	pop	{r3, r4, r5, pc}
 8007758:	2000042c 	.word	0x2000042c

0800775c <_close_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	4d06      	ldr	r5, [pc, #24]	; (8007778 <_close_r+0x1c>)
 8007760:	2300      	movs	r3, #0
 8007762:	4604      	mov	r4, r0
 8007764:	4608      	mov	r0, r1
 8007766:	602b      	str	r3, [r5, #0]
 8007768:	f7fa fb89 	bl	8001e7e <_close>
 800776c:	1c43      	adds	r3, r0, #1
 800776e:	d102      	bne.n	8007776 <_close_r+0x1a>
 8007770:	682b      	ldr	r3, [r5, #0]
 8007772:	b103      	cbz	r3, 8007776 <_close_r+0x1a>
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	bd38      	pop	{r3, r4, r5, pc}
 8007778:	2000042c 	.word	0x2000042c

0800777c <_fstat_r>:
 800777c:	b538      	push	{r3, r4, r5, lr}
 800777e:	4d07      	ldr	r5, [pc, #28]	; (800779c <_fstat_r+0x20>)
 8007780:	2300      	movs	r3, #0
 8007782:	4604      	mov	r4, r0
 8007784:	4608      	mov	r0, r1
 8007786:	4611      	mov	r1, r2
 8007788:	602b      	str	r3, [r5, #0]
 800778a:	f7fa fb84 	bl	8001e96 <_fstat>
 800778e:	1c43      	adds	r3, r0, #1
 8007790:	d102      	bne.n	8007798 <_fstat_r+0x1c>
 8007792:	682b      	ldr	r3, [r5, #0]
 8007794:	b103      	cbz	r3, 8007798 <_fstat_r+0x1c>
 8007796:	6023      	str	r3, [r4, #0]
 8007798:	bd38      	pop	{r3, r4, r5, pc}
 800779a:	bf00      	nop
 800779c:	2000042c 	.word	0x2000042c

080077a0 <_isatty_r>:
 80077a0:	b538      	push	{r3, r4, r5, lr}
 80077a2:	4d06      	ldr	r5, [pc, #24]	; (80077bc <_isatty_r+0x1c>)
 80077a4:	2300      	movs	r3, #0
 80077a6:	4604      	mov	r4, r0
 80077a8:	4608      	mov	r0, r1
 80077aa:	602b      	str	r3, [r5, #0]
 80077ac:	f7fa fb83 	bl	8001eb6 <_isatty>
 80077b0:	1c43      	adds	r3, r0, #1
 80077b2:	d102      	bne.n	80077ba <_isatty_r+0x1a>
 80077b4:	682b      	ldr	r3, [r5, #0]
 80077b6:	b103      	cbz	r3, 80077ba <_isatty_r+0x1a>
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	bd38      	pop	{r3, r4, r5, pc}
 80077bc:	2000042c 	.word	0x2000042c

080077c0 <_lseek_r>:
 80077c0:	b538      	push	{r3, r4, r5, lr}
 80077c2:	4d07      	ldr	r5, [pc, #28]	; (80077e0 <_lseek_r+0x20>)
 80077c4:	4604      	mov	r4, r0
 80077c6:	4608      	mov	r0, r1
 80077c8:	4611      	mov	r1, r2
 80077ca:	2200      	movs	r2, #0
 80077cc:	602a      	str	r2, [r5, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	f7fa fb7c 	bl	8001ecc <_lseek>
 80077d4:	1c43      	adds	r3, r0, #1
 80077d6:	d102      	bne.n	80077de <_lseek_r+0x1e>
 80077d8:	682b      	ldr	r3, [r5, #0]
 80077da:	b103      	cbz	r3, 80077de <_lseek_r+0x1e>
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	bd38      	pop	{r3, r4, r5, pc}
 80077e0:	2000042c 	.word	0x2000042c

080077e4 <_read_r>:
 80077e4:	b538      	push	{r3, r4, r5, lr}
 80077e6:	4d07      	ldr	r5, [pc, #28]	; (8007804 <_read_r+0x20>)
 80077e8:	4604      	mov	r4, r0
 80077ea:	4608      	mov	r0, r1
 80077ec:	4611      	mov	r1, r2
 80077ee:	2200      	movs	r2, #0
 80077f0:	602a      	str	r2, [r5, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	f7fa fb0a 	bl	8001e0c <_read>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	d102      	bne.n	8007802 <_read_r+0x1e>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	b103      	cbz	r3, 8007802 <_read_r+0x1e>
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	2000042c 	.word	0x2000042c

08007808 <_init>:
 8007808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780a:	bf00      	nop
 800780c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780e:	bc08      	pop	{r3}
 8007810:	469e      	mov	lr, r3
 8007812:	4770      	bx	lr

08007814 <_fini>:
 8007814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007816:	bf00      	nop
 8007818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781a:	bc08      	pop	{r3}
 800781c:	469e      	mov	lr, r3
 800781e:	4770      	bx	lr
