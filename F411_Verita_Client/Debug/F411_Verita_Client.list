
F411_Verita_Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08008df0  08008df0  00018df0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009314  08009314  000203a0  2**0
                  CONTENTS
  4 .ARM          00000008  08009314  08009314  00019314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800931c  0800931c  000203a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800931c  0800931c  0001931c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009320  08009320  00019320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a0  20000000  08009324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  200003a0  080096c4  000203a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  080096c4  00020670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010480  00000000  00000000  000203d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002438  00000000  00000000  00030850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00032c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  00033b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a0f  00000000  00000000  000348c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011128  00000000  00000000  0004d2cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b97c  00000000  00000000  0005e3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9d73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f20  00000000  00000000  000f9dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003a0 	.word	0x200003a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008dd8 	.word	0x08008dd8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003a4 	.word	0x200003a4
 80001dc:	08008dd8 	.word	0x08008dd8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <Rx_Verita_engine_callBak>:

	return VRT_ERROR;
}


VRTPTC_StatusTypedef Rx_Verita_engine_callBak(uint8_t *Rxbffr, Verita_Register_Bank *regisk){ //uint32_t *regisk
 8000f5c:	b490      	push	{r4, r7}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
	 * @param Rxbffr - input uart buffer
	 * @param regisk - register need the result be stored
	 */
	static uint8_t logger[12] = {0}; /// log Rxbffr without head packet
	static uint8_t index = 0; // use in case the start of verita is not at Rxbffr[0]
	uint8_t chksum[2]  = {0};
 8000f66:	2300      	movs	r3, #0
 8000f68:	81bb      	strh	r3, [r7, #12]
		uint32_t U32;
	}logu;


		/// chk All headers
		if(Rxbffr[index + 0] == 0x56 && Rxbffr[index + 1] == 0x52 && Rxbffr[index + 2] == 0x54){
 8000f6a:	4b74      	ldr	r3, [pc, #464]	; (800113c <Rx_Verita_engine_callBak+0x1e0>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b56      	cmp	r3, #86	; 0x56
 8000f78:	f040 80c5 	bne.w	8001106 <Rx_Verita_engine_callBak+0x1aa>
 8000f7c:	4b6f      	ldr	r3, [pc, #444]	; (800113c <Rx_Verita_engine_callBak+0x1e0>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b52      	cmp	r3, #82	; 0x52
 8000f8a:	f040 80bc 	bne.w	8001106 <Rx_Verita_engine_callBak+0x1aa>
 8000f8e:	4b6b      	ldr	r3, [pc, #428]	; (800113c <Rx_Verita_engine_callBak+0x1e0>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	3302      	adds	r3, #2
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	4413      	add	r3, r2
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b54      	cmp	r3, #84	; 0x54
 8000f9c:	f040 80b3 	bne.w	8001106 <Rx_Verita_engine_callBak+0x1aa>

			//// log data first / prevent overwrite
			for(register int k = 0; k < 7; k++){
 8000fa0:	2400      	movs	r4, #0
 8000fa2:	e009      	b.n	8000fb8 <Rx_Verita_engine_callBak+0x5c>
				logger[k] = Rxbffr[index + k + 3];
 8000fa4:	4b65      	ldr	r3, [pc, #404]	; (800113c <Rx_Verita_engine_callBak+0x1e0>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4423      	add	r3, r4
 8000faa:	3303      	adds	r3, #3
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	781a      	ldrb	r2, [r3, #0]
 8000fb2:	4b63      	ldr	r3, [pc, #396]	; (8001140 <Rx_Verita_engine_callBak+0x1e4>)
 8000fb4:	551a      	strb	r2, [r3, r4]
			for(register int k = 0; k < 7; k++){
 8000fb6:	3401      	adds	r4, #1
 8000fb8:	2c06      	cmp	r4, #6
 8000fba:	ddf3      	ble.n	8000fa4 <Rx_Verita_engine_callBak+0x48>
			}

			//// checksum here
			for(register int i = 0;i < 5; i++){
 8000fbc:	2400      	movs	r4, #0
 8000fbe:	e006      	b.n	8000fce <Rx_Verita_engine_callBak+0x72>
				chksum[0] += logger[i];
 8000fc0:	7b3a      	ldrb	r2, [r7, #12]
 8000fc2:	4b5f      	ldr	r3, [pc, #380]	; (8001140 <Rx_Verita_engine_callBak+0x1e4>)
 8000fc4:	5d1b      	ldrb	r3, [r3, r4]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	733b      	strb	r3, [r7, #12]
			for(register int i = 0;i < 5; i++){
 8000fcc:	3401      	adds	r4, #1
 8000fce:	2c04      	cmp	r4, #4
 8000fd0:	ddf6      	ble.n	8000fc0 <Rx_Verita_engine_callBak+0x64>
			}
			chksum[1] = ~chksum[0];
 8000fd2:	7b3b      	ldrb	r3, [r7, #12]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	737b      	strb	r3, [r7, #13]

			if( chksum[1] == logger[5]){
 8000fda:	7b7a      	ldrb	r2, [r7, #13]
 8000fdc:	4b58      	ldr	r3, [pc, #352]	; (8001140 <Rx_Verita_engine_callBak+0x1e4>)
 8000fde:	795b      	ldrb	r3, [r3, #5]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	f040 808e 	bne.w	8001102 <Rx_Verita_engine_callBak+0x1a6>

				Rxbffr[0 + index] = 0xFF;//// mark that this data is already read
 8000fe6:	4b55      	ldr	r3, [pc, #340]	; (800113c <Rx_Verita_engine_callBak+0x1e0>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4413      	add	r3, r2
 8000ff0:	22ff      	movs	r2, #255	; 0xff
 8000ff2:	701a      	strb	r2, [r3, #0]

				/////////////////////// decode phase  //////////////////
				index += Framesize_VRT;
 8000ff4:	4b51      	ldr	r3, [pc, #324]	; (800113c <Rx_Verita_engine_callBak+0x1e0>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	3309      	adds	r3, #9
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	4b4f      	ldr	r3, [pc, #316]	; (800113c <Rx_Verita_engine_callBak+0x1e0>)
 8000ffe:	701a      	strb	r2, [r3, #0]
				index %= RxbufferSize_VRT; // overflow
 8001000:	4b4e      	ldr	r3, [pc, #312]	; (800113c <Rx_Verita_engine_callBak+0x1e0>)
 8001002:	781a      	ldrb	r2, [r3, #0]
 8001004:	4b4f      	ldr	r3, [pc, #316]	; (8001144 <Rx_Verita_engine_callBak+0x1e8>)
 8001006:	fba3 1302 	umull	r1, r3, r3, r2
 800100a:	0859      	lsrs	r1, r3, #1
 800100c:	460b      	mov	r3, r1
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	440b      	add	r3, r1
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b49      	ldr	r3, [pc, #292]	; (800113c <Rx_Verita_engine_callBak+0x1e0>)
 8001018:	701a      	strb	r2, [r3, #0]
				logu.U8[2] = logger[2];
				logu.U8[1] = logger[3];
				logu.U8[0] = logger[4];
#else
				//// Little endian
				logu.U8[0] = logger[1];
 800101a:	4b49      	ldr	r3, [pc, #292]	; (8001140 <Rx_Verita_engine_callBak+0x1e4>)
 800101c:	785b      	ldrb	r3, [r3, #1]
 800101e:	723b      	strb	r3, [r7, #8]
				logu.U8[1] = logger[2];
 8001020:	4b47      	ldr	r3, [pc, #284]	; (8001140 <Rx_Verita_engine_callBak+0x1e4>)
 8001022:	789b      	ldrb	r3, [r3, #2]
 8001024:	727b      	strb	r3, [r7, #9]
				logu.U8[2] = logger[3];
 8001026:	4b46      	ldr	r3, [pc, #280]	; (8001140 <Rx_Verita_engine_callBak+0x1e4>)
 8001028:	78db      	ldrb	r3, [r3, #3]
 800102a:	72bb      	strb	r3, [r7, #10]
				logu.U8[3] = logger[4];
 800102c:	4b44      	ldr	r3, [pc, #272]	; (8001140 <Rx_Verita_engine_callBak+0x1e4>)
 800102e:	791b      	ldrb	r3, [r3, #4]
 8001030:	72fb      	strb	r3, [r7, #11]
#endif

				//// DATA phase, insert 32bit data into register box =================================
				if(logger[0] <= 0x20){
 8001032:	4b43      	ldr	r3, [pc, #268]	; (8001140 <Rx_Verita_engine_callBak+0x1e4>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b20      	cmp	r3, #32
 8001038:	d808      	bhi.n	800104c <Rx_Verita_engine_callBak+0xf0>
					// place data into the request register
					regisk->U32[logger[0]] = logu.U32;
 800103a:	4b41      	ldr	r3, [pc, #260]	; (8001140 <Rx_Verita_engine_callBak+0x1e4>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					return VRT_OK;
 8001048:	2391      	movs	r3, #145	; 0x91
 800104a:	e072      	b.n	8001132 <Rx_Verita_engine_callBak+0x1d6>
				} //// -------------------------------------------------------------------------------

				//// CMD phase, return recieved Command =========================================
				if(logger[0] >= 0x90){
 800104c:	4b3c      	ldr	r3, [pc, #240]	; (8001140 <Rx_Verita_engine_callBak+0x1e4>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b8f      	cmp	r3, #143	; 0x8f
 8001052:	d96c      	bls.n	800112e <Rx_Verita_engine_callBak+0x1d2>
					switch(logger[0]){
 8001054:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <Rx_Verita_engine_callBak+0x1e4>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	3b91      	subs	r3, #145	; 0x91
 800105a:	2b13      	cmp	r3, #19
 800105c:	d82a      	bhi.n	80010b4 <Rx_Verita_engine_callBak+0x158>
 800105e:	a201      	add	r2, pc, #4	; (adr r2, 8001064 <Rx_Verita_engine_callBak+0x108>)
 8001060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001064:	080010b9 	.word	0x080010b9
 8001068:	080010bd 	.word	0x080010bd
 800106c:	080010c1 	.word	0x080010c1
 8001070:	080010c5 	.word	0x080010c5
 8001074:	080010b5 	.word	0x080010b5
 8001078:	080010b5 	.word	0x080010b5
 800107c:	080010b5 	.word	0x080010b5
 8001080:	080010b5 	.word	0x080010b5
 8001084:	080010b5 	.word	0x080010b5
 8001088:	080010b5 	.word	0x080010b5
 800108c:	080010b5 	.word	0x080010b5
 8001090:	080010b5 	.word	0x080010b5
 8001094:	080010b5 	.word	0x080010b5
 8001098:	080010b5 	.word	0x080010b5
 800109c:	080010b5 	.word	0x080010b5
 80010a0:	080010c9 	.word	0x080010c9
 80010a4:	080010d3 	.word	0x080010d3
 80010a8:	080010df 	.word	0x080010df
 80010ac:	080010eb 	.word	0x080010eb
 80010b0:	080010f7 	.word	0x080010f7
						//// Status -------
						default:
						case 0x90:
							return VRT_ERROR;
 80010b4:	2390      	movs	r3, #144	; 0x90
 80010b6:	e03c      	b.n	8001132 <Rx_Verita_engine_callBak+0x1d6>
						case 0x91:
							return VRT_OK;
 80010b8:	2391      	movs	r3, #145	; 0x91
 80010ba:	e03a      	b.n	8001132 <Rx_Verita_engine_callBak+0x1d6>
						case 0x92:
							return VRT_Busy;
 80010bc:	2392      	movs	r3, #146	; 0x92
 80010be:	e038      	b.n	8001132 <Rx_Verita_engine_callBak+0x1d6>
						case 0x93:
							return VRT_DataLoss;
 80010c0:	2393      	movs	r3, #147	; 0x93
 80010c2:	e036      	b.n	8001132 <Rx_Verita_engine_callBak+0x1d6>
						case 0x94:
							return VRT_UnEnc;
 80010c4:	2394      	movs	r3, #148	; 0x94
 80010c6:	e034      	b.n	8001132 <Rx_Verita_engine_callBak+0x1d6>

						//// Command -------------
						case VRC_Request:
							//// place Regis request & FlagRQ for Tx_RQ_Engine
							regisk->U32[VR_DataReq] = logu.U32;
 80010c8:	68ba      	ldr	r2, [r7, #8]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	601a      	str	r2, [r3, #0]
							return VRT_OK;
 80010ce:	2391      	movs	r3, #145	; 0x91
 80010d0:	e02f      	b.n	8001132 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Flag_ger:
							regisk->Mark.Flag_ger = logu.U8[0];
 80010d2:	7a3a      	ldrb	r2, [r7, #8]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
							return VRT_OK;
 80010da:	2391      	movs	r3, #145	; 0x91
 80010dc:	e029      	b.n	8001132 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Next:
							regisk->Mark.Flag_next = 0xFF; return VRC_Next;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	22ff      	movs	r2, #255	; 0xff
 80010e2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80010e6:	23a2      	movs	r3, #162	; 0xa2
 80010e8:	e023      	b.n	8001132 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Flag_aa:
							regisk->Mark.Flag_aa = logu.U8[0]; return VRC_Flag_aa;
 80010ea:	7a3a      	ldrb	r2, [r7, #8]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80010f2:	23a3      	movs	r3, #163	; 0xa3
 80010f4:	e01d      	b.n	8001132 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Flag_bb:
							regisk->Mark.Flag_bb = logu.U8[0]; return VRC_Flag_bb;
 80010f6:	7a3a      	ldrb	r2, [r7, #8]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 80010fe:	23a4      	movs	r3, #164	; 0xa4
 8001100:	e017      	b.n	8001132 <Rx_Verita_engine_callBak+0x1d6>
					}
				}

				/////////////////////// decode phase  //////////////////
			}
			else{return VRT_DataLoss;}//// checksum wrong
 8001102:	2393      	movs	r3, #147	; 0x93
 8001104:	e015      	b.n	8001132 <Rx_Verita_engine_callBak+0x1d6>

		}
		else{//// else wrong header
			index += Framesize_VRT; // 9
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <Rx_Verita_engine_callBak+0x1e0>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	3309      	adds	r3, #9
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <Rx_Verita_engine_callBak+0x1e0>)
 8001110:	701a      	strb	r2, [r3, #0]
			index %= RxbufferSize_VRT; // overflow
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <Rx_Verita_engine_callBak+0x1e0>)
 8001114:	781a      	ldrb	r2, [r3, #0]
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <Rx_Verita_engine_callBak+0x1e8>)
 8001118:	fba3 1302 	umull	r1, r3, r3, r2
 800111c:	0859      	lsrs	r1, r3, #1
 800111e:	460b      	mov	r3, r1
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	440b      	add	r3, r1
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	b2da      	uxtb	r2, r3
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <Rx_Verita_engine_callBak+0x1e0>)
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	e000      	b.n	8001130 <Rx_Verita_engine_callBak+0x1d4>
			if( chksum[1] == logger[5]){
 800112e:	bf00      	nop
		}


	return VRT_ERROR;
 8001130:	2390      	movs	r3, #144	; 0x90
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bc90      	pop	{r4, r7}
 800113a:	4770      	bx	lr
 800113c:	200003bc 	.word	0x200003bc
 8001140:	200003c0 	.word	0x200003c0
 8001144:	38e38e39 	.word	0x38e38e39

08001148 <Tx_Rq_Verita_engine>:

VRTPTC_StatusTypedef Tx_Rq_Verita_engine(UART_HandleTypeDef *huart, Verita_Register_Bank *vrg_intn){
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	/* @brief Send data back when request is flagged , recommend for client's use
	 * @param vrg_intn - Bank which collect request register & Flag // internal regis
	 * @param regist - databank array collect data to send
	 * */

	if(vrg_intn->Mark.flag_dataREQ){ // if flag is up
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	885b      	ldrh	r3, [r3, #2]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d011      	beq.n	800117e <Tx_Rq_Verita_engine+0x36>

		uint8_t regis_RQ = (uint8_t)vrg_intn->Mark.DataReq;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	73fb      	strb	r3, [r7, #15]
		//uint32_t data_reg = vrg_intn->U32[regis_RQ];

		//// send data
		Tx_UART_Verita_Packet_u32(huart, regis_RQ, vrg_intn->U32[regis_RQ]);
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	4619      	mov	r1, r3
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f86a 	bl	8001246 <Tx_UART_Verita_Packet_u32>
		//// erase flag
		//vrg_intn->U32[VR_DataReq] = 0x00;
		vrg_intn->Mark.DataReq = 0x00;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	2200      	movs	r2, #0
 8001176:	801a      	strh	r2, [r3, #0]
		vrg_intn->Mark.flag_dataREQ = 0x00;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	2200      	movs	r2, #0
 800117c:	805a      	strh	r2, [r3, #2]
	}

	return VRT_OK;
 800117e:	2391      	movs	r3, #145	; 0x91
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <Tx_UART_Verita_Packet_u8>:
//	} // end switch
//	return VRT_ERROR;
//}


void Tx_UART_Verita_Packet_u8(UART_HandleTypeDef *huart, uint8_t regis,uint8_t *pdata, uint8_t size){
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b08b      	sub	sp, #44	; 0x2c
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	461a      	mov	r2, r3
 8001194:	460b      	mov	r3, r1
 8001196:	72fb      	strb	r3, [r7, #11]
 8001198:	4613      	mov	r3, r2
 800119a:	72bb      	strb	r3, [r7, #10]
	 * @param pdata - Pointer to data buffer (u8 or u16 data elements).
	 * @param size  - Amount of data elements (u8 or u16) to be received.
	 *
	 * */

	uint8_t posit = 4; // start new position
 800119c:	2304      	movs	r3, #4
 800119e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t pack[16] = {0x56, 0x52, 0x54, regis};
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	2356      	movs	r3, #86	; 0x56
 80011b2:	753b      	strb	r3, [r7, #20]
 80011b4:	2352      	movs	r3, #82	; 0x52
 80011b6:	757b      	strb	r3, [r7, #21]
 80011b8:	2354      	movs	r3, #84	; 0x54
 80011ba:	75bb      	strb	r3, [r7, #22]
 80011bc:	7afb      	ldrb	r3, [r7, #11]
 80011be:	75fb      	strb	r3, [r7, #23]
	uint8_t chksum = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	//// add data to packet
	for(register int j = 4; j < 4 + size ;j++){
 80011c6:	2404      	movs	r4, #4
 80011c8:	e00f      	b.n	80011ea <Tx_UART_Verita_Packet_u8+0x62>
			pack[j] = pdata[j-4];
 80011ca:	4623      	mov	r3, r4
 80011cc:	3b04      	subs	r3, #4
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80011d8:	443b      	add	r3, r7
 80011da:	f803 2c14 	strb.w	r2, [r3, #-20]
			posit++;
 80011de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011e2:	3301      	adds	r3, #1
 80011e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(register int j = 4; j < 4 + size ;j++){
 80011e8:	3401      	adds	r4, #1
 80011ea:	7abb      	ldrb	r3, [r7, #10]
 80011ec:	3303      	adds	r3, #3
 80011ee:	429c      	cmp	r4, r3
 80011f0:	ddeb      	ble.n	80011ca <Tx_UART_Verita_Packet_u8+0x42>
		}
	//// Checksum generate , +4 means +3 start pack & +1 regis
	for(register int j = 3; j < size + 4;j++){
 80011f2:	2403      	movs	r4, #3
 80011f4:	e00a      	b.n	800120c <Tx_UART_Verita_Packet_u8+0x84>
		chksum += pack[j];
 80011f6:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80011fa:	443b      	add	r3, r7
 80011fc:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001200:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001204:	4413      	add	r3, r2
 8001206:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for(register int j = 3; j < size + 4;j++){
 800120a:	3401      	adds	r4, #1
 800120c:	7abb      	ldrb	r3, [r7, #10]
 800120e:	3303      	adds	r3, #3
 8001210:	429c      	cmp	r4, r3
 8001212:	ddf0      	ble.n	80011f6 <Tx_UART_Verita_Packet_u8+0x6e>
	}
	pack[posit] = ~chksum;
 8001214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001218:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800121c:	43d2      	mvns	r2, r2
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	3328      	adds	r3, #40	; 0x28
 8001222:	443b      	add	r3, r7
 8001224:	f803 2c14 	strb.w	r2, [r3, #-20]


	HAL_UART_Transmit(huart, (uint8_t*)pack, posit+1, 40);
 8001228:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800122c:	b29b      	uxth	r3, r3
 800122e:	3301      	adds	r3, #1
 8001230:	b29a      	uxth	r2, r3
 8001232:	f107 0114 	add.w	r1, r7, #20
 8001236:	2328      	movs	r3, #40	; 0x28
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f004 f8be 	bl	80053ba <HAL_UART_Transmit>
}
 800123e:	bf00      	nop
 8001240:	372c      	adds	r7, #44	; 0x2c
 8001242:	46bd      	mov	sp, r7
 8001244:	bd90      	pop	{r4, r7, pc}

08001246 <Tx_UART_Verita_Packet_u32>:

void Tx_UART_Verita_Packet_u32(UART_HandleTypeDef *huart, uint8_t regis,uint32_t pdata){
 8001246:	b590      	push	{r4, r7, lr}
 8001248:	b08b      	sub	sp, #44	; 0x2c
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	460b      	mov	r3, r1
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	72fb      	strb	r3, [r7, #11]
	 * @param size  - Amount of data elements (u8 or u16) to be received.
	 *
	 * */

	//// Verita Header ////
	uint8_t pack[16] = {0x56, 0x52, 0x54, regis};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	2356      	movs	r3, #86	; 0x56
 8001264:	753b      	strb	r3, [r7, #20]
 8001266:	2352      	movs	r3, #82	; 0x52
 8001268:	757b      	strb	r3, [r7, #21]
 800126a:	2354      	movs	r3, #84	; 0x54
 800126c:	75bb      	strb	r3, [r7, #22]
 800126e:	7afb      	ldrb	r3, [r7, #11]
 8001270:	75fb      	strb	r3, [r7, #23]

	uint8_t posit = 4; // start new position
 8001272:	2304      	movs	r3, #4
 8001274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t chksum = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t  U8[4];
		uint32_t U32;
	}logu;

	//// add data to packet
	logu.U32 = pdata;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	613b      	str	r3, [r7, #16]
	for(register int j = 4; j < 8; j++){
 8001282:	2404      	movs	r4, #4
 8001284:	e00f      	b.n	80012a6 <Tx_UART_Verita_Packet_u32+0x60>
			pack[j] = logu.U8[j-4];
 8001286:	1f23      	subs	r3, r4, #4
 8001288:	3328      	adds	r3, #40	; 0x28
 800128a:	443b      	add	r3, r7
 800128c:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001290:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8001294:	443b      	add	r3, r7
 8001296:	f803 2c14 	strb.w	r2, [r3, #-20]
			posit++;
 800129a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800129e:	3301      	adds	r3, #1
 80012a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(register int j = 4; j < 8; j++){
 80012a4:	3401      	adds	r4, #1
 80012a6:	2c07      	cmp	r4, #7
 80012a8:	dded      	ble.n	8001286 <Tx_UART_Verita_Packet_u32+0x40>
		}
	//// Checksum generate , +4 means +3 start pack & +1 regis
	for(register int j = 3; j < 8; j++){
 80012aa:	2403      	movs	r4, #3
 80012ac:	e00a      	b.n	80012c4 <Tx_UART_Verita_Packet_u32+0x7e>
		chksum += pack[j];
 80012ae:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80012b2:	443b      	add	r3, r7
 80012b4:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80012b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012bc:	4413      	add	r3, r2
 80012be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for(register int j = 3; j < 8; j++){
 80012c2:	3401      	adds	r4, #1
 80012c4:	2c07      	cmp	r4, #7
 80012c6:	ddf2      	ble.n	80012ae <Tx_UART_Verita_Packet_u32+0x68>
	}
	pack[posit] = ~chksum;
 80012c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012cc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80012d0:	43d2      	mvns	r2, r2
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	3328      	adds	r3, #40	; 0x28
 80012d6:	443b      	add	r3, r7
 80012d8:	f803 2c14 	strb.w	r2, [r3, #-20]


	HAL_UART_Transmit(huart, (uint8_t*)pack, posit+1, 50);
 80012dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	3301      	adds	r3, #1
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	f107 0114 	add.w	r1, r7, #20
 80012ea:	2332      	movs	r3, #50	; 0x32
 80012ec:	68f8      	ldr	r0, [r7, #12]
 80012ee:	f004 f864 	bl	80053ba <HAL_UART_Transmit>
}
 80012f2:	bf00      	nop
 80012f4:	372c      	adds	r7, #44	; 0x2c
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd90      	pop	{r4, r7, pc}

080012fa <Tx_UART_Verita_Command>:

void Tx_UART_Verita_Command(UART_HandleTypeDef *huart, VRTPTC_CMDef cmd, uint8_t regis){
 80012fa:	b590      	push	{r4, r7, lr}
 80012fc:	b089      	sub	sp, #36	; 0x24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	460b      	mov	r3, r1
 8001304:	70fb      	strb	r3, [r7, #3]
 8001306:	4613      	mov	r3, r2
 8001308:	70bb      	strb	r3, [r7, #2]
	 * 				  [VRC_Request] destination register need to request
	 * */

	//// Verita Header ////
	//// Send data request & Flag
	uint8_t pack[16] = {0x56, 0x52, 0x54, cmd, regis, 0x00, 0xFF, 0xAA};
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	2356      	movs	r3, #86	; 0x56
 800131a:	733b      	strb	r3, [r7, #12]
 800131c:	2352      	movs	r3, #82	; 0x52
 800131e:	737b      	strb	r3, [r7, #13]
 8001320:	2354      	movs	r3, #84	; 0x54
 8001322:	73bb      	strb	r3, [r7, #14]
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	78bb      	ldrb	r3, [r7, #2]
 800132a:	743b      	strb	r3, [r7, #16]
 800132c:	23ff      	movs	r3, #255	; 0xff
 800132e:	74bb      	strb	r3, [r7, #18]
 8001330:	23aa      	movs	r3, #170	; 0xaa
 8001332:	74fb      	strb	r3, [r7, #19]

	//uint8_t posit = 4; // start new position
	uint8_t chksum = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	77fb      	strb	r3, [r7, #31]

	//if(cmd == VRC_Request){}

	//// Checksum generate , +4 means +3 start pack & +1 regis
	for(register int j = 3; j < 8; j++){
 8001338:	2403      	movs	r4, #3
 800133a:	e008      	b.n	800134e <Tx_UART_Verita_Command+0x54>
		chksum += pack[j];
 800133c:	f104 0320 	add.w	r3, r4, #32
 8001340:	443b      	add	r3, r7
 8001342:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001346:	7ffb      	ldrb	r3, [r7, #31]
 8001348:	4413      	add	r3, r2
 800134a:	77fb      	strb	r3, [r7, #31]
	for(register int j = 3; j < 8; j++){
 800134c:	3401      	adds	r4, #1
 800134e:	2c07      	cmp	r4, #7
 8001350:	ddf4      	ble.n	800133c <Tx_UART_Verita_Command+0x42>
	}
	pack[8] = ~chksum;
 8001352:	7ffb      	ldrb	r3, [r7, #31]
 8001354:	43db      	mvns	r3, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	753b      	strb	r3, [r7, #20]

	HAL_UART_Transmit(huart, (uint8_t*)pack, 9, 30);
 800135a:	f107 010c 	add.w	r1, r7, #12
 800135e:	231e      	movs	r3, #30
 8001360:	2209      	movs	r2, #9
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f004 f829 	bl	80053ba <HAL_UART_Transmit>
}
 8001368:	bf00      	nop
 800136a:	3724      	adds	r7, #36	; 0x24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}

08001370 <gpio_selftest_input_pupdr_1>:
//// lists All port - pin to inspect first // avoid special pin like osilators / UART
//// GPIO_PIN_x is in bit position format (0 2 4 8 16 ...) which loss if stored in that form and log2() to calculate back
//uint16_t List_GPIOC[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13};


uint32_t gpio_selftest_input_pupdr_1(GPIO_TypeDef* GPIOx,uint16_t *Lista_GPIOx){
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]

	uint32_t result = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]

	uint32_t temp_mode = GPIOx->MODER;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	617b      	str	r3, [r7, #20]
	uint32_t temp_pupdr = GPIOx->PUPDR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	613b      	str	r3, [r7, #16]

	//uint16_t sizearr = sizeof(Lista_GPIOx); // / sizeof(List_GPIOC[0])
	//// use instead of sizeof which return array length input into function as 4
	uint16_t sizearr = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	81fb      	strh	r3, [r7, #14]
	for(register int i = 0; i <= 17 ;i++){
 800138e:	2400      	movs	r4, #0
 8001390:	e00a      	b.n	80013a8 <gpio_selftest_input_pupdr_1+0x38>
		if(Lista_GPIOx[i] == 20){
 8001392:	4623      	mov	r3, r4
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	4413      	add	r3, r2
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	2b14      	cmp	r3, #20
 800139e:	d006      	beq.n	80013ae <gpio_selftest_input_pupdr_1+0x3e>
			break;
		}else{
			sizearr++;
 80013a0:	89fb      	ldrh	r3, [r7, #14]
 80013a2:	3301      	adds	r3, #1
 80013a4:	81fb      	strh	r3, [r7, #14]
	for(register int i = 0; i <= 17 ;i++){
 80013a6:	3401      	adds	r4, #1
 80013a8:	2c11      	cmp	r4, #17
 80013aa:	ddf2      	ble.n	8001392 <gpio_selftest_input_pupdr_1+0x22>
 80013ac:	e000      	b.n	80013b0 <gpio_selftest_input_pupdr_1+0x40>
			break;
 80013ae:	bf00      	nop
		}
	}


	//// ------------------ Input PULLUP ------------------------------
	for(register int i = 0;i < sizearr; i++){
 80013b0:	2400      	movs	r4, #0
 80013b2:	e00e      	b.n	80013d2 <gpio_selftest_input_pupdr_1+0x62>
		temp_mode &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 80013b4:	4623      	mov	r3, r4
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	461a      	mov	r2, r3
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	4013      	ands	r3, r2
 80013ce:	617b      	str	r3, [r7, #20]
	for(register int i = 0;i < sizearr; i++){
 80013d0:	3401      	adds	r4, #1
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	429c      	cmp	r4, r3
 80013d6:	dbed      	blt.n	80013b4 <gpio_selftest_input_pupdr_1+0x44>
		temp_mode |= ( GPIO_MODE_INPUT << (Lista_GPIOx[i] * 2U));
	}
	GPIOx->MODER = temp_mode;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	601a      	str	r2, [r3, #0]


	for(register int i = 0;i < sizearr; i++){
 80013de:	2400      	movs	r4, #0
 80013e0:	e01a      	b.n	8001418 <gpio_selftest_input_pupdr_1+0xa8>
		temp_pupdr &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 80013e2:	4623      	mov	r3, r4
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	4413      	add	r3, r2
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
		temp_pupdr |= ( GPIO_PULLUP << (Lista_GPIOx[i] * 2U));
 80013fe:	4623      	mov	r3, r4
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	4413      	add	r3, r2
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2201      	movs	r2, #1
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
	for(register int i = 0;i < sizearr; i++){
 8001416:	3401      	adds	r4, #1
 8001418:	89fb      	ldrh	r3, [r7, #14]
 800141a:	429c      	cmp	r4, r3
 800141c:	dbe1      	blt.n	80013e2 <gpio_selftest_input_pupdr_1+0x72>
	}
	GPIOx->PUPDR = temp_pupdr;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	60da      	str	r2, [r3, #12]
	HAL_Delay(1);
 8001424:	2001      	movs	r0, #1
 8001426:	f001 fb35 	bl	8002a94 <HAL_Delay>
	result |= (GPIOx->IDR) << 16;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	041b      	lsls	r3, r3, #16
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	4313      	orrs	r3, r2
 8001434:	60bb      	str	r3, [r7, #8]

	//// ------------------ Input PULLDOWN ------------------------------
	for(register int i = 0;i < sizearr; i++){
 8001436:	2400      	movs	r4, #0
 8001438:	e01a      	b.n	8001470 <gpio_selftest_input_pupdr_1+0x100>
		temp_pupdr &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 800143a:	4623      	mov	r3, r4
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	4413      	add	r3, r2
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	2203      	movs	r2, #3
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	461a      	mov	r2, r3
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
		temp_pupdr |= ( GPIO_PULLDOWN << (Lista_GPIOx[i] * 2U));
 8001456:	4623      	mov	r3, r4
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	4413      	add	r3, r2
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2202      	movs	r2, #2
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
	for(register int i = 0;i < sizearr; i++){
 800146e:	3401      	adds	r4, #1
 8001470:	89fb      	ldrh	r3, [r7, #14]
 8001472:	429c      	cmp	r4, r3
 8001474:	dbe1      	blt.n	800143a <gpio_selftest_input_pupdr_1+0xca>
	}
	GPIOx->PUPDR = temp_pupdr;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	60da      	str	r2, [r3, #12]
	HAL_Delay(5);
 800147c:	2005      	movs	r0, #5
 800147e:	f001 fb09 	bl	8002a94 <HAL_Delay>
	result |= GPIOx->IDR;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	4313      	orrs	r3, r2
 800148a:	60bb      	str	r3, [r7, #8]

	return result;
 800148c:	68bb      	ldr	r3, [r7, #8]

	}
 800148e:	4618      	mov	r0, r3
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	bd90      	pop	{r4, r7, pc}

08001496 <gpio_selftest_output_pp_1>:

//// output pushpull
uint32_t gpio_selftest_output_pp_1(GPIO_TypeDef* GPIOx,uint16_t *Lista_GPIOx){
 8001496:	b590      	push	{r4, r7, lr}
 8001498:	b087      	sub	sp, #28
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	6039      	str	r1, [r7, #0]
	uint32_t temp_mode = GPIOx->MODER;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	617b      	str	r3, [r7, #20]
	uint32_t temp_bsrr = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
	uint32_t result = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]

	uint16_t sizearr = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	81fb      	strh	r3, [r7, #14]
	//// use instead of sizeof
	for(register int i = 0; i <= 17 ;i++){
 80014b2:	2400      	movs	r4, #0
 80014b4:	e00a      	b.n	80014cc <gpio_selftest_output_pp_1+0x36>
		if(Lista_GPIOx[i] == 20){
 80014b6:	4623      	mov	r3, r4
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	4413      	add	r3, r2
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	2b14      	cmp	r3, #20
 80014c2:	d006      	beq.n	80014d2 <gpio_selftest_output_pp_1+0x3c>
			break;
		}else{
			sizearr++;
 80014c4:	89fb      	ldrh	r3, [r7, #14]
 80014c6:	3301      	adds	r3, #1
 80014c8:	81fb      	strh	r3, [r7, #14]
	for(register int i = 0; i <= 17 ;i++){
 80014ca:	3401      	adds	r4, #1
 80014cc:	2c11      	cmp	r4, #17
 80014ce:	ddf2      	ble.n	80014b6 <gpio_selftest_output_pp_1+0x20>
 80014d0:	e000      	b.n	80014d4 <gpio_selftest_output_pp_1+0x3e>
			break;
 80014d2:	bf00      	nop
		}
	}

	///// -------------- Set Output Pushpull ---------------------
	for(register int i = 0;i < sizearr; i++){
 80014d4:	2400      	movs	r4, #0
 80014d6:	e01a      	b.n	800150e <gpio_selftest_output_pp_1+0x78>
			temp_mode &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 80014d8:	4623      	mov	r3, r4
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	2203      	movs	r2, #3
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	461a      	mov	r2, r3
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	4013      	ands	r3, r2
 80014f2:	617b      	str	r3, [r7, #20]
			temp_mode |= ( GPIO_MODE_OUTPUT_PP << (Lista_GPIOx[i] * 2U));
 80014f4:	4623      	mov	r3, r4
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	2201      	movs	r2, #1
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	4313      	orrs	r3, r2
 800150a:	617b      	str	r3, [r7, #20]
	for(register int i = 0;i < sizearr; i++){
 800150c:	3401      	adds	r4, #1
 800150e:	89fb      	ldrh	r3, [r7, #14]
 8001510:	429c      	cmp	r4, r3
 8001512:	dbe1      	blt.n	80014d8 <gpio_selftest_output_pp_1+0x42>
		}
	GPIOx->MODER = temp_mode;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	601a      	str	r2, [r3, #0]

	//// write SET to BSRR
	for(register int i = 0;i < sizearr; i++){
 800151a:	2400      	movs	r4, #0
 800151c:	e019      	b.n	8001552 <gpio_selftest_output_pp_1+0xbc>
			temp_bsrr &= ~( 0b1 << Lista_GPIOx[i]); // clear only register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 800151e:	4623      	mov	r3, r4
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	4413      	add	r3, r2
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	2301      	movs	r3, #1
 800152c:	4093      	lsls	r3, r2
 800152e:	43db      	mvns	r3, r3
 8001530:	461a      	mov	r2, r3
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
			temp_bsrr |= ( GPIO_PIN_SET << Lista_GPIOx[i]);
 8001538:	4623      	mov	r3, r4
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	4413      	add	r3, r2
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	2301      	movs	r3, #1
 8001546:	4093      	lsls	r3, r2
 8001548:	461a      	mov	r2, r3
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
	for(register int i = 0;i < sizearr; i++){
 8001550:	3401      	adds	r4, #1
 8001552:	89fb      	ldrh	r3, [r7, #14]
 8001554:	429c      	cmp	r4, r3
 8001556:	dbe2      	blt.n	800151e <gpio_selftest_output_pp_1+0x88>
		}
	GPIOx->BSRR = temp_bsrr; // insert 1 into SET position
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	619a      	str	r2, [r3, #24]

	//// Read Back #1 get set
	HAL_Delay(1);
 800155e:	2001      	movs	r0, #1
 8001560:	f001 fa98 	bl	8002a94 <HAL_Delay>
	result |= (GPIOx->IDR) << 16;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	041b      	lsls	r3, r3, #16
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	4313      	orrs	r3, r2
 800156e:	60bb      	str	r3, [r7, #8]
	HAL_Delay(1);
 8001570:	2001      	movs	r0, #1
 8001572:	f001 fa8f 	bl	8002a94 <HAL_Delay>

	//// write RESET to BSRR
	GPIOx->BSRR = temp_bsrr << 16; // insert 1 into RESET position << 16
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	041a      	lsls	r2, r3, #16
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	619a      	str	r2, [r3, #24]
	//// Read Back #2 get Reset
	HAL_Delay(1);
 800157e:	2001      	movs	r0, #1
 8001580:	f001 fa88 	bl	8002a94 <HAL_Delay>
	result |= GPIOx->IDR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	4313      	orrs	r3, r2
 800158c:	60bb      	str	r3, [r7, #8]

	return result;
 800158e:	68bb      	ldr	r3, [r7, #8]
}
 8001590:	4618      	mov	r0, r3
 8001592:	371c      	adds	r7, #28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd90      	pop	{r4, r7, pc}

08001598 <gpio_selftest_output_od_1>:

//// output opendrain
/* Open drain mode: A “0” in the Output register activates the N-MOS whereas a “1”
 * in the Output register leaves the port in Hi-Z (the P-MOS is never activated)
 * */
uint32_t gpio_selftest_output_od_1(GPIO_TypeDef* GPIOx,uint16_t *Lista_GPIOx){
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
	uint32_t temp_mode = GPIOx->MODER;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	61fb      	str	r3, [r7, #28]
	uint32_t temp_bsrr = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
	uint32_t temp_pupdr = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
	uint32_t result = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]

	uint16_t sizearr = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	827b      	strh	r3, [r7, #18]
	//// use instead of sizeof
	for(register int i = 0; i <= 17 ;i++){
 80015b8:	2400      	movs	r4, #0
 80015ba:	e00a      	b.n	80015d2 <gpio_selftest_output_od_1+0x3a>
		if(Lista_GPIOx[i] == 20){
 80015bc:	4623      	mov	r3, r4
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	2b14      	cmp	r3, #20
 80015c8:	d006      	beq.n	80015d8 <gpio_selftest_output_od_1+0x40>
			break;
		}else{
			sizearr++;
 80015ca:	8a7b      	ldrh	r3, [r7, #18]
 80015cc:	3301      	adds	r3, #1
 80015ce:	827b      	strh	r3, [r7, #18]
	for(register int i = 0; i <= 17 ;i++){
 80015d0:	3401      	adds	r4, #1
 80015d2:	2c11      	cmp	r4, #17
 80015d4:	ddf2      	ble.n	80015bc <gpio_selftest_output_od_1+0x24>
 80015d6:	e000      	b.n	80015da <gpio_selftest_output_od_1+0x42>
			break;
 80015d8:	bf00      	nop
		}
	}

	///// -------------- Set Output  opendrain ---------------------
	for(register int i = 0;i < sizearr; i++){
 80015da:	2400      	movs	r4, #0
 80015dc:	e01a      	b.n	8001614 <gpio_selftest_output_od_1+0x7c>
			temp_mode &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 80015de:	4623      	mov	r3, r4
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	4413      	add	r3, r2
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	2203      	movs	r2, #3
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61fb      	str	r3, [r7, #28]
			temp_mode |= ( GPIO_MODE_OUTPUT_OD << (Lista_GPIOx[i] * 2U));
 80015fa:	4623      	mov	r3, r4
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	4413      	add	r3, r2
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	2211      	movs	r2, #17
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69fa      	ldr	r2, [r7, #28]
 800160e:	4313      	orrs	r3, r2
 8001610:	61fb      	str	r3, [r7, #28]
	for(register int i = 0;i < sizearr; i++){
 8001612:	3401      	adds	r4, #1
 8001614:	8a7b      	ldrh	r3, [r7, #18]
 8001616:	429c      	cmp	r4, r3
 8001618:	dbe1      	blt.n	80015de <gpio_selftest_output_od_1+0x46>
		}
	GPIOx->MODER = temp_mode;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	601a      	str	r2, [r3, #0]

	//// Set Pullup for Hi-Z State read
	for(register int i = 0;i < sizearr; i++){
 8001620:	2400      	movs	r4, #0
 8001622:	e01a      	b.n	800165a <gpio_selftest_output_od_1+0xc2>
		temp_pupdr &= ~( 0b11 << (Lista_GPIOx[i] * 2U)); // clear only 2 register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 8001624:	4623      	mov	r3, r4
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	4413      	add	r3, r2
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	461a      	mov	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	4013      	ands	r3, r2
 800163e:	617b      	str	r3, [r7, #20]
		temp_pupdr |= ( GPIO_PULLUP << (Lista_GPIOx[i] * 2U));
 8001640:	4623      	mov	r3, r4
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	4413      	add	r3, r2
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	2201      	movs	r2, #1
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	4313      	orrs	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
	for(register int i = 0;i < sizearr; i++){
 8001658:	3401      	adds	r4, #1
 800165a:	8a7b      	ldrh	r3, [r7, #18]
 800165c:	429c      	cmp	r4, r3
 800165e:	dbe1      	blt.n	8001624 <gpio_selftest_output_od_1+0x8c>
	}
	GPIOx->PUPDR = temp_pupdr;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	60da      	str	r2, [r3, #12]

	//// write SET to BSRR
	for(register int i = 0;i < sizearr; i++){
 8001666:	2400      	movs	r4, #0
 8001668:	e019      	b.n	800169e <gpio_selftest_output_od_1+0x106>
			temp_bsrr &= ~( 0b1 << Lista_GPIOx[i]); // clear only register want to reconfig by shift 11 to prefer position then & it's invert to the previous read
 800166a:	4623      	mov	r3, r4
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	4413      	add	r3, r2
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	2301      	movs	r3, #1
 8001678:	4093      	lsls	r3, r2
 800167a:	43db      	mvns	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
			temp_bsrr |= ( GPIO_PIN_SET << Lista_GPIOx[i]);
 8001684:	4623      	mov	r3, r4
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	4413      	add	r3, r2
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	2301      	movs	r3, #1
 8001692:	4093      	lsls	r3, r2
 8001694:	461a      	mov	r2, r3
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
	for(register int i = 0;i < sizearr; i++){
 800169c:	3401      	adds	r4, #1
 800169e:	8a7b      	ldrh	r3, [r7, #18]
 80016a0:	429c      	cmp	r4, r3
 80016a2:	dbe2      	blt.n	800166a <gpio_selftest_output_od_1+0xd2>
		}
	GPIOx->BSRR = temp_bsrr; // insert 1 into SET position
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	619a      	str	r2, [r3, #24]

	//// Read Back #1 get set
	HAL_Delay(1);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f001 f9f2 	bl	8002a94 <HAL_Delay>
	result |= (GPIOx->IDR) << 16;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	041b      	lsls	r3, r3, #16
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]
	HAL_Delay(1);
 80016bc:	2001      	movs	r0, #1
 80016be:	f001 f9e9 	bl	8002a94 <HAL_Delay>

	//// write RESET to BSRR
	GPIOx->BSRR = temp_bsrr << 16; // insert 1 into RESET position << 16
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	041a      	lsls	r2, r3, #16
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	619a      	str	r2, [r3, #24]
	//// Read Back #2 get Reset
	HAL_Delay(1);
 80016ca:	2001      	movs	r0, #1
 80016cc:	f001 f9e2 	bl	8002a94 <HAL_Delay>
	result |= GPIOx->IDR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]

	return result;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3724      	adds	r7, #36	; 0x24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd90      	pop	{r4, r7, pc}

080016e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e4:	b5b0      	push	{r4, r5, r7, lr}
 80016e6:	b092      	sub	sp, #72	; 0x48
 80016e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ea:	f001 f961 	bl	80029b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ee:	f000 fab5 	bl	8001c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f2:	f000 fc5b 	bl	8001fac <MX_GPIO_Init>
  MX_DMA_Init();
 80016f6:	f000 fc39 	bl	8001f6c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016fa:	f000 fbe3 	bl	8001ec4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80016fe:	f000 fb15 	bl	8001d2c <MX_ADC1_Init>
  MX_TIM3_Init();
 8001702:	f000 fb67 	bl	8001dd4 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001706:	f000 fc07 	bl	8001f18 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  CPUTemprdINIT();
 800170a:	f000 fcd5 	bl	80020b8 <CPUTemprdINIT>

  char temp[]="----------------- F411_Verita_Client --------------------\r\n";
 800170e:	4baf      	ldr	r3, [pc, #700]	; (80019cc <main+0x2e8>)
 8001710:	1d3c      	adds	r4, r7, #4
 8001712:	461d      	mov	r5, r3
 8001714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800171a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800171c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800171e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001720:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001724:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fd58 	bl	80001e0 <strlen>
 8001730:	4603      	mov	r3, r0
 8001732:	b29a      	uxth	r2, r3
 8001734:	1d39      	adds	r1, r7, #4
 8001736:	230a      	movs	r3, #10
 8001738:	48a5      	ldr	r0, [pc, #660]	; (80019d0 <main+0x2ec>)
 800173a:	f003 fe3e 	bl	80053ba <HAL_UART_Transmit>

  ////  ------------- UART Recieve : Circular DMA here--------------------------
  //HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], RxbufferSize_VRT);

  VR_Cli.Mark.FirmwareVer = FIRMWARE_VER;
 800173e:	4ba5      	ldr	r3, [pc, #660]	; (80019d4 <main+0x2f0>)
 8001740:	4aa5      	ldr	r2, [pc, #660]	; (80019d8 <main+0x2f4>)
 8001742:	649a      	str	r2, [r3, #72]	; 0x48
  {

	  //rslt = Rx_Verita_engine(RxBufferMtCl, &VR_Cli);
	  //Tx_Rq_Verita_engine(&huart6, &VR_Cli);
	  ////  ------------- UART Recieve : Normal DMA --------------------------
	  HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], 9);
 8001744:	2209      	movs	r2, #9
 8001746:	49a5      	ldr	r1, [pc, #660]	; (80019dc <main+0x2f8>)
 8001748:	48a5      	ldr	r0, [pc, #660]	; (80019e0 <main+0x2fc>)
 800174a:	f003 fec8 	bl	80054de <HAL_UART_Receive_DMA>

	  if(HAL_GetTick() >= timestamp_one){
 800174e:	f001 f995 	bl	8002a7c <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	4ba3      	ldr	r3, [pc, #652]	; (80019e4 <main+0x300>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	f0c0 80d2 	bcc.w	8001902 <main+0x21e>
		  timestamp_one += 1000;
 800175e:	4ba1      	ldr	r3, [pc, #644]	; (80019e4 <main+0x300>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001766:	4a9f      	ldr	r2, [pc, #636]	; (80019e4 <main+0x300>)
 8001768:	6013      	str	r3, [r2, #0]

		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800176a:	2120      	movs	r1, #32
 800176c:	489e      	ldr	r0, [pc, #632]	; (80019e8 <main+0x304>)
 800176e:	f002 fbc6 	bl	8003efe <HAL_GPIO_TogglePin>

		  cputmpraw = CPUTempread();
 8001772:	f000 fcb5 	bl	80020e0 <CPUTempread>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	4b9c      	ldr	r3, [pc, #624]	; (80019ec <main+0x308>)
 800177c:	801a      	strh	r2, [r3, #0]
		  VR_Cli.Mark.cputemp = CPUTempread();
 800177e:	f000 fcaf 	bl	80020e0 <CPUTempread>
 8001782:	4603      	mov	r3, r0
 8001784:	461a      	mov	r2, r3
 8001786:	4b93      	ldr	r3, [pc, #588]	; (80019d4 <main+0x2f0>)
 8001788:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

		  cputempCC = TempEquat(ADCTVolta(cputmpraw));
 800178c:	4b97      	ldr	r3, [pc, #604]	; (80019ec <main+0x308>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fcc9 	bl	8002128 <ADCTVolta>
 8001796:	eef0 7a40 	vmov.f32	s15, s0
 800179a:	eeb0 0a67 	vmov.f32	s0, s15
 800179e:	f000 fcf3 	bl	8002188 <TempEquat>
 80017a2:	eef0 7a40 	vmov.f32	s15, s0
 80017a6:	4b92      	ldr	r3, [pc, #584]	; (80019f0 <main+0x30c>)
 80017a8:	edc3 7a00 	vstr	s15, [r3]

		  sprintf(uartTXBf, "\r\n - - - - - - - - - - - - - - - - - - - - - - - - -\r\n");
 80017ac:	4991      	ldr	r1, [pc, #580]	; (80019f4 <main+0x310>)
 80017ae:	4892      	ldr	r0, [pc, #584]	; (80019f8 <main+0x314>)
 80017b0:	f005 f886 	bl	80068c0 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 80017b4:	4890      	ldr	r0, [pc, #576]	; (80019f8 <main+0x314>)
 80017b6:	f7fe fd13 	bl	80001e0 <strlen>
 80017ba:	4603      	mov	r3, r0
 80017bc:	b29a      	uxth	r2, r3
 80017be:	230a      	movs	r3, #10
 80017c0:	498d      	ldr	r1, [pc, #564]	; (80019f8 <main+0x314>)
 80017c2:	4883      	ldr	r0, [pc, #524]	; (80019d0 <main+0x2ec>)
 80017c4:	f003 fdf9 	bl	80053ba <HAL_UART_Transmit>

		  sprintf(uartTXBf, "cputempraw = %d => %.3f C\r\n ",
 80017c8:	4b88      	ldr	r3, [pc, #544]	; (80019ec <main+0x308>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	461c      	mov	r4, r3
 80017ce:	4b88      	ldr	r3, [pc, #544]	; (80019f0 <main+0x30c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fec0 	bl	8000558 <__aeabi_f2d>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	e9cd 2300 	strd	r2, r3, [sp]
 80017e0:	4622      	mov	r2, r4
 80017e2:	4986      	ldr	r1, [pc, #536]	; (80019fc <main+0x318>)
 80017e4:	4884      	ldr	r0, [pc, #528]	; (80019f8 <main+0x314>)
 80017e6:	f005 f86b 	bl	80068c0 <siprintf>
				  cputmpraw,
				  cputempCC);
		  HAL_UART_Transmit(&huart2, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 80017ea:	4883      	ldr	r0, [pc, #524]	; (80019f8 <main+0x314>)
 80017ec:	f7fe fcf8 	bl	80001e0 <strlen>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	230a      	movs	r3, #10
 80017f6:	4980      	ldr	r1, [pc, #512]	; (80019f8 <main+0x314>)
 80017f8:	4875      	ldr	r0, [pc, #468]	; (80019d0 <main+0x2ec>)
 80017fa:	f003 fdde 	bl	80053ba <HAL_UART_Transmit>

		  //// Print GPIO Test Result
		  if(counter_flagger){
 80017fe:	4b80      	ldr	r3, [pc, #512]	; (8001a00 <main+0x31c>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d07d      	beq.n	8001902 <main+0x21e>
			  sprintf(uartTXBf, WR_A_PUPDR); HAL_UART_Transmit(&huart2, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 8001806:	497f      	ldr	r1, [pc, #508]	; (8001a04 <main+0x320>)
 8001808:	487b      	ldr	r0, [pc, #492]	; (80019f8 <main+0x314>)
 800180a:	f005 f859 	bl	80068c0 <siprintf>
 800180e:	487a      	ldr	r0, [pc, #488]	; (80019f8 <main+0x314>)
 8001810:	f7fe fce6 	bl	80001e0 <strlen>
 8001814:	4603      	mov	r3, r0
 8001816:	b29a      	uxth	r2, r3
 8001818:	230a      	movs	r3, #10
 800181a:	4977      	ldr	r1, [pc, #476]	; (80019f8 <main+0x314>)
 800181c:	486c      	ldr	r0, [pc, #432]	; (80019d0 <main+0x2ec>)
 800181e:	f003 fdcc 	bl	80053ba <HAL_UART_Transmit>

			  sprintf(uartTXBf, WR_A_OPP); HAL_UART_Transmit(&huart2, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 8001822:	4979      	ldr	r1, [pc, #484]	; (8001a08 <main+0x324>)
 8001824:	4874      	ldr	r0, [pc, #464]	; (80019f8 <main+0x314>)
 8001826:	f005 f84b 	bl	80068c0 <siprintf>
 800182a:	4873      	ldr	r0, [pc, #460]	; (80019f8 <main+0x314>)
 800182c:	f7fe fcd8 	bl	80001e0 <strlen>
 8001830:	4603      	mov	r3, r0
 8001832:	b29a      	uxth	r2, r3
 8001834:	230a      	movs	r3, #10
 8001836:	4970      	ldr	r1, [pc, #448]	; (80019f8 <main+0x314>)
 8001838:	4865      	ldr	r0, [pc, #404]	; (80019d0 <main+0x2ec>)
 800183a:	f003 fdbe 	bl	80053ba <HAL_UART_Transmit>

			  sprintf(uartTXBf, WR_A_OOD); HAL_UART_Transmit(&huart2, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 800183e:	4973      	ldr	r1, [pc, #460]	; (8001a0c <main+0x328>)
 8001840:	486d      	ldr	r0, [pc, #436]	; (80019f8 <main+0x314>)
 8001842:	f005 f83d 	bl	80068c0 <siprintf>
 8001846:	486c      	ldr	r0, [pc, #432]	; (80019f8 <main+0x314>)
 8001848:	f7fe fcca 	bl	80001e0 <strlen>
 800184c:	4603      	mov	r3, r0
 800184e:	b29a      	uxth	r2, r3
 8001850:	230a      	movs	r3, #10
 8001852:	4969      	ldr	r1, [pc, #420]	; (80019f8 <main+0x314>)
 8001854:	485e      	ldr	r0, [pc, #376]	; (80019d0 <main+0x2ec>)
 8001856:	f003 fdb0 	bl	80053ba <HAL_UART_Transmit>

			  sprintf(uartTXBf, WR_B_PUPDR); HAL_UART_Transmit(&huart2, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 800185a:	496d      	ldr	r1, [pc, #436]	; (8001a10 <main+0x32c>)
 800185c:	4866      	ldr	r0, [pc, #408]	; (80019f8 <main+0x314>)
 800185e:	f005 f82f 	bl	80068c0 <siprintf>
 8001862:	4865      	ldr	r0, [pc, #404]	; (80019f8 <main+0x314>)
 8001864:	f7fe fcbc 	bl	80001e0 <strlen>
 8001868:	4603      	mov	r3, r0
 800186a:	b29a      	uxth	r2, r3
 800186c:	230a      	movs	r3, #10
 800186e:	4962      	ldr	r1, [pc, #392]	; (80019f8 <main+0x314>)
 8001870:	4857      	ldr	r0, [pc, #348]	; (80019d0 <main+0x2ec>)
 8001872:	f003 fda2 	bl	80053ba <HAL_UART_Transmit>

			  sprintf(uartTXBf, WR_B_OPP); HAL_UART_Transmit(&huart2, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 8001876:	4967      	ldr	r1, [pc, #412]	; (8001a14 <main+0x330>)
 8001878:	485f      	ldr	r0, [pc, #380]	; (80019f8 <main+0x314>)
 800187a:	f005 f821 	bl	80068c0 <siprintf>
 800187e:	485e      	ldr	r0, [pc, #376]	; (80019f8 <main+0x314>)
 8001880:	f7fe fcae 	bl	80001e0 <strlen>
 8001884:	4603      	mov	r3, r0
 8001886:	b29a      	uxth	r2, r3
 8001888:	230a      	movs	r3, #10
 800188a:	495b      	ldr	r1, [pc, #364]	; (80019f8 <main+0x314>)
 800188c:	4850      	ldr	r0, [pc, #320]	; (80019d0 <main+0x2ec>)
 800188e:	f003 fd94 	bl	80053ba <HAL_UART_Transmit>

			  sprintf(uartTXBf, WR_B_OOD); HAL_UART_Transmit(&huart2, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 8001892:	4961      	ldr	r1, [pc, #388]	; (8001a18 <main+0x334>)
 8001894:	4858      	ldr	r0, [pc, #352]	; (80019f8 <main+0x314>)
 8001896:	f005 f813 	bl	80068c0 <siprintf>
 800189a:	4857      	ldr	r0, [pc, #348]	; (80019f8 <main+0x314>)
 800189c:	f7fe fca0 	bl	80001e0 <strlen>
 80018a0:	4603      	mov	r3, r0
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	230a      	movs	r3, #10
 80018a6:	4954      	ldr	r1, [pc, #336]	; (80019f8 <main+0x314>)
 80018a8:	4849      	ldr	r0, [pc, #292]	; (80019d0 <main+0x2ec>)
 80018aa:	f003 fd86 	bl	80053ba <HAL_UART_Transmit>

			  sprintf(uartTXBf, WR_C_PUPDR); HAL_UART_Transmit(&huart2, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 80018ae:	495b      	ldr	r1, [pc, #364]	; (8001a1c <main+0x338>)
 80018b0:	4851      	ldr	r0, [pc, #324]	; (80019f8 <main+0x314>)
 80018b2:	f005 f805 	bl	80068c0 <siprintf>
 80018b6:	4850      	ldr	r0, [pc, #320]	; (80019f8 <main+0x314>)
 80018b8:	f7fe fc92 	bl	80001e0 <strlen>
 80018bc:	4603      	mov	r3, r0
 80018be:	b29a      	uxth	r2, r3
 80018c0:	230a      	movs	r3, #10
 80018c2:	494d      	ldr	r1, [pc, #308]	; (80019f8 <main+0x314>)
 80018c4:	4842      	ldr	r0, [pc, #264]	; (80019d0 <main+0x2ec>)
 80018c6:	f003 fd78 	bl	80053ba <HAL_UART_Transmit>

			  sprintf(uartTXBf, WR_C_OPP); HAL_UART_Transmit(&huart2, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 80018ca:	4955      	ldr	r1, [pc, #340]	; (8001a20 <main+0x33c>)
 80018cc:	484a      	ldr	r0, [pc, #296]	; (80019f8 <main+0x314>)
 80018ce:	f004 fff7 	bl	80068c0 <siprintf>
 80018d2:	4849      	ldr	r0, [pc, #292]	; (80019f8 <main+0x314>)
 80018d4:	f7fe fc84 	bl	80001e0 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29a      	uxth	r2, r3
 80018dc:	230a      	movs	r3, #10
 80018de:	4946      	ldr	r1, [pc, #280]	; (80019f8 <main+0x314>)
 80018e0:	483b      	ldr	r0, [pc, #236]	; (80019d0 <main+0x2ec>)
 80018e2:	f003 fd6a 	bl	80053ba <HAL_UART_Transmit>

			  sprintf(uartTXBf, WR_C_OOD); HAL_UART_Transmit(&huart2, (uint8_t*)uartTXBf, strlen(uartTXBf),10);
 80018e6:	494f      	ldr	r1, [pc, #316]	; (8001a24 <main+0x340>)
 80018e8:	4843      	ldr	r0, [pc, #268]	; (80019f8 <main+0x314>)
 80018ea:	f004 ffe9 	bl	80068c0 <siprintf>
 80018ee:	4842      	ldr	r0, [pc, #264]	; (80019f8 <main+0x314>)
 80018f0:	f7fe fc76 	bl	80001e0 <strlen>
 80018f4:	4603      	mov	r3, r0
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	230a      	movs	r3, #10
 80018fa:	493f      	ldr	r1, [pc, #252]	; (80019f8 <main+0x314>)
 80018fc:	4834      	ldr	r0, [pc, #208]	; (80019d0 <main+0x2ec>)
 80018fe:	f003 fd5c 	bl	80053ba <HAL_UART_Transmit>
//		  gpio_C_rd[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
		  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);

	  }

	  if(flag_gpioselftest){
 8001902:	4b49      	ldr	r3, [pc, #292]	; (8001a28 <main+0x344>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d02d      	beq.n	8001966 <main+0x282>

		  //// ---------- Verita send 1 set --------------------------
		  static uint8_t gg = 0x66;
		  static uint8_t rg = 0x03;
		  uint8_t ggg[4] = {0x00, 0x11, 0x33, gg};
 800190a:	2300      	movs	r3, #0
 800190c:	703b      	strb	r3, [r7, #0]
 800190e:	2311      	movs	r3, #17
 8001910:	707b      	strb	r3, [r7, #1]
 8001912:	2333      	movs	r3, #51	; 0x33
 8001914:	70bb      	strb	r3, [r7, #2]
 8001916:	4b45      	ldr	r3, [pc, #276]	; (8001a2c <main+0x348>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	70fb      	strb	r3, [r7, #3]
		  Tx_UART_Verita_Packet_u8(&huart6, rg, ggg, sizeof(ggg));
 800191c:	4b44      	ldr	r3, [pc, #272]	; (8001a30 <main+0x34c>)
 800191e:	7819      	ldrb	r1, [r3, #0]
 8001920:	463a      	mov	r2, r7
 8001922:	2304      	movs	r3, #4
 8001924:	482e      	ldr	r0, [pc, #184]	; (80019e0 <main+0x2fc>)
 8001926:	f7ff fc2f 	bl	8001188 <Tx_UART_Verita_Packet_u8>

		  gg++; rg++;
 800192a:	4b40      	ldr	r3, [pc, #256]	; (8001a2c <main+0x348>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	3301      	adds	r3, #1
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4b3e      	ldr	r3, [pc, #248]	; (8001a2c <main+0x348>)
 8001934:	701a      	strb	r2, [r3, #0]
 8001936:	4b3e      	ldr	r3, [pc, #248]	; (8001a30 <main+0x34c>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b3c      	ldr	r3, [pc, #240]	; (8001a30 <main+0x34c>)
 8001940:	701a      	strb	r2, [r3, #0]

		  Tx_UART_Verita_Packet_u32(&huart6, VR_FWID, (uint32_t)FIRMWARE_VER);
 8001942:	4a25      	ldr	r2, [pc, #148]	; (80019d8 <main+0x2f4>)
 8001944:	2112      	movs	r1, #18
 8001946:	4826      	ldr	r0, [pc, #152]	; (80019e0 <main+0x2fc>)
 8001948:	f7ff fc7d 	bl	8001246 <Tx_UART_Verita_Packet_u32>

		  Tx_UART_Verita_Packet_u32(&huart6, 0x92, (uint32_t)0x00FF00AA);
 800194c:	4a39      	ldr	r2, [pc, #228]	; (8001a34 <main+0x350>)
 800194e:	2192      	movs	r1, #146	; 0x92
 8001950:	4823      	ldr	r0, [pc, #140]	; (80019e0 <main+0x2fc>)
 8001952:	f7ff fc78 	bl	8001246 <Tx_UART_Verita_Packet_u32>
		  Tx_UART_Verita_Packet_u32(&huart6, 0x13, 0x12); //// data request
 8001956:	2212      	movs	r2, #18
 8001958:	2113      	movs	r1, #19
 800195a:	4821      	ldr	r0, [pc, #132]	; (80019e0 <main+0x2fc>)
 800195c:	f7ff fc73 	bl	8001246 <Tx_UART_Verita_Packet_u32>

		  //VR_Cli.Mark.Flag_ger = 0x02;
		  flag_gpioselftest = 0;
 8001960:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <main+0x344>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]

	  }

	  //// Flag test
	  if(VR_Cli.Mark.Flag_ger == VRF_GPIO_Runalltest){
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <main+0x2f0>)
 8001968:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800196c:	2b02      	cmp	r3, #2
 800196e:	f040 80eb 	bne.w	8001b48 <main+0x464>
		  counter_flagger++;
 8001972:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <main+0x31c>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	3301      	adds	r3, #1
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <main+0x31c>)
 800197c:	701a      	strb	r2, [r3, #0]

		  ////record default GPIO setup before modified in testscript
		  gpio_rec_mode[0] = GPIOA->MODER;
 800197e:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <main+0x304>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a2d      	ldr	r2, [pc, #180]	; (8001a38 <main+0x354>)
 8001984:	6013      	str	r3, [r2, #0]
		  gpio_rec_pupdr[0] = GPIOA->PUPDR;
 8001986:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <main+0x304>)
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	4a2c      	ldr	r2, [pc, #176]	; (8001a3c <main+0x358>)
 800198c:	6013      	str	r3, [r2, #0]

		  //// Run GPIO Testscript all here or run before While
		  VR_Cli.Mark.PA_PUPDR = gpio_selftest_input_pupdr_1(GPIOA, List_GPIOA);
 800198e:	492c      	ldr	r1, [pc, #176]	; (8001a40 <main+0x35c>)
 8001990:	4815      	ldr	r0, [pc, #84]	; (80019e8 <main+0x304>)
 8001992:	f7ff fced 	bl	8001370 <gpio_selftest_input_pupdr_1>
 8001996:	4603      	mov	r3, r0
 8001998:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <main+0x2f0>)
 800199a:	6053      	str	r3, [r2, #4]
		  VR_Cli.Mark.PB_PUPDR = gpio_selftest_input_pupdr_1(GPIOB, List_GPIOB);
 800199c:	4929      	ldr	r1, [pc, #164]	; (8001a44 <main+0x360>)
 800199e:	482a      	ldr	r0, [pc, #168]	; (8001a48 <main+0x364>)
 80019a0:	f7ff fce6 	bl	8001370 <gpio_selftest_input_pupdr_1>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <main+0x2f0>)
 80019a8:	6113      	str	r3, [r2, #16]
		  VR_Cli.Mark.PC_PUPDR = gpio_selftest_input_pupdr_1(GPIOC, List_GPIOC);
 80019aa:	4928      	ldr	r1, [pc, #160]	; (8001a4c <main+0x368>)
 80019ac:	4828      	ldr	r0, [pc, #160]	; (8001a50 <main+0x36c>)
 80019ae:	f7ff fcdf 	bl	8001370 <gpio_selftest_input_pupdr_1>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <main+0x2f0>)
 80019b6:	61d3      	str	r3, [r2, #28]

		  HAL_Delay(5);
 80019b8:	2005      	movs	r0, #5
 80019ba:	f001 f86b 	bl	8002a94 <HAL_Delay>

		  VR_Cli.Mark.PA_OUT_PP = gpio_selftest_output_pp_1(GPIOA, List_GPIOA);
 80019be:	4920      	ldr	r1, [pc, #128]	; (8001a40 <main+0x35c>)
 80019c0:	4809      	ldr	r0, [pc, #36]	; (80019e8 <main+0x304>)
 80019c2:	f7ff fd68 	bl	8001496 <gpio_selftest_output_pp_1>
 80019c6:	4603      	mov	r3, r0
 80019c8:	e044      	b.n	8001a54 <main+0x370>
 80019ca:	bf00      	nop
 80019cc:	08008e48 	.word	0x08008e48
 80019d0:	2000045c 	.word	0x2000045c
 80019d4:	20000584 	.word	0x20000584
 80019d8:	04310323 	.word	0x04310323
 80019dc:	200005e8 	.word	0x200005e8
 80019e0:	200004a0 	.word	0x200004a0
 80019e4:	20000564 	.word	0x20000564
 80019e8:	40020000 	.word	0x40020000
 80019ec:	20000558 	.word	0x20000558
 80019f0:	2000055c 	.word	0x2000055c
 80019f4:	08008df0 	.word	0x08008df0
 80019f8:	200005f4 	.word	0x200005f4
 80019fc:	08008e28 	.word	0x08008e28
 8001a00:	20000561 	.word	0x20000561
 8001a04:	20000058 	.word	0x20000058
 8001a08:	200000d0 	.word	0x200000d0
 8001a0c:	20000148 	.word	0x20000148
 8001a10:	20000080 	.word	0x20000080
 8001a14:	200000f8 	.word	0x200000f8
 8001a18:	20000170 	.word	0x20000170
 8001a1c:	200000a8 	.word	0x200000a8
 8001a20:	20000120 	.word	0x20000120
 8001a24:	20000198 	.word	0x20000198
 8001a28:	20000580 	.word	0x20000580
 8001a2c:	200001c0 	.word	0x200001c0
 8001a30:	200001c1 	.word	0x200001c1
 8001a34:	00ff00aa 	.word	0x00ff00aa
 8001a38:	20000568 	.word	0x20000568
 8001a3c:	20000574 	.word	0x20000574
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000018 	.word	0x20000018
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	20000038 	.word	0x20000038
 8001a50:	40020800 	.word	0x40020800
 8001a54:	4a6e      	ldr	r2, [pc, #440]	; (8001c10 <main+0x52c>)
 8001a56:	6093      	str	r3, [r2, #8]
		  VR_Cli.Mark.PB_OUT_PP = gpio_selftest_output_pp_1(GPIOB, List_GPIOB);
 8001a58:	496e      	ldr	r1, [pc, #440]	; (8001c14 <main+0x530>)
 8001a5a:	486f      	ldr	r0, [pc, #444]	; (8001c18 <main+0x534>)
 8001a5c:	f7ff fd1b 	bl	8001496 <gpio_selftest_output_pp_1>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4a6b      	ldr	r2, [pc, #428]	; (8001c10 <main+0x52c>)
 8001a64:	6153      	str	r3, [r2, #20]
		  VR_Cli.Mark.PC_OUT_PP = gpio_selftest_output_pp_1(GPIOC, List_GPIOC);
 8001a66:	496d      	ldr	r1, [pc, #436]	; (8001c1c <main+0x538>)
 8001a68:	486d      	ldr	r0, [pc, #436]	; (8001c20 <main+0x53c>)
 8001a6a:	f7ff fd14 	bl	8001496 <gpio_selftest_output_pp_1>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4a67      	ldr	r2, [pc, #412]	; (8001c10 <main+0x52c>)
 8001a72:	6213      	str	r3, [r2, #32]

		  HAL_Delay(5);
 8001a74:	2005      	movs	r0, #5
 8001a76:	f001 f80d 	bl	8002a94 <HAL_Delay>

		  VR_Cli.Mark.PA_OUT_OD = gpio_selftest_output_od_1(GPIOA, List_GPIOA);
 8001a7a:	496a      	ldr	r1, [pc, #424]	; (8001c24 <main+0x540>)
 8001a7c:	486a      	ldr	r0, [pc, #424]	; (8001c28 <main+0x544>)
 8001a7e:	f7ff fd8b 	bl	8001598 <gpio_selftest_output_od_1>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4a62      	ldr	r2, [pc, #392]	; (8001c10 <main+0x52c>)
 8001a86:	60d3      	str	r3, [r2, #12]
		  VR_Cli.Mark.PB_OUT_OD = gpio_selftest_output_od_1(GPIOB, List_GPIOB);
 8001a88:	4962      	ldr	r1, [pc, #392]	; (8001c14 <main+0x530>)
 8001a8a:	4863      	ldr	r0, [pc, #396]	; (8001c18 <main+0x534>)
 8001a8c:	f7ff fd84 	bl	8001598 <gpio_selftest_output_od_1>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4a5f      	ldr	r2, [pc, #380]	; (8001c10 <main+0x52c>)
 8001a94:	6193      	str	r3, [r2, #24]
		  VR_Cli.Mark.PC_OUT_OD = gpio_selftest_output_od_1(GPIOC, List_GPIOC);
 8001a96:	4961      	ldr	r1, [pc, #388]	; (8001c1c <main+0x538>)
 8001a98:	4861      	ldr	r0, [pc, #388]	; (8001c20 <main+0x53c>)
 8001a9a:	f7ff fd7d 	bl	8001598 <gpio_selftest_output_od_1>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	4a5b      	ldr	r2, [pc, #364]	; (8001c10 <main+0x52c>)
 8001aa2:	6253      	str	r3, [r2, #36]	; 0x24

		  //// revert back, enable to send UART again after crashed in testscript
		  GPIOA->MODER = gpio_rec_mode[0] ;
 8001aa4:	4a60      	ldr	r2, [pc, #384]	; (8001c28 <main+0x544>)
 8001aa6:	4b61      	ldr	r3, [pc, #388]	; (8001c2c <main+0x548>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6013      	str	r3, [r2, #0]
		  GPIOA->PUPDR = gpio_rec_pupdr[0] ;
 8001aac:	4a5e      	ldr	r2, [pc, #376]	; (8001c28 <main+0x544>)
 8001aae:	4b60      	ldr	r3, [pc, #384]	; (8001c30 <main+0x54c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60d3      	str	r3, [r2, #12]

		  //// clear previous buffer
		  resetgpio_char();
 8001ab4:	f000 fc5c 	bl	8002370 <resetgpio_char>
		  ////Compare_pin()
		  Compare_pin_32(VR_Cli.Mark.PA_PUPDR, List_GPIOA, 0, WR_A_PUPDR);
 8001ab8:	4b55      	ldr	r3, [pc, #340]	; (8001c10 <main+0x52c>)
 8001aba:	6858      	ldr	r0, [r3, #4]
 8001abc:	4b5d      	ldr	r3, [pc, #372]	; (8001c34 <main+0x550>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	4958      	ldr	r1, [pc, #352]	; (8001c24 <main+0x540>)
 8001ac2:	f000 fb9b 	bl	80021fc <Compare_pin_32>
		  Compare_pin_32(VR_Cli.Mark.PA_OUT_PP, List_GPIOA, 0, WR_A_OPP);
 8001ac6:	4b52      	ldr	r3, [pc, #328]	; (8001c10 <main+0x52c>)
 8001ac8:	6898      	ldr	r0, [r3, #8]
 8001aca:	4b5b      	ldr	r3, [pc, #364]	; (8001c38 <main+0x554>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	4955      	ldr	r1, [pc, #340]	; (8001c24 <main+0x540>)
 8001ad0:	f000 fb94 	bl	80021fc <Compare_pin_32>
		  Compare_pin_32(VR_Cli.Mark.PA_OUT_OD, List_GPIOA, 0, WR_A_OOD);
 8001ad4:	4b4e      	ldr	r3, [pc, #312]	; (8001c10 <main+0x52c>)
 8001ad6:	68d8      	ldr	r0, [r3, #12]
 8001ad8:	4b58      	ldr	r3, [pc, #352]	; (8001c3c <main+0x558>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	4951      	ldr	r1, [pc, #324]	; (8001c24 <main+0x540>)
 8001ade:	f000 fb8d 	bl	80021fc <Compare_pin_32>

		  Compare_pin_32(VR_Cli.Mark.PB_PUPDR, List_GPIOB, 1,  WR_B_PUPDR);
 8001ae2:	4b4b      	ldr	r3, [pc, #300]	; (8001c10 <main+0x52c>)
 8001ae4:	6918      	ldr	r0, [r3, #16]
 8001ae6:	4b56      	ldr	r3, [pc, #344]	; (8001c40 <main+0x55c>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	494a      	ldr	r1, [pc, #296]	; (8001c14 <main+0x530>)
 8001aec:	f000 fb86 	bl	80021fc <Compare_pin_32>
		  Compare_pin_32(VR_Cli.Mark.PB_OUT_PP, List_GPIOB, 1, WR_B_OPP);
 8001af0:	4b47      	ldr	r3, [pc, #284]	; (8001c10 <main+0x52c>)
 8001af2:	6958      	ldr	r0, [r3, #20]
 8001af4:	4b53      	ldr	r3, [pc, #332]	; (8001c44 <main+0x560>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	4946      	ldr	r1, [pc, #280]	; (8001c14 <main+0x530>)
 8001afa:	f000 fb7f 	bl	80021fc <Compare_pin_32>
		  Compare_pin_32(VR_Cli.Mark.PB_OUT_OD, List_GPIOB, 1, WR_B_OOD);
 8001afe:	4b44      	ldr	r3, [pc, #272]	; (8001c10 <main+0x52c>)
 8001b00:	6998      	ldr	r0, [r3, #24]
 8001b02:	4b51      	ldr	r3, [pc, #324]	; (8001c48 <main+0x564>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	4943      	ldr	r1, [pc, #268]	; (8001c14 <main+0x530>)
 8001b08:	f000 fb78 	bl	80021fc <Compare_pin_32>

		  Compare_pin_32(VR_Cli.Mark.PC_PUPDR, List_GPIOC, 2, WR_C_PUPDR);
 8001b0c:	4b40      	ldr	r3, [pc, #256]	; (8001c10 <main+0x52c>)
 8001b0e:	69d8      	ldr	r0, [r3, #28]
 8001b10:	4b4e      	ldr	r3, [pc, #312]	; (8001c4c <main+0x568>)
 8001b12:	2202      	movs	r2, #2
 8001b14:	4941      	ldr	r1, [pc, #260]	; (8001c1c <main+0x538>)
 8001b16:	f000 fb71 	bl	80021fc <Compare_pin_32>
		  Compare_pin_32(VR_Cli.Mark.PC_OUT_PP, List_GPIOC, 2, WR_C_OPP);
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <main+0x52c>)
 8001b1c:	6a18      	ldr	r0, [r3, #32]
 8001b1e:	4b4c      	ldr	r3, [pc, #304]	; (8001c50 <main+0x56c>)
 8001b20:	2202      	movs	r2, #2
 8001b22:	493e      	ldr	r1, [pc, #248]	; (8001c1c <main+0x538>)
 8001b24:	f000 fb6a 	bl	80021fc <Compare_pin_32>
		  Compare_pin_32(VR_Cli.Mark.PC_OUT_OD, List_GPIOC, 2, WR_C_OOD);
 8001b28:	4b39      	ldr	r3, [pc, #228]	; (8001c10 <main+0x52c>)
 8001b2a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001b2c:	4b49      	ldr	r3, [pc, #292]	; (8001c54 <main+0x570>)
 8001b2e:	2202      	movs	r2, #2
 8001b30:	493a      	ldr	r1, [pc, #232]	; (8001c1c <main+0x538>)
 8001b32:	f000 fb63 	bl	80021fc <Compare_pin_32>
//		  uint32_t bbb = 0x12123333;
//		  for(register int i = 1;i < 9;i++){
//			  Tx_UART_Verita_Packet_u32(&huart6, i, bbb);
//			  bbb += 0xFF;
//		  }
		  Tx_UART_Verita_Command(&huart6, VRC_Next, 0x00);
 8001b36:	2200      	movs	r2, #0
 8001b38:	21a2      	movs	r1, #162	; 0xa2
 8001b3a:	4847      	ldr	r0, [pc, #284]	; (8001c58 <main+0x574>)
 8001b3c:	f7ff fbdd 	bl	80012fa <Tx_UART_Verita_Command>
		  VR_Cli.Mark.Flag_ger = VRF_SendALLTestData;
 8001b40:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <main+0x52c>)
 8001b42:	2204      	movs	r2, #4
 8001b44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	  }

	  //// SEnd All Data Flag
	  if(VR_Cli.Mark.Flag_ger == VRF_SendALLTestData){
 8001b48:	4b31      	ldr	r3, [pc, #196]	; (8001c10 <main+0x52c>)
 8001b4a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	f47f adf8 	bne.w	8001744 <main+0x60>

		  Tx_UART_Verita_Packet_u32(&huart6, VR_PA_PUPDR, VR_Cli.Mark.PA_PUPDR);
 8001b54:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <main+0x52c>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	483e      	ldr	r0, [pc, #248]	; (8001c58 <main+0x574>)
 8001b5e:	f7ff fb72 	bl	8001246 <Tx_UART_Verita_Packet_u32>
		  Tx_UART_Verita_Packet_u32(&huart6, VR_PB_PUPDR, VR_Cli.Mark.PB_PUPDR);
 8001b62:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <main+0x52c>)
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	461a      	mov	r2, r3
 8001b68:	2104      	movs	r1, #4
 8001b6a:	483b      	ldr	r0, [pc, #236]	; (8001c58 <main+0x574>)
 8001b6c:	f7ff fb6b 	bl	8001246 <Tx_UART_Verita_Packet_u32>
		  Tx_UART_Verita_Packet_u32(&huart6, VR_PC_PUPDR, VR_Cli.Mark.PC_PUPDR);
 8001b70:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <main+0x52c>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	461a      	mov	r2, r3
 8001b76:	2107      	movs	r1, #7
 8001b78:	4837      	ldr	r0, [pc, #220]	; (8001c58 <main+0x574>)
 8001b7a:	f7ff fb64 	bl	8001246 <Tx_UART_Verita_Packet_u32>

		  HAL_Delay(10);
 8001b7e:	200a      	movs	r0, #10
 8001b80:	f000 ff88 	bl	8002a94 <HAL_Delay>

		  Tx_UART_Verita_Packet_u32(&huart6, VR_PA_OUT_PP, VR_Cli.Mark.PA_OUT_PP);
 8001b84:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <main+0x52c>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2102      	movs	r1, #2
 8001b8c:	4832      	ldr	r0, [pc, #200]	; (8001c58 <main+0x574>)
 8001b8e:	f7ff fb5a 	bl	8001246 <Tx_UART_Verita_Packet_u32>
		  Tx_UART_Verita_Packet_u32(&huart6, VR_PB_OUT_PP, VR_Cli.Mark.PB_OUT_PP);
 8001b92:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <main+0x52c>)
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	461a      	mov	r2, r3
 8001b98:	2105      	movs	r1, #5
 8001b9a:	482f      	ldr	r0, [pc, #188]	; (8001c58 <main+0x574>)
 8001b9c:	f7ff fb53 	bl	8001246 <Tx_UART_Verita_Packet_u32>
		  Tx_UART_Verita_Packet_u32(&huart6, VR_PC_OUT_PP, VR_Cli.Mark.PC_OUT_PP);
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <main+0x52c>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	2108      	movs	r1, #8
 8001ba8:	482b      	ldr	r0, [pc, #172]	; (8001c58 <main+0x574>)
 8001baa:	f7ff fb4c 	bl	8001246 <Tx_UART_Verita_Packet_u32>

		  HAL_Delay(10);
 8001bae:	200a      	movs	r0, #10
 8001bb0:	f000 ff70 	bl	8002a94 <HAL_Delay>

		  Tx_UART_Verita_Packet_u32(&huart6, VR_PA_OUT_OD, VR_Cli.Mark.PA_OUT_OD);
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <main+0x52c>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	2103      	movs	r1, #3
 8001bbc:	4826      	ldr	r0, [pc, #152]	; (8001c58 <main+0x574>)
 8001bbe:	f7ff fb42 	bl	8001246 <Tx_UART_Verita_Packet_u32>
		  Tx_UART_Verita_Packet_u32(&huart6, VR_PB_OUT_OD, VR_Cli.Mark.PB_OUT_OD);
 8001bc2:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <main+0x52c>)
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	2106      	movs	r1, #6
 8001bca:	4823      	ldr	r0, [pc, #140]	; (8001c58 <main+0x574>)
 8001bcc:	f7ff fb3b 	bl	8001246 <Tx_UART_Verita_Packet_u32>
		  Tx_UART_Verita_Packet_u32(&huart6, VR_PC_OUT_OD, VR_Cli.Mark.PC_OUT_OD);
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <main+0x52c>)
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	2109      	movs	r1, #9
 8001bd8:	481f      	ldr	r0, [pc, #124]	; (8001c58 <main+0x574>)
 8001bda:	f7ff fb34 	bl	8001246 <Tx_UART_Verita_Packet_u32>

		  Tx_UART_Verita_Packet_u32(&huart6, VR_FWID, VR_Cli.Mark.FirmwareVer);
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <main+0x52c>)
 8001be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be2:	461a      	mov	r2, r3
 8001be4:	2112      	movs	r1, #18
 8001be6:	481c      	ldr	r0, [pc, #112]	; (8001c58 <main+0x574>)
 8001be8:	f7ff fb2d 	bl	8001246 <Tx_UART_Verita_Packet_u32>

		  HAL_Delay(15);
 8001bec:	200f      	movs	r0, #15
 8001bee:	f000 ff51 	bl	8002a94 <HAL_Delay>

		  Tx_UART_Verita_Command(&huart6, VRC_Flag_aa, 0xFF);
 8001bf2:	22ff      	movs	r2, #255	; 0xff
 8001bf4:	21a3      	movs	r1, #163	; 0xa3
 8001bf6:	4818      	ldr	r0, [pc, #96]	; (8001c58 <main+0x574>)
 8001bf8:	f7ff fb7f 	bl	80012fa <Tx_UART_Verita_Command>
		  Tx_UART_Verita_Command(&huart6, VRC_Flag_ger, VRF_SendALLTestData);
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	21a1      	movs	r1, #161	; 0xa1
 8001c00:	4815      	ldr	r0, [pc, #84]	; (8001c58 <main+0x574>)
 8001c02:	f7ff fb7a 	bl	80012fa <Tx_UART_Verita_Command>
		  VR_Cli.Mark.Flag_ger = 0;
 8001c06:	4b02      	ldr	r3, [pc, #8]	; (8001c10 <main+0x52c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	  HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], 9);
 8001c0e:	e599      	b.n	8001744 <main+0x60>
 8001c10:	20000584 	.word	0x20000584
 8001c14:	20000018 	.word	0x20000018
 8001c18:	40020400 	.word	0x40020400
 8001c1c:	20000038 	.word	0x20000038
 8001c20:	40020800 	.word	0x40020800
 8001c24:	20000000 	.word	0x20000000
 8001c28:	40020000 	.word	0x40020000
 8001c2c:	20000568 	.word	0x20000568
 8001c30:	20000574 	.word	0x20000574
 8001c34:	20000058 	.word	0x20000058
 8001c38:	200000d0 	.word	0x200000d0
 8001c3c:	20000148 	.word	0x20000148
 8001c40:	20000080 	.word	0x20000080
 8001c44:	200000f8 	.word	0x200000f8
 8001c48:	20000170 	.word	0x20000170
 8001c4c:	200000a8 	.word	0x200000a8
 8001c50:	20000120 	.word	0x20000120
 8001c54:	20000198 	.word	0x20000198
 8001c58:	200004a0 	.word	0x200004a0

08001c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b094      	sub	sp, #80	; 0x50
 8001c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c62:	f107 0320 	add.w	r3, r7, #32
 8001c66:	2230      	movs	r2, #48	; 0x30
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f004 f9b6 	bl	8005fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <SystemClock_Config+0xc8>)
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	4a26      	ldr	r2, [pc, #152]	; (8001d24 <SystemClock_Config+0xc8>)
 8001c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c90:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <SystemClock_Config+0xc8>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <SystemClock_Config+0xcc>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a20      	ldr	r2, [pc, #128]	; (8001d28 <SystemClock_Config+0xcc>)
 8001ca6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <SystemClock_Config+0xcc>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cc0:	2310      	movs	r3, #16
 8001cc2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ccc:	2308      	movs	r3, #8
 8001cce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001cd0:	2364      	movs	r3, #100	; 0x64
 8001cd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cd8:	2304      	movs	r3, #4
 8001cda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cdc:	f107 0320 	add.w	r3, r7, #32
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f002 f93f 	bl	8003f64 <HAL_RCC_OscConfig>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cec:	f000 fbc6 	bl	800247c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf0:	230f      	movs	r3, #15
 8001cf2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	2103      	movs	r1, #3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f002 fba1 	bl	8004454 <HAL_RCC_ClockConfig>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d18:	f000 fbb0 	bl	800247c <Error_Handler>
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3750      	adds	r7, #80	; 0x50
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40007000 	.word	0x40007000

08001d2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d32:	463b      	mov	r3, r7
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d3e:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <MX_ADC1_Init+0x98>)
 8001d40:	4a21      	ldr	r2, [pc, #132]	; (8001dc8 <MX_ADC1_Init+0x9c>)
 8001d42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001d44:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <MX_ADC1_Init+0x98>)
 8001d46:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <MX_ADC1_Init+0x98>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <MX_ADC1_Init+0x98>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d58:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <MX_ADC1_Init+0x98>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d5e:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <MX_ADC1_Init+0x98>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d66:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <MX_ADC1_Init+0x98>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d6c:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <MX_ADC1_Init+0x98>)
 8001d6e:	4a17      	ldr	r2, [pc, #92]	; (8001dcc <MX_ADC1_Init+0xa0>)
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <MX_ADC1_Init+0x98>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <MX_ADC1_Init+0x98>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <MX_ADC1_Init+0x98>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <MX_ADC1_Init+0x98>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d8c:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <MX_ADC1_Init+0x98>)
 8001d8e:	f000 fea5 	bl	8002adc <HAL_ADC_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d98:	f000 fb70 	bl	800247c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <MX_ADC1_Init+0xa4>)
 8001d9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001da0:	2301      	movs	r3, #1
 8001da2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001da4:	2307      	movs	r3, #7
 8001da6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001da8:	463b      	mov	r3, r7
 8001daa:	4619      	mov	r1, r3
 8001dac:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <MX_ADC1_Init+0x98>)
 8001dae:	f001 f859 	bl	8002e64 <HAL_ADC_ConfigChannel>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001db8:	f000 fb60 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dbc:	bf00      	nop
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	200003cc 	.word	0x200003cc
 8001dc8:	40012000 	.word	0x40012000
 8001dcc:	0f000001 	.word	0x0f000001
 8001dd0:	10000012 	.word	0x10000012

08001dd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08e      	sub	sp, #56	; 0x38
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de8:	f107 0320 	add.w	r3, r7, #32
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
 8001e00:	615a      	str	r2, [r3, #20]
 8001e02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e04:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <MX_TIM3_Init+0xe8>)
 8001e06:	4a2e      	ldr	r2, [pc, #184]	; (8001ec0 <MX_TIM3_Init+0xec>)
 8001e08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8001e0a:	4b2c      	ldr	r3, [pc, #176]	; (8001ebc <MX_TIM3_Init+0xe8>)
 8001e0c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e12:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <MX_TIM3_Init+0xe8>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001e18:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <MX_TIM3_Init+0xe8>)
 8001e1a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e20:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <MX_TIM3_Init+0xe8>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e26:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <MX_TIM3_Init+0xe8>)
 8001e28:	2280      	movs	r2, #128	; 0x80
 8001e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e2c:	4823      	ldr	r0, [pc, #140]	; (8001ebc <MX_TIM3_Init+0xe8>)
 8001e2e:	f002 fd31 	bl	8004894 <HAL_TIM_Base_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001e38:	f000 fb20 	bl	800247c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e46:	4619      	mov	r1, r3
 8001e48:	481c      	ldr	r0, [pc, #112]	; (8001ebc <MX_TIM3_Init+0xe8>)
 8001e4a:	f002 fe8d 	bl	8004b68 <HAL_TIM_ConfigClockSource>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001e54:	f000 fb12 	bl	800247c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e58:	4818      	ldr	r0, [pc, #96]	; (8001ebc <MX_TIM3_Init+0xe8>)
 8001e5a:	f002 fd6a 	bl	8004932 <HAL_TIM_PWM_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001e64:	f000 fb0a 	bl	800247c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e70:	f107 0320 	add.w	r3, r7, #32
 8001e74:	4619      	mov	r1, r3
 8001e76:	4811      	ldr	r0, [pc, #68]	; (8001ebc <MX_TIM3_Init+0xe8>)
 8001e78:	f003 f9e4 	bl	8005244 <HAL_TIMEx_MasterConfigSynchronization>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001e82:	f000 fafb 	bl	800247c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e86:	2360      	movs	r3, #96	; 0x60
 8001e88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 8001e8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4807      	ldr	r0, [pc, #28]	; (8001ebc <MX_TIM3_Init+0xe8>)
 8001ea0:	f002 fda0 	bl	80049e4 <HAL_TIM_PWM_ConfigChannel>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001eaa:	f000 fae7 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001eae:	4803      	ldr	r0, [pc, #12]	; (8001ebc <MX_TIM3_Init+0xe8>)
 8001eb0:	f000 fb56 	bl	8002560 <HAL_TIM_MspPostInit>

}
 8001eb4:	bf00      	nop
 8001eb6:	3738      	adds	r7, #56	; 0x38
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000414 	.word	0x20000414
 8001ec0:	40000400 	.word	0x40000400

08001ec4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001eca:	4a12      	ldr	r2, [pc, #72]	; (8001f14 <MX_USART2_UART_Init+0x50>)
 8001ecc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ed0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ed4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001eea:	220c      	movs	r2, #12
 8001eec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001efa:	4805      	ldr	r0, [pc, #20]	; (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001efc:	f003 fa10 	bl	8005320 <HAL_UART_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f06:	f000 fab9 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	2000045c 	.word	0x2000045c
 8001f14:	40004400 	.word	0x40004400

08001f18 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <MX_USART6_UART_Init+0x4c>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <MX_USART6_UART_Init+0x50>)
 8001f20:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <MX_USART6_UART_Init+0x4c>)
 8001f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f28:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <MX_USART6_UART_Init+0x4c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <MX_USART6_UART_Init+0x4c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <MX_USART6_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <MX_USART6_UART_Init+0x4c>)
 8001f3e:	220c      	movs	r2, #12
 8001f40:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <MX_USART6_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <MX_USART6_UART_Init+0x4c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f4e:	4805      	ldr	r0, [pc, #20]	; (8001f64 <MX_USART6_UART_Init+0x4c>)
 8001f50:	f003 f9e6 	bl	8005320 <HAL_UART_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f5a:	f000 fa8f 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200004a0 	.word	0x200004a0
 8001f68:	40011400 	.word	0x40011400

08001f6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <MX_DMA_Init+0x3c>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <MX_DMA_Init+0x3c>)
 8001f7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <MX_DMA_Init+0x3c>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2100      	movs	r1, #0
 8001f92:	2039      	movs	r0, #57	; 0x39
 8001f94:	f001 fa6f 	bl	8003476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001f98:	2039      	movs	r0, #57	; 0x39
 8001f9a:	f001 fa88 	bl	80034ae <HAL_NVIC_EnableIRQ>

}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800

08001fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
 8001fbe:	60da      	str	r2, [r3, #12]
 8001fc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	4b38      	ldr	r3, [pc, #224]	; (80020a8 <MX_GPIO_Init+0xfc>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a37      	ldr	r2, [pc, #220]	; (80020a8 <MX_GPIO_Init+0xfc>)
 8001fcc:	f043 0304 	orr.w	r3, r3, #4
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b35      	ldr	r3, [pc, #212]	; (80020a8 <MX_GPIO_Init+0xfc>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b31      	ldr	r3, [pc, #196]	; (80020a8 <MX_GPIO_Init+0xfc>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a30      	ldr	r2, [pc, #192]	; (80020a8 <MX_GPIO_Init+0xfc>)
 8001fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <MX_GPIO_Init+0xfc>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	4b2a      	ldr	r3, [pc, #168]	; (80020a8 <MX_GPIO_Init+0xfc>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a29      	ldr	r2, [pc, #164]	; (80020a8 <MX_GPIO_Init+0xfc>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b27      	ldr	r3, [pc, #156]	; (80020a8 <MX_GPIO_Init+0xfc>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <MX_GPIO_Init+0xfc>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a22      	ldr	r2, [pc, #136]	; (80020a8 <MX_GPIO_Init+0xfc>)
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <MX_GPIO_Init+0xfc>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	607b      	str	r3, [r7, #4]
 8002030:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002032:	2200      	movs	r2, #0
 8002034:	2120      	movs	r1, #32
 8002036:	481d      	ldr	r0, [pc, #116]	; (80020ac <MX_GPIO_Init+0x100>)
 8002038:	f001 ff48 	bl	8003ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800203c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002042:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	4619      	mov	r1, r3
 8002052:	4817      	ldr	r0, [pc, #92]	; (80020b0 <MX_GPIO_Init+0x104>)
 8002054:	f001 fdb6 	bl	8003bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002058:	2320      	movs	r3, #32
 800205a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205c:	2301      	movs	r3, #1
 800205e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002064:	2300      	movs	r3, #0
 8002066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	4619      	mov	r1, r3
 800206e:	480f      	ldr	r0, [pc, #60]	; (80020ac <MX_GPIO_Init+0x100>)
 8002070:	f001 fda8 	bl	8003bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800207e:	2302      	movs	r3, #2
 8002080:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002082:	f107 0314 	add.w	r3, r7, #20
 8002086:	4619      	mov	r1, r3
 8002088:	480a      	ldr	r0, [pc, #40]	; (80020b4 <MX_GPIO_Init+0x108>)
 800208a:	f001 fd9b 	bl	8003bc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	2100      	movs	r1, #0
 8002092:	2028      	movs	r0, #40	; 0x28
 8002094:	f001 f9ef 	bl	8003476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002098:	2028      	movs	r0, #40	; 0x28
 800209a:	f001 fa08 	bl	80034ae <HAL_NVIC_EnableIRQ>

}
 800209e:	bf00      	nop
 80020a0:	3728      	adds	r7, #40	; 0x28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40020000 	.word	0x40020000
 80020b0:	40020800 	.word	0x40020800
 80020b4:	40020400 	.word	0x40020400

080020b8 <CPUTemprdINIT>:

/* USER CODE BEGIN 4 */
void CPUTemprdINIT(){
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
	ADCChannell[0].Confix.Channel = ADC_CHANNEL_TEMPSENSOR;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <CPUTemprdINIT+0x20>)
 80020be:	4a07      	ldr	r2, [pc, #28]	; (80020dc <CPUTemprdINIT+0x24>)
 80020c0:	601a      	str	r2, [r3, #0]
	ADCChannell[0].Confix.Rank = 1;
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <CPUTemprdINIT+0x20>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	605a      	str	r2, [r3, #4]
	ADCChannell[0].Confix.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <CPUTemprdINIT+0x20>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	20000544 	.word	0x20000544
 80020dc:	10000012 	.word	0x10000012

080020e0 <CPUTempread>:

uint16_t CPUTempread(){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
	uint16_t tmpbf;

	HAL_ADC_ConfigChannel(&hadc1, &ADCChannell[0].Confix); //
 80020e6:	490d      	ldr	r1, [pc, #52]	; (800211c <CPUTempread+0x3c>)
 80020e8:	480d      	ldr	r0, [pc, #52]	; (8002120 <CPUTempread+0x40>)
 80020ea:	f000 febb 	bl	8002e64 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&hadc1);
 80020ee:	480c      	ldr	r0, [pc, #48]	; (8002120 <CPUTempread+0x40>)
 80020f0:	f000 fd38 	bl	8002b64 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1, 10)==HAL_OK) //10mSec timeout
 80020f4:	210a      	movs	r1, #10
 80020f6:	480a      	ldr	r0, [pc, #40]	; (8002120 <CPUTempread+0x40>)
 80020f8:	f000 fe1b 	bl	8002d32 <HAL_ADC_PollForConversion>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d104      	bne.n	800210c <CPUTempread+0x2c>
		{
			//ReadData to confix channel
			tmpbf = HAL_ADC_GetValue(&hadc1);
 8002102:	4807      	ldr	r0, [pc, #28]	; (8002120 <CPUTempread+0x40>)
 8002104:	f000 fea0 	bl	8002e48 <HAL_ADC_GetValue>
 8002108:	4603      	mov	r3, r0
 800210a:	80fb      	strh	r3, [r7, #6]
		}

	HAL_ADC_Stop(&hadc1);
 800210c:	4804      	ldr	r0, [pc, #16]	; (8002120 <CPUTempread+0x40>)
 800210e:	f000 fddd 	bl	8002ccc <HAL_ADC_Stop>

	return tmpbf;
 8002112:	88fb      	ldrh	r3, [r7, #6]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000544 	.word	0x20000544
 8002120:	200003cc 	.word	0x200003cc
 8002124:	00000000 	.word	0x00000000

08002128 <ADCTVolta>:

float ADCTVolta(uint16_t btt){
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	80fb      	strh	r3, [r7, #6]
	// convert 0-4096 ADC bit -> 0-3.3V
	return (btt /4096.0) * 3.3;
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe f9fd 	bl	8000534 <__aeabi_i2d>
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <ADCTVolta+0x58>)
 8002140:	f7fe fb8c 	bl	800085c <__aeabi_ddiv>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	a30a      	add	r3, pc, #40	; (adr r3, 8002178 <ADCTVolta+0x50>)
 800214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002152:	f7fe fa59 	bl	8000608 <__aeabi_dmul>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4610      	mov	r0, r2
 800215c:	4619      	mov	r1, r3
 800215e:	f7fe fd2b 	bl	8000bb8 <__aeabi_d2f>
 8002162:	4603      	mov	r3, r0
 8002164:	ee07 3a90 	vmov	s15, r3
}
 8002168:	eeb0 0a67 	vmov.f32	s0, s15
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	f3af 8000 	nop.w
 8002178:	66666666 	.word	0x66666666
 800217c:	400a6666 	.word	0x400a6666
 8002180:	40b00000 	.word	0x40b00000
 8002184:	00000000 	.word	0x00000000

08002188 <TempEquat>:

float TempEquat(float Vs){
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	ed87 0a01 	vstr	s0, [r7, #4]
	//Vs = V tmp read , V25= 0.76V, Avg_slope = 2.5 mV
	return ((Vs - 0.76)/(0.0025)) + 25.0; //2.5*0.001
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7fe f9e0 	bl	8000558 <__aeabi_f2d>
 8002198:	a314      	add	r3, pc, #80	; (adr r3, 80021ec <TempEquat+0x64>)
 800219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219e:	f7fe f87b 	bl	8000298 <__aeabi_dsub>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	a312      	add	r3, pc, #72	; (adr r3, 80021f4 <TempEquat+0x6c>)
 80021ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b0:	f7fe fb54 	bl	800085c <__aeabi_ddiv>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4610      	mov	r0, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <TempEquat+0x60>)
 80021c2:	f7fe f86b 	bl	800029c <__adddf3>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	f7fe fcf3 	bl	8000bb8 <__aeabi_d2f>
 80021d2:	4603      	mov	r3, r0
 80021d4:	ee07 3a90 	vmov	s15, r3
}
 80021d8:	eeb0 0a67 	vmov.f32	s0, s15
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	f3af 8000 	nop.w
 80021e8:	40390000 	.word	0x40390000
 80021ec:	851eb852 	.word	0x851eb852
 80021f0:	3fe851eb 	.word	0x3fe851eb
 80021f4:	47ae147b 	.word	0x47ae147b
 80021f8:	3f647ae1 	.word	0x3f647ae1

080021fc <Compare_pin_32>:
//		 }
//
//	}
//}

void Compare_pin_32(uint32_t raw32, uint16_t *Lista_GPIOx, uint8_t gpst,char *outchar){
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	4613      	mov	r3, r2
 800220a:	71fb      	strb	r3, [r7, #7]
	 * 	@param raw32       rawuint32_t data given from gpio_testscript functions
	 * 	@param Lista_GPIOx List of GPIOs bank need to be checked
	 * 	@param gpst        select report type [0 - PA_] [1 - PB_] [2 - PC_]
	 * 	@param outchar     char for record the compare result report
	 * */
	uint16_t raw32_N = raw32 & 0xFFFF;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	83bb      	strh	r3, [r7, #28]
	uint16_t raw32_P = (raw32 >> 16) & 0xFFFF;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	0c1b      	lsrs	r3, r3, #16
 8002214:	837b      	strh	r3, [r7, #26]
	uint8_t iaa, iab, cntr_w = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	77fb      	strb	r3, [r7, #31]
	char aadd[6];

	for(register int i = 0;i < 16;i++){
 800221a:	2400      	movs	r4, #0
 800221c:	e081      	b.n	8002322 <Compare_pin_32+0x126>
		if(Lista_GPIOx[i] >= 20){break;}
 800221e:	4623      	mov	r3, r4
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	4413      	add	r3, r2
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	2b13      	cmp	r3, #19
 800222a:	d87e      	bhi.n	800232a <Compare_pin_32+0x12e>

		iaa = (raw32_N >> Lista_GPIOx[i]) & 0x01;
 800222c:	8bbb      	ldrh	r3, [r7, #28]
 800222e:	4622      	mov	r2, r4
 8002230:	0052      	lsls	r2, r2, #1
 8002232:	68b9      	ldr	r1, [r7, #8]
 8002234:	440a      	add	r2, r1
 8002236:	8812      	ldrh	r2, [r2, #0]
 8002238:	4113      	asrs	r3, r2
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	767b      	strb	r3, [r7, #25]
		iab = (raw32_P >> Lista_GPIOx[i]) & 0x01;
 8002242:	8b7b      	ldrh	r3, [r7, #26]
 8002244:	4622      	mov	r2, r4
 8002246:	0052      	lsls	r2, r2, #1
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	440a      	add	r2, r1
 800224c:	8812      	ldrh	r2, [r2, #0]
 800224e:	4113      	asrs	r3, r2
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	763b      	strb	r3, [r7, #24]
		 if(iaa == iab){
 8002258:	7e7a      	ldrb	r2, [r7, #25]
 800225a:	7e3b      	ldrb	r3, [r7, #24]
 800225c:	429a      	cmp	r2, r3
 800225e:	d15f      	bne.n	8002320 <Compare_pin_32+0x124>

			 cntr_w++; // count if match
 8002260:	7ffb      	ldrb	r3, [r7, #31]
 8002262:	3301      	adds	r3, #1
 8002264:	77fb      	strb	r3, [r7, #31]

			 //// add problem pin
			 switch(gpst){
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d00f      	beq.n	800228c <Compare_pin_32+0x90>
 800226c:	2b02      	cmp	r3, #2
 800226e:	d01b      	beq.n	80022a8 <Compare_pin_32+0xac>
			 default:
			 case 0: // A
				 sprintf(aadd, "PA%d", (uint8_t)Lista_GPIOx[i]); //
 8002270:	4623      	mov	r3, r4
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	4413      	add	r3, r2
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	f107 0310 	add.w	r3, r7, #16
 8002282:	4934      	ldr	r1, [pc, #208]	; (8002354 <Compare_pin_32+0x158>)
 8002284:	4618      	mov	r0, r3
 8002286:	f004 fb1b 	bl	80068c0 <siprintf>
				 break;
 800228a:	e01b      	b.n	80022c4 <Compare_pin_32+0xc8>
			 case 1: // B
			 	 sprintf(aadd, "PB%d", (uint8_t)Lista_GPIOx[i]); //
 800228c:	4623      	mov	r3, r4
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	4413      	add	r3, r2
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	f107 0310 	add.w	r3, r7, #16
 800229e:	492e      	ldr	r1, [pc, #184]	; (8002358 <Compare_pin_32+0x15c>)
 80022a0:	4618      	mov	r0, r3
 80022a2:	f004 fb0d 	bl	80068c0 <siprintf>
			 	 break;
 80022a6:	e00d      	b.n	80022c4 <Compare_pin_32+0xc8>
			 case 2: // C
			 	 sprintf(aadd, "PC%d", (uint8_t)Lista_GPIOx[i]); //
 80022a8:	4623      	mov	r3, r4
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	4413      	add	r3, r2
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	f107 0310 	add.w	r3, r7, #16
 80022ba:	4928      	ldr	r1, [pc, #160]	; (800235c <Compare_pin_32+0x160>)
 80022bc:	4618      	mov	r0, r3
 80022be:	f004 faff 	bl	80068c0 <siprintf>
			 	 break;
 80022c2:	bf00      	nop

			 }
			 strncat(outchar, aadd, 4);
 80022c4:	f107 0310 	add.w	r3, r7, #16
 80022c8:	2204      	movs	r2, #4
 80022ca:	4619      	mov	r1, r3
 80022cc:	6838      	ldr	r0, [r7, #0]
 80022ce:	f004 fb17 	bl	8006900 <strncat>

			 //// add High, Low
			 if(iaa == 1){
 80022d2:	7e7b      	ldrb	r3, [r7, #25]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d106      	bne.n	80022e6 <Compare_pin_32+0xea>
				 sprintf(aadd, "_H");
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	4920      	ldr	r1, [pc, #128]	; (8002360 <Compare_pin_32+0x164>)
 80022de:	4618      	mov	r0, r3
 80022e0:	f004 faee 	bl	80068c0 <siprintf>
 80022e4:	e008      	b.n	80022f8 <Compare_pin_32+0xfc>
			 }else if(iaa == 0){
 80022e6:	7e7b      	ldrb	r3, [r7, #25]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d105      	bne.n	80022f8 <Compare_pin_32+0xfc>
				 sprintf(aadd, "_L");
 80022ec:	f107 0310 	add.w	r3, r7, #16
 80022f0:	491c      	ldr	r1, [pc, #112]	; (8002364 <Compare_pin_32+0x168>)
 80022f2:	4618      	mov	r0, r3
 80022f4:	f004 fae4 	bl	80068c0 <siprintf>
			 }
			 strncat(outchar, aadd, 2);
 80022f8:	f107 0310 	add.w	r3, r7, #16
 80022fc:	2202      	movs	r2, #2
 80022fe:	4619      	mov	r1, r3
 8002300:	6838      	ldr	r0, [r7, #0]
 8002302:	f004 fafd 	bl	8006900 <strncat>

			 //// add blank
			 sprintf(aadd, " ");
 8002306:	f107 0310 	add.w	r3, r7, #16
 800230a:	4917      	ldr	r1, [pc, #92]	; (8002368 <Compare_pin_32+0x16c>)
 800230c:	4618      	mov	r0, r3
 800230e:	f004 fad7 	bl	80068c0 <siprintf>
			 strncat(outchar, aadd, 1);
 8002312:	f107 0310 	add.w	r3, r7, #16
 8002316:	2201      	movs	r2, #1
 8002318:	4619      	mov	r1, r3
 800231a:	6838      	ldr	r0, [r7, #0]
 800231c:	f004 faf0 	bl	8006900 <strncat>
	for(register int i = 0;i < 16;i++){
 8002320:	3401      	adds	r4, #1
 8002322:	2c0f      	cmp	r4, #15
 8002324:	f77f af7b 	ble.w	800221e <Compare_pin_32+0x22>
 8002328:	e000      	b.n	800232c <Compare_pin_32+0x130>
		if(Lista_GPIOx[i] >= 20){break;}
 800232a:	bf00      	nop
		 }
	}

	if(!cntr_w){
 800232c:	7ffb      	ldrb	r3, [r7, #31]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10c      	bne.n	800234c <Compare_pin_32+0x150>
		sprintf(aadd, "_PASS");
 8002332:	f107 0310 	add.w	r3, r7, #16
 8002336:	490d      	ldr	r1, [pc, #52]	; (800236c <Compare_pin_32+0x170>)
 8002338:	4618      	mov	r0, r3
 800233a:	f004 fac1 	bl	80068c0 <siprintf>
		strncat(outchar, aadd, 7);
 800233e:	f107 0310 	add.w	r3, r7, #16
 8002342:	2207      	movs	r2, #7
 8002344:	4619      	mov	r1, r3
 8002346:	6838      	ldr	r0, [r7, #0]
 8002348:	f004 fada 	bl	8006900 <strncat>
	}
}
 800234c:	bf00      	nop
 800234e:	3724      	adds	r7, #36	; 0x24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd90      	pop	{r4, r7, pc}
 8002354:	08008e84 	.word	0x08008e84
 8002358:	08008e8c 	.word	0x08008e8c
 800235c:	08008e94 	.word	0x08008e94
 8002360:	08008e9c 	.word	0x08008e9c
 8002364:	08008ea0 	.word	0x08008ea0
 8002368:	08008ea4 	.word	0x08008ea4
 800236c:	08008ea8 	.word	0x08008ea8

08002370 <resetgpio_char>:

void resetgpio_char(){
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0

	sprintf(WR_A_PUPDR, "\r\nA_PUR: ");
 8002374:	4912      	ldr	r1, [pc, #72]	; (80023c0 <resetgpio_char+0x50>)
 8002376:	4813      	ldr	r0, [pc, #76]	; (80023c4 <resetgpio_char+0x54>)
 8002378:	f004 faa2 	bl	80068c0 <siprintf>
	sprintf(WR_B_PUPDR, "\r\nB_PUR: ");
 800237c:	4912      	ldr	r1, [pc, #72]	; (80023c8 <resetgpio_char+0x58>)
 800237e:	4813      	ldr	r0, [pc, #76]	; (80023cc <resetgpio_char+0x5c>)
 8002380:	f004 fa9e 	bl	80068c0 <siprintf>
	sprintf(WR_C_PUPDR, "\r\nC_PUR: ");
 8002384:	4912      	ldr	r1, [pc, #72]	; (80023d0 <resetgpio_char+0x60>)
 8002386:	4813      	ldr	r0, [pc, #76]	; (80023d4 <resetgpio_char+0x64>)
 8002388:	f004 fa9a 	bl	80068c0 <siprintf>

	sprintf(WR_A_OPP, "\r\nA_OPP: ");
 800238c:	4912      	ldr	r1, [pc, #72]	; (80023d8 <resetgpio_char+0x68>)
 800238e:	4813      	ldr	r0, [pc, #76]	; (80023dc <resetgpio_char+0x6c>)
 8002390:	f004 fa96 	bl	80068c0 <siprintf>
	sprintf(WR_B_OPP, "\r\nB_OPP: ");
 8002394:	4912      	ldr	r1, [pc, #72]	; (80023e0 <resetgpio_char+0x70>)
 8002396:	4813      	ldr	r0, [pc, #76]	; (80023e4 <resetgpio_char+0x74>)
 8002398:	f004 fa92 	bl	80068c0 <siprintf>
	sprintf(WR_C_OPP, "\r\nC_OPP: ");
 800239c:	4912      	ldr	r1, [pc, #72]	; (80023e8 <resetgpio_char+0x78>)
 800239e:	4813      	ldr	r0, [pc, #76]	; (80023ec <resetgpio_char+0x7c>)
 80023a0:	f004 fa8e 	bl	80068c0 <siprintf>

	sprintf(WR_A_OOD, "\r\nA_OOD: ");
 80023a4:	4912      	ldr	r1, [pc, #72]	; (80023f0 <resetgpio_char+0x80>)
 80023a6:	4813      	ldr	r0, [pc, #76]	; (80023f4 <resetgpio_char+0x84>)
 80023a8:	f004 fa8a 	bl	80068c0 <siprintf>
	sprintf(WR_B_OOD, "\r\nB_OOD: ");
 80023ac:	4912      	ldr	r1, [pc, #72]	; (80023f8 <resetgpio_char+0x88>)
 80023ae:	4813      	ldr	r0, [pc, #76]	; (80023fc <resetgpio_char+0x8c>)
 80023b0:	f004 fa86 	bl	80068c0 <siprintf>
	sprintf(WR_C_OOD, "\r\nC_OOD: ");
 80023b4:	4912      	ldr	r1, [pc, #72]	; (8002400 <resetgpio_char+0x90>)
 80023b6:	4813      	ldr	r0, [pc, #76]	; (8002404 <resetgpio_char+0x94>)
 80023b8:	f004 fa82 	bl	80068c0 <siprintf>
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	08008eb0 	.word	0x08008eb0
 80023c4:	20000058 	.word	0x20000058
 80023c8:	08008ebc 	.word	0x08008ebc
 80023cc:	20000080 	.word	0x20000080
 80023d0:	08008ec8 	.word	0x08008ec8
 80023d4:	200000a8 	.word	0x200000a8
 80023d8:	08008ed4 	.word	0x08008ed4
 80023dc:	200000d0 	.word	0x200000d0
 80023e0:	08008ee0 	.word	0x08008ee0
 80023e4:	200000f8 	.word	0x200000f8
 80023e8:	08008eec 	.word	0x08008eec
 80023ec:	20000120 	.word	0x20000120
 80023f0:	08008ef8 	.word	0x08008ef8
 80023f4:	20000148 	.word	0x20000148
 80023f8:	08008f04 	.word	0x08008f04
 80023fc:	20000170 	.word	0x20000170
 8002400:	08008f10 	.word	0x08008f10
 8002404:	20000198 	.word	0x20000198

08002408 <HAL_GPIO_EXTI_Callback>:



//// ----------------GPIO_EXTI_Callback-----------------------------------------

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002418:	d110      	bne.n	800243c <HAL_GPIO_EXTI_Callback+0x34>
		bluecounter++;
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_GPIO_EXTI_Callback+0x40>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	3301      	adds	r3, #1
 8002420:	b2da      	uxtb	r2, r3
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <HAL_GPIO_EXTI_Callback+0x40>)
 8002424:	701a      	strb	r2, [r3, #0]
		bluecounter%=4;
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <HAL_GPIO_EXTI_Callback+0x40>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	b2da      	uxtb	r2, r3
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_GPIO_EXTI_Callback+0x40>)
 8002432:	701a      	strb	r2, [r3, #0]

		//flag_gpioselftest = 1;
		VR_Cli.Mark.Flag_ger = VRF_GPIO_Runalltest;
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <HAL_GPIO_EXTI_Callback+0x44>)
 8002436:	2202      	movs	r2, #2
 8002438:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
//		trd |= ( GPIO_MODE_OUTPUT_PP << 4);

#endif

		}
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	20000560 	.word	0x20000560
 800244c:	20000584 	.word	0x20000584

08002450 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	Rx_Verita_engine_callBak(RxBufferMtCl, &VR_Cli); //// try using only 1 slot 9 Buffer
 8002458:	4905      	ldr	r1, [pc, #20]	; (8002470 <HAL_UART_RxCpltCallback+0x20>)
 800245a:	4806      	ldr	r0, [pc, #24]	; (8002474 <HAL_UART_RxCpltCallback+0x24>)
 800245c:	f7fe fd7e 	bl	8000f5c <Rx_Verita_engine_callBak>
	Tx_Rq_Verita_engine(&huart6, &VR_Cli);
 8002460:	4903      	ldr	r1, [pc, #12]	; (8002470 <HAL_UART_RxCpltCallback+0x20>)
 8002462:	4805      	ldr	r0, [pc, #20]	; (8002478 <HAL_UART_RxCpltCallback+0x28>)
 8002464:	f7fe fe70 	bl	8001148 <Tx_Rq_Verita_engine>
	//HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], 9);
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000584 	.word	0x20000584
 8002474:	200005e8 	.word	0x200005e8
 8002478:	200004a0 	.word	0x200004a0

0800247c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002480:	b672      	cpsid	i
}
 8002482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002484:	e7fe      	b.n	8002484 <Error_Handler+0x8>
	...

08002488 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <HAL_MspInit+0x4c>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	4a0f      	ldr	r2, [pc, #60]	; (80024d4 <HAL_MspInit+0x4c>)
 8002498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800249c:	6453      	str	r3, [r2, #68]	; 0x44
 800249e:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <HAL_MspInit+0x4c>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_MspInit+0x4c>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	4a08      	ldr	r2, [pc, #32]	; (80024d4 <HAL_MspInit+0x4c>)
 80024b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_MspInit+0x4c>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024c6:	2007      	movs	r0, #7
 80024c8:	f000 ffca 	bl	8003460 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40023800 	.word	0x40023800

080024d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a0b      	ldr	r2, [pc, #44]	; (8002514 <HAL_ADC_MspInit+0x3c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d10d      	bne.n	8002506 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <HAL_ADC_MspInit+0x40>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	4a09      	ldr	r2, [pc, #36]	; (8002518 <HAL_ADC_MspInit+0x40>)
 80024f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f8:	6453      	str	r3, [r2, #68]	; 0x44
 80024fa:	4b07      	ldr	r3, [pc, #28]	; (8002518 <HAL_ADC_MspInit+0x40>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002506:	bf00      	nop
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40012000 	.word	0x40012000
 8002518:	40023800 	.word	0x40023800

0800251c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a0b      	ldr	r2, [pc, #44]	; (8002558 <HAL_TIM_Base_MspInit+0x3c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d10d      	bne.n	800254a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_TIM_Base_MspInit+0x40>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	4a09      	ldr	r2, [pc, #36]	; (800255c <HAL_TIM_Base_MspInit+0x40>)
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	6413      	str	r3, [r2, #64]	; 0x40
 800253e:	4b07      	ldr	r3, [pc, #28]	; (800255c <HAL_TIM_Base_MspInit+0x40>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40000400 	.word	0x40000400
 800255c:	40023800 	.word	0x40023800

08002560 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 030c 	add.w	r3, r7, #12
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <HAL_TIM_MspPostInit+0x68>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d11d      	bne.n	80025be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	4b11      	ldr	r3, [pc, #68]	; (80025cc <HAL_TIM_MspPostInit+0x6c>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a10      	ldr	r2, [pc, #64]	; (80025cc <HAL_TIM_MspPostInit+0x6c>)
 800258c:	f043 0302 	orr.w	r3, r3, #2
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <HAL_TIM_MspPostInit+0x6c>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800259e:	2310      	movs	r3, #16
 80025a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025ae:	2302      	movs	r3, #2
 80025b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b2:	f107 030c 	add.w	r3, r7, #12
 80025b6:	4619      	mov	r1, r3
 80025b8:	4805      	ldr	r0, [pc, #20]	; (80025d0 <HAL_TIM_MspPostInit+0x70>)
 80025ba:	f001 fb03 	bl	8003bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80025be:	bf00      	nop
 80025c0:	3720      	adds	r7, #32
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40000400 	.word	0x40000400
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40020400 	.word	0x40020400

080025d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08c      	sub	sp, #48	; 0x30
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 031c 	add.w	r3, r7, #28
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a4a      	ldr	r2, [pc, #296]	; (800271c <HAL_UART_MspInit+0x148>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d12c      	bne.n	8002650 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	4b49      	ldr	r3, [pc, #292]	; (8002720 <HAL_UART_MspInit+0x14c>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4a48      	ldr	r2, [pc, #288]	; (8002720 <HAL_UART_MspInit+0x14c>)
 8002600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002604:	6413      	str	r3, [r2, #64]	; 0x40
 8002606:	4b46      	ldr	r3, [pc, #280]	; (8002720 <HAL_UART_MspInit+0x14c>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	4b42      	ldr	r3, [pc, #264]	; (8002720 <HAL_UART_MspInit+0x14c>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4a41      	ldr	r2, [pc, #260]	; (8002720 <HAL_UART_MspInit+0x14c>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6313      	str	r3, [r2, #48]	; 0x30
 8002622:	4b3f      	ldr	r3, [pc, #252]	; (8002720 <HAL_UART_MspInit+0x14c>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800262e:	230c      	movs	r3, #12
 8002630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263a:	2303      	movs	r3, #3
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800263e:	2307      	movs	r3, #7
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	f107 031c 	add.w	r3, r7, #28
 8002646:	4619      	mov	r1, r3
 8002648:	4836      	ldr	r0, [pc, #216]	; (8002724 <HAL_UART_MspInit+0x150>)
 800264a:	f001 fabb 	bl	8003bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800264e:	e060      	b.n	8002712 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART6)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a34      	ldr	r2, [pc, #208]	; (8002728 <HAL_UART_MspInit+0x154>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d15b      	bne.n	8002712 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART6_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	4b30      	ldr	r3, [pc, #192]	; (8002720 <HAL_UART_MspInit+0x14c>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	4a2f      	ldr	r2, [pc, #188]	; (8002720 <HAL_UART_MspInit+0x14c>)
 8002664:	f043 0320 	orr.w	r3, r3, #32
 8002668:	6453      	str	r3, [r2, #68]	; 0x44
 800266a:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <HAL_UART_MspInit+0x14c>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	4b29      	ldr	r3, [pc, #164]	; (8002720 <HAL_UART_MspInit+0x14c>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a28      	ldr	r2, [pc, #160]	; (8002720 <HAL_UART_MspInit+0x14c>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b26      	ldr	r3, [pc, #152]	; (8002720 <HAL_UART_MspInit+0x14c>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002692:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a0:	2303      	movs	r3, #3
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80026a4:	2308      	movs	r3, #8
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a8:	f107 031c 	add.w	r3, r7, #28
 80026ac:	4619      	mov	r1, r3
 80026ae:	481d      	ldr	r0, [pc, #116]	; (8002724 <HAL_UART_MspInit+0x150>)
 80026b0:	f001 fa88 	bl	8003bc4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80026b4:	4b1d      	ldr	r3, [pc, #116]	; (800272c <HAL_UART_MspInit+0x158>)
 80026b6:	4a1e      	ldr	r2, [pc, #120]	; (8002730 <HAL_UART_MspInit+0x15c>)
 80026b8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80026ba:	4b1c      	ldr	r3, [pc, #112]	; (800272c <HAL_UART_MspInit+0x158>)
 80026bc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80026c0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026c2:	4b1a      	ldr	r3, [pc, #104]	; (800272c <HAL_UART_MspInit+0x158>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026c8:	4b18      	ldr	r3, [pc, #96]	; (800272c <HAL_UART_MspInit+0x158>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026ce:	4b17      	ldr	r3, [pc, #92]	; (800272c <HAL_UART_MspInit+0x158>)
 80026d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026d4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <HAL_UART_MspInit+0x158>)
 80026d8:	2200      	movs	r2, #0
 80026da:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026dc:	4b13      	ldr	r3, [pc, #76]	; (800272c <HAL_UART_MspInit+0x158>)
 80026de:	2200      	movs	r2, #0
 80026e0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_UART_MspInit+0x158>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80026e8:	4b10      	ldr	r3, [pc, #64]	; (800272c <HAL_UART_MspInit+0x158>)
 80026ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026ee:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <HAL_UART_MspInit+0x158>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80026f6:	480d      	ldr	r0, [pc, #52]	; (800272c <HAL_UART_MspInit+0x158>)
 80026f8:	f000 fef4 	bl	80034e4 <HAL_DMA_Init>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8002702:	f7ff febb 	bl	800247c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a08      	ldr	r2, [pc, #32]	; (800272c <HAL_UART_MspInit+0x158>)
 800270a:	639a      	str	r2, [r3, #56]	; 0x38
 800270c:	4a07      	ldr	r2, [pc, #28]	; (800272c <HAL_UART_MspInit+0x158>)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002712:	bf00      	nop
 8002714:	3730      	adds	r7, #48	; 0x30
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40004400 	.word	0x40004400
 8002720:	40023800 	.word	0x40023800
 8002724:	40020000 	.word	0x40020000
 8002728:	40011400 	.word	0x40011400
 800272c:	200004e4 	.word	0x200004e4
 8002730:	40026428 	.word	0x40026428

08002734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002738:	e7fe      	b.n	8002738 <NMI_Handler+0x4>

0800273a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800273a:	b480      	push	{r7}
 800273c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800273e:	e7fe      	b.n	800273e <HardFault_Handler+0x4>

08002740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002744:	e7fe      	b.n	8002744 <MemManage_Handler+0x4>

08002746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800274a:	e7fe      	b.n	800274a <BusFault_Handler+0x4>

0800274c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002750:	e7fe      	b.n	8002750 <UsageFault_Handler+0x4>

08002752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002780:	f000 f968 	bl	8002a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}

08002788 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800278c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002790:	f001 fbd0 	bl	8003f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002794:	bf00      	nop
 8002796:	bd80      	pop	{r7, pc}

08002798 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <DMA2_Stream1_IRQHandler+0x10>)
 800279e:	f000 ffa7 	bl	80036f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	200004e4 	.word	0x200004e4

080027ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
	return 1;
 80027b0:	2301      	movs	r3, #1
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <_kill>:

int _kill(int pid, int sig)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027c6:	f003 fbdf 	bl	8005f88 <__errno>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2216      	movs	r2, #22
 80027ce:	601a      	str	r2, [r3, #0]
	return -1;
 80027d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <_exit>:

void _exit (int status)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027e4:	f04f 31ff 	mov.w	r1, #4294967295
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ffe7 	bl	80027bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80027ee:	e7fe      	b.n	80027ee <_exit+0x12>

080027f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	e00a      	b.n	8002818 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002802:	f3af 8000 	nop.w
 8002806:	4601      	mov	r1, r0
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	60ba      	str	r2, [r7, #8]
 800280e:	b2ca      	uxtb	r2, r1
 8002810:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	3301      	adds	r3, #1
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	429a      	cmp	r2, r3
 800281e:	dbf0      	blt.n	8002802 <_read+0x12>
	}

return len;
 8002820:	687b      	ldr	r3, [r7, #4]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b086      	sub	sp, #24
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	e009      	b.n	8002850 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	60ba      	str	r2, [r7, #8]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	3301      	adds	r3, #1
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	429a      	cmp	r2, r3
 8002856:	dbf1      	blt.n	800283c <_write+0x12>
	}
	return len;
 8002858:	687b      	ldr	r3, [r7, #4]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <_close>:

int _close(int file)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
	return -1;
 800286a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800288a:	605a      	str	r2, [r3, #4]
	return 0;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <_isatty>:

int _isatty(int file)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
	return 1;
 80028a2:	2301      	movs	r3, #1
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
	return 0;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028d4:	4a14      	ldr	r2, [pc, #80]	; (8002928 <_sbrk+0x5c>)
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <_sbrk+0x60>)
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028e0:	4b13      	ldr	r3, [pc, #76]	; (8002930 <_sbrk+0x64>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d102      	bne.n	80028ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <_sbrk+0x64>)
 80028ea:	4a12      	ldr	r2, [pc, #72]	; (8002934 <_sbrk+0x68>)
 80028ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <_sbrk+0x64>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d207      	bcs.n	800290c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028fc:	f003 fb44 	bl	8005f88 <__errno>
 8002900:	4603      	mov	r3, r0
 8002902:	220c      	movs	r2, #12
 8002904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002906:	f04f 33ff 	mov.w	r3, #4294967295
 800290a:	e009      	b.n	8002920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <_sbrk+0x64>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002912:	4b07      	ldr	r3, [pc, #28]	; (8002930 <_sbrk+0x64>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4413      	add	r3, r2
 800291a:	4a05      	ldr	r2, [pc, #20]	; (8002930 <_sbrk+0x64>)
 800291c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800291e:	68fb      	ldr	r3, [r7, #12]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20020000 	.word	0x20020000
 800292c:	00000400 	.word	0x00000400
 8002930:	20000658 	.word	0x20000658
 8002934:	20000670 	.word	0x20000670

08002938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <SystemInit+0x20>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002942:	4a05      	ldr	r2, [pc, #20]	; (8002958 <SystemInit+0x20>)
 8002944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800295c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002994 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002960:	480d      	ldr	r0, [pc, #52]	; (8002998 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002962:	490e      	ldr	r1, [pc, #56]	; (800299c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002964:	4a0e      	ldr	r2, [pc, #56]	; (80029a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002968:	e002      	b.n	8002970 <LoopCopyDataInit>

0800296a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800296a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800296c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800296e:	3304      	adds	r3, #4

08002970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002974:	d3f9      	bcc.n	800296a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002976:	4a0b      	ldr	r2, [pc, #44]	; (80029a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002978:	4c0b      	ldr	r4, [pc, #44]	; (80029a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800297a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800297c:	e001      	b.n	8002982 <LoopFillZerobss>

0800297e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800297e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002980:	3204      	adds	r2, #4

08002982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002984:	d3fb      	bcc.n	800297e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002986:	f7ff ffd7 	bl	8002938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800298a:	f003 fb03 	bl	8005f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800298e:	f7fe fea9 	bl	80016e4 <main>
  bx  lr    
 8002992:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002994:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800299c:	200003a0 	.word	0x200003a0
  ldr r2, =_sidata
 80029a0:	08009324 	.word	0x08009324
  ldr r2, =_sbss
 80029a4:	200003a0 	.word	0x200003a0
  ldr r4, =_ebss
 80029a8:	20000670 	.word	0x20000670

080029ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029ac:	e7fe      	b.n	80029ac <ADC_IRQHandler>
	...

080029b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <HAL_Init+0x40>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <HAL_Init+0x40>)
 80029ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_Init+0x40>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <HAL_Init+0x40>)
 80029c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029cc:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <HAL_Init+0x40>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a07      	ldr	r2, [pc, #28]	; (80029f0 <HAL_Init+0x40>)
 80029d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d8:	2003      	movs	r0, #3
 80029da:	f000 fd41 	bl	8003460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029de:	2000      	movs	r0, #0
 80029e0:	f000 f808 	bl	80029f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029e4:	f7ff fd50 	bl	8002488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40023c00 	.word	0x40023c00

080029f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029fc:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_InitTick+0x54>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <HAL_InitTick+0x58>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	4619      	mov	r1, r3
 8002a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fd59 	bl	80034ca <HAL_SYSTICK_Config>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e00e      	b.n	8002a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b0f      	cmp	r3, #15
 8002a26:	d80a      	bhi.n	8002a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a30:	f000 fd21 	bl	8003476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a34:	4a06      	ldr	r2, [pc, #24]	; (8002a50 <HAL_InitTick+0x5c>)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e000      	b.n	8002a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	200001c4 	.word	0x200001c4
 8002a4c:	200001cc 	.word	0x200001cc
 8002a50:	200001c8 	.word	0x200001c8

08002a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_IncTick+0x20>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_IncTick+0x24>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <HAL_IncTick+0x24>)
 8002a66:	6013      	str	r3, [r2, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	200001cc 	.word	0x200001cc
 8002a78:	2000065c 	.word	0x2000065c

08002a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <HAL_GetTick+0x14>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	2000065c 	.word	0x2000065c

08002a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a9c:	f7ff ffee 	bl	8002a7c <HAL_GetTick>
 8002aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d005      	beq.n	8002aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_Delay+0x44>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aba:	bf00      	nop
 8002abc:	f7ff ffde 	bl	8002a7c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d8f7      	bhi.n	8002abc <HAL_Delay+0x28>
  {
  }
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	200001cc 	.word	0x200001cc

08002adc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e033      	b.n	8002b5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff fcec 	bl	80024d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d118      	bne.n	8002b4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b22:	f023 0302 	bic.w	r3, r3, #2
 8002b26:	f043 0202 	orr.w	r2, r3, #2
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 faca 	bl	80030c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f023 0303 	bic.w	r3, r3, #3
 8002b42:	f043 0201 	orr.w	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
 8002b4a:	e001      	b.n	8002b50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_ADC_Start+0x1a>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e097      	b.n	8002cae <HAL_ADC_Start+0x14a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d018      	beq.n	8002bc6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ba4:	4b45      	ldr	r3, [pc, #276]	; (8002cbc <HAL_ADC_Start+0x158>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a45      	ldr	r2, [pc, #276]	; (8002cc0 <HAL_ADC_Start+0x15c>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	0c9a      	lsrs	r2, r3, #18
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	4413      	add	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002bb8:	e002      	b.n	8002bc0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f9      	bne.n	8002bba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d15f      	bne.n	8002c94 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bfe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c12:	d106      	bne.n	8002c22 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	f023 0206 	bic.w	r2, r3, #6
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	645a      	str	r2, [r3, #68]	; 0x44
 8002c20:	e002      	b.n	8002c28 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c30:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <HAL_ADC_Start+0x160>)
 8002c32:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c3c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10f      	bne.n	8002c6a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d129      	bne.n	8002cac <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	e020      	b.n	8002cac <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a16      	ldr	r2, [pc, #88]	; (8002cc8 <HAL_ADC_Start+0x164>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d11b      	bne.n	8002cac <HAL_ADC_Start+0x148>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d114      	bne.n	8002cac <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c90:	609a      	str	r2, [r3, #8]
 8002c92:	e00b      	b.n	8002cac <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f043 0210 	orr.w	r2, r3, #16
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca4:	f043 0201 	orr.w	r2, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	200001c4 	.word	0x200001c4
 8002cc0:	431bde83 	.word	0x431bde83
 8002cc4:	40012300 	.word	0x40012300
 8002cc8:	40012000 	.word	0x40012000

08002ccc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADC_Stop+0x16>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e021      	b.n	8002d26 <HAL_ADC_Stop+0x5a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d109      	bne.n	8002d1c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	f043 0201 	orr.w	r2, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4e:	d113      	bne.n	8002d78 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d5e:	d10b      	bne.n	8002d78 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	f043 0220 	orr.w	r2, r3, #32
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e063      	b.n	8002e40 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002d78:	f7ff fe80 	bl	8002a7c <HAL_GetTick>
 8002d7c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d7e:	e021      	b.n	8002dc4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d86:	d01d      	beq.n	8002dc4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d007      	beq.n	8002d9e <HAL_ADC_PollForConversion+0x6c>
 8002d8e:	f7ff fe75 	bl	8002a7c <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d212      	bcs.n	8002dc4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d00b      	beq.n	8002dc4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f043 0204 	orr.w	r2, r3, #4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e03d      	b.n	8002e40 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d1d6      	bne.n	8002d80 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f06f 0212 	mvn.w	r2, #18
 8002dda:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d123      	bne.n	8002e3e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d11f      	bne.n	8002e3e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d006      	beq.n	8002e1a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d111      	bne.n	8002e3e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d105      	bne.n	8002e3e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f043 0201 	orr.w	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x1c>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e113      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x244>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b09      	cmp	r3, #9
 8002e8e:	d925      	bls.n	8002edc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68d9      	ldr	r1, [r3, #12]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3b1e      	subs	r3, #30
 8002ea6:	2207      	movs	r2, #7
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43da      	mvns	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	400a      	ands	r2, r1
 8002eb4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68d9      	ldr	r1, [r3, #12]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	4603      	mov	r3, r0
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4403      	add	r3, r0
 8002ece:	3b1e      	subs	r3, #30
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	e022      	b.n	8002f22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6919      	ldr	r1, [r3, #16]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4613      	mov	r3, r2
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	4413      	add	r3, r2
 8002ef0:	2207      	movs	r2, #7
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	400a      	ands	r2, r1
 8002efe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6919      	ldr	r1, [r3, #16]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	4618      	mov	r0, r3
 8002f12:	4603      	mov	r3, r0
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4403      	add	r3, r0
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b06      	cmp	r3, #6
 8002f28:	d824      	bhi.n	8002f74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	3b05      	subs	r3, #5
 8002f3c:	221f      	movs	r2, #31
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43da      	mvns	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	400a      	ands	r2, r1
 8002f4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	4618      	mov	r0, r3
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	3b05      	subs	r3, #5
 8002f66:	fa00 f203 	lsl.w	r2, r0, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	635a      	str	r2, [r3, #52]	; 0x34
 8002f72:	e04c      	b.n	800300e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b0c      	cmp	r3, #12
 8002f7a:	d824      	bhi.n	8002fc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3b23      	subs	r3, #35	; 0x23
 8002f8e:	221f      	movs	r2, #31
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43da      	mvns	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	400a      	ands	r2, r1
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	4618      	mov	r0, r3
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3b23      	subs	r3, #35	; 0x23
 8002fb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
 8002fc4:	e023      	b.n	800300e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3b41      	subs	r3, #65	; 0x41
 8002fd8:	221f      	movs	r2, #31
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43da      	mvns	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	3b41      	subs	r3, #65	; 0x41
 8003002:	fa00 f203 	lsl.w	r2, r0, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800300e:	4b29      	ldr	r3, [pc, #164]	; (80030b4 <HAL_ADC_ConfigChannel+0x250>)
 8003010:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a28      	ldr	r2, [pc, #160]	; (80030b8 <HAL_ADC_ConfigChannel+0x254>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d10f      	bne.n	800303c <HAL_ADC_ConfigChannel+0x1d8>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b12      	cmp	r3, #18
 8003022:	d10b      	bne.n	800303c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1d      	ldr	r2, [pc, #116]	; (80030b8 <HAL_ADC_ConfigChannel+0x254>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d12b      	bne.n	800309e <HAL_ADC_ConfigChannel+0x23a>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1c      	ldr	r2, [pc, #112]	; (80030bc <HAL_ADC_ConfigChannel+0x258>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d003      	beq.n	8003058 <HAL_ADC_ConfigChannel+0x1f4>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b11      	cmp	r3, #17
 8003056:	d122      	bne.n	800309e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a11      	ldr	r2, [pc, #68]	; (80030bc <HAL_ADC_ConfigChannel+0x258>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d111      	bne.n	800309e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800307a:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <HAL_ADC_ConfigChannel+0x25c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a11      	ldr	r2, [pc, #68]	; (80030c4 <HAL_ADC_ConfigChannel+0x260>)
 8003080:	fba2 2303 	umull	r2, r3, r2, r3
 8003084:	0c9a      	lsrs	r2, r3, #18
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003090:	e002      	b.n	8003098 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	3b01      	subs	r3, #1
 8003096:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f9      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	40012300 	.word	0x40012300
 80030b8:	40012000 	.word	0x40012000
 80030bc:	10000012 	.word	0x10000012
 80030c0:	200001c4 	.word	0x200001c4
 80030c4:	431bde83 	.word	0x431bde83

080030c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030d0:	4b79      	ldr	r3, [pc, #484]	; (80032b8 <ADC_Init+0x1f0>)
 80030d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	431a      	orrs	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6859      	ldr	r1, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	021a      	lsls	r2, r3, #8
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003120:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003142:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6899      	ldr	r1, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315a:	4a58      	ldr	r2, [pc, #352]	; (80032bc <ADC_Init+0x1f4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d022      	beq.n	80031a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800316e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6899      	ldr	r1, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003190:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6899      	ldr	r1, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	609a      	str	r2, [r3, #8]
 80031a4:	e00f      	b.n	80031c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0202 	bic.w	r2, r2, #2
 80031d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6899      	ldr	r1, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	7e1b      	ldrb	r3, [r3, #24]
 80031e0:	005a      	lsls	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01b      	beq.n	800322c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003202:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003212:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6859      	ldr	r1, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	3b01      	subs	r3, #1
 8003220:	035a      	lsls	r2, r3, #13
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	e007      	b.n	800323c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800323a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800324a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	3b01      	subs	r3, #1
 8003258:	051a      	lsls	r2, r3, #20
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003270:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6899      	ldr	r1, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800327e:	025a      	lsls	r2, r3, #9
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003296:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6899      	ldr	r1, [r3, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	029a      	lsls	r2, r3, #10
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	40012300 	.word	0x40012300
 80032bc:	0f000001 	.word	0x0f000001

080032c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <__NVIC_SetPriorityGrouping+0x44>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032dc:	4013      	ands	r3, r2
 80032de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032f2:	4a04      	ldr	r2, [pc, #16]	; (8003304 <__NVIC_SetPriorityGrouping+0x44>)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	60d3      	str	r3, [r2, #12]
}
 80032f8:	bf00      	nop
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800330c:	4b04      	ldr	r3, [pc, #16]	; (8003320 <__NVIC_GetPriorityGrouping+0x18>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	0a1b      	lsrs	r3, r3, #8
 8003312:	f003 0307 	and.w	r3, r3, #7
}
 8003316:	4618      	mov	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800332e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003332:	2b00      	cmp	r3, #0
 8003334:	db0b      	blt.n	800334e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	f003 021f 	and.w	r2, r3, #31
 800333c:	4907      	ldr	r1, [pc, #28]	; (800335c <__NVIC_EnableIRQ+0x38>)
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	2001      	movs	r0, #1
 8003346:	fa00 f202 	lsl.w	r2, r0, r2
 800334a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	e000e100 	.word	0xe000e100

08003360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	6039      	str	r1, [r7, #0]
 800336a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003370:	2b00      	cmp	r3, #0
 8003372:	db0a      	blt.n	800338a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	b2da      	uxtb	r2, r3
 8003378:	490c      	ldr	r1, [pc, #48]	; (80033ac <__NVIC_SetPriority+0x4c>)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	0112      	lsls	r2, r2, #4
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	440b      	add	r3, r1
 8003384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003388:	e00a      	b.n	80033a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	b2da      	uxtb	r2, r3
 800338e:	4908      	ldr	r1, [pc, #32]	; (80033b0 <__NVIC_SetPriority+0x50>)
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	3b04      	subs	r3, #4
 8003398:	0112      	lsls	r2, r2, #4
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	440b      	add	r3, r1
 800339e:	761a      	strb	r2, [r3, #24]
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	e000e100 	.word	0xe000e100
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b089      	sub	sp, #36	; 0x24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f1c3 0307 	rsb	r3, r3, #7
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	bf28      	it	cs
 80033d2:	2304      	movcs	r3, #4
 80033d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3304      	adds	r3, #4
 80033da:	2b06      	cmp	r3, #6
 80033dc:	d902      	bls.n	80033e4 <NVIC_EncodePriority+0x30>
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	3b03      	subs	r3, #3
 80033e2:	e000      	b.n	80033e6 <NVIC_EncodePriority+0x32>
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e8:	f04f 32ff 	mov.w	r2, #4294967295
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43da      	mvns	r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	401a      	ands	r2, r3
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	fa01 f303 	lsl.w	r3, r1, r3
 8003406:	43d9      	mvns	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800340c:	4313      	orrs	r3, r2
         );
}
 800340e:	4618      	mov	r0, r3
 8003410:	3724      	adds	r7, #36	; 0x24
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
	...

0800341c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3b01      	subs	r3, #1
 8003428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800342c:	d301      	bcc.n	8003432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800342e:	2301      	movs	r3, #1
 8003430:	e00f      	b.n	8003452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003432:	4a0a      	ldr	r2, [pc, #40]	; (800345c <SysTick_Config+0x40>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3b01      	subs	r3, #1
 8003438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800343a:	210f      	movs	r1, #15
 800343c:	f04f 30ff 	mov.w	r0, #4294967295
 8003440:	f7ff ff8e 	bl	8003360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <SysTick_Config+0x40>)
 8003446:	2200      	movs	r2, #0
 8003448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800344a:	4b04      	ldr	r3, [pc, #16]	; (800345c <SysTick_Config+0x40>)
 800344c:	2207      	movs	r2, #7
 800344e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	e000e010 	.word	0xe000e010

08003460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff ff29 	bl	80032c0 <__NVIC_SetPriorityGrouping>
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003476:	b580      	push	{r7, lr}
 8003478:	b086      	sub	sp, #24
 800347a:	af00      	add	r7, sp, #0
 800347c:	4603      	mov	r3, r0
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
 8003482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003488:	f7ff ff3e 	bl	8003308 <__NVIC_GetPriorityGrouping>
 800348c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	6978      	ldr	r0, [r7, #20]
 8003494:	f7ff ff8e 	bl	80033b4 <NVIC_EncodePriority>
 8003498:	4602      	mov	r2, r0
 800349a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800349e:	4611      	mov	r1, r2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ff5d 	bl	8003360 <__NVIC_SetPriority>
}
 80034a6:	bf00      	nop
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	4603      	mov	r3, r0
 80034b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ff31 	bl	8003324 <__NVIC_EnableIRQ>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff ffa2 	bl	800341c <SysTick_Config>
 80034d8:	4603      	mov	r3, r0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034f0:	f7ff fac4 	bl	8002a7c <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e099      	b.n	8003634 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0201 	bic.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003520:	e00f      	b.n	8003542 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003522:	f7ff faab 	bl	8002a7c <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b05      	cmp	r3, #5
 800352e:	d908      	bls.n	8003542 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2203      	movs	r2, #3
 800353a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e078      	b.n	8003634 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e8      	bne.n	8003522 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4b38      	ldr	r3, [pc, #224]	; (800363c <HAL_DMA_Init+0x158>)
 800355c:	4013      	ands	r3, r2
 800355e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800356e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800357a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003586:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	2b04      	cmp	r3, #4
 800359a:	d107      	bne.n	80035ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a4:	4313      	orrs	r3, r2
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f023 0307 	bic.w	r3, r3, #7
 80035c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d117      	bne.n	8003606 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00e      	beq.n	8003606 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fa6f 	bl	8003acc <DMA_CheckFifoParam>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2240      	movs	r2, #64	; 0x40
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003602:	2301      	movs	r3, #1
 8003604:	e016      	b.n	8003634 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fa26 	bl	8003a60 <DMA_CalcBaseAndBitshift>
 8003614:	4603      	mov	r3, r0
 8003616:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	223f      	movs	r2, #63	; 0x3f
 800361e:	409a      	lsls	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	f010803f 	.word	0xf010803f

08003640 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003656:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_DMA_Start_IT+0x26>
 8003662:	2302      	movs	r3, #2
 8003664:	e040      	b.n	80036e8 <HAL_DMA_Start_IT+0xa8>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b01      	cmp	r3, #1
 8003678:	d12f      	bne.n	80036da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2202      	movs	r2, #2
 800367e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f9b8 	bl	8003a04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003698:	223f      	movs	r2, #63	; 0x3f
 800369a:	409a      	lsls	r2, r3
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0216 	orr.w	r2, r2, #22
 80036ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d007      	beq.n	80036c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0208 	orr.w	r2, r2, #8
 80036c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	e005      	b.n	80036e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036e2:	2302      	movs	r3, #2
 80036e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036fc:	4b8e      	ldr	r3, [pc, #568]	; (8003938 <HAL_DMA_IRQHandler+0x248>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a8e      	ldr	r2, [pc, #568]	; (800393c <HAL_DMA_IRQHandler+0x24c>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	0a9b      	lsrs	r3, r3, #10
 8003708:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371a:	2208      	movs	r2, #8
 800371c:	409a      	lsls	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4013      	ands	r3, r2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d01a      	beq.n	800375c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0204 	bic.w	r2, r2, #4
 8003742:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003748:	2208      	movs	r2, #8
 800374a:	409a      	lsls	r2, r3
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003754:	f043 0201 	orr.w	r2, r3, #1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003760:	2201      	movs	r2, #1
 8003762:	409a      	lsls	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d012      	beq.n	8003792 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00b      	beq.n	8003792 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377e:	2201      	movs	r2, #1
 8003780:	409a      	lsls	r2, r3
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378a:	f043 0202 	orr.w	r2, r3, #2
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003796:	2204      	movs	r2, #4
 8003798:	409a      	lsls	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4013      	ands	r3, r2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d012      	beq.n	80037c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00b      	beq.n	80037c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b4:	2204      	movs	r2, #4
 80037b6:	409a      	lsls	r2, r3
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c0:	f043 0204 	orr.w	r2, r3, #4
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037cc:	2210      	movs	r2, #16
 80037ce:	409a      	lsls	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d043      	beq.n	8003860 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d03c      	beq.n	8003860 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ea:	2210      	movs	r2, #16
 80037ec:	409a      	lsls	r2, r3
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d018      	beq.n	8003832 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d108      	bne.n	8003820 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d024      	beq.n	8003860 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	4798      	blx	r3
 800381e:	e01f      	b.n	8003860 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01b      	beq.n	8003860 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	4798      	blx	r3
 8003830:	e016      	b.n	8003860 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d107      	bne.n	8003850 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0208 	bic.w	r2, r2, #8
 800384e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003864:	2220      	movs	r2, #32
 8003866:	409a      	lsls	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4013      	ands	r3, r2
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 808f 	beq.w	8003990 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 8087 	beq.w	8003990 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003886:	2220      	movs	r2, #32
 8003888:	409a      	lsls	r2, r3
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b05      	cmp	r3, #5
 8003898:	d136      	bne.n	8003908 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0216 	bic.w	r2, r2, #22
 80038a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695a      	ldr	r2, [r3, #20]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d103      	bne.n	80038ca <HAL_DMA_IRQHandler+0x1da>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d007      	beq.n	80038da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0208 	bic.w	r2, r2, #8
 80038d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038de:	223f      	movs	r2, #63	; 0x3f
 80038e0:	409a      	lsls	r2, r3
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d07e      	beq.n	80039fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	4798      	blx	r3
        }
        return;
 8003906:	e079      	b.n	80039fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d01d      	beq.n	8003952 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10d      	bne.n	8003940 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003928:	2b00      	cmp	r3, #0
 800392a:	d031      	beq.n	8003990 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4798      	blx	r3
 8003934:	e02c      	b.n	8003990 <HAL_DMA_IRQHandler+0x2a0>
 8003936:	bf00      	nop
 8003938:	200001c4 	.word	0x200001c4
 800393c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003944:	2b00      	cmp	r3, #0
 8003946:	d023      	beq.n	8003990 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	4798      	blx	r3
 8003950:	e01e      	b.n	8003990 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10f      	bne.n	8003980 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0210 	bic.w	r2, r2, #16
 800396e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003994:	2b00      	cmp	r3, #0
 8003996:	d032      	beq.n	80039fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d022      	beq.n	80039ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2205      	movs	r2, #5
 80039a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0201 	bic.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	3301      	adds	r3, #1
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d307      	bcc.n	80039d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f2      	bne.n	80039bc <HAL_DMA_IRQHandler+0x2cc>
 80039d6:	e000      	b.n	80039da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80039d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d005      	beq.n	80039fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	4798      	blx	r3
 80039fa:	e000      	b.n	80039fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80039fc:	bf00      	nop
    }
  }
}
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b40      	cmp	r3, #64	; 0x40
 8003a30:	d108      	bne.n	8003a44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a42:	e007      	b.n	8003a54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	60da      	str	r2, [r3, #12]
}
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	3b10      	subs	r3, #16
 8003a70:	4a14      	ldr	r2, [pc, #80]	; (8003ac4 <DMA_CalcBaseAndBitshift+0x64>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	091b      	lsrs	r3, r3, #4
 8003a78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a7a:	4a13      	ldr	r2, [pc, #76]	; (8003ac8 <DMA_CalcBaseAndBitshift+0x68>)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4413      	add	r3, r2
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d909      	bls.n	8003aa2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a96:	f023 0303 	bic.w	r3, r3, #3
 8003a9a:	1d1a      	adds	r2, r3, #4
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	659a      	str	r2, [r3, #88]	; 0x58
 8003aa0:	e007      	b.n	8003ab2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003aaa:	f023 0303 	bic.w	r3, r3, #3
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	aaaaaaab 	.word	0xaaaaaaab
 8003ac8:	08008f34 	.word	0x08008f34

08003acc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d11f      	bne.n	8003b26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d856      	bhi.n	8003b9a <DMA_CheckFifoParam+0xce>
 8003aec:	a201      	add	r2, pc, #4	; (adr r2, 8003af4 <DMA_CheckFifoParam+0x28>)
 8003aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af2:	bf00      	nop
 8003af4:	08003b05 	.word	0x08003b05
 8003af8:	08003b17 	.word	0x08003b17
 8003afc:	08003b05 	.word	0x08003b05
 8003b00:	08003b9b 	.word	0x08003b9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d046      	beq.n	8003b9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b14:	e043      	b.n	8003b9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b1e:	d140      	bne.n	8003ba2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b24:	e03d      	b.n	8003ba2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b2e:	d121      	bne.n	8003b74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d837      	bhi.n	8003ba6 <DMA_CheckFifoParam+0xda>
 8003b36:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <DMA_CheckFifoParam+0x70>)
 8003b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3c:	08003b4d 	.word	0x08003b4d
 8003b40:	08003b53 	.word	0x08003b53
 8003b44:	08003b4d 	.word	0x08003b4d
 8003b48:	08003b65 	.word	0x08003b65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b50:	e030      	b.n	8003bb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d025      	beq.n	8003baa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b62:	e022      	b.n	8003baa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b6c:	d11f      	bne.n	8003bae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b72:	e01c      	b.n	8003bae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d903      	bls.n	8003b82 <DMA_CheckFifoParam+0xb6>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d003      	beq.n	8003b88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b80:	e018      	b.n	8003bb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
      break;
 8003b86:	e015      	b.n	8003bb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00e      	beq.n	8003bb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
      break;
 8003b98:	e00b      	b.n	8003bb2 <DMA_CheckFifoParam+0xe6>
      break;
 8003b9a:	bf00      	nop
 8003b9c:	e00a      	b.n	8003bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8003b9e:	bf00      	nop
 8003ba0:	e008      	b.n	8003bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ba2:	bf00      	nop
 8003ba4:	e006      	b.n	8003bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ba6:	bf00      	nop
 8003ba8:	e004      	b.n	8003bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8003baa:	bf00      	nop
 8003bac:	e002      	b.n	8003bb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bae:	bf00      	nop
 8003bb0:	e000      	b.n	8003bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bb2:	bf00      	nop
    }
  } 
  
  return status; 
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop

08003bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b089      	sub	sp, #36	; 0x24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	e159      	b.n	8003e94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003be0:	2201      	movs	r2, #1
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	f040 8148 	bne.w	8003e8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d005      	beq.n	8003c16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d130      	bne.n	8003c78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	2203      	movs	r2, #3
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43db      	mvns	r3, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	43db      	mvns	r3, r3
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	f003 0201 	and.w	r2, r3, #1
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d017      	beq.n	8003cb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	2203      	movs	r2, #3
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d123      	bne.n	8003d08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	08da      	lsrs	r2, r3, #3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3208      	adds	r2, #8
 8003cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	220f      	movs	r2, #15
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	08da      	lsrs	r2, r3, #3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3208      	adds	r2, #8
 8003d02:	69b9      	ldr	r1, [r7, #24]
 8003d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	2203      	movs	r2, #3
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 0203 	and.w	r2, r3, #3
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 80a2 	beq.w	8003e8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	4b57      	ldr	r3, [pc, #348]	; (8003eac <HAL_GPIO_Init+0x2e8>)
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	4a56      	ldr	r2, [pc, #344]	; (8003eac <HAL_GPIO_Init+0x2e8>)
 8003d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d58:	6453      	str	r3, [r2, #68]	; 0x44
 8003d5a:	4b54      	ldr	r3, [pc, #336]	; (8003eac <HAL_GPIO_Init+0x2e8>)
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d66:	4a52      	ldr	r2, [pc, #328]	; (8003eb0 <HAL_GPIO_Init+0x2ec>)
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	089b      	lsrs	r3, r3, #2
 8003d6c:	3302      	adds	r3, #2
 8003d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	220f      	movs	r2, #15
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43db      	mvns	r3, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4013      	ands	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a49      	ldr	r2, [pc, #292]	; (8003eb4 <HAL_GPIO_Init+0x2f0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d019      	beq.n	8003dc6 <HAL_GPIO_Init+0x202>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a48      	ldr	r2, [pc, #288]	; (8003eb8 <HAL_GPIO_Init+0x2f4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d013      	beq.n	8003dc2 <HAL_GPIO_Init+0x1fe>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a47      	ldr	r2, [pc, #284]	; (8003ebc <HAL_GPIO_Init+0x2f8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00d      	beq.n	8003dbe <HAL_GPIO_Init+0x1fa>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a46      	ldr	r2, [pc, #280]	; (8003ec0 <HAL_GPIO_Init+0x2fc>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d007      	beq.n	8003dba <HAL_GPIO_Init+0x1f6>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a45      	ldr	r2, [pc, #276]	; (8003ec4 <HAL_GPIO_Init+0x300>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d101      	bne.n	8003db6 <HAL_GPIO_Init+0x1f2>
 8003db2:	2304      	movs	r3, #4
 8003db4:	e008      	b.n	8003dc8 <HAL_GPIO_Init+0x204>
 8003db6:	2307      	movs	r3, #7
 8003db8:	e006      	b.n	8003dc8 <HAL_GPIO_Init+0x204>
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e004      	b.n	8003dc8 <HAL_GPIO_Init+0x204>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e002      	b.n	8003dc8 <HAL_GPIO_Init+0x204>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <HAL_GPIO_Init+0x204>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	69fa      	ldr	r2, [r7, #28]
 8003dca:	f002 0203 	and.w	r2, r2, #3
 8003dce:	0092      	lsls	r2, r2, #2
 8003dd0:	4093      	lsls	r3, r2
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dd8:	4935      	ldr	r1, [pc, #212]	; (8003eb0 <HAL_GPIO_Init+0x2ec>)
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	089b      	lsrs	r3, r3, #2
 8003dde:	3302      	adds	r3, #2
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003de6:	4b38      	ldr	r3, [pc, #224]	; (8003ec8 <HAL_GPIO_Init+0x304>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	43db      	mvns	r3, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	4013      	ands	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e0a:	4a2f      	ldr	r2, [pc, #188]	; (8003ec8 <HAL_GPIO_Init+0x304>)
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e10:	4b2d      	ldr	r3, [pc, #180]	; (8003ec8 <HAL_GPIO_Init+0x304>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e34:	4a24      	ldr	r2, [pc, #144]	; (8003ec8 <HAL_GPIO_Init+0x304>)
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e3a:	4b23      	ldr	r3, [pc, #140]	; (8003ec8 <HAL_GPIO_Init+0x304>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	43db      	mvns	r3, r3
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	4013      	ands	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e5e:	4a1a      	ldr	r2, [pc, #104]	; (8003ec8 <HAL_GPIO_Init+0x304>)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e64:	4b18      	ldr	r3, [pc, #96]	; (8003ec8 <HAL_GPIO_Init+0x304>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e88:	4a0f      	ldr	r2, [pc, #60]	; (8003ec8 <HAL_GPIO_Init+0x304>)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	3301      	adds	r3, #1
 8003e92:	61fb      	str	r3, [r7, #28]
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	2b0f      	cmp	r3, #15
 8003e98:	f67f aea2 	bls.w	8003be0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e9c:	bf00      	nop
 8003e9e:	bf00      	nop
 8003ea0:	3724      	adds	r7, #36	; 0x24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	40013800 	.word	0x40013800
 8003eb4:	40020000 	.word	0x40020000
 8003eb8:	40020400 	.word	0x40020400
 8003ebc:	40020800 	.word	0x40020800
 8003ec0:	40020c00 	.word	0x40020c00
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	40013c00 	.word	0x40013c00

08003ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	807b      	strh	r3, [r7, #2]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003edc:	787b      	ldrb	r3, [r7, #1]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ee2:	887a      	ldrh	r2, [r7, #2]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ee8:	e003      	b.n	8003ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003eea:	887b      	ldrh	r3, [r7, #2]
 8003eec:	041a      	lsls	r2, r3, #16
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	619a      	str	r2, [r3, #24]
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b085      	sub	sp, #20
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	460b      	mov	r3, r1
 8003f08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f10:	887a      	ldrh	r2, [r7, #2]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4013      	ands	r3, r2
 8003f16:	041a      	lsls	r2, r3, #16
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	43d9      	mvns	r1, r3
 8003f1c:	887b      	ldrh	r3, [r7, #2]
 8003f1e:	400b      	ands	r3, r1
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	619a      	str	r2, [r3, #24]
}
 8003f26:	bf00      	nop
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
	...

08003f34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f3e:	4b08      	ldr	r3, [pc, #32]	; (8003f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f40:	695a      	ldr	r2, [r3, #20]
 8003f42:	88fb      	ldrh	r3, [r7, #6]
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d006      	beq.n	8003f58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f4a:	4a05      	ldr	r2, [pc, #20]	; (8003f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f4c:	88fb      	ldrh	r3, [r7, #6]
 8003f4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f50:	88fb      	ldrh	r3, [r7, #6]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe fa58 	bl	8002408 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f58:	bf00      	nop
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40013c00 	.word	0x40013c00

08003f64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e267      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d075      	beq.n	800406e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f82:	4b88      	ldr	r3, [pc, #544]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d00c      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f8e:	4b85      	ldr	r3, [pc, #532]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d112      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f9a:	4b82      	ldr	r3, [pc, #520]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa6:	d10b      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa8:	4b7e      	ldr	r3, [pc, #504]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d05b      	beq.n	800406c <HAL_RCC_OscConfig+0x108>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d157      	bne.n	800406c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e242      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc8:	d106      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x74>
 8003fca:	4b76      	ldr	r3, [pc, #472]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a75      	ldr	r2, [pc, #468]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	e01d      	b.n	8004014 <HAL_RCC_OscConfig+0xb0>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x98>
 8003fe2:	4b70      	ldr	r3, [pc, #448]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a6f      	ldr	r2, [pc, #444]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	4b6d      	ldr	r3, [pc, #436]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a6c      	ldr	r2, [pc, #432]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	e00b      	b.n	8004014 <HAL_RCC_OscConfig+0xb0>
 8003ffc:	4b69      	ldr	r3, [pc, #420]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a68      	ldr	r2, [pc, #416]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	4b66      	ldr	r3, [pc, #408]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a65      	ldr	r2, [pc, #404]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 800400e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d013      	beq.n	8004044 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401c:	f7fe fd2e 	bl	8002a7c <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004024:	f7fe fd2a 	bl	8002a7c <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	; 0x64
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e207      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004036:	4b5b      	ldr	r3, [pc, #364]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0xc0>
 8004042:	e014      	b.n	800406e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004044:	f7fe fd1a 	bl	8002a7c <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800404c:	f7fe fd16 	bl	8002a7c <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b64      	cmp	r3, #100	; 0x64
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e1f3      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405e:	4b51      	ldr	r3, [pc, #324]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0xe8>
 800406a:	e000      	b.n	800406e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800406c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d063      	beq.n	8004142 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800407a:	4b4a      	ldr	r3, [pc, #296]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004086:	4b47      	ldr	r3, [pc, #284]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800408e:	2b08      	cmp	r3, #8
 8004090:	d11c      	bne.n	80040cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004092:	4b44      	ldr	r3, [pc, #272]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d116      	bne.n	80040cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409e:	4b41      	ldr	r3, [pc, #260]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d005      	beq.n	80040b6 <HAL_RCC_OscConfig+0x152>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d001      	beq.n	80040b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e1c7      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b6:	4b3b      	ldr	r3, [pc, #236]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	4937      	ldr	r1, [pc, #220]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ca:	e03a      	b.n	8004142 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d020      	beq.n	8004116 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d4:	4b34      	ldr	r3, [pc, #208]	; (80041a8 <HAL_RCC_OscConfig+0x244>)
 80040d6:	2201      	movs	r2, #1
 80040d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040da:	f7fe fccf 	bl	8002a7c <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040e2:	f7fe fccb 	bl	8002a7c <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e1a8      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f4:	4b2b      	ldr	r3, [pc, #172]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0f0      	beq.n	80040e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004100:	4b28      	ldr	r3, [pc, #160]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	4925      	ldr	r1, [pc, #148]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004110:	4313      	orrs	r3, r2
 8004112:	600b      	str	r3, [r1, #0]
 8004114:	e015      	b.n	8004142 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004116:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <HAL_RCC_OscConfig+0x244>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fe fcae 	bl	8002a7c <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004124:	f7fe fcaa 	bl	8002a7c <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e187      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004136:	4b1b      	ldr	r3, [pc, #108]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d036      	beq.n	80041bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d016      	beq.n	8004184 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004156:	4b15      	ldr	r3, [pc, #84]	; (80041ac <HAL_RCC_OscConfig+0x248>)
 8004158:	2201      	movs	r2, #1
 800415a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415c:	f7fe fc8e 	bl	8002a7c <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004164:	f7fe fc8a 	bl	8002a7c <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e167      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004176:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCC_OscConfig+0x200>
 8004182:	e01b      	b.n	80041bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004184:	4b09      	ldr	r3, [pc, #36]	; (80041ac <HAL_RCC_OscConfig+0x248>)
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418a:	f7fe fc77 	bl	8002a7c <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004190:	e00e      	b.n	80041b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004192:	f7fe fc73 	bl	8002a7c <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d907      	bls.n	80041b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e150      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
 80041a4:	40023800 	.word	0x40023800
 80041a8:	42470000 	.word	0x42470000
 80041ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b0:	4b88      	ldr	r3, [pc, #544]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1ea      	bne.n	8004192 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8097 	beq.w	80042f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ca:	2300      	movs	r3, #0
 80041cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ce:	4b81      	ldr	r3, [pc, #516]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10f      	bne.n	80041fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041da:	2300      	movs	r3, #0
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	4b7d      	ldr	r3, [pc, #500]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	4a7c      	ldr	r2, [pc, #496]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ea:	4b7a      	ldr	r3, [pc, #488]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f6:	2301      	movs	r3, #1
 80041f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fa:	4b77      	ldr	r3, [pc, #476]	; (80043d8 <HAL_RCC_OscConfig+0x474>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d118      	bne.n	8004238 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004206:	4b74      	ldr	r3, [pc, #464]	; (80043d8 <HAL_RCC_OscConfig+0x474>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a73      	ldr	r2, [pc, #460]	; (80043d8 <HAL_RCC_OscConfig+0x474>)
 800420c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004212:	f7fe fc33 	bl	8002a7c <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421a:	f7fe fc2f 	bl	8002a7c <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e10c      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422c:	4b6a      	ldr	r3, [pc, #424]	; (80043d8 <HAL_RCC_OscConfig+0x474>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d106      	bne.n	800424e <HAL_RCC_OscConfig+0x2ea>
 8004240:	4b64      	ldr	r3, [pc, #400]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004244:	4a63      	ldr	r2, [pc, #396]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	6713      	str	r3, [r2, #112]	; 0x70
 800424c:	e01c      	b.n	8004288 <HAL_RCC_OscConfig+0x324>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	2b05      	cmp	r3, #5
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x30c>
 8004256:	4b5f      	ldr	r3, [pc, #380]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425a:	4a5e      	ldr	r2, [pc, #376]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 800425c:	f043 0304 	orr.w	r3, r3, #4
 8004260:	6713      	str	r3, [r2, #112]	; 0x70
 8004262:	4b5c      	ldr	r3, [pc, #368]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	4a5b      	ldr	r2, [pc, #364]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	6713      	str	r3, [r2, #112]	; 0x70
 800426e:	e00b      	b.n	8004288 <HAL_RCC_OscConfig+0x324>
 8004270:	4b58      	ldr	r3, [pc, #352]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004274:	4a57      	ldr	r2, [pc, #348]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004276:	f023 0301 	bic.w	r3, r3, #1
 800427a:	6713      	str	r3, [r2, #112]	; 0x70
 800427c:	4b55      	ldr	r3, [pc, #340]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 800427e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004280:	4a54      	ldr	r2, [pc, #336]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004282:	f023 0304 	bic.w	r3, r3, #4
 8004286:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d015      	beq.n	80042bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004290:	f7fe fbf4 	bl	8002a7c <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004296:	e00a      	b.n	80042ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004298:	f7fe fbf0 	bl	8002a7c <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e0cb      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ae:	4b49      	ldr	r3, [pc, #292]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0ee      	beq.n	8004298 <HAL_RCC_OscConfig+0x334>
 80042ba:	e014      	b.n	80042e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042bc:	f7fe fbde 	bl	8002a7c <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c2:	e00a      	b.n	80042da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c4:	f7fe fbda 	bl	8002a7c <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e0b5      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042da:	4b3e      	ldr	r3, [pc, #248]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1ee      	bne.n	80042c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e6:	7dfb      	ldrb	r3, [r7, #23]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d105      	bne.n	80042f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ec:	4b39      	ldr	r3, [pc, #228]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	4a38      	ldr	r2, [pc, #224]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80042f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 80a1 	beq.w	8004444 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004302:	4b34      	ldr	r3, [pc, #208]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	2b08      	cmp	r3, #8
 800430c:	d05c      	beq.n	80043c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d141      	bne.n	800439a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004316:	4b31      	ldr	r3, [pc, #196]	; (80043dc <HAL_RCC_OscConfig+0x478>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431c:	f7fe fbae 	bl	8002a7c <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004324:	f7fe fbaa 	bl	8002a7c <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e087      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004336:	4b27      	ldr	r3, [pc, #156]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69da      	ldr	r2, [r3, #28]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	019b      	lsls	r3, r3, #6
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	085b      	lsrs	r3, r3, #1
 800435a:	3b01      	subs	r3, #1
 800435c:	041b      	lsls	r3, r3, #16
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	061b      	lsls	r3, r3, #24
 8004366:	491b      	ldr	r1, [pc, #108]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004368:	4313      	orrs	r3, r2
 800436a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800436c:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <HAL_RCC_OscConfig+0x478>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004372:	f7fe fb83 	bl	8002a7c <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437a:	f7fe fb7f 	bl	8002a7c <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e05c      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438c:	4b11      	ldr	r3, [pc, #68]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <HAL_RCC_OscConfig+0x416>
 8004398:	e054      	b.n	8004444 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439a:	4b10      	ldr	r3, [pc, #64]	; (80043dc <HAL_RCC_OscConfig+0x478>)
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a0:	f7fe fb6c 	bl	8002a7c <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a8:	f7fe fb68 	bl	8002a7c <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e045      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ba:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0x444>
 80043c6:	e03d      	b.n	8004444 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d107      	bne.n	80043e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e038      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
 80043d4:	40023800 	.word	0x40023800
 80043d8:	40007000 	.word	0x40007000
 80043dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043e0:	4b1b      	ldr	r3, [pc, #108]	; (8004450 <HAL_RCC_OscConfig+0x4ec>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d028      	beq.n	8004440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d121      	bne.n	8004440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004406:	429a      	cmp	r2, r3
 8004408:	d11a      	bne.n	8004440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004410:	4013      	ands	r3, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004416:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004418:	4293      	cmp	r3, r2
 800441a:	d111      	bne.n	8004440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	085b      	lsrs	r3, r3, #1
 8004428:	3b01      	subs	r3, #1
 800442a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800442c:	429a      	cmp	r2, r3
 800442e:	d107      	bne.n	8004440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40023800 	.word	0x40023800

08004454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0cc      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004468:	4b68      	ldr	r3, [pc, #416]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d90c      	bls.n	8004490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004476:	4b65      	ldr	r3, [pc, #404]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b63      	ldr	r3, [pc, #396]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0b8      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a8:	4b59      	ldr	r3, [pc, #356]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4a58      	ldr	r2, [pc, #352]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c0:	4b53      	ldr	r3, [pc, #332]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	4a52      	ldr	r2, [pc, #328]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044cc:	4b50      	ldr	r3, [pc, #320]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	494d      	ldr	r1, [pc, #308]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d044      	beq.n	8004574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f2:	4b47      	ldr	r3, [pc, #284]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d119      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e07f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d003      	beq.n	8004512 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800450e:	2b03      	cmp	r3, #3
 8004510:	d107      	bne.n	8004522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004512:	4b3f      	ldr	r3, [pc, #252]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e06f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004522:	4b3b      	ldr	r3, [pc, #236]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e067      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004532:	4b37      	ldr	r3, [pc, #220]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f023 0203 	bic.w	r2, r3, #3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4934      	ldr	r1, [pc, #208]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	4313      	orrs	r3, r2
 8004542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004544:	f7fe fa9a 	bl	8002a7c <HAL_GetTick>
 8004548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454a:	e00a      	b.n	8004562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800454c:	f7fe fa96 	bl	8002a7c <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	; 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e04f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004562:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 020c 	and.w	r2, r3, #12
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	429a      	cmp	r2, r3
 8004572:	d1eb      	bne.n	800454c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004574:	4b25      	ldr	r3, [pc, #148]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d20c      	bcs.n	800459c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004582:	4b22      	ldr	r3, [pc, #136]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458a:	4b20      	ldr	r3, [pc, #128]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e032      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a8:	4b19      	ldr	r3, [pc, #100]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4916      	ldr	r1, [pc, #88]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d009      	beq.n	80045da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045c6:	4b12      	ldr	r3, [pc, #72]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	490e      	ldr	r1, [pc, #56]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045da:	f000 f821 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 80045de:	4602      	mov	r2, r0
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	490a      	ldr	r1, [pc, #40]	; (8004614 <HAL_RCC_ClockConfig+0x1c0>)
 80045ec:	5ccb      	ldrb	r3, [r1, r3]
 80045ee:	fa22 f303 	lsr.w	r3, r2, r3
 80045f2:	4a09      	ldr	r2, [pc, #36]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 80045f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045f6:	4b09      	ldr	r3, [pc, #36]	; (800461c <HAL_RCC_ClockConfig+0x1c8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe f9fa 	bl	80029f4 <HAL_InitTick>

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40023c00 	.word	0x40023c00
 8004610:	40023800 	.word	0x40023800
 8004614:	08008f1c 	.word	0x08008f1c
 8004618:	200001c4 	.word	0x200001c4
 800461c:	200001c8 	.word	0x200001c8

08004620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004624:	b094      	sub	sp, #80	; 0x50
 8004626:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	647b      	str	r3, [r7, #68]	; 0x44
 800462c:	2300      	movs	r3, #0
 800462e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004630:	2300      	movs	r3, #0
 8004632:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004638:	4b79      	ldr	r3, [pc, #484]	; (8004820 <HAL_RCC_GetSysClockFreq+0x200>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 030c 	and.w	r3, r3, #12
 8004640:	2b08      	cmp	r3, #8
 8004642:	d00d      	beq.n	8004660 <HAL_RCC_GetSysClockFreq+0x40>
 8004644:	2b08      	cmp	r3, #8
 8004646:	f200 80e1 	bhi.w	800480c <HAL_RCC_GetSysClockFreq+0x1ec>
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_RCC_GetSysClockFreq+0x34>
 800464e:	2b04      	cmp	r3, #4
 8004650:	d003      	beq.n	800465a <HAL_RCC_GetSysClockFreq+0x3a>
 8004652:	e0db      	b.n	800480c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004654:	4b73      	ldr	r3, [pc, #460]	; (8004824 <HAL_RCC_GetSysClockFreq+0x204>)
 8004656:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004658:	e0db      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800465a:	4b73      	ldr	r3, [pc, #460]	; (8004828 <HAL_RCC_GetSysClockFreq+0x208>)
 800465c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800465e:	e0d8      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004660:	4b6f      	ldr	r3, [pc, #444]	; (8004820 <HAL_RCC_GetSysClockFreq+0x200>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004668:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800466a:	4b6d      	ldr	r3, [pc, #436]	; (8004820 <HAL_RCC_GetSysClockFreq+0x200>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d063      	beq.n	800473e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004676:	4b6a      	ldr	r3, [pc, #424]	; (8004820 <HAL_RCC_GetSysClockFreq+0x200>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	099b      	lsrs	r3, r3, #6
 800467c:	2200      	movs	r2, #0
 800467e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004680:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004688:	633b      	str	r3, [r7, #48]	; 0x30
 800468a:	2300      	movs	r3, #0
 800468c:	637b      	str	r3, [r7, #52]	; 0x34
 800468e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004692:	4622      	mov	r2, r4
 8004694:	462b      	mov	r3, r5
 8004696:	f04f 0000 	mov.w	r0, #0
 800469a:	f04f 0100 	mov.w	r1, #0
 800469e:	0159      	lsls	r1, r3, #5
 80046a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046a4:	0150      	lsls	r0, r2, #5
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	4621      	mov	r1, r4
 80046ac:	1a51      	subs	r1, r2, r1
 80046ae:	6139      	str	r1, [r7, #16]
 80046b0:	4629      	mov	r1, r5
 80046b2:	eb63 0301 	sbc.w	r3, r3, r1
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046c4:	4659      	mov	r1, fp
 80046c6:	018b      	lsls	r3, r1, #6
 80046c8:	4651      	mov	r1, sl
 80046ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046ce:	4651      	mov	r1, sl
 80046d0:	018a      	lsls	r2, r1, #6
 80046d2:	4651      	mov	r1, sl
 80046d4:	ebb2 0801 	subs.w	r8, r2, r1
 80046d8:	4659      	mov	r1, fp
 80046da:	eb63 0901 	sbc.w	r9, r3, r1
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046f2:	4690      	mov	r8, r2
 80046f4:	4699      	mov	r9, r3
 80046f6:	4623      	mov	r3, r4
 80046f8:	eb18 0303 	adds.w	r3, r8, r3
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	462b      	mov	r3, r5
 8004700:	eb49 0303 	adc.w	r3, r9, r3
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	f04f 0300 	mov.w	r3, #0
 800470e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004712:	4629      	mov	r1, r5
 8004714:	024b      	lsls	r3, r1, #9
 8004716:	4621      	mov	r1, r4
 8004718:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800471c:	4621      	mov	r1, r4
 800471e:	024a      	lsls	r2, r1, #9
 8004720:	4610      	mov	r0, r2
 8004722:	4619      	mov	r1, r3
 8004724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004726:	2200      	movs	r2, #0
 8004728:	62bb      	str	r3, [r7, #40]	; 0x28
 800472a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800472c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004730:	f7fc fa92 	bl	8000c58 <__aeabi_uldivmod>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4613      	mov	r3, r2
 800473a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800473c:	e058      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800473e:	4b38      	ldr	r3, [pc, #224]	; (8004820 <HAL_RCC_GetSysClockFreq+0x200>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	099b      	lsrs	r3, r3, #6
 8004744:	2200      	movs	r2, #0
 8004746:	4618      	mov	r0, r3
 8004748:	4611      	mov	r1, r2
 800474a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800474e:	623b      	str	r3, [r7, #32]
 8004750:	2300      	movs	r3, #0
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
 8004754:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004758:	4642      	mov	r2, r8
 800475a:	464b      	mov	r3, r9
 800475c:	f04f 0000 	mov.w	r0, #0
 8004760:	f04f 0100 	mov.w	r1, #0
 8004764:	0159      	lsls	r1, r3, #5
 8004766:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800476a:	0150      	lsls	r0, r2, #5
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4641      	mov	r1, r8
 8004772:	ebb2 0a01 	subs.w	sl, r2, r1
 8004776:	4649      	mov	r1, r9
 8004778:	eb63 0b01 	sbc.w	fp, r3, r1
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004788:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800478c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004790:	ebb2 040a 	subs.w	r4, r2, sl
 8004794:	eb63 050b 	sbc.w	r5, r3, fp
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	00eb      	lsls	r3, r5, #3
 80047a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047a6:	00e2      	lsls	r2, r4, #3
 80047a8:	4614      	mov	r4, r2
 80047aa:	461d      	mov	r5, r3
 80047ac:	4643      	mov	r3, r8
 80047ae:	18e3      	adds	r3, r4, r3
 80047b0:	603b      	str	r3, [r7, #0]
 80047b2:	464b      	mov	r3, r9
 80047b4:	eb45 0303 	adc.w	r3, r5, r3
 80047b8:	607b      	str	r3, [r7, #4]
 80047ba:	f04f 0200 	mov.w	r2, #0
 80047be:	f04f 0300 	mov.w	r3, #0
 80047c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047c6:	4629      	mov	r1, r5
 80047c8:	028b      	lsls	r3, r1, #10
 80047ca:	4621      	mov	r1, r4
 80047cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047d0:	4621      	mov	r1, r4
 80047d2:	028a      	lsls	r2, r1, #10
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047da:	2200      	movs	r2, #0
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	61fa      	str	r2, [r7, #28]
 80047e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047e4:	f7fc fa38 	bl	8000c58 <__aeabi_uldivmod>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4613      	mov	r3, r2
 80047ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047f0:	4b0b      	ldr	r3, [pc, #44]	; (8004820 <HAL_RCC_GetSysClockFreq+0x200>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	0c1b      	lsrs	r3, r3, #16
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	3301      	adds	r3, #1
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004800:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800480a:	e002      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800480c:	4b05      	ldr	r3, [pc, #20]	; (8004824 <HAL_RCC_GetSysClockFreq+0x204>)
 800480e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004814:	4618      	mov	r0, r3
 8004816:	3750      	adds	r7, #80	; 0x50
 8004818:	46bd      	mov	sp, r7
 800481a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800481e:	bf00      	nop
 8004820:	40023800 	.word	0x40023800
 8004824:	00f42400 	.word	0x00f42400
 8004828:	007a1200 	.word	0x007a1200

0800482c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004830:	4b03      	ldr	r3, [pc, #12]	; (8004840 <HAL_RCC_GetHCLKFreq+0x14>)
 8004832:	681b      	ldr	r3, [r3, #0]
}
 8004834:	4618      	mov	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	200001c4 	.word	0x200001c4

08004844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004848:	f7ff fff0 	bl	800482c <HAL_RCC_GetHCLKFreq>
 800484c:	4602      	mov	r2, r0
 800484e:	4b05      	ldr	r3, [pc, #20]	; (8004864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	0a9b      	lsrs	r3, r3, #10
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	4903      	ldr	r1, [pc, #12]	; (8004868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800485a:	5ccb      	ldrb	r3, [r1, r3]
 800485c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004860:	4618      	mov	r0, r3
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40023800 	.word	0x40023800
 8004868:	08008f2c 	.word	0x08008f2c

0800486c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004870:	f7ff ffdc 	bl	800482c <HAL_RCC_GetHCLKFreq>
 8004874:	4602      	mov	r2, r0
 8004876:	4b05      	ldr	r3, [pc, #20]	; (800488c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	0b5b      	lsrs	r3, r3, #13
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	4903      	ldr	r1, [pc, #12]	; (8004890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004882:	5ccb      	ldrb	r3, [r1, r3]
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004888:	4618      	mov	r0, r3
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40023800 	.word	0x40023800
 8004890:	08008f2c 	.word	0x08008f2c

08004894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e041      	b.n	800492a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fd fe2e 	bl	800251c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3304      	adds	r3, #4
 80048d0:	4619      	mov	r1, r3
 80048d2:	4610      	mov	r0, r2
 80048d4:	f000 fa10 	bl	8004cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b082      	sub	sp, #8
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e041      	b.n	80049c8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d106      	bne.n	800495e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f839 	bl	80049d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2202      	movs	r2, #2
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3304      	adds	r3, #4
 800496e:	4619      	mov	r1, r3
 8004970:	4610      	mov	r0, r2
 8004972:	f000 f9c1 	bl	8004cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e0ae      	b.n	8004b60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b0c      	cmp	r3, #12
 8004a0e:	f200 809f 	bhi.w	8004b50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a12:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004a4d 	.word	0x08004a4d
 8004a1c:	08004b51 	.word	0x08004b51
 8004a20:	08004b51 	.word	0x08004b51
 8004a24:	08004b51 	.word	0x08004b51
 8004a28:	08004a8d 	.word	0x08004a8d
 8004a2c:	08004b51 	.word	0x08004b51
 8004a30:	08004b51 	.word	0x08004b51
 8004a34:	08004b51 	.word	0x08004b51
 8004a38:	08004acf 	.word	0x08004acf
 8004a3c:	08004b51 	.word	0x08004b51
 8004a40:	08004b51 	.word	0x08004b51
 8004a44:	08004b51 	.word	0x08004b51
 8004a48:	08004b0f 	.word	0x08004b0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68b9      	ldr	r1, [r7, #8]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 f9d0 	bl	8004df8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0208 	orr.w	r2, r2, #8
 8004a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0204 	bic.w	r2, r2, #4
 8004a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6999      	ldr	r1, [r3, #24]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	619a      	str	r2, [r3, #24]
      break;
 8004a8a:	e064      	b.n	8004b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fa16 	bl	8004ec4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6999      	ldr	r1, [r3, #24]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	021a      	lsls	r2, r3, #8
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	619a      	str	r2, [r3, #24]
      break;
 8004acc:	e043      	b.n	8004b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fa61 	bl	8004f9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69da      	ldr	r2, [r3, #28]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0208 	orr.w	r2, r2, #8
 8004ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0204 	bic.w	r2, r2, #4
 8004af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69d9      	ldr	r1, [r3, #28]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	61da      	str	r2, [r3, #28]
      break;
 8004b0c:	e023      	b.n	8004b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 faab 	bl	8005070 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69d9      	ldr	r1, [r3, #28]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	021a      	lsls	r2, r3, #8
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	61da      	str	r2, [r3, #28]
      break;
 8004b4e:	e002      	b.n	8004b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	75fb      	strb	r3, [r7, #23]
      break;
 8004b54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d101      	bne.n	8004b84 <HAL_TIM_ConfigClockSource+0x1c>
 8004b80:	2302      	movs	r3, #2
 8004b82:	e0b4      	b.n	8004cee <HAL_TIM_ConfigClockSource+0x186>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004baa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bbc:	d03e      	beq.n	8004c3c <HAL_TIM_ConfigClockSource+0xd4>
 8004bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc2:	f200 8087 	bhi.w	8004cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bca:	f000 8086 	beq.w	8004cda <HAL_TIM_ConfigClockSource+0x172>
 8004bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd2:	d87f      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd4:	2b70      	cmp	r3, #112	; 0x70
 8004bd6:	d01a      	beq.n	8004c0e <HAL_TIM_ConfigClockSource+0xa6>
 8004bd8:	2b70      	cmp	r3, #112	; 0x70
 8004bda:	d87b      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bdc:	2b60      	cmp	r3, #96	; 0x60
 8004bde:	d050      	beq.n	8004c82 <HAL_TIM_ConfigClockSource+0x11a>
 8004be0:	2b60      	cmp	r3, #96	; 0x60
 8004be2:	d877      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004be4:	2b50      	cmp	r3, #80	; 0x50
 8004be6:	d03c      	beq.n	8004c62 <HAL_TIM_ConfigClockSource+0xfa>
 8004be8:	2b50      	cmp	r3, #80	; 0x50
 8004bea:	d873      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bec:	2b40      	cmp	r3, #64	; 0x40
 8004bee:	d058      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0x13a>
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d86f      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf4:	2b30      	cmp	r3, #48	; 0x30
 8004bf6:	d064      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004bf8:	2b30      	cmp	r3, #48	; 0x30
 8004bfa:	d86b      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	d060      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d867      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d05c      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c08:	2b10      	cmp	r3, #16
 8004c0a:	d05a      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c0c:	e062      	b.n	8004cd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	6899      	ldr	r1, [r3, #8]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f000 faf1 	bl	8005204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	609a      	str	r2, [r3, #8]
      break;
 8004c3a:	e04f      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	6899      	ldr	r1, [r3, #8]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f000 fada 	bl	8005204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c5e:	609a      	str	r2, [r3, #8]
      break;
 8004c60:	e03c      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	6859      	ldr	r1, [r3, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f000 fa4e 	bl	8005110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2150      	movs	r1, #80	; 0x50
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 faa7 	bl	80051ce <TIM_ITRx_SetConfig>
      break;
 8004c80:	e02c      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6859      	ldr	r1, [r3, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f000 fa6d 	bl	800516e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2160      	movs	r1, #96	; 0x60
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fa97 	bl	80051ce <TIM_ITRx_SetConfig>
      break;
 8004ca0:	e01c      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6859      	ldr	r1, [r3, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f000 fa2e 	bl	8005110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2140      	movs	r1, #64	; 0x40
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fa87 	bl	80051ce <TIM_ITRx_SetConfig>
      break;
 8004cc0:	e00c      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4610      	mov	r0, r2
 8004cce:	f000 fa7e 	bl	80051ce <TIM_ITRx_SetConfig>
      break;
 8004cd2:	e003      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd8:	e000      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a34      	ldr	r2, [pc, #208]	; (8004ddc <TIM_Base_SetConfig+0xe4>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00f      	beq.n	8004d30 <TIM_Base_SetConfig+0x38>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d16:	d00b      	beq.n	8004d30 <TIM_Base_SetConfig+0x38>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a31      	ldr	r2, [pc, #196]	; (8004de0 <TIM_Base_SetConfig+0xe8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d007      	beq.n	8004d30 <TIM_Base_SetConfig+0x38>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a30      	ldr	r2, [pc, #192]	; (8004de4 <TIM_Base_SetConfig+0xec>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d003      	beq.n	8004d30 <TIM_Base_SetConfig+0x38>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a2f      	ldr	r2, [pc, #188]	; (8004de8 <TIM_Base_SetConfig+0xf0>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d108      	bne.n	8004d42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a25      	ldr	r2, [pc, #148]	; (8004ddc <TIM_Base_SetConfig+0xe4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d01b      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d50:	d017      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a22      	ldr	r2, [pc, #136]	; (8004de0 <TIM_Base_SetConfig+0xe8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d013      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a21      	ldr	r2, [pc, #132]	; (8004de4 <TIM_Base_SetConfig+0xec>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00f      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a20      	ldr	r2, [pc, #128]	; (8004de8 <TIM_Base_SetConfig+0xf0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00b      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a1f      	ldr	r2, [pc, #124]	; (8004dec <TIM_Base_SetConfig+0xf4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d007      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a1e      	ldr	r2, [pc, #120]	; (8004df0 <TIM_Base_SetConfig+0xf8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d003      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a1d      	ldr	r2, [pc, #116]	; (8004df4 <TIM_Base_SetConfig+0xfc>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d108      	bne.n	8004d94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a08      	ldr	r2, [pc, #32]	; (8004ddc <TIM_Base_SetConfig+0xe4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d103      	bne.n	8004dc8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	615a      	str	r2, [r3, #20]
}
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40010000 	.word	0x40010000
 8004de0:	40000400 	.word	0x40000400
 8004de4:	40000800 	.word	0x40000800
 8004de8:	40000c00 	.word	0x40000c00
 8004dec:	40014000 	.word	0x40014000
 8004df0:	40014400 	.word	0x40014400
 8004df4:	40014800 	.word	0x40014800

08004df8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	f023 0201 	bic.w	r2, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0303 	bic.w	r3, r3, #3
 8004e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f023 0302 	bic.w	r3, r3, #2
 8004e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a1c      	ldr	r2, [pc, #112]	; (8004ec0 <TIM_OC1_SetConfig+0xc8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d10c      	bne.n	8004e6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f023 0308 	bic.w	r3, r3, #8
 8004e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f023 0304 	bic.w	r3, r3, #4
 8004e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a13      	ldr	r2, [pc, #76]	; (8004ec0 <TIM_OC1_SetConfig+0xc8>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d111      	bne.n	8004e9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	621a      	str	r2, [r3, #32]
}
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	40010000 	.word	0x40010000

08004ec4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f023 0210 	bic.w	r2, r3, #16
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	021b      	lsls	r3, r3, #8
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f023 0320 	bic.w	r3, r3, #32
 8004f0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a1e      	ldr	r2, [pc, #120]	; (8004f98 <TIM_OC2_SetConfig+0xd4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d10d      	bne.n	8004f40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a15      	ldr	r2, [pc, #84]	; (8004f98 <TIM_OC2_SetConfig+0xd4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d113      	bne.n	8004f70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	621a      	str	r2, [r3, #32]
}
 8004f8a:	bf00      	nop
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40010000 	.word	0x40010000

08004f9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0303 	bic.w	r3, r3, #3
 8004fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	021b      	lsls	r3, r3, #8
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a1d      	ldr	r2, [pc, #116]	; (800506c <TIM_OC3_SetConfig+0xd0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d10d      	bne.n	8005016 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005000:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	021b      	lsls	r3, r3, #8
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	4313      	orrs	r3, r2
 800500c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a14      	ldr	r2, [pc, #80]	; (800506c <TIM_OC3_SetConfig+0xd0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d113      	bne.n	8005046 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800502c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4313      	orrs	r3, r2
 8005044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	621a      	str	r2, [r3, #32]
}
 8005060:	bf00      	nop
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	40010000 	.word	0x40010000

08005070 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800509e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	021b      	lsls	r3, r3, #8
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	031b      	lsls	r3, r3, #12
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a10      	ldr	r2, [pc, #64]	; (800510c <TIM_OC4_SetConfig+0x9c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d109      	bne.n	80050e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	019b      	lsls	r3, r3, #6
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	621a      	str	r2, [r3, #32]
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40010000 	.word	0x40010000

08005110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f023 0201 	bic.w	r2, r3, #1
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800513a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f023 030a 	bic.w	r3, r3, #10
 800514c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	bf00      	nop
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800516e:	b480      	push	{r7}
 8005170:	b087      	sub	sp, #28
 8005172:	af00      	add	r7, sp, #0
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	f023 0210 	bic.w	r2, r3, #16
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005198:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	031b      	lsls	r3, r3, #12
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	621a      	str	r2, [r3, #32]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f043 0307 	orr.w	r3, r3, #7
 80051f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	609a      	str	r2, [r3, #8]
}
 80051f8:	bf00      	nop
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800521e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	021a      	lsls	r2, r3, #8
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	431a      	orrs	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	4313      	orrs	r3, r2
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	609a      	str	r2, [r3, #8]
}
 8005238:	bf00      	nop
 800523a:	371c      	adds	r7, #28
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005258:	2302      	movs	r3, #2
 800525a:	e050      	b.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005282:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1c      	ldr	r2, [pc, #112]	; (800530c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d018      	beq.n	80052d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a8:	d013      	beq.n	80052d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a18      	ldr	r2, [pc, #96]	; (8005310 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00e      	beq.n	80052d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a16      	ldr	r2, [pc, #88]	; (8005314 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d009      	beq.n	80052d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a15      	ldr	r2, [pc, #84]	; (8005318 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d004      	beq.n	80052d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a13      	ldr	r2, [pc, #76]	; (800531c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d10c      	bne.n	80052ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40010000 	.word	0x40010000
 8005310:	40000400 	.word	0x40000400
 8005314:	40000800 	.word	0x40000800
 8005318:	40000c00 	.word	0x40000c00
 800531c:	40014000 	.word	0x40014000

08005320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e03f      	b.n	80053b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d106      	bne.n	800534c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fd f944 	bl	80025d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2224      	movs	r2, #36	; 0x24
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fb9b 	bl	8005aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	691a      	ldr	r2, [r3, #16]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695a      	ldr	r2, [r3, #20]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b08a      	sub	sp, #40	; 0x28
 80053be:	af02      	add	r7, sp, #8
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	603b      	str	r3, [r7, #0]
 80053c6:	4613      	mov	r3, r2
 80053c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d17c      	bne.n	80054d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <HAL_UART_Transmit+0x2c>
 80053e0:	88fb      	ldrh	r3, [r7, #6]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e075      	b.n	80054d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_UART_Transmit+0x3e>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e06e      	b.n	80054d6 <HAL_UART_Transmit+0x11c>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2221      	movs	r2, #33	; 0x21
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800540e:	f7fd fb35 	bl	8002a7c <HAL_GetTick>
 8005412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	88fa      	ldrh	r2, [r7, #6]
 8005418:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	88fa      	ldrh	r2, [r7, #6]
 800541e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005428:	d108      	bne.n	800543c <HAL_UART_Transmit+0x82>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d104      	bne.n	800543c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005432:	2300      	movs	r3, #0
 8005434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	61bb      	str	r3, [r7, #24]
 800543a:	e003      	b.n	8005444 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005440:	2300      	movs	r3, #0
 8005442:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800544c:	e02a      	b.n	80054a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2200      	movs	r2, #0
 8005456:	2180      	movs	r1, #128	; 0x80
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 f988 	bl	800576e <UART_WaitOnFlagUntilTimeout>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e036      	b.n	80054d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10b      	bne.n	8005486 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800547c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	3302      	adds	r3, #2
 8005482:	61bb      	str	r3, [r7, #24]
 8005484:	e007      	b.n	8005496 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	781a      	ldrb	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	3301      	adds	r3, #1
 8005494:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800549a:	b29b      	uxth	r3, r3
 800549c:	3b01      	subs	r3, #1
 800549e:	b29a      	uxth	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1cf      	bne.n	800544e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2200      	movs	r2, #0
 80054b6:	2140      	movs	r1, #64	; 0x40
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 f958 	bl	800576e <UART_WaitOnFlagUntilTimeout>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e006      	b.n	80054d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	e000      	b.n	80054d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80054d4:	2302      	movs	r3, #2
  }
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3720      	adds	r7, #32
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b084      	sub	sp, #16
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	4613      	mov	r3, r2
 80054ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b20      	cmp	r3, #32
 80054f6:	d11d      	bne.n	8005534 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <HAL_UART_Receive_DMA+0x26>
 80054fe:	88fb      	ldrh	r3, [r7, #6]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e016      	b.n	8005536 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800550e:	2b01      	cmp	r3, #1
 8005510:	d101      	bne.n	8005516 <HAL_UART_Receive_DMA+0x38>
 8005512:	2302      	movs	r3, #2
 8005514:	e00f      	b.n	8005536 <HAL_UART_Receive_DMA+0x58>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005524:	88fb      	ldrh	r3, [r7, #6]
 8005526:	461a      	mov	r2, r3
 8005528:	68b9      	ldr	r1, [r7, #8]
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 f98e 	bl	800584c <UART_Start_Receive_DMA>
 8005530:	4603      	mov	r3, r0
 8005532:	e000      	b.n	8005536 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005534:	2302      	movs	r3, #2
  }
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	460b      	mov	r3, r1
 8005570:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b09c      	sub	sp, #112	; 0x70
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005596:	2b00      	cmp	r3, #0
 8005598:	d172      	bne.n	8005680 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800559a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800559c:	2200      	movs	r2, #0
 800559e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	330c      	adds	r3, #12
 80055a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055aa:	e853 3f00 	ldrex	r3, [r3]
 80055ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80055b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	330c      	adds	r3, #12
 80055be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80055c2:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055c8:	e841 2300 	strex	r3, r2, [r1]
 80055cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e5      	bne.n	80055a0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3314      	adds	r3, #20
 80055da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e6:	f023 0301 	bic.w	r3, r3, #1
 80055ea:	667b      	str	r3, [r7, #100]	; 0x64
 80055ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3314      	adds	r3, #20
 80055f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80055f4:	647a      	str	r2, [r7, #68]	; 0x44
 80055f6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055fc:	e841 2300 	strex	r3, r2, [r1]
 8005600:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e5      	bne.n	80055d4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3314      	adds	r3, #20
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	623b      	str	r3, [r7, #32]
   return(result);
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800561e:	663b      	str	r3, [r7, #96]	; 0x60
 8005620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3314      	adds	r3, #20
 8005626:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005628:	633a      	str	r2, [r7, #48]	; 0x30
 800562a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800562e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005630:	e841 2300 	strex	r3, r2, [r1]
 8005634:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e5      	bne.n	8005608 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800563c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800563e:	2220      	movs	r2, #32
 8005640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005648:	2b01      	cmp	r3, #1
 800564a:	d119      	bne.n	8005680 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800564c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	330c      	adds	r3, #12
 8005652:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	e853 3f00 	ldrex	r3, [r3]
 800565a:	60fb      	str	r3, [r7, #12]
   return(result);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0310 	bic.w	r3, r3, #16
 8005662:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	330c      	adds	r3, #12
 800566a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800566c:	61fa      	str	r2, [r7, #28]
 800566e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005670:	69b9      	ldr	r1, [r7, #24]
 8005672:	69fa      	ldr	r2, [r7, #28]
 8005674:	e841 2300 	strex	r3, r2, [r1]
 8005678:	617b      	str	r3, [r7, #20]
   return(result);
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1e5      	bne.n	800564c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005684:	2b01      	cmp	r3, #1
 8005686:	d106      	bne.n	8005696 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800568a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800568c:	4619      	mov	r1, r3
 800568e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005690:	f7ff ff69 	bl	8005566 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005694:	e002      	b.n	800569c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005696:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005698:	f7fc feda 	bl	8002450 <HAL_UART_RxCpltCallback>
}
 800569c:	bf00      	nop
 800569e:	3770      	adds	r7, #112	; 0x70
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d108      	bne.n	80056cc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056be:	085b      	lsrs	r3, r3, #1
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	4619      	mov	r1, r3
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f7ff ff4e 	bl	8005566 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056ca:	e002      	b.n	80056d2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f7ff ff36 	bl	800553e <HAL_UART_RxHalfCpltCallback>
}
 80056d2:	bf00      	nop
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b084      	sub	sp, #16
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f6:	2b80      	cmp	r3, #128	; 0x80
 80056f8:	bf0c      	ite	eq
 80056fa:	2301      	moveq	r3, #1
 80056fc:	2300      	movne	r3, #0
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b21      	cmp	r3, #33	; 0x21
 800570c:	d108      	bne.n	8005720 <UART_DMAError+0x46>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d005      	beq.n	8005720 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2200      	movs	r2, #0
 8005718:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800571a:	68b8      	ldr	r0, [r7, #8]
 800571c:	f000 f934 	bl	8005988 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572a:	2b40      	cmp	r3, #64	; 0x40
 800572c:	bf0c      	ite	eq
 800572e:	2301      	moveq	r3, #1
 8005730:	2300      	movne	r3, #0
 8005732:	b2db      	uxtb	r3, r3
 8005734:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b22      	cmp	r3, #34	; 0x22
 8005740:	d108      	bne.n	8005754 <UART_DMAError+0x7a>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2200      	movs	r2, #0
 800574c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800574e:	68b8      	ldr	r0, [r7, #8]
 8005750:	f000 f942 	bl	80059d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005758:	f043 0210 	orr.w	r2, r3, #16
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005760:	68b8      	ldr	r0, [r7, #8]
 8005762:	f7ff fef6 	bl	8005552 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005766:	bf00      	nop
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b090      	sub	sp, #64	; 0x40
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	603b      	str	r3, [r7, #0]
 800577a:	4613      	mov	r3, r2
 800577c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800577e:	e050      	b.n	8005822 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005786:	d04c      	beq.n	8005822 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800578a:	2b00      	cmp	r3, #0
 800578c:	d007      	beq.n	800579e <UART_WaitOnFlagUntilTimeout+0x30>
 800578e:	f7fd f975 	bl	8002a7c <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800579a:	429a      	cmp	r2, r3
 800579c:	d241      	bcs.n	8005822 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	330c      	adds	r3, #12
 80057a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	330c      	adds	r3, #12
 80057bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057be:	637a      	str	r2, [r7, #52]	; 0x34
 80057c0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e5      	bne.n	800579e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3314      	adds	r3, #20
 80057d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	613b      	str	r3, [r7, #16]
   return(result);
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f023 0301 	bic.w	r3, r3, #1
 80057e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3314      	adds	r3, #20
 80057f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057f2:	623a      	str	r2, [r7, #32]
 80057f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f6:	69f9      	ldr	r1, [r7, #28]
 80057f8:	6a3a      	ldr	r2, [r7, #32]
 80057fa:	e841 2300 	strex	r3, r2, [r1]
 80057fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1e5      	bne.n	80057d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2220      	movs	r2, #32
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2220      	movs	r2, #32
 8005812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e00f      	b.n	8005842 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4013      	ands	r3, r2
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	429a      	cmp	r2, r3
 8005830:	bf0c      	ite	eq
 8005832:	2301      	moveq	r3, #1
 8005834:	2300      	movne	r3, #0
 8005836:	b2db      	uxtb	r3, r3
 8005838:	461a      	mov	r2, r3
 800583a:	79fb      	ldrb	r3, [r7, #7]
 800583c:	429a      	cmp	r2, r3
 800583e:	d09f      	beq.n	8005780 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3740      	adds	r7, #64	; 0x40
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b098      	sub	sp, #96	; 0x60
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	4613      	mov	r3, r2
 8005858:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	88fa      	ldrh	r2, [r7, #6]
 8005864:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2222      	movs	r2, #34	; 0x22
 8005870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005878:	4a40      	ldr	r2, [pc, #256]	; (800597c <UART_Start_Receive_DMA+0x130>)
 800587a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	4a3f      	ldr	r2, [pc, #252]	; (8005980 <UART_Start_Receive_DMA+0x134>)
 8005882:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005888:	4a3e      	ldr	r2, [pc, #248]	; (8005984 <UART_Start_Receive_DMA+0x138>)
 800588a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	2200      	movs	r2, #0
 8005892:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005894:	f107 0308 	add.w	r3, r7, #8
 8005898:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3304      	adds	r3, #4
 80058a4:	4619      	mov	r1, r3
 80058a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	88fb      	ldrh	r3, [r7, #6]
 80058ac:	f7fd fec8 	bl	8003640 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80058b0:	2300      	movs	r3, #0
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	613b      	str	r3, [r7, #16]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d019      	beq.n	800590a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	330c      	adds	r3, #12
 80058dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	330c      	adds	r3, #12
 80058f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058f6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80058f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80058fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e5      	bne.n	80058d6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3314      	adds	r3, #20
 8005910:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005914:	e853 3f00 	ldrex	r3, [r3]
 8005918:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	f043 0301 	orr.w	r3, r3, #1
 8005920:	657b      	str	r3, [r7, #84]	; 0x54
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3314      	adds	r3, #20
 8005928:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800592a:	63ba      	str	r2, [r7, #56]	; 0x38
 800592c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005930:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005932:	e841 2300 	strex	r3, r2, [r1]
 8005936:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1e5      	bne.n	800590a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3314      	adds	r3, #20
 8005944:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	617b      	str	r3, [r7, #20]
   return(result);
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005954:	653b      	str	r3, [r7, #80]	; 0x50
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3314      	adds	r3, #20
 800595c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800595e:	627a      	str	r2, [r7, #36]	; 0x24
 8005960:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005962:	6a39      	ldr	r1, [r7, #32]
 8005964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	61fb      	str	r3, [r7, #28]
   return(result);
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1e5      	bne.n	800593e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3760      	adds	r7, #96	; 0x60
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	0800557f 	.word	0x0800557f
 8005980:	080056a5 	.word	0x080056a5
 8005984:	080056db 	.word	0x080056db

08005988 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005988:	b480      	push	{r7}
 800598a:	b089      	sub	sp, #36	; 0x24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	330c      	adds	r3, #12
 8005996:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	e853 3f00 	ldrex	r3, [r3]
 800599e:	60bb      	str	r3, [r7, #8]
   return(result);
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80059a6:	61fb      	str	r3, [r7, #28]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	330c      	adds	r3, #12
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	61ba      	str	r2, [r7, #24]
 80059b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b4:	6979      	ldr	r1, [r7, #20]
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	e841 2300 	strex	r3, r2, [r1]
 80059bc:	613b      	str	r3, [r7, #16]
   return(result);
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1e5      	bne.n	8005990 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80059cc:	bf00      	nop
 80059ce:	3724      	adds	r7, #36	; 0x24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059d8:	b480      	push	{r7}
 80059da:	b095      	sub	sp, #84	; 0x54
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330c      	adds	r3, #12
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a00:	643a      	str	r2, [r7, #64]	; 0x40
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a08:	e841 2300 	strex	r3, r2, [r1]
 8005a0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e5      	bne.n	80059e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3314      	adds	r3, #20
 8005a1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	f023 0301 	bic.w	r3, r3, #1
 8005a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3314      	adds	r3, #20
 8005a32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a3c:	e841 2300 	strex	r3, r2, [r1]
 8005a40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e5      	bne.n	8005a14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d119      	bne.n	8005a84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	330c      	adds	r3, #12
 8005a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	e853 3f00 	ldrex	r3, [r3]
 8005a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f023 0310 	bic.w	r3, r3, #16
 8005a66:	647b      	str	r3, [r7, #68]	; 0x44
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	330c      	adds	r3, #12
 8005a6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a70:	61ba      	str	r2, [r7, #24]
 8005a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a74:	6979      	ldr	r1, [r7, #20]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	e841 2300 	strex	r3, r2, [r1]
 8005a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e5      	bne.n	8005a50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a92:	bf00      	nop
 8005a94:	3754      	adds	r7, #84	; 0x54
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
	...

08005aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005aa4:	b0c0      	sub	sp, #256	; 0x100
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005abc:	68d9      	ldr	r1, [r3, #12]
 8005abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	ea40 0301 	orr.w	r3, r0, r1
 8005ac8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005af8:	f021 010c 	bic.w	r1, r1, #12
 8005afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b06:	430b      	orrs	r3, r1
 8005b08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1a:	6999      	ldr	r1, [r3, #24]
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	ea40 0301 	orr.w	r3, r0, r1
 8005b26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	4b8f      	ldr	r3, [pc, #572]	; (8005d6c <UART_SetConfig+0x2cc>)
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d005      	beq.n	8005b40 <UART_SetConfig+0xa0>
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	4b8d      	ldr	r3, [pc, #564]	; (8005d70 <UART_SetConfig+0x2d0>)
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d104      	bne.n	8005b4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b40:	f7fe fe94 	bl	800486c <HAL_RCC_GetPCLK2Freq>
 8005b44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b48:	e003      	b.n	8005b52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b4a:	f7fe fe7b 	bl	8004844 <HAL_RCC_GetPCLK1Freq>
 8005b4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b5c:	f040 810c 	bne.w	8005d78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b64:	2200      	movs	r2, #0
 8005b66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b72:	4622      	mov	r2, r4
 8005b74:	462b      	mov	r3, r5
 8005b76:	1891      	adds	r1, r2, r2
 8005b78:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b7a:	415b      	adcs	r3, r3
 8005b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b82:	4621      	mov	r1, r4
 8005b84:	eb12 0801 	adds.w	r8, r2, r1
 8005b88:	4629      	mov	r1, r5
 8005b8a:	eb43 0901 	adc.w	r9, r3, r1
 8005b8e:	f04f 0200 	mov.w	r2, #0
 8005b92:	f04f 0300 	mov.w	r3, #0
 8005b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ba2:	4690      	mov	r8, r2
 8005ba4:	4699      	mov	r9, r3
 8005ba6:	4623      	mov	r3, r4
 8005ba8:	eb18 0303 	adds.w	r3, r8, r3
 8005bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bb0:	462b      	mov	r3, r5
 8005bb2:	eb49 0303 	adc.w	r3, r9, r3
 8005bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005bca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005bce:	460b      	mov	r3, r1
 8005bd0:	18db      	adds	r3, r3, r3
 8005bd2:	653b      	str	r3, [r7, #80]	; 0x50
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	eb42 0303 	adc.w	r3, r2, r3
 8005bda:	657b      	str	r3, [r7, #84]	; 0x54
 8005bdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005be0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005be4:	f7fb f838 	bl	8000c58 <__aeabi_uldivmod>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4b61      	ldr	r3, [pc, #388]	; (8005d74 <UART_SetConfig+0x2d4>)
 8005bee:	fba3 2302 	umull	r2, r3, r3, r2
 8005bf2:	095b      	lsrs	r3, r3, #5
 8005bf4:	011c      	lsls	r4, r3, #4
 8005bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c08:	4642      	mov	r2, r8
 8005c0a:	464b      	mov	r3, r9
 8005c0c:	1891      	adds	r1, r2, r2
 8005c0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c10:	415b      	adcs	r3, r3
 8005c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c18:	4641      	mov	r1, r8
 8005c1a:	eb12 0a01 	adds.w	sl, r2, r1
 8005c1e:	4649      	mov	r1, r9
 8005c20:	eb43 0b01 	adc.w	fp, r3, r1
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	f04f 0300 	mov.w	r3, #0
 8005c2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c38:	4692      	mov	sl, r2
 8005c3a:	469b      	mov	fp, r3
 8005c3c:	4643      	mov	r3, r8
 8005c3e:	eb1a 0303 	adds.w	r3, sl, r3
 8005c42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c46:	464b      	mov	r3, r9
 8005c48:	eb4b 0303 	adc.w	r3, fp, r3
 8005c4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c64:	460b      	mov	r3, r1
 8005c66:	18db      	adds	r3, r3, r3
 8005c68:	643b      	str	r3, [r7, #64]	; 0x40
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	eb42 0303 	adc.w	r3, r2, r3
 8005c70:	647b      	str	r3, [r7, #68]	; 0x44
 8005c72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c7a:	f7fa ffed 	bl	8000c58 <__aeabi_uldivmod>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	4611      	mov	r1, r2
 8005c84:	4b3b      	ldr	r3, [pc, #236]	; (8005d74 <UART_SetConfig+0x2d4>)
 8005c86:	fba3 2301 	umull	r2, r3, r3, r1
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	2264      	movs	r2, #100	; 0x64
 8005c8e:	fb02 f303 	mul.w	r3, r2, r3
 8005c92:	1acb      	subs	r3, r1, r3
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c9a:	4b36      	ldr	r3, [pc, #216]	; (8005d74 <UART_SetConfig+0x2d4>)
 8005c9c:	fba3 2302 	umull	r2, r3, r3, r2
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ca8:	441c      	add	r4, r3
 8005caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005cb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	464b      	mov	r3, r9
 8005cc0:	1891      	adds	r1, r2, r2
 8005cc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cc4:	415b      	adcs	r3, r3
 8005cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ccc:	4641      	mov	r1, r8
 8005cce:	1851      	adds	r1, r2, r1
 8005cd0:	6339      	str	r1, [r7, #48]	; 0x30
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	414b      	adcs	r3, r1
 8005cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	f04f 0300 	mov.w	r3, #0
 8005ce0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ce4:	4659      	mov	r1, fp
 8005ce6:	00cb      	lsls	r3, r1, #3
 8005ce8:	4651      	mov	r1, sl
 8005cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cee:	4651      	mov	r1, sl
 8005cf0:	00ca      	lsls	r2, r1, #3
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	4642      	mov	r2, r8
 8005cfa:	189b      	adds	r3, r3, r2
 8005cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d00:	464b      	mov	r3, r9
 8005d02:	460a      	mov	r2, r1
 8005d04:	eb42 0303 	adc.w	r3, r2, r3
 8005d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d20:	460b      	mov	r3, r1
 8005d22:	18db      	adds	r3, r3, r3
 8005d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d26:	4613      	mov	r3, r2
 8005d28:	eb42 0303 	adc.w	r3, r2, r3
 8005d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d36:	f7fa ff8f 	bl	8000c58 <__aeabi_uldivmod>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4b0d      	ldr	r3, [pc, #52]	; (8005d74 <UART_SetConfig+0x2d4>)
 8005d40:	fba3 1302 	umull	r1, r3, r3, r2
 8005d44:	095b      	lsrs	r3, r3, #5
 8005d46:	2164      	movs	r1, #100	; 0x64
 8005d48:	fb01 f303 	mul.w	r3, r1, r3
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	3332      	adds	r3, #50	; 0x32
 8005d52:	4a08      	ldr	r2, [pc, #32]	; (8005d74 <UART_SetConfig+0x2d4>)
 8005d54:	fba2 2303 	umull	r2, r3, r2, r3
 8005d58:	095b      	lsrs	r3, r3, #5
 8005d5a:	f003 0207 	and.w	r2, r3, #7
 8005d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4422      	add	r2, r4
 8005d66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d68:	e105      	b.n	8005f76 <UART_SetConfig+0x4d6>
 8005d6a:	bf00      	nop
 8005d6c:	40011000 	.word	0x40011000
 8005d70:	40011400 	.word	0x40011400
 8005d74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d8a:	4642      	mov	r2, r8
 8005d8c:	464b      	mov	r3, r9
 8005d8e:	1891      	adds	r1, r2, r2
 8005d90:	6239      	str	r1, [r7, #32]
 8005d92:	415b      	adcs	r3, r3
 8005d94:	627b      	str	r3, [r7, #36]	; 0x24
 8005d96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d9a:	4641      	mov	r1, r8
 8005d9c:	1854      	adds	r4, r2, r1
 8005d9e:	4649      	mov	r1, r9
 8005da0:	eb43 0501 	adc.w	r5, r3, r1
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	f04f 0300 	mov.w	r3, #0
 8005dac:	00eb      	lsls	r3, r5, #3
 8005dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005db2:	00e2      	lsls	r2, r4, #3
 8005db4:	4614      	mov	r4, r2
 8005db6:	461d      	mov	r5, r3
 8005db8:	4643      	mov	r3, r8
 8005dba:	18e3      	adds	r3, r4, r3
 8005dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005dc0:	464b      	mov	r3, r9
 8005dc2:	eb45 0303 	adc.w	r3, r5, r3
 8005dc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005dd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005dda:	f04f 0200 	mov.w	r2, #0
 8005dde:	f04f 0300 	mov.w	r3, #0
 8005de2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005de6:	4629      	mov	r1, r5
 8005de8:	008b      	lsls	r3, r1, #2
 8005dea:	4621      	mov	r1, r4
 8005dec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005df0:	4621      	mov	r1, r4
 8005df2:	008a      	lsls	r2, r1, #2
 8005df4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005df8:	f7fa ff2e 	bl	8000c58 <__aeabi_uldivmod>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4b60      	ldr	r3, [pc, #384]	; (8005f84 <UART_SetConfig+0x4e4>)
 8005e02:	fba3 2302 	umull	r2, r3, r3, r2
 8005e06:	095b      	lsrs	r3, r3, #5
 8005e08:	011c      	lsls	r4, r3, #4
 8005e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e1c:	4642      	mov	r2, r8
 8005e1e:	464b      	mov	r3, r9
 8005e20:	1891      	adds	r1, r2, r2
 8005e22:	61b9      	str	r1, [r7, #24]
 8005e24:	415b      	adcs	r3, r3
 8005e26:	61fb      	str	r3, [r7, #28]
 8005e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e2c:	4641      	mov	r1, r8
 8005e2e:	1851      	adds	r1, r2, r1
 8005e30:	6139      	str	r1, [r7, #16]
 8005e32:	4649      	mov	r1, r9
 8005e34:	414b      	adcs	r3, r1
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	f04f 0200 	mov.w	r2, #0
 8005e3c:	f04f 0300 	mov.w	r3, #0
 8005e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e44:	4659      	mov	r1, fp
 8005e46:	00cb      	lsls	r3, r1, #3
 8005e48:	4651      	mov	r1, sl
 8005e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e4e:	4651      	mov	r1, sl
 8005e50:	00ca      	lsls	r2, r1, #3
 8005e52:	4610      	mov	r0, r2
 8005e54:	4619      	mov	r1, r3
 8005e56:	4603      	mov	r3, r0
 8005e58:	4642      	mov	r2, r8
 8005e5a:	189b      	adds	r3, r3, r2
 8005e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e60:	464b      	mov	r3, r9
 8005e62:	460a      	mov	r2, r1
 8005e64:	eb42 0303 	adc.w	r3, r2, r3
 8005e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e84:	4649      	mov	r1, r9
 8005e86:	008b      	lsls	r3, r1, #2
 8005e88:	4641      	mov	r1, r8
 8005e8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e8e:	4641      	mov	r1, r8
 8005e90:	008a      	lsls	r2, r1, #2
 8005e92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e96:	f7fa fedf 	bl	8000c58 <__aeabi_uldivmod>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4b39      	ldr	r3, [pc, #228]	; (8005f84 <UART_SetConfig+0x4e4>)
 8005ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ea4:	095b      	lsrs	r3, r3, #5
 8005ea6:	2164      	movs	r1, #100	; 0x64
 8005ea8:	fb01 f303 	mul.w	r3, r1, r3
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	3332      	adds	r3, #50	; 0x32
 8005eb2:	4a34      	ldr	r2, [pc, #208]	; (8005f84 <UART_SetConfig+0x4e4>)
 8005eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb8:	095b      	lsrs	r3, r3, #5
 8005eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ebe:	441c      	add	r4, r3
 8005ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	673b      	str	r3, [r7, #112]	; 0x70
 8005ec8:	677a      	str	r2, [r7, #116]	; 0x74
 8005eca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ece:	4642      	mov	r2, r8
 8005ed0:	464b      	mov	r3, r9
 8005ed2:	1891      	adds	r1, r2, r2
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	415b      	adcs	r3, r3
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ede:	4641      	mov	r1, r8
 8005ee0:	1851      	adds	r1, r2, r1
 8005ee2:	6039      	str	r1, [r7, #0]
 8005ee4:	4649      	mov	r1, r9
 8005ee6:	414b      	adcs	r3, r1
 8005ee8:	607b      	str	r3, [r7, #4]
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	f04f 0300 	mov.w	r3, #0
 8005ef2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ef6:	4659      	mov	r1, fp
 8005ef8:	00cb      	lsls	r3, r1, #3
 8005efa:	4651      	mov	r1, sl
 8005efc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f00:	4651      	mov	r1, sl
 8005f02:	00ca      	lsls	r2, r1, #3
 8005f04:	4610      	mov	r0, r2
 8005f06:	4619      	mov	r1, r3
 8005f08:	4603      	mov	r3, r0
 8005f0a:	4642      	mov	r2, r8
 8005f0c:	189b      	adds	r3, r3, r2
 8005f0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f10:	464b      	mov	r3, r9
 8005f12:	460a      	mov	r2, r1
 8005f14:	eb42 0303 	adc.w	r3, r2, r3
 8005f18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	663b      	str	r3, [r7, #96]	; 0x60
 8005f24:	667a      	str	r2, [r7, #100]	; 0x64
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	f04f 0300 	mov.w	r3, #0
 8005f2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f32:	4649      	mov	r1, r9
 8005f34:	008b      	lsls	r3, r1, #2
 8005f36:	4641      	mov	r1, r8
 8005f38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f3c:	4641      	mov	r1, r8
 8005f3e:	008a      	lsls	r2, r1, #2
 8005f40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f44:	f7fa fe88 	bl	8000c58 <__aeabi_uldivmod>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4b0d      	ldr	r3, [pc, #52]	; (8005f84 <UART_SetConfig+0x4e4>)
 8005f4e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	2164      	movs	r1, #100	; 0x64
 8005f56:	fb01 f303 	mul.w	r3, r1, r3
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	3332      	adds	r3, #50	; 0x32
 8005f60:	4a08      	ldr	r2, [pc, #32]	; (8005f84 <UART_SetConfig+0x4e4>)
 8005f62:	fba2 2303 	umull	r2, r3, r2, r3
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	f003 020f 	and.w	r2, r3, #15
 8005f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4422      	add	r2, r4
 8005f74:	609a      	str	r2, [r3, #8]
}
 8005f76:	bf00      	nop
 8005f78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f82:	bf00      	nop
 8005f84:	51eb851f 	.word	0x51eb851f

08005f88 <__errno>:
 8005f88:	4b01      	ldr	r3, [pc, #4]	; (8005f90 <__errno+0x8>)
 8005f8a:	6818      	ldr	r0, [r3, #0]
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	200001d0 	.word	0x200001d0

08005f94 <__libc_init_array>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	4d0d      	ldr	r5, [pc, #52]	; (8005fcc <__libc_init_array+0x38>)
 8005f98:	4c0d      	ldr	r4, [pc, #52]	; (8005fd0 <__libc_init_array+0x3c>)
 8005f9a:	1b64      	subs	r4, r4, r5
 8005f9c:	10a4      	asrs	r4, r4, #2
 8005f9e:	2600      	movs	r6, #0
 8005fa0:	42a6      	cmp	r6, r4
 8005fa2:	d109      	bne.n	8005fb8 <__libc_init_array+0x24>
 8005fa4:	4d0b      	ldr	r5, [pc, #44]	; (8005fd4 <__libc_init_array+0x40>)
 8005fa6:	4c0c      	ldr	r4, [pc, #48]	; (8005fd8 <__libc_init_array+0x44>)
 8005fa8:	f002 ff16 	bl	8008dd8 <_init>
 8005fac:	1b64      	subs	r4, r4, r5
 8005fae:	10a4      	asrs	r4, r4, #2
 8005fb0:	2600      	movs	r6, #0
 8005fb2:	42a6      	cmp	r6, r4
 8005fb4:	d105      	bne.n	8005fc2 <__libc_init_array+0x2e>
 8005fb6:	bd70      	pop	{r4, r5, r6, pc}
 8005fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fbc:	4798      	blx	r3
 8005fbe:	3601      	adds	r6, #1
 8005fc0:	e7ee      	b.n	8005fa0 <__libc_init_array+0xc>
 8005fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc6:	4798      	blx	r3
 8005fc8:	3601      	adds	r6, #1
 8005fca:	e7f2      	b.n	8005fb2 <__libc_init_array+0x1e>
 8005fcc:	0800931c 	.word	0x0800931c
 8005fd0:	0800931c 	.word	0x0800931c
 8005fd4:	0800931c 	.word	0x0800931c
 8005fd8:	08009320 	.word	0x08009320

08005fdc <memset>:
 8005fdc:	4402      	add	r2, r0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d100      	bne.n	8005fe6 <memset+0xa>
 8005fe4:	4770      	bx	lr
 8005fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fea:	e7f9      	b.n	8005fe0 <memset+0x4>

08005fec <__cvt>:
 8005fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff0:	ec55 4b10 	vmov	r4, r5, d0
 8005ff4:	2d00      	cmp	r5, #0
 8005ff6:	460e      	mov	r6, r1
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	462b      	mov	r3, r5
 8005ffc:	bfbb      	ittet	lt
 8005ffe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006002:	461d      	movlt	r5, r3
 8006004:	2300      	movge	r3, #0
 8006006:	232d      	movlt	r3, #45	; 0x2d
 8006008:	700b      	strb	r3, [r1, #0]
 800600a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800600c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006010:	4691      	mov	r9, r2
 8006012:	f023 0820 	bic.w	r8, r3, #32
 8006016:	bfbc      	itt	lt
 8006018:	4622      	movlt	r2, r4
 800601a:	4614      	movlt	r4, r2
 800601c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006020:	d005      	beq.n	800602e <__cvt+0x42>
 8006022:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006026:	d100      	bne.n	800602a <__cvt+0x3e>
 8006028:	3601      	adds	r6, #1
 800602a:	2102      	movs	r1, #2
 800602c:	e000      	b.n	8006030 <__cvt+0x44>
 800602e:	2103      	movs	r1, #3
 8006030:	ab03      	add	r3, sp, #12
 8006032:	9301      	str	r3, [sp, #4]
 8006034:	ab02      	add	r3, sp, #8
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	ec45 4b10 	vmov	d0, r4, r5
 800603c:	4653      	mov	r3, sl
 800603e:	4632      	mov	r2, r6
 8006040:	f000 fcfe 	bl	8006a40 <_dtoa_r>
 8006044:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006048:	4607      	mov	r7, r0
 800604a:	d102      	bne.n	8006052 <__cvt+0x66>
 800604c:	f019 0f01 	tst.w	r9, #1
 8006050:	d022      	beq.n	8006098 <__cvt+0xac>
 8006052:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006056:	eb07 0906 	add.w	r9, r7, r6
 800605a:	d110      	bne.n	800607e <__cvt+0x92>
 800605c:	783b      	ldrb	r3, [r7, #0]
 800605e:	2b30      	cmp	r3, #48	; 0x30
 8006060:	d10a      	bne.n	8006078 <__cvt+0x8c>
 8006062:	2200      	movs	r2, #0
 8006064:	2300      	movs	r3, #0
 8006066:	4620      	mov	r0, r4
 8006068:	4629      	mov	r1, r5
 800606a:	f7fa fd35 	bl	8000ad8 <__aeabi_dcmpeq>
 800606e:	b918      	cbnz	r0, 8006078 <__cvt+0x8c>
 8006070:	f1c6 0601 	rsb	r6, r6, #1
 8006074:	f8ca 6000 	str.w	r6, [sl]
 8006078:	f8da 3000 	ldr.w	r3, [sl]
 800607c:	4499      	add	r9, r3
 800607e:	2200      	movs	r2, #0
 8006080:	2300      	movs	r3, #0
 8006082:	4620      	mov	r0, r4
 8006084:	4629      	mov	r1, r5
 8006086:	f7fa fd27 	bl	8000ad8 <__aeabi_dcmpeq>
 800608a:	b108      	cbz	r0, 8006090 <__cvt+0xa4>
 800608c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006090:	2230      	movs	r2, #48	; 0x30
 8006092:	9b03      	ldr	r3, [sp, #12]
 8006094:	454b      	cmp	r3, r9
 8006096:	d307      	bcc.n	80060a8 <__cvt+0xbc>
 8006098:	9b03      	ldr	r3, [sp, #12]
 800609a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800609c:	1bdb      	subs	r3, r3, r7
 800609e:	4638      	mov	r0, r7
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	b004      	add	sp, #16
 80060a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a8:	1c59      	adds	r1, r3, #1
 80060aa:	9103      	str	r1, [sp, #12]
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	e7f0      	b.n	8006092 <__cvt+0xa6>

080060b0 <__exponent>:
 80060b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060b2:	4603      	mov	r3, r0
 80060b4:	2900      	cmp	r1, #0
 80060b6:	bfb8      	it	lt
 80060b8:	4249      	neglt	r1, r1
 80060ba:	f803 2b02 	strb.w	r2, [r3], #2
 80060be:	bfb4      	ite	lt
 80060c0:	222d      	movlt	r2, #45	; 0x2d
 80060c2:	222b      	movge	r2, #43	; 0x2b
 80060c4:	2909      	cmp	r1, #9
 80060c6:	7042      	strb	r2, [r0, #1]
 80060c8:	dd2a      	ble.n	8006120 <__exponent+0x70>
 80060ca:	f10d 0407 	add.w	r4, sp, #7
 80060ce:	46a4      	mov	ip, r4
 80060d0:	270a      	movs	r7, #10
 80060d2:	46a6      	mov	lr, r4
 80060d4:	460a      	mov	r2, r1
 80060d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80060da:	fb07 1516 	mls	r5, r7, r6, r1
 80060de:	3530      	adds	r5, #48	; 0x30
 80060e0:	2a63      	cmp	r2, #99	; 0x63
 80060e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80060e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80060ea:	4631      	mov	r1, r6
 80060ec:	dcf1      	bgt.n	80060d2 <__exponent+0x22>
 80060ee:	3130      	adds	r1, #48	; 0x30
 80060f0:	f1ae 0502 	sub.w	r5, lr, #2
 80060f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80060f8:	1c44      	adds	r4, r0, #1
 80060fa:	4629      	mov	r1, r5
 80060fc:	4561      	cmp	r1, ip
 80060fe:	d30a      	bcc.n	8006116 <__exponent+0x66>
 8006100:	f10d 0209 	add.w	r2, sp, #9
 8006104:	eba2 020e 	sub.w	r2, r2, lr
 8006108:	4565      	cmp	r5, ip
 800610a:	bf88      	it	hi
 800610c:	2200      	movhi	r2, #0
 800610e:	4413      	add	r3, r2
 8006110:	1a18      	subs	r0, r3, r0
 8006112:	b003      	add	sp, #12
 8006114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006116:	f811 2b01 	ldrb.w	r2, [r1], #1
 800611a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800611e:	e7ed      	b.n	80060fc <__exponent+0x4c>
 8006120:	2330      	movs	r3, #48	; 0x30
 8006122:	3130      	adds	r1, #48	; 0x30
 8006124:	7083      	strb	r3, [r0, #2]
 8006126:	70c1      	strb	r1, [r0, #3]
 8006128:	1d03      	adds	r3, r0, #4
 800612a:	e7f1      	b.n	8006110 <__exponent+0x60>

0800612c <_printf_float>:
 800612c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006130:	ed2d 8b02 	vpush	{d8}
 8006134:	b08d      	sub	sp, #52	; 0x34
 8006136:	460c      	mov	r4, r1
 8006138:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800613c:	4616      	mov	r6, r2
 800613e:	461f      	mov	r7, r3
 8006140:	4605      	mov	r5, r0
 8006142:	f001 fa6b 	bl	800761c <_localeconv_r>
 8006146:	f8d0 a000 	ldr.w	sl, [r0]
 800614a:	4650      	mov	r0, sl
 800614c:	f7fa f848 	bl	80001e0 <strlen>
 8006150:	2300      	movs	r3, #0
 8006152:	930a      	str	r3, [sp, #40]	; 0x28
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	9305      	str	r3, [sp, #20]
 8006158:	f8d8 3000 	ldr.w	r3, [r8]
 800615c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006160:	3307      	adds	r3, #7
 8006162:	f023 0307 	bic.w	r3, r3, #7
 8006166:	f103 0208 	add.w	r2, r3, #8
 800616a:	f8c8 2000 	str.w	r2, [r8]
 800616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006172:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006176:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800617a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800617e:	9307      	str	r3, [sp, #28]
 8006180:	f8cd 8018 	str.w	r8, [sp, #24]
 8006184:	ee08 0a10 	vmov	s16, r0
 8006188:	4b9f      	ldr	r3, [pc, #636]	; (8006408 <_printf_float+0x2dc>)
 800618a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800618e:	f04f 32ff 	mov.w	r2, #4294967295
 8006192:	f7fa fcd3 	bl	8000b3c <__aeabi_dcmpun>
 8006196:	bb88      	cbnz	r0, 80061fc <_printf_float+0xd0>
 8006198:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800619c:	4b9a      	ldr	r3, [pc, #616]	; (8006408 <_printf_float+0x2dc>)
 800619e:	f04f 32ff 	mov.w	r2, #4294967295
 80061a2:	f7fa fcad 	bl	8000b00 <__aeabi_dcmple>
 80061a6:	bb48      	cbnz	r0, 80061fc <_printf_float+0xd0>
 80061a8:	2200      	movs	r2, #0
 80061aa:	2300      	movs	r3, #0
 80061ac:	4640      	mov	r0, r8
 80061ae:	4649      	mov	r1, r9
 80061b0:	f7fa fc9c 	bl	8000aec <__aeabi_dcmplt>
 80061b4:	b110      	cbz	r0, 80061bc <_printf_float+0x90>
 80061b6:	232d      	movs	r3, #45	; 0x2d
 80061b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061bc:	4b93      	ldr	r3, [pc, #588]	; (800640c <_printf_float+0x2e0>)
 80061be:	4894      	ldr	r0, [pc, #592]	; (8006410 <_printf_float+0x2e4>)
 80061c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80061c4:	bf94      	ite	ls
 80061c6:	4698      	movls	r8, r3
 80061c8:	4680      	movhi	r8, r0
 80061ca:	2303      	movs	r3, #3
 80061cc:	6123      	str	r3, [r4, #16]
 80061ce:	9b05      	ldr	r3, [sp, #20]
 80061d0:	f023 0204 	bic.w	r2, r3, #4
 80061d4:	6022      	str	r2, [r4, #0]
 80061d6:	f04f 0900 	mov.w	r9, #0
 80061da:	9700      	str	r7, [sp, #0]
 80061dc:	4633      	mov	r3, r6
 80061de:	aa0b      	add	r2, sp, #44	; 0x2c
 80061e0:	4621      	mov	r1, r4
 80061e2:	4628      	mov	r0, r5
 80061e4:	f000 f9d8 	bl	8006598 <_printf_common>
 80061e8:	3001      	adds	r0, #1
 80061ea:	f040 8090 	bne.w	800630e <_printf_float+0x1e2>
 80061ee:	f04f 30ff 	mov.w	r0, #4294967295
 80061f2:	b00d      	add	sp, #52	; 0x34
 80061f4:	ecbd 8b02 	vpop	{d8}
 80061f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061fc:	4642      	mov	r2, r8
 80061fe:	464b      	mov	r3, r9
 8006200:	4640      	mov	r0, r8
 8006202:	4649      	mov	r1, r9
 8006204:	f7fa fc9a 	bl	8000b3c <__aeabi_dcmpun>
 8006208:	b140      	cbz	r0, 800621c <_printf_float+0xf0>
 800620a:	464b      	mov	r3, r9
 800620c:	2b00      	cmp	r3, #0
 800620e:	bfbc      	itt	lt
 8006210:	232d      	movlt	r3, #45	; 0x2d
 8006212:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006216:	487f      	ldr	r0, [pc, #508]	; (8006414 <_printf_float+0x2e8>)
 8006218:	4b7f      	ldr	r3, [pc, #508]	; (8006418 <_printf_float+0x2ec>)
 800621a:	e7d1      	b.n	80061c0 <_printf_float+0x94>
 800621c:	6863      	ldr	r3, [r4, #4]
 800621e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006222:	9206      	str	r2, [sp, #24]
 8006224:	1c5a      	adds	r2, r3, #1
 8006226:	d13f      	bne.n	80062a8 <_printf_float+0x17c>
 8006228:	2306      	movs	r3, #6
 800622a:	6063      	str	r3, [r4, #4]
 800622c:	9b05      	ldr	r3, [sp, #20]
 800622e:	6861      	ldr	r1, [r4, #4]
 8006230:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006234:	2300      	movs	r3, #0
 8006236:	9303      	str	r3, [sp, #12]
 8006238:	ab0a      	add	r3, sp, #40	; 0x28
 800623a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800623e:	ab09      	add	r3, sp, #36	; 0x24
 8006240:	ec49 8b10 	vmov	d0, r8, r9
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	6022      	str	r2, [r4, #0]
 8006248:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800624c:	4628      	mov	r0, r5
 800624e:	f7ff fecd 	bl	8005fec <__cvt>
 8006252:	9b06      	ldr	r3, [sp, #24]
 8006254:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006256:	2b47      	cmp	r3, #71	; 0x47
 8006258:	4680      	mov	r8, r0
 800625a:	d108      	bne.n	800626e <_printf_float+0x142>
 800625c:	1cc8      	adds	r0, r1, #3
 800625e:	db02      	blt.n	8006266 <_printf_float+0x13a>
 8006260:	6863      	ldr	r3, [r4, #4]
 8006262:	4299      	cmp	r1, r3
 8006264:	dd41      	ble.n	80062ea <_printf_float+0x1be>
 8006266:	f1ab 0b02 	sub.w	fp, fp, #2
 800626a:	fa5f fb8b 	uxtb.w	fp, fp
 800626e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006272:	d820      	bhi.n	80062b6 <_printf_float+0x18a>
 8006274:	3901      	subs	r1, #1
 8006276:	465a      	mov	r2, fp
 8006278:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800627c:	9109      	str	r1, [sp, #36]	; 0x24
 800627e:	f7ff ff17 	bl	80060b0 <__exponent>
 8006282:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006284:	1813      	adds	r3, r2, r0
 8006286:	2a01      	cmp	r2, #1
 8006288:	4681      	mov	r9, r0
 800628a:	6123      	str	r3, [r4, #16]
 800628c:	dc02      	bgt.n	8006294 <_printf_float+0x168>
 800628e:	6822      	ldr	r2, [r4, #0]
 8006290:	07d2      	lsls	r2, r2, #31
 8006292:	d501      	bpl.n	8006298 <_printf_float+0x16c>
 8006294:	3301      	adds	r3, #1
 8006296:	6123      	str	r3, [r4, #16]
 8006298:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800629c:	2b00      	cmp	r3, #0
 800629e:	d09c      	beq.n	80061da <_printf_float+0xae>
 80062a0:	232d      	movs	r3, #45	; 0x2d
 80062a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062a6:	e798      	b.n	80061da <_printf_float+0xae>
 80062a8:	9a06      	ldr	r2, [sp, #24]
 80062aa:	2a47      	cmp	r2, #71	; 0x47
 80062ac:	d1be      	bne.n	800622c <_printf_float+0x100>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1bc      	bne.n	800622c <_printf_float+0x100>
 80062b2:	2301      	movs	r3, #1
 80062b4:	e7b9      	b.n	800622a <_printf_float+0xfe>
 80062b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80062ba:	d118      	bne.n	80062ee <_printf_float+0x1c2>
 80062bc:	2900      	cmp	r1, #0
 80062be:	6863      	ldr	r3, [r4, #4]
 80062c0:	dd0b      	ble.n	80062da <_printf_float+0x1ae>
 80062c2:	6121      	str	r1, [r4, #16]
 80062c4:	b913      	cbnz	r3, 80062cc <_printf_float+0x1a0>
 80062c6:	6822      	ldr	r2, [r4, #0]
 80062c8:	07d0      	lsls	r0, r2, #31
 80062ca:	d502      	bpl.n	80062d2 <_printf_float+0x1a6>
 80062cc:	3301      	adds	r3, #1
 80062ce:	440b      	add	r3, r1
 80062d0:	6123      	str	r3, [r4, #16]
 80062d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80062d4:	f04f 0900 	mov.w	r9, #0
 80062d8:	e7de      	b.n	8006298 <_printf_float+0x16c>
 80062da:	b913      	cbnz	r3, 80062e2 <_printf_float+0x1b6>
 80062dc:	6822      	ldr	r2, [r4, #0]
 80062de:	07d2      	lsls	r2, r2, #31
 80062e0:	d501      	bpl.n	80062e6 <_printf_float+0x1ba>
 80062e2:	3302      	adds	r3, #2
 80062e4:	e7f4      	b.n	80062d0 <_printf_float+0x1a4>
 80062e6:	2301      	movs	r3, #1
 80062e8:	e7f2      	b.n	80062d0 <_printf_float+0x1a4>
 80062ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80062ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062f0:	4299      	cmp	r1, r3
 80062f2:	db05      	blt.n	8006300 <_printf_float+0x1d4>
 80062f4:	6823      	ldr	r3, [r4, #0]
 80062f6:	6121      	str	r1, [r4, #16]
 80062f8:	07d8      	lsls	r0, r3, #31
 80062fa:	d5ea      	bpl.n	80062d2 <_printf_float+0x1a6>
 80062fc:	1c4b      	adds	r3, r1, #1
 80062fe:	e7e7      	b.n	80062d0 <_printf_float+0x1a4>
 8006300:	2900      	cmp	r1, #0
 8006302:	bfd4      	ite	le
 8006304:	f1c1 0202 	rsble	r2, r1, #2
 8006308:	2201      	movgt	r2, #1
 800630a:	4413      	add	r3, r2
 800630c:	e7e0      	b.n	80062d0 <_printf_float+0x1a4>
 800630e:	6823      	ldr	r3, [r4, #0]
 8006310:	055a      	lsls	r2, r3, #21
 8006312:	d407      	bmi.n	8006324 <_printf_float+0x1f8>
 8006314:	6923      	ldr	r3, [r4, #16]
 8006316:	4642      	mov	r2, r8
 8006318:	4631      	mov	r1, r6
 800631a:	4628      	mov	r0, r5
 800631c:	47b8      	blx	r7
 800631e:	3001      	adds	r0, #1
 8006320:	d12c      	bne.n	800637c <_printf_float+0x250>
 8006322:	e764      	b.n	80061ee <_printf_float+0xc2>
 8006324:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006328:	f240 80e0 	bls.w	80064ec <_printf_float+0x3c0>
 800632c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006330:	2200      	movs	r2, #0
 8006332:	2300      	movs	r3, #0
 8006334:	f7fa fbd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006338:	2800      	cmp	r0, #0
 800633a:	d034      	beq.n	80063a6 <_printf_float+0x27a>
 800633c:	4a37      	ldr	r2, [pc, #220]	; (800641c <_printf_float+0x2f0>)
 800633e:	2301      	movs	r3, #1
 8006340:	4631      	mov	r1, r6
 8006342:	4628      	mov	r0, r5
 8006344:	47b8      	blx	r7
 8006346:	3001      	adds	r0, #1
 8006348:	f43f af51 	beq.w	80061ee <_printf_float+0xc2>
 800634c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006350:	429a      	cmp	r2, r3
 8006352:	db02      	blt.n	800635a <_printf_float+0x22e>
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	07d8      	lsls	r0, r3, #31
 8006358:	d510      	bpl.n	800637c <_printf_float+0x250>
 800635a:	ee18 3a10 	vmov	r3, s16
 800635e:	4652      	mov	r2, sl
 8006360:	4631      	mov	r1, r6
 8006362:	4628      	mov	r0, r5
 8006364:	47b8      	blx	r7
 8006366:	3001      	adds	r0, #1
 8006368:	f43f af41 	beq.w	80061ee <_printf_float+0xc2>
 800636c:	f04f 0800 	mov.w	r8, #0
 8006370:	f104 091a 	add.w	r9, r4, #26
 8006374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006376:	3b01      	subs	r3, #1
 8006378:	4543      	cmp	r3, r8
 800637a:	dc09      	bgt.n	8006390 <_printf_float+0x264>
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	079b      	lsls	r3, r3, #30
 8006380:	f100 8105 	bmi.w	800658e <_printf_float+0x462>
 8006384:	68e0      	ldr	r0, [r4, #12]
 8006386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006388:	4298      	cmp	r0, r3
 800638a:	bfb8      	it	lt
 800638c:	4618      	movlt	r0, r3
 800638e:	e730      	b.n	80061f2 <_printf_float+0xc6>
 8006390:	2301      	movs	r3, #1
 8006392:	464a      	mov	r2, r9
 8006394:	4631      	mov	r1, r6
 8006396:	4628      	mov	r0, r5
 8006398:	47b8      	blx	r7
 800639a:	3001      	adds	r0, #1
 800639c:	f43f af27 	beq.w	80061ee <_printf_float+0xc2>
 80063a0:	f108 0801 	add.w	r8, r8, #1
 80063a4:	e7e6      	b.n	8006374 <_printf_float+0x248>
 80063a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	dc39      	bgt.n	8006420 <_printf_float+0x2f4>
 80063ac:	4a1b      	ldr	r2, [pc, #108]	; (800641c <_printf_float+0x2f0>)
 80063ae:	2301      	movs	r3, #1
 80063b0:	4631      	mov	r1, r6
 80063b2:	4628      	mov	r0, r5
 80063b4:	47b8      	blx	r7
 80063b6:	3001      	adds	r0, #1
 80063b8:	f43f af19 	beq.w	80061ee <_printf_float+0xc2>
 80063bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063c0:	4313      	orrs	r3, r2
 80063c2:	d102      	bne.n	80063ca <_printf_float+0x29e>
 80063c4:	6823      	ldr	r3, [r4, #0]
 80063c6:	07d9      	lsls	r1, r3, #31
 80063c8:	d5d8      	bpl.n	800637c <_printf_float+0x250>
 80063ca:	ee18 3a10 	vmov	r3, s16
 80063ce:	4652      	mov	r2, sl
 80063d0:	4631      	mov	r1, r6
 80063d2:	4628      	mov	r0, r5
 80063d4:	47b8      	blx	r7
 80063d6:	3001      	adds	r0, #1
 80063d8:	f43f af09 	beq.w	80061ee <_printf_float+0xc2>
 80063dc:	f04f 0900 	mov.w	r9, #0
 80063e0:	f104 0a1a 	add.w	sl, r4, #26
 80063e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e6:	425b      	negs	r3, r3
 80063e8:	454b      	cmp	r3, r9
 80063ea:	dc01      	bgt.n	80063f0 <_printf_float+0x2c4>
 80063ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ee:	e792      	b.n	8006316 <_printf_float+0x1ea>
 80063f0:	2301      	movs	r3, #1
 80063f2:	4652      	mov	r2, sl
 80063f4:	4631      	mov	r1, r6
 80063f6:	4628      	mov	r0, r5
 80063f8:	47b8      	blx	r7
 80063fa:	3001      	adds	r0, #1
 80063fc:	f43f aef7 	beq.w	80061ee <_printf_float+0xc2>
 8006400:	f109 0901 	add.w	r9, r9, #1
 8006404:	e7ee      	b.n	80063e4 <_printf_float+0x2b8>
 8006406:	bf00      	nop
 8006408:	7fefffff 	.word	0x7fefffff
 800640c:	08008f40 	.word	0x08008f40
 8006410:	08008f44 	.word	0x08008f44
 8006414:	08008f4c 	.word	0x08008f4c
 8006418:	08008f48 	.word	0x08008f48
 800641c:	08008f50 	.word	0x08008f50
 8006420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006422:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006424:	429a      	cmp	r2, r3
 8006426:	bfa8      	it	ge
 8006428:	461a      	movge	r2, r3
 800642a:	2a00      	cmp	r2, #0
 800642c:	4691      	mov	r9, r2
 800642e:	dc37      	bgt.n	80064a0 <_printf_float+0x374>
 8006430:	f04f 0b00 	mov.w	fp, #0
 8006434:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006438:	f104 021a 	add.w	r2, r4, #26
 800643c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800643e:	9305      	str	r3, [sp, #20]
 8006440:	eba3 0309 	sub.w	r3, r3, r9
 8006444:	455b      	cmp	r3, fp
 8006446:	dc33      	bgt.n	80064b0 <_printf_float+0x384>
 8006448:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800644c:	429a      	cmp	r2, r3
 800644e:	db3b      	blt.n	80064c8 <_printf_float+0x39c>
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	07da      	lsls	r2, r3, #31
 8006454:	d438      	bmi.n	80064c8 <_printf_float+0x39c>
 8006456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006458:	9a05      	ldr	r2, [sp, #20]
 800645a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800645c:	1a9a      	subs	r2, r3, r2
 800645e:	eba3 0901 	sub.w	r9, r3, r1
 8006462:	4591      	cmp	r9, r2
 8006464:	bfa8      	it	ge
 8006466:	4691      	movge	r9, r2
 8006468:	f1b9 0f00 	cmp.w	r9, #0
 800646c:	dc35      	bgt.n	80064da <_printf_float+0x3ae>
 800646e:	f04f 0800 	mov.w	r8, #0
 8006472:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006476:	f104 0a1a 	add.w	sl, r4, #26
 800647a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800647e:	1a9b      	subs	r3, r3, r2
 8006480:	eba3 0309 	sub.w	r3, r3, r9
 8006484:	4543      	cmp	r3, r8
 8006486:	f77f af79 	ble.w	800637c <_printf_float+0x250>
 800648a:	2301      	movs	r3, #1
 800648c:	4652      	mov	r2, sl
 800648e:	4631      	mov	r1, r6
 8006490:	4628      	mov	r0, r5
 8006492:	47b8      	blx	r7
 8006494:	3001      	adds	r0, #1
 8006496:	f43f aeaa 	beq.w	80061ee <_printf_float+0xc2>
 800649a:	f108 0801 	add.w	r8, r8, #1
 800649e:	e7ec      	b.n	800647a <_printf_float+0x34e>
 80064a0:	4613      	mov	r3, r2
 80064a2:	4631      	mov	r1, r6
 80064a4:	4642      	mov	r2, r8
 80064a6:	4628      	mov	r0, r5
 80064a8:	47b8      	blx	r7
 80064aa:	3001      	adds	r0, #1
 80064ac:	d1c0      	bne.n	8006430 <_printf_float+0x304>
 80064ae:	e69e      	b.n	80061ee <_printf_float+0xc2>
 80064b0:	2301      	movs	r3, #1
 80064b2:	4631      	mov	r1, r6
 80064b4:	4628      	mov	r0, r5
 80064b6:	9205      	str	r2, [sp, #20]
 80064b8:	47b8      	blx	r7
 80064ba:	3001      	adds	r0, #1
 80064bc:	f43f ae97 	beq.w	80061ee <_printf_float+0xc2>
 80064c0:	9a05      	ldr	r2, [sp, #20]
 80064c2:	f10b 0b01 	add.w	fp, fp, #1
 80064c6:	e7b9      	b.n	800643c <_printf_float+0x310>
 80064c8:	ee18 3a10 	vmov	r3, s16
 80064cc:	4652      	mov	r2, sl
 80064ce:	4631      	mov	r1, r6
 80064d0:	4628      	mov	r0, r5
 80064d2:	47b8      	blx	r7
 80064d4:	3001      	adds	r0, #1
 80064d6:	d1be      	bne.n	8006456 <_printf_float+0x32a>
 80064d8:	e689      	b.n	80061ee <_printf_float+0xc2>
 80064da:	9a05      	ldr	r2, [sp, #20]
 80064dc:	464b      	mov	r3, r9
 80064de:	4442      	add	r2, r8
 80064e0:	4631      	mov	r1, r6
 80064e2:	4628      	mov	r0, r5
 80064e4:	47b8      	blx	r7
 80064e6:	3001      	adds	r0, #1
 80064e8:	d1c1      	bne.n	800646e <_printf_float+0x342>
 80064ea:	e680      	b.n	80061ee <_printf_float+0xc2>
 80064ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064ee:	2a01      	cmp	r2, #1
 80064f0:	dc01      	bgt.n	80064f6 <_printf_float+0x3ca>
 80064f2:	07db      	lsls	r3, r3, #31
 80064f4:	d538      	bpl.n	8006568 <_printf_float+0x43c>
 80064f6:	2301      	movs	r3, #1
 80064f8:	4642      	mov	r2, r8
 80064fa:	4631      	mov	r1, r6
 80064fc:	4628      	mov	r0, r5
 80064fe:	47b8      	blx	r7
 8006500:	3001      	adds	r0, #1
 8006502:	f43f ae74 	beq.w	80061ee <_printf_float+0xc2>
 8006506:	ee18 3a10 	vmov	r3, s16
 800650a:	4652      	mov	r2, sl
 800650c:	4631      	mov	r1, r6
 800650e:	4628      	mov	r0, r5
 8006510:	47b8      	blx	r7
 8006512:	3001      	adds	r0, #1
 8006514:	f43f ae6b 	beq.w	80061ee <_printf_float+0xc2>
 8006518:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800651c:	2200      	movs	r2, #0
 800651e:	2300      	movs	r3, #0
 8006520:	f7fa fada 	bl	8000ad8 <__aeabi_dcmpeq>
 8006524:	b9d8      	cbnz	r0, 800655e <_printf_float+0x432>
 8006526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006528:	f108 0201 	add.w	r2, r8, #1
 800652c:	3b01      	subs	r3, #1
 800652e:	4631      	mov	r1, r6
 8006530:	4628      	mov	r0, r5
 8006532:	47b8      	blx	r7
 8006534:	3001      	adds	r0, #1
 8006536:	d10e      	bne.n	8006556 <_printf_float+0x42a>
 8006538:	e659      	b.n	80061ee <_printf_float+0xc2>
 800653a:	2301      	movs	r3, #1
 800653c:	4652      	mov	r2, sl
 800653e:	4631      	mov	r1, r6
 8006540:	4628      	mov	r0, r5
 8006542:	47b8      	blx	r7
 8006544:	3001      	adds	r0, #1
 8006546:	f43f ae52 	beq.w	80061ee <_printf_float+0xc2>
 800654a:	f108 0801 	add.w	r8, r8, #1
 800654e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006550:	3b01      	subs	r3, #1
 8006552:	4543      	cmp	r3, r8
 8006554:	dcf1      	bgt.n	800653a <_printf_float+0x40e>
 8006556:	464b      	mov	r3, r9
 8006558:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800655c:	e6dc      	b.n	8006318 <_printf_float+0x1ec>
 800655e:	f04f 0800 	mov.w	r8, #0
 8006562:	f104 0a1a 	add.w	sl, r4, #26
 8006566:	e7f2      	b.n	800654e <_printf_float+0x422>
 8006568:	2301      	movs	r3, #1
 800656a:	4642      	mov	r2, r8
 800656c:	e7df      	b.n	800652e <_printf_float+0x402>
 800656e:	2301      	movs	r3, #1
 8006570:	464a      	mov	r2, r9
 8006572:	4631      	mov	r1, r6
 8006574:	4628      	mov	r0, r5
 8006576:	47b8      	blx	r7
 8006578:	3001      	adds	r0, #1
 800657a:	f43f ae38 	beq.w	80061ee <_printf_float+0xc2>
 800657e:	f108 0801 	add.w	r8, r8, #1
 8006582:	68e3      	ldr	r3, [r4, #12]
 8006584:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006586:	1a5b      	subs	r3, r3, r1
 8006588:	4543      	cmp	r3, r8
 800658a:	dcf0      	bgt.n	800656e <_printf_float+0x442>
 800658c:	e6fa      	b.n	8006384 <_printf_float+0x258>
 800658e:	f04f 0800 	mov.w	r8, #0
 8006592:	f104 0919 	add.w	r9, r4, #25
 8006596:	e7f4      	b.n	8006582 <_printf_float+0x456>

08006598 <_printf_common>:
 8006598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800659c:	4616      	mov	r6, r2
 800659e:	4699      	mov	r9, r3
 80065a0:	688a      	ldr	r2, [r1, #8]
 80065a2:	690b      	ldr	r3, [r1, #16]
 80065a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065a8:	4293      	cmp	r3, r2
 80065aa:	bfb8      	it	lt
 80065ac:	4613      	movlt	r3, r2
 80065ae:	6033      	str	r3, [r6, #0]
 80065b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065b4:	4607      	mov	r7, r0
 80065b6:	460c      	mov	r4, r1
 80065b8:	b10a      	cbz	r2, 80065be <_printf_common+0x26>
 80065ba:	3301      	adds	r3, #1
 80065bc:	6033      	str	r3, [r6, #0]
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	0699      	lsls	r1, r3, #26
 80065c2:	bf42      	ittt	mi
 80065c4:	6833      	ldrmi	r3, [r6, #0]
 80065c6:	3302      	addmi	r3, #2
 80065c8:	6033      	strmi	r3, [r6, #0]
 80065ca:	6825      	ldr	r5, [r4, #0]
 80065cc:	f015 0506 	ands.w	r5, r5, #6
 80065d0:	d106      	bne.n	80065e0 <_printf_common+0x48>
 80065d2:	f104 0a19 	add.w	sl, r4, #25
 80065d6:	68e3      	ldr	r3, [r4, #12]
 80065d8:	6832      	ldr	r2, [r6, #0]
 80065da:	1a9b      	subs	r3, r3, r2
 80065dc:	42ab      	cmp	r3, r5
 80065de:	dc26      	bgt.n	800662e <_printf_common+0x96>
 80065e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065e4:	1e13      	subs	r3, r2, #0
 80065e6:	6822      	ldr	r2, [r4, #0]
 80065e8:	bf18      	it	ne
 80065ea:	2301      	movne	r3, #1
 80065ec:	0692      	lsls	r2, r2, #26
 80065ee:	d42b      	bmi.n	8006648 <_printf_common+0xb0>
 80065f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065f4:	4649      	mov	r1, r9
 80065f6:	4638      	mov	r0, r7
 80065f8:	47c0      	blx	r8
 80065fa:	3001      	adds	r0, #1
 80065fc:	d01e      	beq.n	800663c <_printf_common+0xa4>
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	68e5      	ldr	r5, [r4, #12]
 8006602:	6832      	ldr	r2, [r6, #0]
 8006604:	f003 0306 	and.w	r3, r3, #6
 8006608:	2b04      	cmp	r3, #4
 800660a:	bf08      	it	eq
 800660c:	1aad      	subeq	r5, r5, r2
 800660e:	68a3      	ldr	r3, [r4, #8]
 8006610:	6922      	ldr	r2, [r4, #16]
 8006612:	bf0c      	ite	eq
 8006614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006618:	2500      	movne	r5, #0
 800661a:	4293      	cmp	r3, r2
 800661c:	bfc4      	itt	gt
 800661e:	1a9b      	subgt	r3, r3, r2
 8006620:	18ed      	addgt	r5, r5, r3
 8006622:	2600      	movs	r6, #0
 8006624:	341a      	adds	r4, #26
 8006626:	42b5      	cmp	r5, r6
 8006628:	d11a      	bne.n	8006660 <_printf_common+0xc8>
 800662a:	2000      	movs	r0, #0
 800662c:	e008      	b.n	8006640 <_printf_common+0xa8>
 800662e:	2301      	movs	r3, #1
 8006630:	4652      	mov	r2, sl
 8006632:	4649      	mov	r1, r9
 8006634:	4638      	mov	r0, r7
 8006636:	47c0      	blx	r8
 8006638:	3001      	adds	r0, #1
 800663a:	d103      	bne.n	8006644 <_printf_common+0xac>
 800663c:	f04f 30ff 	mov.w	r0, #4294967295
 8006640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006644:	3501      	adds	r5, #1
 8006646:	e7c6      	b.n	80065d6 <_printf_common+0x3e>
 8006648:	18e1      	adds	r1, r4, r3
 800664a:	1c5a      	adds	r2, r3, #1
 800664c:	2030      	movs	r0, #48	; 0x30
 800664e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006652:	4422      	add	r2, r4
 8006654:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006658:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800665c:	3302      	adds	r3, #2
 800665e:	e7c7      	b.n	80065f0 <_printf_common+0x58>
 8006660:	2301      	movs	r3, #1
 8006662:	4622      	mov	r2, r4
 8006664:	4649      	mov	r1, r9
 8006666:	4638      	mov	r0, r7
 8006668:	47c0      	blx	r8
 800666a:	3001      	adds	r0, #1
 800666c:	d0e6      	beq.n	800663c <_printf_common+0xa4>
 800666e:	3601      	adds	r6, #1
 8006670:	e7d9      	b.n	8006626 <_printf_common+0x8e>
	...

08006674 <_printf_i>:
 8006674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006678:	7e0f      	ldrb	r7, [r1, #24]
 800667a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800667c:	2f78      	cmp	r7, #120	; 0x78
 800667e:	4691      	mov	r9, r2
 8006680:	4680      	mov	r8, r0
 8006682:	460c      	mov	r4, r1
 8006684:	469a      	mov	sl, r3
 8006686:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800668a:	d807      	bhi.n	800669c <_printf_i+0x28>
 800668c:	2f62      	cmp	r7, #98	; 0x62
 800668e:	d80a      	bhi.n	80066a6 <_printf_i+0x32>
 8006690:	2f00      	cmp	r7, #0
 8006692:	f000 80d8 	beq.w	8006846 <_printf_i+0x1d2>
 8006696:	2f58      	cmp	r7, #88	; 0x58
 8006698:	f000 80a3 	beq.w	80067e2 <_printf_i+0x16e>
 800669c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066a4:	e03a      	b.n	800671c <_printf_i+0xa8>
 80066a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066aa:	2b15      	cmp	r3, #21
 80066ac:	d8f6      	bhi.n	800669c <_printf_i+0x28>
 80066ae:	a101      	add	r1, pc, #4	; (adr r1, 80066b4 <_printf_i+0x40>)
 80066b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066b4:	0800670d 	.word	0x0800670d
 80066b8:	08006721 	.word	0x08006721
 80066bc:	0800669d 	.word	0x0800669d
 80066c0:	0800669d 	.word	0x0800669d
 80066c4:	0800669d 	.word	0x0800669d
 80066c8:	0800669d 	.word	0x0800669d
 80066cc:	08006721 	.word	0x08006721
 80066d0:	0800669d 	.word	0x0800669d
 80066d4:	0800669d 	.word	0x0800669d
 80066d8:	0800669d 	.word	0x0800669d
 80066dc:	0800669d 	.word	0x0800669d
 80066e0:	0800682d 	.word	0x0800682d
 80066e4:	08006751 	.word	0x08006751
 80066e8:	0800680f 	.word	0x0800680f
 80066ec:	0800669d 	.word	0x0800669d
 80066f0:	0800669d 	.word	0x0800669d
 80066f4:	0800684f 	.word	0x0800684f
 80066f8:	0800669d 	.word	0x0800669d
 80066fc:	08006751 	.word	0x08006751
 8006700:	0800669d 	.word	0x0800669d
 8006704:	0800669d 	.word	0x0800669d
 8006708:	08006817 	.word	0x08006817
 800670c:	682b      	ldr	r3, [r5, #0]
 800670e:	1d1a      	adds	r2, r3, #4
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	602a      	str	r2, [r5, #0]
 8006714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800671c:	2301      	movs	r3, #1
 800671e:	e0a3      	b.n	8006868 <_printf_i+0x1f4>
 8006720:	6820      	ldr	r0, [r4, #0]
 8006722:	6829      	ldr	r1, [r5, #0]
 8006724:	0606      	lsls	r6, r0, #24
 8006726:	f101 0304 	add.w	r3, r1, #4
 800672a:	d50a      	bpl.n	8006742 <_printf_i+0xce>
 800672c:	680e      	ldr	r6, [r1, #0]
 800672e:	602b      	str	r3, [r5, #0]
 8006730:	2e00      	cmp	r6, #0
 8006732:	da03      	bge.n	800673c <_printf_i+0xc8>
 8006734:	232d      	movs	r3, #45	; 0x2d
 8006736:	4276      	negs	r6, r6
 8006738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800673c:	485e      	ldr	r0, [pc, #376]	; (80068b8 <_printf_i+0x244>)
 800673e:	230a      	movs	r3, #10
 8006740:	e019      	b.n	8006776 <_printf_i+0x102>
 8006742:	680e      	ldr	r6, [r1, #0]
 8006744:	602b      	str	r3, [r5, #0]
 8006746:	f010 0f40 	tst.w	r0, #64	; 0x40
 800674a:	bf18      	it	ne
 800674c:	b236      	sxthne	r6, r6
 800674e:	e7ef      	b.n	8006730 <_printf_i+0xbc>
 8006750:	682b      	ldr	r3, [r5, #0]
 8006752:	6820      	ldr	r0, [r4, #0]
 8006754:	1d19      	adds	r1, r3, #4
 8006756:	6029      	str	r1, [r5, #0]
 8006758:	0601      	lsls	r1, r0, #24
 800675a:	d501      	bpl.n	8006760 <_printf_i+0xec>
 800675c:	681e      	ldr	r6, [r3, #0]
 800675e:	e002      	b.n	8006766 <_printf_i+0xf2>
 8006760:	0646      	lsls	r6, r0, #25
 8006762:	d5fb      	bpl.n	800675c <_printf_i+0xe8>
 8006764:	881e      	ldrh	r6, [r3, #0]
 8006766:	4854      	ldr	r0, [pc, #336]	; (80068b8 <_printf_i+0x244>)
 8006768:	2f6f      	cmp	r7, #111	; 0x6f
 800676a:	bf0c      	ite	eq
 800676c:	2308      	moveq	r3, #8
 800676e:	230a      	movne	r3, #10
 8006770:	2100      	movs	r1, #0
 8006772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006776:	6865      	ldr	r5, [r4, #4]
 8006778:	60a5      	str	r5, [r4, #8]
 800677a:	2d00      	cmp	r5, #0
 800677c:	bfa2      	ittt	ge
 800677e:	6821      	ldrge	r1, [r4, #0]
 8006780:	f021 0104 	bicge.w	r1, r1, #4
 8006784:	6021      	strge	r1, [r4, #0]
 8006786:	b90e      	cbnz	r6, 800678c <_printf_i+0x118>
 8006788:	2d00      	cmp	r5, #0
 800678a:	d04d      	beq.n	8006828 <_printf_i+0x1b4>
 800678c:	4615      	mov	r5, r2
 800678e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006792:	fb03 6711 	mls	r7, r3, r1, r6
 8006796:	5dc7      	ldrb	r7, [r0, r7]
 8006798:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800679c:	4637      	mov	r7, r6
 800679e:	42bb      	cmp	r3, r7
 80067a0:	460e      	mov	r6, r1
 80067a2:	d9f4      	bls.n	800678e <_printf_i+0x11a>
 80067a4:	2b08      	cmp	r3, #8
 80067a6:	d10b      	bne.n	80067c0 <_printf_i+0x14c>
 80067a8:	6823      	ldr	r3, [r4, #0]
 80067aa:	07de      	lsls	r6, r3, #31
 80067ac:	d508      	bpl.n	80067c0 <_printf_i+0x14c>
 80067ae:	6923      	ldr	r3, [r4, #16]
 80067b0:	6861      	ldr	r1, [r4, #4]
 80067b2:	4299      	cmp	r1, r3
 80067b4:	bfde      	ittt	le
 80067b6:	2330      	movle	r3, #48	; 0x30
 80067b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067c0:	1b52      	subs	r2, r2, r5
 80067c2:	6122      	str	r2, [r4, #16]
 80067c4:	f8cd a000 	str.w	sl, [sp]
 80067c8:	464b      	mov	r3, r9
 80067ca:	aa03      	add	r2, sp, #12
 80067cc:	4621      	mov	r1, r4
 80067ce:	4640      	mov	r0, r8
 80067d0:	f7ff fee2 	bl	8006598 <_printf_common>
 80067d4:	3001      	adds	r0, #1
 80067d6:	d14c      	bne.n	8006872 <_printf_i+0x1fe>
 80067d8:	f04f 30ff 	mov.w	r0, #4294967295
 80067dc:	b004      	add	sp, #16
 80067de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e2:	4835      	ldr	r0, [pc, #212]	; (80068b8 <_printf_i+0x244>)
 80067e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80067e8:	6829      	ldr	r1, [r5, #0]
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80067f0:	6029      	str	r1, [r5, #0]
 80067f2:	061d      	lsls	r5, r3, #24
 80067f4:	d514      	bpl.n	8006820 <_printf_i+0x1ac>
 80067f6:	07df      	lsls	r7, r3, #31
 80067f8:	bf44      	itt	mi
 80067fa:	f043 0320 	orrmi.w	r3, r3, #32
 80067fe:	6023      	strmi	r3, [r4, #0]
 8006800:	b91e      	cbnz	r6, 800680a <_printf_i+0x196>
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	f023 0320 	bic.w	r3, r3, #32
 8006808:	6023      	str	r3, [r4, #0]
 800680a:	2310      	movs	r3, #16
 800680c:	e7b0      	b.n	8006770 <_printf_i+0xfc>
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	f043 0320 	orr.w	r3, r3, #32
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	2378      	movs	r3, #120	; 0x78
 8006818:	4828      	ldr	r0, [pc, #160]	; (80068bc <_printf_i+0x248>)
 800681a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800681e:	e7e3      	b.n	80067e8 <_printf_i+0x174>
 8006820:	0659      	lsls	r1, r3, #25
 8006822:	bf48      	it	mi
 8006824:	b2b6      	uxthmi	r6, r6
 8006826:	e7e6      	b.n	80067f6 <_printf_i+0x182>
 8006828:	4615      	mov	r5, r2
 800682a:	e7bb      	b.n	80067a4 <_printf_i+0x130>
 800682c:	682b      	ldr	r3, [r5, #0]
 800682e:	6826      	ldr	r6, [r4, #0]
 8006830:	6961      	ldr	r1, [r4, #20]
 8006832:	1d18      	adds	r0, r3, #4
 8006834:	6028      	str	r0, [r5, #0]
 8006836:	0635      	lsls	r5, r6, #24
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	d501      	bpl.n	8006840 <_printf_i+0x1cc>
 800683c:	6019      	str	r1, [r3, #0]
 800683e:	e002      	b.n	8006846 <_printf_i+0x1d2>
 8006840:	0670      	lsls	r0, r6, #25
 8006842:	d5fb      	bpl.n	800683c <_printf_i+0x1c8>
 8006844:	8019      	strh	r1, [r3, #0]
 8006846:	2300      	movs	r3, #0
 8006848:	6123      	str	r3, [r4, #16]
 800684a:	4615      	mov	r5, r2
 800684c:	e7ba      	b.n	80067c4 <_printf_i+0x150>
 800684e:	682b      	ldr	r3, [r5, #0]
 8006850:	1d1a      	adds	r2, r3, #4
 8006852:	602a      	str	r2, [r5, #0]
 8006854:	681d      	ldr	r5, [r3, #0]
 8006856:	6862      	ldr	r2, [r4, #4]
 8006858:	2100      	movs	r1, #0
 800685a:	4628      	mov	r0, r5
 800685c:	f7f9 fcc8 	bl	80001f0 <memchr>
 8006860:	b108      	cbz	r0, 8006866 <_printf_i+0x1f2>
 8006862:	1b40      	subs	r0, r0, r5
 8006864:	6060      	str	r0, [r4, #4]
 8006866:	6863      	ldr	r3, [r4, #4]
 8006868:	6123      	str	r3, [r4, #16]
 800686a:	2300      	movs	r3, #0
 800686c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006870:	e7a8      	b.n	80067c4 <_printf_i+0x150>
 8006872:	6923      	ldr	r3, [r4, #16]
 8006874:	462a      	mov	r2, r5
 8006876:	4649      	mov	r1, r9
 8006878:	4640      	mov	r0, r8
 800687a:	47d0      	blx	sl
 800687c:	3001      	adds	r0, #1
 800687e:	d0ab      	beq.n	80067d8 <_printf_i+0x164>
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	079b      	lsls	r3, r3, #30
 8006884:	d413      	bmi.n	80068ae <_printf_i+0x23a>
 8006886:	68e0      	ldr	r0, [r4, #12]
 8006888:	9b03      	ldr	r3, [sp, #12]
 800688a:	4298      	cmp	r0, r3
 800688c:	bfb8      	it	lt
 800688e:	4618      	movlt	r0, r3
 8006890:	e7a4      	b.n	80067dc <_printf_i+0x168>
 8006892:	2301      	movs	r3, #1
 8006894:	4632      	mov	r2, r6
 8006896:	4649      	mov	r1, r9
 8006898:	4640      	mov	r0, r8
 800689a:	47d0      	blx	sl
 800689c:	3001      	adds	r0, #1
 800689e:	d09b      	beq.n	80067d8 <_printf_i+0x164>
 80068a0:	3501      	adds	r5, #1
 80068a2:	68e3      	ldr	r3, [r4, #12]
 80068a4:	9903      	ldr	r1, [sp, #12]
 80068a6:	1a5b      	subs	r3, r3, r1
 80068a8:	42ab      	cmp	r3, r5
 80068aa:	dcf2      	bgt.n	8006892 <_printf_i+0x21e>
 80068ac:	e7eb      	b.n	8006886 <_printf_i+0x212>
 80068ae:	2500      	movs	r5, #0
 80068b0:	f104 0619 	add.w	r6, r4, #25
 80068b4:	e7f5      	b.n	80068a2 <_printf_i+0x22e>
 80068b6:	bf00      	nop
 80068b8:	08008f52 	.word	0x08008f52
 80068bc:	08008f63 	.word	0x08008f63

080068c0 <siprintf>:
 80068c0:	b40e      	push	{r1, r2, r3}
 80068c2:	b500      	push	{lr}
 80068c4:	b09c      	sub	sp, #112	; 0x70
 80068c6:	ab1d      	add	r3, sp, #116	; 0x74
 80068c8:	9002      	str	r0, [sp, #8]
 80068ca:	9006      	str	r0, [sp, #24]
 80068cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80068d0:	4809      	ldr	r0, [pc, #36]	; (80068f8 <siprintf+0x38>)
 80068d2:	9107      	str	r1, [sp, #28]
 80068d4:	9104      	str	r1, [sp, #16]
 80068d6:	4909      	ldr	r1, [pc, #36]	; (80068fc <siprintf+0x3c>)
 80068d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80068dc:	9105      	str	r1, [sp, #20]
 80068de:	6800      	ldr	r0, [r0, #0]
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	a902      	add	r1, sp, #8
 80068e4:	f001 fb8a 	bl	8007ffc <_svfiprintf_r>
 80068e8:	9b02      	ldr	r3, [sp, #8]
 80068ea:	2200      	movs	r2, #0
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	b01c      	add	sp, #112	; 0x70
 80068f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80068f4:	b003      	add	sp, #12
 80068f6:	4770      	bx	lr
 80068f8:	200001d0 	.word	0x200001d0
 80068fc:	ffff0208 	.word	0xffff0208

08006900 <strncat>:
 8006900:	b530      	push	{r4, r5, lr}
 8006902:	4604      	mov	r4, r0
 8006904:	7825      	ldrb	r5, [r4, #0]
 8006906:	4623      	mov	r3, r4
 8006908:	3401      	adds	r4, #1
 800690a:	2d00      	cmp	r5, #0
 800690c:	d1fa      	bne.n	8006904 <strncat+0x4>
 800690e:	3a01      	subs	r2, #1
 8006910:	d304      	bcc.n	800691c <strncat+0x1c>
 8006912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006916:	f803 4b01 	strb.w	r4, [r3], #1
 800691a:	b904      	cbnz	r4, 800691e <strncat+0x1e>
 800691c:	bd30      	pop	{r4, r5, pc}
 800691e:	2a00      	cmp	r2, #0
 8006920:	d1f5      	bne.n	800690e <strncat+0xe>
 8006922:	701a      	strb	r2, [r3, #0]
 8006924:	e7f3      	b.n	800690e <strncat+0xe>

08006926 <quorem>:
 8006926:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692a:	6903      	ldr	r3, [r0, #16]
 800692c:	690c      	ldr	r4, [r1, #16]
 800692e:	42a3      	cmp	r3, r4
 8006930:	4607      	mov	r7, r0
 8006932:	f2c0 8081 	blt.w	8006a38 <quorem+0x112>
 8006936:	3c01      	subs	r4, #1
 8006938:	f101 0814 	add.w	r8, r1, #20
 800693c:	f100 0514 	add.w	r5, r0, #20
 8006940:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006944:	9301      	str	r3, [sp, #4]
 8006946:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800694a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800694e:	3301      	adds	r3, #1
 8006950:	429a      	cmp	r2, r3
 8006952:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006956:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800695a:	fbb2 f6f3 	udiv	r6, r2, r3
 800695e:	d331      	bcc.n	80069c4 <quorem+0x9e>
 8006960:	f04f 0e00 	mov.w	lr, #0
 8006964:	4640      	mov	r0, r8
 8006966:	46ac      	mov	ip, r5
 8006968:	46f2      	mov	sl, lr
 800696a:	f850 2b04 	ldr.w	r2, [r0], #4
 800696e:	b293      	uxth	r3, r2
 8006970:	fb06 e303 	mla	r3, r6, r3, lr
 8006974:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006978:	b29b      	uxth	r3, r3
 800697a:	ebaa 0303 	sub.w	r3, sl, r3
 800697e:	f8dc a000 	ldr.w	sl, [ip]
 8006982:	0c12      	lsrs	r2, r2, #16
 8006984:	fa13 f38a 	uxtah	r3, r3, sl
 8006988:	fb06 e202 	mla	r2, r6, r2, lr
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	9b00      	ldr	r3, [sp, #0]
 8006990:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006994:	b292      	uxth	r2, r2
 8006996:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800699a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800699e:	f8bd 3000 	ldrh.w	r3, [sp]
 80069a2:	4581      	cmp	r9, r0
 80069a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069a8:	f84c 3b04 	str.w	r3, [ip], #4
 80069ac:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80069b0:	d2db      	bcs.n	800696a <quorem+0x44>
 80069b2:	f855 300b 	ldr.w	r3, [r5, fp]
 80069b6:	b92b      	cbnz	r3, 80069c4 <quorem+0x9e>
 80069b8:	9b01      	ldr	r3, [sp, #4]
 80069ba:	3b04      	subs	r3, #4
 80069bc:	429d      	cmp	r5, r3
 80069be:	461a      	mov	r2, r3
 80069c0:	d32e      	bcc.n	8006a20 <quorem+0xfa>
 80069c2:	613c      	str	r4, [r7, #16]
 80069c4:	4638      	mov	r0, r7
 80069c6:	f001 f8c5 	bl	8007b54 <__mcmp>
 80069ca:	2800      	cmp	r0, #0
 80069cc:	db24      	blt.n	8006a18 <quorem+0xf2>
 80069ce:	3601      	adds	r6, #1
 80069d0:	4628      	mov	r0, r5
 80069d2:	f04f 0c00 	mov.w	ip, #0
 80069d6:	f858 2b04 	ldr.w	r2, [r8], #4
 80069da:	f8d0 e000 	ldr.w	lr, [r0]
 80069de:	b293      	uxth	r3, r2
 80069e0:	ebac 0303 	sub.w	r3, ip, r3
 80069e4:	0c12      	lsrs	r2, r2, #16
 80069e6:	fa13 f38e 	uxtah	r3, r3, lr
 80069ea:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80069ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069f8:	45c1      	cmp	r9, r8
 80069fa:	f840 3b04 	str.w	r3, [r0], #4
 80069fe:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006a02:	d2e8      	bcs.n	80069d6 <quorem+0xb0>
 8006a04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a0c:	b922      	cbnz	r2, 8006a18 <quorem+0xf2>
 8006a0e:	3b04      	subs	r3, #4
 8006a10:	429d      	cmp	r5, r3
 8006a12:	461a      	mov	r2, r3
 8006a14:	d30a      	bcc.n	8006a2c <quorem+0x106>
 8006a16:	613c      	str	r4, [r7, #16]
 8006a18:	4630      	mov	r0, r6
 8006a1a:	b003      	add	sp, #12
 8006a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a20:	6812      	ldr	r2, [r2, #0]
 8006a22:	3b04      	subs	r3, #4
 8006a24:	2a00      	cmp	r2, #0
 8006a26:	d1cc      	bne.n	80069c2 <quorem+0x9c>
 8006a28:	3c01      	subs	r4, #1
 8006a2a:	e7c7      	b.n	80069bc <quorem+0x96>
 8006a2c:	6812      	ldr	r2, [r2, #0]
 8006a2e:	3b04      	subs	r3, #4
 8006a30:	2a00      	cmp	r2, #0
 8006a32:	d1f0      	bne.n	8006a16 <quorem+0xf0>
 8006a34:	3c01      	subs	r4, #1
 8006a36:	e7eb      	b.n	8006a10 <quorem+0xea>
 8006a38:	2000      	movs	r0, #0
 8006a3a:	e7ee      	b.n	8006a1a <quorem+0xf4>
 8006a3c:	0000      	movs	r0, r0
	...

08006a40 <_dtoa_r>:
 8006a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a44:	ed2d 8b04 	vpush	{d8-d9}
 8006a48:	ec57 6b10 	vmov	r6, r7, d0
 8006a4c:	b093      	sub	sp, #76	; 0x4c
 8006a4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a54:	9106      	str	r1, [sp, #24]
 8006a56:	ee10 aa10 	vmov	sl, s0
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8006a5e:	930c      	str	r3, [sp, #48]	; 0x30
 8006a60:	46bb      	mov	fp, r7
 8006a62:	b975      	cbnz	r5, 8006a82 <_dtoa_r+0x42>
 8006a64:	2010      	movs	r0, #16
 8006a66:	f000 fddd 	bl	8007624 <malloc>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	6260      	str	r0, [r4, #36]	; 0x24
 8006a6e:	b920      	cbnz	r0, 8006a7a <_dtoa_r+0x3a>
 8006a70:	4ba7      	ldr	r3, [pc, #668]	; (8006d10 <_dtoa_r+0x2d0>)
 8006a72:	21ea      	movs	r1, #234	; 0xea
 8006a74:	48a7      	ldr	r0, [pc, #668]	; (8006d14 <_dtoa_r+0x2d4>)
 8006a76:	f001 fbd1 	bl	800821c <__assert_func>
 8006a7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a7e:	6005      	str	r5, [r0, #0]
 8006a80:	60c5      	str	r5, [r0, #12]
 8006a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a84:	6819      	ldr	r1, [r3, #0]
 8006a86:	b151      	cbz	r1, 8006a9e <_dtoa_r+0x5e>
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	604a      	str	r2, [r1, #4]
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	4093      	lsls	r3, r2
 8006a90:	608b      	str	r3, [r1, #8]
 8006a92:	4620      	mov	r0, r4
 8006a94:	f000 fe1c 	bl	80076d0 <_Bfree>
 8006a98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	1e3b      	subs	r3, r7, #0
 8006aa0:	bfaa      	itet	ge
 8006aa2:	2300      	movge	r3, #0
 8006aa4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006aa8:	f8c8 3000 	strge.w	r3, [r8]
 8006aac:	4b9a      	ldr	r3, [pc, #616]	; (8006d18 <_dtoa_r+0x2d8>)
 8006aae:	bfbc      	itt	lt
 8006ab0:	2201      	movlt	r2, #1
 8006ab2:	f8c8 2000 	strlt.w	r2, [r8]
 8006ab6:	ea33 030b 	bics.w	r3, r3, fp
 8006aba:	d11b      	bne.n	8006af4 <_dtoa_r+0xb4>
 8006abc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006abe:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ac2:	6013      	str	r3, [r2, #0]
 8006ac4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ac8:	4333      	orrs	r3, r6
 8006aca:	f000 8592 	beq.w	80075f2 <_dtoa_r+0xbb2>
 8006ace:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ad0:	b963      	cbnz	r3, 8006aec <_dtoa_r+0xac>
 8006ad2:	4b92      	ldr	r3, [pc, #584]	; (8006d1c <_dtoa_r+0x2dc>)
 8006ad4:	e022      	b.n	8006b1c <_dtoa_r+0xdc>
 8006ad6:	4b92      	ldr	r3, [pc, #584]	; (8006d20 <_dtoa_r+0x2e0>)
 8006ad8:	9301      	str	r3, [sp, #4]
 8006ada:	3308      	adds	r3, #8
 8006adc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	9801      	ldr	r0, [sp, #4]
 8006ae2:	b013      	add	sp, #76	; 0x4c
 8006ae4:	ecbd 8b04 	vpop	{d8-d9}
 8006ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aec:	4b8b      	ldr	r3, [pc, #556]	; (8006d1c <_dtoa_r+0x2dc>)
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	3303      	adds	r3, #3
 8006af2:	e7f3      	b.n	8006adc <_dtoa_r+0x9c>
 8006af4:	2200      	movs	r2, #0
 8006af6:	2300      	movs	r3, #0
 8006af8:	4650      	mov	r0, sl
 8006afa:	4659      	mov	r1, fp
 8006afc:	f7f9 ffec 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b00:	ec4b ab19 	vmov	d9, sl, fp
 8006b04:	4680      	mov	r8, r0
 8006b06:	b158      	cbz	r0, 8006b20 <_dtoa_r+0xe0>
 8006b08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 856b 	beq.w	80075ec <_dtoa_r+0xbac>
 8006b16:	4883      	ldr	r0, [pc, #524]	; (8006d24 <_dtoa_r+0x2e4>)
 8006b18:	6018      	str	r0, [r3, #0]
 8006b1a:	1e43      	subs	r3, r0, #1
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	e7df      	b.n	8006ae0 <_dtoa_r+0xa0>
 8006b20:	ec4b ab10 	vmov	d0, sl, fp
 8006b24:	aa10      	add	r2, sp, #64	; 0x40
 8006b26:	a911      	add	r1, sp, #68	; 0x44
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f001 f8b9 	bl	8007ca0 <__d2b>
 8006b2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006b32:	ee08 0a10 	vmov	s16, r0
 8006b36:	2d00      	cmp	r5, #0
 8006b38:	f000 8084 	beq.w	8006c44 <_dtoa_r+0x204>
 8006b3c:	ee19 3a90 	vmov	r3, s19
 8006b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006b48:	4656      	mov	r6, sl
 8006b4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006b4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006b56:	4b74      	ldr	r3, [pc, #464]	; (8006d28 <_dtoa_r+0x2e8>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	4639      	mov	r1, r7
 8006b5e:	f7f9 fb9b 	bl	8000298 <__aeabi_dsub>
 8006b62:	a365      	add	r3, pc, #404	; (adr r3, 8006cf8 <_dtoa_r+0x2b8>)
 8006b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b68:	f7f9 fd4e 	bl	8000608 <__aeabi_dmul>
 8006b6c:	a364      	add	r3, pc, #400	; (adr r3, 8006d00 <_dtoa_r+0x2c0>)
 8006b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b72:	f7f9 fb93 	bl	800029c <__adddf3>
 8006b76:	4606      	mov	r6, r0
 8006b78:	4628      	mov	r0, r5
 8006b7a:	460f      	mov	r7, r1
 8006b7c:	f7f9 fcda 	bl	8000534 <__aeabi_i2d>
 8006b80:	a361      	add	r3, pc, #388	; (adr r3, 8006d08 <_dtoa_r+0x2c8>)
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	f7f9 fd3f 	bl	8000608 <__aeabi_dmul>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4630      	mov	r0, r6
 8006b90:	4639      	mov	r1, r7
 8006b92:	f7f9 fb83 	bl	800029c <__adddf3>
 8006b96:	4606      	mov	r6, r0
 8006b98:	460f      	mov	r7, r1
 8006b9a:	f7f9 ffe5 	bl	8000b68 <__aeabi_d2iz>
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	9000      	str	r0, [sp, #0]
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	4639      	mov	r1, r7
 8006ba8:	f7f9 ffa0 	bl	8000aec <__aeabi_dcmplt>
 8006bac:	b150      	cbz	r0, 8006bc4 <_dtoa_r+0x184>
 8006bae:	9800      	ldr	r0, [sp, #0]
 8006bb0:	f7f9 fcc0 	bl	8000534 <__aeabi_i2d>
 8006bb4:	4632      	mov	r2, r6
 8006bb6:	463b      	mov	r3, r7
 8006bb8:	f7f9 ff8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bbc:	b910      	cbnz	r0, 8006bc4 <_dtoa_r+0x184>
 8006bbe:	9b00      	ldr	r3, [sp, #0]
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	9b00      	ldr	r3, [sp, #0]
 8006bc6:	2b16      	cmp	r3, #22
 8006bc8:	d85a      	bhi.n	8006c80 <_dtoa_r+0x240>
 8006bca:	9a00      	ldr	r2, [sp, #0]
 8006bcc:	4b57      	ldr	r3, [pc, #348]	; (8006d2c <_dtoa_r+0x2ec>)
 8006bce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	ec51 0b19 	vmov	r0, r1, d9
 8006bda:	f7f9 ff87 	bl	8000aec <__aeabi_dcmplt>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d050      	beq.n	8006c84 <_dtoa_r+0x244>
 8006be2:	9b00      	ldr	r3, [sp, #0]
 8006be4:	3b01      	subs	r3, #1
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	2300      	movs	r3, #0
 8006bea:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bee:	1b5d      	subs	r5, r3, r5
 8006bf0:	1e6b      	subs	r3, r5, #1
 8006bf2:	9305      	str	r3, [sp, #20]
 8006bf4:	bf45      	ittet	mi
 8006bf6:	f1c5 0301 	rsbmi	r3, r5, #1
 8006bfa:	9304      	strmi	r3, [sp, #16]
 8006bfc:	2300      	movpl	r3, #0
 8006bfe:	2300      	movmi	r3, #0
 8006c00:	bf4c      	ite	mi
 8006c02:	9305      	strmi	r3, [sp, #20]
 8006c04:	9304      	strpl	r3, [sp, #16]
 8006c06:	9b00      	ldr	r3, [sp, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	db3d      	blt.n	8006c88 <_dtoa_r+0x248>
 8006c0c:	9b05      	ldr	r3, [sp, #20]
 8006c0e:	9a00      	ldr	r2, [sp, #0]
 8006c10:	920a      	str	r2, [sp, #40]	; 0x28
 8006c12:	4413      	add	r3, r2
 8006c14:	9305      	str	r3, [sp, #20]
 8006c16:	2300      	movs	r3, #0
 8006c18:	9307      	str	r3, [sp, #28]
 8006c1a:	9b06      	ldr	r3, [sp, #24]
 8006c1c:	2b09      	cmp	r3, #9
 8006c1e:	f200 8089 	bhi.w	8006d34 <_dtoa_r+0x2f4>
 8006c22:	2b05      	cmp	r3, #5
 8006c24:	bfc4      	itt	gt
 8006c26:	3b04      	subgt	r3, #4
 8006c28:	9306      	strgt	r3, [sp, #24]
 8006c2a:	9b06      	ldr	r3, [sp, #24]
 8006c2c:	f1a3 0302 	sub.w	r3, r3, #2
 8006c30:	bfcc      	ite	gt
 8006c32:	2500      	movgt	r5, #0
 8006c34:	2501      	movle	r5, #1
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	f200 8087 	bhi.w	8006d4a <_dtoa_r+0x30a>
 8006c3c:	e8df f003 	tbb	[pc, r3]
 8006c40:	59383a2d 	.word	0x59383a2d
 8006c44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006c48:	441d      	add	r5, r3
 8006c4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006c4e:	2b20      	cmp	r3, #32
 8006c50:	bfc1      	itttt	gt
 8006c52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006c5a:	fa0b f303 	lslgt.w	r3, fp, r3
 8006c5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006c62:	bfda      	itte	le
 8006c64:	f1c3 0320 	rsble	r3, r3, #32
 8006c68:	fa06 f003 	lslle.w	r0, r6, r3
 8006c6c:	4318      	orrgt	r0, r3
 8006c6e:	f7f9 fc51 	bl	8000514 <__aeabi_ui2d>
 8006c72:	2301      	movs	r3, #1
 8006c74:	4606      	mov	r6, r0
 8006c76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006c7a:	3d01      	subs	r5, #1
 8006c7c:	930e      	str	r3, [sp, #56]	; 0x38
 8006c7e:	e76a      	b.n	8006b56 <_dtoa_r+0x116>
 8006c80:	2301      	movs	r3, #1
 8006c82:	e7b2      	b.n	8006bea <_dtoa_r+0x1aa>
 8006c84:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c86:	e7b1      	b.n	8006bec <_dtoa_r+0x1ac>
 8006c88:	9b04      	ldr	r3, [sp, #16]
 8006c8a:	9a00      	ldr	r2, [sp, #0]
 8006c8c:	1a9b      	subs	r3, r3, r2
 8006c8e:	9304      	str	r3, [sp, #16]
 8006c90:	4253      	negs	r3, r2
 8006c92:	9307      	str	r3, [sp, #28]
 8006c94:	2300      	movs	r3, #0
 8006c96:	930a      	str	r3, [sp, #40]	; 0x28
 8006c98:	e7bf      	b.n	8006c1a <_dtoa_r+0x1da>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9308      	str	r3, [sp, #32]
 8006c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	dc55      	bgt.n	8006d50 <_dtoa_r+0x310>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006caa:	461a      	mov	r2, r3
 8006cac:	9209      	str	r2, [sp, #36]	; 0x24
 8006cae:	e00c      	b.n	8006cca <_dtoa_r+0x28a>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e7f3      	b.n	8006c9c <_dtoa_r+0x25c>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cb8:	9308      	str	r3, [sp, #32]
 8006cba:	9b00      	ldr	r3, [sp, #0]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	9302      	str	r3, [sp, #8]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	9303      	str	r3, [sp, #12]
 8006cc6:	bfb8      	it	lt
 8006cc8:	2301      	movlt	r3, #1
 8006cca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006ccc:	2200      	movs	r2, #0
 8006cce:	6042      	str	r2, [r0, #4]
 8006cd0:	2204      	movs	r2, #4
 8006cd2:	f102 0614 	add.w	r6, r2, #20
 8006cd6:	429e      	cmp	r6, r3
 8006cd8:	6841      	ldr	r1, [r0, #4]
 8006cda:	d93d      	bls.n	8006d58 <_dtoa_r+0x318>
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f000 fcb7 	bl	8007650 <_Balloc>
 8006ce2:	9001      	str	r0, [sp, #4]
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	d13b      	bne.n	8006d60 <_dtoa_r+0x320>
 8006ce8:	4b11      	ldr	r3, [pc, #68]	; (8006d30 <_dtoa_r+0x2f0>)
 8006cea:	4602      	mov	r2, r0
 8006cec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006cf0:	e6c0      	b.n	8006a74 <_dtoa_r+0x34>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e7df      	b.n	8006cb6 <_dtoa_r+0x276>
 8006cf6:	bf00      	nop
 8006cf8:	636f4361 	.word	0x636f4361
 8006cfc:	3fd287a7 	.word	0x3fd287a7
 8006d00:	8b60c8b3 	.word	0x8b60c8b3
 8006d04:	3fc68a28 	.word	0x3fc68a28
 8006d08:	509f79fb 	.word	0x509f79fb
 8006d0c:	3fd34413 	.word	0x3fd34413
 8006d10:	08008f81 	.word	0x08008f81
 8006d14:	08008f98 	.word	0x08008f98
 8006d18:	7ff00000 	.word	0x7ff00000
 8006d1c:	08008f7d 	.word	0x08008f7d
 8006d20:	08008f74 	.word	0x08008f74
 8006d24:	08008f51 	.word	0x08008f51
 8006d28:	3ff80000 	.word	0x3ff80000
 8006d2c:	08009088 	.word	0x08009088
 8006d30:	08008ff3 	.word	0x08008ff3
 8006d34:	2501      	movs	r5, #1
 8006d36:	2300      	movs	r3, #0
 8006d38:	9306      	str	r3, [sp, #24]
 8006d3a:	9508      	str	r5, [sp, #32]
 8006d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d44:	2200      	movs	r2, #0
 8006d46:	2312      	movs	r3, #18
 8006d48:	e7b0      	b.n	8006cac <_dtoa_r+0x26c>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	9308      	str	r3, [sp, #32]
 8006d4e:	e7f5      	b.n	8006d3c <_dtoa_r+0x2fc>
 8006d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d56:	e7b8      	b.n	8006cca <_dtoa_r+0x28a>
 8006d58:	3101      	adds	r1, #1
 8006d5a:	6041      	str	r1, [r0, #4]
 8006d5c:	0052      	lsls	r2, r2, #1
 8006d5e:	e7b8      	b.n	8006cd2 <_dtoa_r+0x292>
 8006d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d62:	9a01      	ldr	r2, [sp, #4]
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	9b03      	ldr	r3, [sp, #12]
 8006d68:	2b0e      	cmp	r3, #14
 8006d6a:	f200 809d 	bhi.w	8006ea8 <_dtoa_r+0x468>
 8006d6e:	2d00      	cmp	r5, #0
 8006d70:	f000 809a 	beq.w	8006ea8 <_dtoa_r+0x468>
 8006d74:	9b00      	ldr	r3, [sp, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	dd32      	ble.n	8006de0 <_dtoa_r+0x3a0>
 8006d7a:	4ab7      	ldr	r2, [pc, #732]	; (8007058 <_dtoa_r+0x618>)
 8006d7c:	f003 030f 	and.w	r3, r3, #15
 8006d80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006d84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d88:	9b00      	ldr	r3, [sp, #0]
 8006d8a:	05d8      	lsls	r0, r3, #23
 8006d8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006d90:	d516      	bpl.n	8006dc0 <_dtoa_r+0x380>
 8006d92:	4bb2      	ldr	r3, [pc, #712]	; (800705c <_dtoa_r+0x61c>)
 8006d94:	ec51 0b19 	vmov	r0, r1, d9
 8006d98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d9c:	f7f9 fd5e 	bl	800085c <__aeabi_ddiv>
 8006da0:	f007 070f 	and.w	r7, r7, #15
 8006da4:	4682      	mov	sl, r0
 8006da6:	468b      	mov	fp, r1
 8006da8:	2503      	movs	r5, #3
 8006daa:	4eac      	ldr	r6, [pc, #688]	; (800705c <_dtoa_r+0x61c>)
 8006dac:	b957      	cbnz	r7, 8006dc4 <_dtoa_r+0x384>
 8006dae:	4642      	mov	r2, r8
 8006db0:	464b      	mov	r3, r9
 8006db2:	4650      	mov	r0, sl
 8006db4:	4659      	mov	r1, fp
 8006db6:	f7f9 fd51 	bl	800085c <__aeabi_ddiv>
 8006dba:	4682      	mov	sl, r0
 8006dbc:	468b      	mov	fp, r1
 8006dbe:	e028      	b.n	8006e12 <_dtoa_r+0x3d2>
 8006dc0:	2502      	movs	r5, #2
 8006dc2:	e7f2      	b.n	8006daa <_dtoa_r+0x36a>
 8006dc4:	07f9      	lsls	r1, r7, #31
 8006dc6:	d508      	bpl.n	8006dda <_dtoa_r+0x39a>
 8006dc8:	4640      	mov	r0, r8
 8006dca:	4649      	mov	r1, r9
 8006dcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006dd0:	f7f9 fc1a 	bl	8000608 <__aeabi_dmul>
 8006dd4:	3501      	adds	r5, #1
 8006dd6:	4680      	mov	r8, r0
 8006dd8:	4689      	mov	r9, r1
 8006dda:	107f      	asrs	r7, r7, #1
 8006ddc:	3608      	adds	r6, #8
 8006dde:	e7e5      	b.n	8006dac <_dtoa_r+0x36c>
 8006de0:	f000 809b 	beq.w	8006f1a <_dtoa_r+0x4da>
 8006de4:	9b00      	ldr	r3, [sp, #0]
 8006de6:	4f9d      	ldr	r7, [pc, #628]	; (800705c <_dtoa_r+0x61c>)
 8006de8:	425e      	negs	r6, r3
 8006dea:	4b9b      	ldr	r3, [pc, #620]	; (8007058 <_dtoa_r+0x618>)
 8006dec:	f006 020f 	and.w	r2, r6, #15
 8006df0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df8:	ec51 0b19 	vmov	r0, r1, d9
 8006dfc:	f7f9 fc04 	bl	8000608 <__aeabi_dmul>
 8006e00:	1136      	asrs	r6, r6, #4
 8006e02:	4682      	mov	sl, r0
 8006e04:	468b      	mov	fp, r1
 8006e06:	2300      	movs	r3, #0
 8006e08:	2502      	movs	r5, #2
 8006e0a:	2e00      	cmp	r6, #0
 8006e0c:	d17a      	bne.n	8006f04 <_dtoa_r+0x4c4>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1d3      	bne.n	8006dba <_dtoa_r+0x37a>
 8006e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 8082 	beq.w	8006f1e <_dtoa_r+0x4de>
 8006e1a:	4b91      	ldr	r3, [pc, #580]	; (8007060 <_dtoa_r+0x620>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	4650      	mov	r0, sl
 8006e20:	4659      	mov	r1, fp
 8006e22:	f7f9 fe63 	bl	8000aec <__aeabi_dcmplt>
 8006e26:	2800      	cmp	r0, #0
 8006e28:	d079      	beq.n	8006f1e <_dtoa_r+0x4de>
 8006e2a:	9b03      	ldr	r3, [sp, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d076      	beq.n	8006f1e <_dtoa_r+0x4de>
 8006e30:	9b02      	ldr	r3, [sp, #8]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	dd36      	ble.n	8006ea4 <_dtoa_r+0x464>
 8006e36:	9b00      	ldr	r3, [sp, #0]
 8006e38:	4650      	mov	r0, sl
 8006e3a:	4659      	mov	r1, fp
 8006e3c:	1e5f      	subs	r7, r3, #1
 8006e3e:	2200      	movs	r2, #0
 8006e40:	4b88      	ldr	r3, [pc, #544]	; (8007064 <_dtoa_r+0x624>)
 8006e42:	f7f9 fbe1 	bl	8000608 <__aeabi_dmul>
 8006e46:	9e02      	ldr	r6, [sp, #8]
 8006e48:	4682      	mov	sl, r0
 8006e4a:	468b      	mov	fp, r1
 8006e4c:	3501      	adds	r5, #1
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f7f9 fb70 	bl	8000534 <__aeabi_i2d>
 8006e54:	4652      	mov	r2, sl
 8006e56:	465b      	mov	r3, fp
 8006e58:	f7f9 fbd6 	bl	8000608 <__aeabi_dmul>
 8006e5c:	4b82      	ldr	r3, [pc, #520]	; (8007068 <_dtoa_r+0x628>)
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f7f9 fa1c 	bl	800029c <__adddf3>
 8006e64:	46d0      	mov	r8, sl
 8006e66:	46d9      	mov	r9, fp
 8006e68:	4682      	mov	sl, r0
 8006e6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006e6e:	2e00      	cmp	r6, #0
 8006e70:	d158      	bne.n	8006f24 <_dtoa_r+0x4e4>
 8006e72:	4b7e      	ldr	r3, [pc, #504]	; (800706c <_dtoa_r+0x62c>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	4640      	mov	r0, r8
 8006e78:	4649      	mov	r1, r9
 8006e7a:	f7f9 fa0d 	bl	8000298 <__aeabi_dsub>
 8006e7e:	4652      	mov	r2, sl
 8006e80:	465b      	mov	r3, fp
 8006e82:	4680      	mov	r8, r0
 8006e84:	4689      	mov	r9, r1
 8006e86:	f7f9 fe4f 	bl	8000b28 <__aeabi_dcmpgt>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	f040 8295 	bne.w	80073ba <_dtoa_r+0x97a>
 8006e90:	4652      	mov	r2, sl
 8006e92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006e96:	4640      	mov	r0, r8
 8006e98:	4649      	mov	r1, r9
 8006e9a:	f7f9 fe27 	bl	8000aec <__aeabi_dcmplt>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	f040 8289 	bne.w	80073b6 <_dtoa_r+0x976>
 8006ea4:	ec5b ab19 	vmov	sl, fp, d9
 8006ea8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f2c0 8148 	blt.w	8007140 <_dtoa_r+0x700>
 8006eb0:	9a00      	ldr	r2, [sp, #0]
 8006eb2:	2a0e      	cmp	r2, #14
 8006eb4:	f300 8144 	bgt.w	8007140 <_dtoa_r+0x700>
 8006eb8:	4b67      	ldr	r3, [pc, #412]	; (8007058 <_dtoa_r+0x618>)
 8006eba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ebe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f280 80d5 	bge.w	8007074 <_dtoa_r+0x634>
 8006eca:	9b03      	ldr	r3, [sp, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f300 80d1 	bgt.w	8007074 <_dtoa_r+0x634>
 8006ed2:	f040 826f 	bne.w	80073b4 <_dtoa_r+0x974>
 8006ed6:	4b65      	ldr	r3, [pc, #404]	; (800706c <_dtoa_r+0x62c>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	4640      	mov	r0, r8
 8006edc:	4649      	mov	r1, r9
 8006ede:	f7f9 fb93 	bl	8000608 <__aeabi_dmul>
 8006ee2:	4652      	mov	r2, sl
 8006ee4:	465b      	mov	r3, fp
 8006ee6:	f7f9 fe15 	bl	8000b14 <__aeabi_dcmpge>
 8006eea:	9e03      	ldr	r6, [sp, #12]
 8006eec:	4637      	mov	r7, r6
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	f040 8245 	bne.w	800737e <_dtoa_r+0x93e>
 8006ef4:	9d01      	ldr	r5, [sp, #4]
 8006ef6:	2331      	movs	r3, #49	; 0x31
 8006ef8:	f805 3b01 	strb.w	r3, [r5], #1
 8006efc:	9b00      	ldr	r3, [sp, #0]
 8006efe:	3301      	adds	r3, #1
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	e240      	b.n	8007386 <_dtoa_r+0x946>
 8006f04:	07f2      	lsls	r2, r6, #31
 8006f06:	d505      	bpl.n	8006f14 <_dtoa_r+0x4d4>
 8006f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f0c:	f7f9 fb7c 	bl	8000608 <__aeabi_dmul>
 8006f10:	3501      	adds	r5, #1
 8006f12:	2301      	movs	r3, #1
 8006f14:	1076      	asrs	r6, r6, #1
 8006f16:	3708      	adds	r7, #8
 8006f18:	e777      	b.n	8006e0a <_dtoa_r+0x3ca>
 8006f1a:	2502      	movs	r5, #2
 8006f1c:	e779      	b.n	8006e12 <_dtoa_r+0x3d2>
 8006f1e:	9f00      	ldr	r7, [sp, #0]
 8006f20:	9e03      	ldr	r6, [sp, #12]
 8006f22:	e794      	b.n	8006e4e <_dtoa_r+0x40e>
 8006f24:	9901      	ldr	r1, [sp, #4]
 8006f26:	4b4c      	ldr	r3, [pc, #304]	; (8007058 <_dtoa_r+0x618>)
 8006f28:	4431      	add	r1, r6
 8006f2a:	910d      	str	r1, [sp, #52]	; 0x34
 8006f2c:	9908      	ldr	r1, [sp, #32]
 8006f2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f36:	2900      	cmp	r1, #0
 8006f38:	d043      	beq.n	8006fc2 <_dtoa_r+0x582>
 8006f3a:	494d      	ldr	r1, [pc, #308]	; (8007070 <_dtoa_r+0x630>)
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	f7f9 fc8d 	bl	800085c <__aeabi_ddiv>
 8006f42:	4652      	mov	r2, sl
 8006f44:	465b      	mov	r3, fp
 8006f46:	f7f9 f9a7 	bl	8000298 <__aeabi_dsub>
 8006f4a:	9d01      	ldr	r5, [sp, #4]
 8006f4c:	4682      	mov	sl, r0
 8006f4e:	468b      	mov	fp, r1
 8006f50:	4649      	mov	r1, r9
 8006f52:	4640      	mov	r0, r8
 8006f54:	f7f9 fe08 	bl	8000b68 <__aeabi_d2iz>
 8006f58:	4606      	mov	r6, r0
 8006f5a:	f7f9 faeb 	bl	8000534 <__aeabi_i2d>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	4640      	mov	r0, r8
 8006f64:	4649      	mov	r1, r9
 8006f66:	f7f9 f997 	bl	8000298 <__aeabi_dsub>
 8006f6a:	3630      	adds	r6, #48	; 0x30
 8006f6c:	f805 6b01 	strb.w	r6, [r5], #1
 8006f70:	4652      	mov	r2, sl
 8006f72:	465b      	mov	r3, fp
 8006f74:	4680      	mov	r8, r0
 8006f76:	4689      	mov	r9, r1
 8006f78:	f7f9 fdb8 	bl	8000aec <__aeabi_dcmplt>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d163      	bne.n	8007048 <_dtoa_r+0x608>
 8006f80:	4642      	mov	r2, r8
 8006f82:	464b      	mov	r3, r9
 8006f84:	4936      	ldr	r1, [pc, #216]	; (8007060 <_dtoa_r+0x620>)
 8006f86:	2000      	movs	r0, #0
 8006f88:	f7f9 f986 	bl	8000298 <__aeabi_dsub>
 8006f8c:	4652      	mov	r2, sl
 8006f8e:	465b      	mov	r3, fp
 8006f90:	f7f9 fdac 	bl	8000aec <__aeabi_dcmplt>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	f040 80b5 	bne.w	8007104 <_dtoa_r+0x6c4>
 8006f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f9c:	429d      	cmp	r5, r3
 8006f9e:	d081      	beq.n	8006ea4 <_dtoa_r+0x464>
 8006fa0:	4b30      	ldr	r3, [pc, #192]	; (8007064 <_dtoa_r+0x624>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	4650      	mov	r0, sl
 8006fa6:	4659      	mov	r1, fp
 8006fa8:	f7f9 fb2e 	bl	8000608 <__aeabi_dmul>
 8006fac:	4b2d      	ldr	r3, [pc, #180]	; (8007064 <_dtoa_r+0x624>)
 8006fae:	4682      	mov	sl, r0
 8006fb0:	468b      	mov	fp, r1
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	4649      	mov	r1, r9
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f7f9 fb26 	bl	8000608 <__aeabi_dmul>
 8006fbc:	4680      	mov	r8, r0
 8006fbe:	4689      	mov	r9, r1
 8006fc0:	e7c6      	b.n	8006f50 <_dtoa_r+0x510>
 8006fc2:	4650      	mov	r0, sl
 8006fc4:	4659      	mov	r1, fp
 8006fc6:	f7f9 fb1f 	bl	8000608 <__aeabi_dmul>
 8006fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fcc:	9d01      	ldr	r5, [sp, #4]
 8006fce:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fd0:	4682      	mov	sl, r0
 8006fd2:	468b      	mov	fp, r1
 8006fd4:	4649      	mov	r1, r9
 8006fd6:	4640      	mov	r0, r8
 8006fd8:	f7f9 fdc6 	bl	8000b68 <__aeabi_d2iz>
 8006fdc:	4606      	mov	r6, r0
 8006fde:	f7f9 faa9 	bl	8000534 <__aeabi_i2d>
 8006fe2:	3630      	adds	r6, #48	; 0x30
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4640      	mov	r0, r8
 8006fea:	4649      	mov	r1, r9
 8006fec:	f7f9 f954 	bl	8000298 <__aeabi_dsub>
 8006ff0:	f805 6b01 	strb.w	r6, [r5], #1
 8006ff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ff6:	429d      	cmp	r5, r3
 8006ff8:	4680      	mov	r8, r0
 8006ffa:	4689      	mov	r9, r1
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	d124      	bne.n	800704c <_dtoa_r+0x60c>
 8007002:	4b1b      	ldr	r3, [pc, #108]	; (8007070 <_dtoa_r+0x630>)
 8007004:	4650      	mov	r0, sl
 8007006:	4659      	mov	r1, fp
 8007008:	f7f9 f948 	bl	800029c <__adddf3>
 800700c:	4602      	mov	r2, r0
 800700e:	460b      	mov	r3, r1
 8007010:	4640      	mov	r0, r8
 8007012:	4649      	mov	r1, r9
 8007014:	f7f9 fd88 	bl	8000b28 <__aeabi_dcmpgt>
 8007018:	2800      	cmp	r0, #0
 800701a:	d173      	bne.n	8007104 <_dtoa_r+0x6c4>
 800701c:	4652      	mov	r2, sl
 800701e:	465b      	mov	r3, fp
 8007020:	4913      	ldr	r1, [pc, #76]	; (8007070 <_dtoa_r+0x630>)
 8007022:	2000      	movs	r0, #0
 8007024:	f7f9 f938 	bl	8000298 <__aeabi_dsub>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	4640      	mov	r0, r8
 800702e:	4649      	mov	r1, r9
 8007030:	f7f9 fd5c 	bl	8000aec <__aeabi_dcmplt>
 8007034:	2800      	cmp	r0, #0
 8007036:	f43f af35 	beq.w	8006ea4 <_dtoa_r+0x464>
 800703a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800703c:	1e6b      	subs	r3, r5, #1
 800703e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007040:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007044:	2b30      	cmp	r3, #48	; 0x30
 8007046:	d0f8      	beq.n	800703a <_dtoa_r+0x5fa>
 8007048:	9700      	str	r7, [sp, #0]
 800704a:	e049      	b.n	80070e0 <_dtoa_r+0x6a0>
 800704c:	4b05      	ldr	r3, [pc, #20]	; (8007064 <_dtoa_r+0x624>)
 800704e:	f7f9 fadb 	bl	8000608 <__aeabi_dmul>
 8007052:	4680      	mov	r8, r0
 8007054:	4689      	mov	r9, r1
 8007056:	e7bd      	b.n	8006fd4 <_dtoa_r+0x594>
 8007058:	08009088 	.word	0x08009088
 800705c:	08009060 	.word	0x08009060
 8007060:	3ff00000 	.word	0x3ff00000
 8007064:	40240000 	.word	0x40240000
 8007068:	401c0000 	.word	0x401c0000
 800706c:	40140000 	.word	0x40140000
 8007070:	3fe00000 	.word	0x3fe00000
 8007074:	9d01      	ldr	r5, [sp, #4]
 8007076:	4656      	mov	r6, sl
 8007078:	465f      	mov	r7, fp
 800707a:	4642      	mov	r2, r8
 800707c:	464b      	mov	r3, r9
 800707e:	4630      	mov	r0, r6
 8007080:	4639      	mov	r1, r7
 8007082:	f7f9 fbeb 	bl	800085c <__aeabi_ddiv>
 8007086:	f7f9 fd6f 	bl	8000b68 <__aeabi_d2iz>
 800708a:	4682      	mov	sl, r0
 800708c:	f7f9 fa52 	bl	8000534 <__aeabi_i2d>
 8007090:	4642      	mov	r2, r8
 8007092:	464b      	mov	r3, r9
 8007094:	f7f9 fab8 	bl	8000608 <__aeabi_dmul>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	4630      	mov	r0, r6
 800709e:	4639      	mov	r1, r7
 80070a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80070a4:	f7f9 f8f8 	bl	8000298 <__aeabi_dsub>
 80070a8:	f805 6b01 	strb.w	r6, [r5], #1
 80070ac:	9e01      	ldr	r6, [sp, #4]
 80070ae:	9f03      	ldr	r7, [sp, #12]
 80070b0:	1bae      	subs	r6, r5, r6
 80070b2:	42b7      	cmp	r7, r6
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	d135      	bne.n	8007126 <_dtoa_r+0x6e6>
 80070ba:	f7f9 f8ef 	bl	800029c <__adddf3>
 80070be:	4642      	mov	r2, r8
 80070c0:	464b      	mov	r3, r9
 80070c2:	4606      	mov	r6, r0
 80070c4:	460f      	mov	r7, r1
 80070c6:	f7f9 fd2f 	bl	8000b28 <__aeabi_dcmpgt>
 80070ca:	b9d0      	cbnz	r0, 8007102 <_dtoa_r+0x6c2>
 80070cc:	4642      	mov	r2, r8
 80070ce:	464b      	mov	r3, r9
 80070d0:	4630      	mov	r0, r6
 80070d2:	4639      	mov	r1, r7
 80070d4:	f7f9 fd00 	bl	8000ad8 <__aeabi_dcmpeq>
 80070d8:	b110      	cbz	r0, 80070e0 <_dtoa_r+0x6a0>
 80070da:	f01a 0f01 	tst.w	sl, #1
 80070de:	d110      	bne.n	8007102 <_dtoa_r+0x6c2>
 80070e0:	4620      	mov	r0, r4
 80070e2:	ee18 1a10 	vmov	r1, s16
 80070e6:	f000 faf3 	bl	80076d0 <_Bfree>
 80070ea:	2300      	movs	r3, #0
 80070ec:	9800      	ldr	r0, [sp, #0]
 80070ee:	702b      	strb	r3, [r5, #0]
 80070f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070f2:	3001      	adds	r0, #1
 80070f4:	6018      	str	r0, [r3, #0]
 80070f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f43f acf1 	beq.w	8006ae0 <_dtoa_r+0xa0>
 80070fe:	601d      	str	r5, [r3, #0]
 8007100:	e4ee      	b.n	8006ae0 <_dtoa_r+0xa0>
 8007102:	9f00      	ldr	r7, [sp, #0]
 8007104:	462b      	mov	r3, r5
 8007106:	461d      	mov	r5, r3
 8007108:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800710c:	2a39      	cmp	r2, #57	; 0x39
 800710e:	d106      	bne.n	800711e <_dtoa_r+0x6de>
 8007110:	9a01      	ldr	r2, [sp, #4]
 8007112:	429a      	cmp	r2, r3
 8007114:	d1f7      	bne.n	8007106 <_dtoa_r+0x6c6>
 8007116:	9901      	ldr	r1, [sp, #4]
 8007118:	2230      	movs	r2, #48	; 0x30
 800711a:	3701      	adds	r7, #1
 800711c:	700a      	strb	r2, [r1, #0]
 800711e:	781a      	ldrb	r2, [r3, #0]
 8007120:	3201      	adds	r2, #1
 8007122:	701a      	strb	r2, [r3, #0]
 8007124:	e790      	b.n	8007048 <_dtoa_r+0x608>
 8007126:	4ba6      	ldr	r3, [pc, #664]	; (80073c0 <_dtoa_r+0x980>)
 8007128:	2200      	movs	r2, #0
 800712a:	f7f9 fa6d 	bl	8000608 <__aeabi_dmul>
 800712e:	2200      	movs	r2, #0
 8007130:	2300      	movs	r3, #0
 8007132:	4606      	mov	r6, r0
 8007134:	460f      	mov	r7, r1
 8007136:	f7f9 fccf 	bl	8000ad8 <__aeabi_dcmpeq>
 800713a:	2800      	cmp	r0, #0
 800713c:	d09d      	beq.n	800707a <_dtoa_r+0x63a>
 800713e:	e7cf      	b.n	80070e0 <_dtoa_r+0x6a0>
 8007140:	9a08      	ldr	r2, [sp, #32]
 8007142:	2a00      	cmp	r2, #0
 8007144:	f000 80d7 	beq.w	80072f6 <_dtoa_r+0x8b6>
 8007148:	9a06      	ldr	r2, [sp, #24]
 800714a:	2a01      	cmp	r2, #1
 800714c:	f300 80ba 	bgt.w	80072c4 <_dtoa_r+0x884>
 8007150:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007152:	2a00      	cmp	r2, #0
 8007154:	f000 80b2 	beq.w	80072bc <_dtoa_r+0x87c>
 8007158:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800715c:	9e07      	ldr	r6, [sp, #28]
 800715e:	9d04      	ldr	r5, [sp, #16]
 8007160:	9a04      	ldr	r2, [sp, #16]
 8007162:	441a      	add	r2, r3
 8007164:	9204      	str	r2, [sp, #16]
 8007166:	9a05      	ldr	r2, [sp, #20]
 8007168:	2101      	movs	r1, #1
 800716a:	441a      	add	r2, r3
 800716c:	4620      	mov	r0, r4
 800716e:	9205      	str	r2, [sp, #20]
 8007170:	f000 fb66 	bl	8007840 <__i2b>
 8007174:	4607      	mov	r7, r0
 8007176:	2d00      	cmp	r5, #0
 8007178:	dd0c      	ble.n	8007194 <_dtoa_r+0x754>
 800717a:	9b05      	ldr	r3, [sp, #20]
 800717c:	2b00      	cmp	r3, #0
 800717e:	dd09      	ble.n	8007194 <_dtoa_r+0x754>
 8007180:	42ab      	cmp	r3, r5
 8007182:	9a04      	ldr	r2, [sp, #16]
 8007184:	bfa8      	it	ge
 8007186:	462b      	movge	r3, r5
 8007188:	1ad2      	subs	r2, r2, r3
 800718a:	9204      	str	r2, [sp, #16]
 800718c:	9a05      	ldr	r2, [sp, #20]
 800718e:	1aed      	subs	r5, r5, r3
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	9305      	str	r3, [sp, #20]
 8007194:	9b07      	ldr	r3, [sp, #28]
 8007196:	b31b      	cbz	r3, 80071e0 <_dtoa_r+0x7a0>
 8007198:	9b08      	ldr	r3, [sp, #32]
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 80af 	beq.w	80072fe <_dtoa_r+0x8be>
 80071a0:	2e00      	cmp	r6, #0
 80071a2:	dd13      	ble.n	80071cc <_dtoa_r+0x78c>
 80071a4:	4639      	mov	r1, r7
 80071a6:	4632      	mov	r2, r6
 80071a8:	4620      	mov	r0, r4
 80071aa:	f000 fc09 	bl	80079c0 <__pow5mult>
 80071ae:	ee18 2a10 	vmov	r2, s16
 80071b2:	4601      	mov	r1, r0
 80071b4:	4607      	mov	r7, r0
 80071b6:	4620      	mov	r0, r4
 80071b8:	f000 fb58 	bl	800786c <__multiply>
 80071bc:	ee18 1a10 	vmov	r1, s16
 80071c0:	4680      	mov	r8, r0
 80071c2:	4620      	mov	r0, r4
 80071c4:	f000 fa84 	bl	80076d0 <_Bfree>
 80071c8:	ee08 8a10 	vmov	s16, r8
 80071cc:	9b07      	ldr	r3, [sp, #28]
 80071ce:	1b9a      	subs	r2, r3, r6
 80071d0:	d006      	beq.n	80071e0 <_dtoa_r+0x7a0>
 80071d2:	ee18 1a10 	vmov	r1, s16
 80071d6:	4620      	mov	r0, r4
 80071d8:	f000 fbf2 	bl	80079c0 <__pow5mult>
 80071dc:	ee08 0a10 	vmov	s16, r0
 80071e0:	2101      	movs	r1, #1
 80071e2:	4620      	mov	r0, r4
 80071e4:	f000 fb2c 	bl	8007840 <__i2b>
 80071e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	4606      	mov	r6, r0
 80071ee:	f340 8088 	ble.w	8007302 <_dtoa_r+0x8c2>
 80071f2:	461a      	mov	r2, r3
 80071f4:	4601      	mov	r1, r0
 80071f6:	4620      	mov	r0, r4
 80071f8:	f000 fbe2 	bl	80079c0 <__pow5mult>
 80071fc:	9b06      	ldr	r3, [sp, #24]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	4606      	mov	r6, r0
 8007202:	f340 8081 	ble.w	8007308 <_dtoa_r+0x8c8>
 8007206:	f04f 0800 	mov.w	r8, #0
 800720a:	6933      	ldr	r3, [r6, #16]
 800720c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007210:	6918      	ldr	r0, [r3, #16]
 8007212:	f000 fac5 	bl	80077a0 <__hi0bits>
 8007216:	f1c0 0020 	rsb	r0, r0, #32
 800721a:	9b05      	ldr	r3, [sp, #20]
 800721c:	4418      	add	r0, r3
 800721e:	f010 001f 	ands.w	r0, r0, #31
 8007222:	f000 8092 	beq.w	800734a <_dtoa_r+0x90a>
 8007226:	f1c0 0320 	rsb	r3, r0, #32
 800722a:	2b04      	cmp	r3, #4
 800722c:	f340 808a 	ble.w	8007344 <_dtoa_r+0x904>
 8007230:	f1c0 001c 	rsb	r0, r0, #28
 8007234:	9b04      	ldr	r3, [sp, #16]
 8007236:	4403      	add	r3, r0
 8007238:	9304      	str	r3, [sp, #16]
 800723a:	9b05      	ldr	r3, [sp, #20]
 800723c:	4403      	add	r3, r0
 800723e:	4405      	add	r5, r0
 8007240:	9305      	str	r3, [sp, #20]
 8007242:	9b04      	ldr	r3, [sp, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	dd07      	ble.n	8007258 <_dtoa_r+0x818>
 8007248:	ee18 1a10 	vmov	r1, s16
 800724c:	461a      	mov	r2, r3
 800724e:	4620      	mov	r0, r4
 8007250:	f000 fc10 	bl	8007a74 <__lshift>
 8007254:	ee08 0a10 	vmov	s16, r0
 8007258:	9b05      	ldr	r3, [sp, #20]
 800725a:	2b00      	cmp	r3, #0
 800725c:	dd05      	ble.n	800726a <_dtoa_r+0x82a>
 800725e:	4631      	mov	r1, r6
 8007260:	461a      	mov	r2, r3
 8007262:	4620      	mov	r0, r4
 8007264:	f000 fc06 	bl	8007a74 <__lshift>
 8007268:	4606      	mov	r6, r0
 800726a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800726c:	2b00      	cmp	r3, #0
 800726e:	d06e      	beq.n	800734e <_dtoa_r+0x90e>
 8007270:	ee18 0a10 	vmov	r0, s16
 8007274:	4631      	mov	r1, r6
 8007276:	f000 fc6d 	bl	8007b54 <__mcmp>
 800727a:	2800      	cmp	r0, #0
 800727c:	da67      	bge.n	800734e <_dtoa_r+0x90e>
 800727e:	9b00      	ldr	r3, [sp, #0]
 8007280:	3b01      	subs	r3, #1
 8007282:	ee18 1a10 	vmov	r1, s16
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	220a      	movs	r2, #10
 800728a:	2300      	movs	r3, #0
 800728c:	4620      	mov	r0, r4
 800728e:	f000 fa41 	bl	8007714 <__multadd>
 8007292:	9b08      	ldr	r3, [sp, #32]
 8007294:	ee08 0a10 	vmov	s16, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 81b1 	beq.w	8007600 <_dtoa_r+0xbc0>
 800729e:	2300      	movs	r3, #0
 80072a0:	4639      	mov	r1, r7
 80072a2:	220a      	movs	r2, #10
 80072a4:	4620      	mov	r0, r4
 80072a6:	f000 fa35 	bl	8007714 <__multadd>
 80072aa:	9b02      	ldr	r3, [sp, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	4607      	mov	r7, r0
 80072b0:	f300 808e 	bgt.w	80073d0 <_dtoa_r+0x990>
 80072b4:	9b06      	ldr	r3, [sp, #24]
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	dc51      	bgt.n	800735e <_dtoa_r+0x91e>
 80072ba:	e089      	b.n	80073d0 <_dtoa_r+0x990>
 80072bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80072c2:	e74b      	b.n	800715c <_dtoa_r+0x71c>
 80072c4:	9b03      	ldr	r3, [sp, #12]
 80072c6:	1e5e      	subs	r6, r3, #1
 80072c8:	9b07      	ldr	r3, [sp, #28]
 80072ca:	42b3      	cmp	r3, r6
 80072cc:	bfbf      	itttt	lt
 80072ce:	9b07      	ldrlt	r3, [sp, #28]
 80072d0:	9607      	strlt	r6, [sp, #28]
 80072d2:	1af2      	sublt	r2, r6, r3
 80072d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80072d6:	bfb6      	itet	lt
 80072d8:	189b      	addlt	r3, r3, r2
 80072da:	1b9e      	subge	r6, r3, r6
 80072dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80072de:	9b03      	ldr	r3, [sp, #12]
 80072e0:	bfb8      	it	lt
 80072e2:	2600      	movlt	r6, #0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	bfb7      	itett	lt
 80072e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80072ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80072f0:	1a9d      	sublt	r5, r3, r2
 80072f2:	2300      	movlt	r3, #0
 80072f4:	e734      	b.n	8007160 <_dtoa_r+0x720>
 80072f6:	9e07      	ldr	r6, [sp, #28]
 80072f8:	9d04      	ldr	r5, [sp, #16]
 80072fa:	9f08      	ldr	r7, [sp, #32]
 80072fc:	e73b      	b.n	8007176 <_dtoa_r+0x736>
 80072fe:	9a07      	ldr	r2, [sp, #28]
 8007300:	e767      	b.n	80071d2 <_dtoa_r+0x792>
 8007302:	9b06      	ldr	r3, [sp, #24]
 8007304:	2b01      	cmp	r3, #1
 8007306:	dc18      	bgt.n	800733a <_dtoa_r+0x8fa>
 8007308:	f1ba 0f00 	cmp.w	sl, #0
 800730c:	d115      	bne.n	800733a <_dtoa_r+0x8fa>
 800730e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007312:	b993      	cbnz	r3, 800733a <_dtoa_r+0x8fa>
 8007314:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007318:	0d1b      	lsrs	r3, r3, #20
 800731a:	051b      	lsls	r3, r3, #20
 800731c:	b183      	cbz	r3, 8007340 <_dtoa_r+0x900>
 800731e:	9b04      	ldr	r3, [sp, #16]
 8007320:	3301      	adds	r3, #1
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	9b05      	ldr	r3, [sp, #20]
 8007326:	3301      	adds	r3, #1
 8007328:	9305      	str	r3, [sp, #20]
 800732a:	f04f 0801 	mov.w	r8, #1
 800732e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007330:	2b00      	cmp	r3, #0
 8007332:	f47f af6a 	bne.w	800720a <_dtoa_r+0x7ca>
 8007336:	2001      	movs	r0, #1
 8007338:	e76f      	b.n	800721a <_dtoa_r+0x7da>
 800733a:	f04f 0800 	mov.w	r8, #0
 800733e:	e7f6      	b.n	800732e <_dtoa_r+0x8ee>
 8007340:	4698      	mov	r8, r3
 8007342:	e7f4      	b.n	800732e <_dtoa_r+0x8ee>
 8007344:	f43f af7d 	beq.w	8007242 <_dtoa_r+0x802>
 8007348:	4618      	mov	r0, r3
 800734a:	301c      	adds	r0, #28
 800734c:	e772      	b.n	8007234 <_dtoa_r+0x7f4>
 800734e:	9b03      	ldr	r3, [sp, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	dc37      	bgt.n	80073c4 <_dtoa_r+0x984>
 8007354:	9b06      	ldr	r3, [sp, #24]
 8007356:	2b02      	cmp	r3, #2
 8007358:	dd34      	ble.n	80073c4 <_dtoa_r+0x984>
 800735a:	9b03      	ldr	r3, [sp, #12]
 800735c:	9302      	str	r3, [sp, #8]
 800735e:	9b02      	ldr	r3, [sp, #8]
 8007360:	b96b      	cbnz	r3, 800737e <_dtoa_r+0x93e>
 8007362:	4631      	mov	r1, r6
 8007364:	2205      	movs	r2, #5
 8007366:	4620      	mov	r0, r4
 8007368:	f000 f9d4 	bl	8007714 <__multadd>
 800736c:	4601      	mov	r1, r0
 800736e:	4606      	mov	r6, r0
 8007370:	ee18 0a10 	vmov	r0, s16
 8007374:	f000 fbee 	bl	8007b54 <__mcmp>
 8007378:	2800      	cmp	r0, #0
 800737a:	f73f adbb 	bgt.w	8006ef4 <_dtoa_r+0x4b4>
 800737e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007380:	9d01      	ldr	r5, [sp, #4]
 8007382:	43db      	mvns	r3, r3
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	f04f 0800 	mov.w	r8, #0
 800738a:	4631      	mov	r1, r6
 800738c:	4620      	mov	r0, r4
 800738e:	f000 f99f 	bl	80076d0 <_Bfree>
 8007392:	2f00      	cmp	r7, #0
 8007394:	f43f aea4 	beq.w	80070e0 <_dtoa_r+0x6a0>
 8007398:	f1b8 0f00 	cmp.w	r8, #0
 800739c:	d005      	beq.n	80073aa <_dtoa_r+0x96a>
 800739e:	45b8      	cmp	r8, r7
 80073a0:	d003      	beq.n	80073aa <_dtoa_r+0x96a>
 80073a2:	4641      	mov	r1, r8
 80073a4:	4620      	mov	r0, r4
 80073a6:	f000 f993 	bl	80076d0 <_Bfree>
 80073aa:	4639      	mov	r1, r7
 80073ac:	4620      	mov	r0, r4
 80073ae:	f000 f98f 	bl	80076d0 <_Bfree>
 80073b2:	e695      	b.n	80070e0 <_dtoa_r+0x6a0>
 80073b4:	2600      	movs	r6, #0
 80073b6:	4637      	mov	r7, r6
 80073b8:	e7e1      	b.n	800737e <_dtoa_r+0x93e>
 80073ba:	9700      	str	r7, [sp, #0]
 80073bc:	4637      	mov	r7, r6
 80073be:	e599      	b.n	8006ef4 <_dtoa_r+0x4b4>
 80073c0:	40240000 	.word	0x40240000
 80073c4:	9b08      	ldr	r3, [sp, #32]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 80ca 	beq.w	8007560 <_dtoa_r+0xb20>
 80073cc:	9b03      	ldr	r3, [sp, #12]
 80073ce:	9302      	str	r3, [sp, #8]
 80073d0:	2d00      	cmp	r5, #0
 80073d2:	dd05      	ble.n	80073e0 <_dtoa_r+0x9a0>
 80073d4:	4639      	mov	r1, r7
 80073d6:	462a      	mov	r2, r5
 80073d8:	4620      	mov	r0, r4
 80073da:	f000 fb4b 	bl	8007a74 <__lshift>
 80073de:	4607      	mov	r7, r0
 80073e0:	f1b8 0f00 	cmp.w	r8, #0
 80073e4:	d05b      	beq.n	800749e <_dtoa_r+0xa5e>
 80073e6:	6879      	ldr	r1, [r7, #4]
 80073e8:	4620      	mov	r0, r4
 80073ea:	f000 f931 	bl	8007650 <_Balloc>
 80073ee:	4605      	mov	r5, r0
 80073f0:	b928      	cbnz	r0, 80073fe <_dtoa_r+0x9be>
 80073f2:	4b87      	ldr	r3, [pc, #540]	; (8007610 <_dtoa_r+0xbd0>)
 80073f4:	4602      	mov	r2, r0
 80073f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80073fa:	f7ff bb3b 	b.w	8006a74 <_dtoa_r+0x34>
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	3202      	adds	r2, #2
 8007402:	0092      	lsls	r2, r2, #2
 8007404:	f107 010c 	add.w	r1, r7, #12
 8007408:	300c      	adds	r0, #12
 800740a:	f000 f913 	bl	8007634 <memcpy>
 800740e:	2201      	movs	r2, #1
 8007410:	4629      	mov	r1, r5
 8007412:	4620      	mov	r0, r4
 8007414:	f000 fb2e 	bl	8007a74 <__lshift>
 8007418:	9b01      	ldr	r3, [sp, #4]
 800741a:	f103 0901 	add.w	r9, r3, #1
 800741e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007422:	4413      	add	r3, r2
 8007424:	9305      	str	r3, [sp, #20]
 8007426:	f00a 0301 	and.w	r3, sl, #1
 800742a:	46b8      	mov	r8, r7
 800742c:	9304      	str	r3, [sp, #16]
 800742e:	4607      	mov	r7, r0
 8007430:	4631      	mov	r1, r6
 8007432:	ee18 0a10 	vmov	r0, s16
 8007436:	f7ff fa76 	bl	8006926 <quorem>
 800743a:	4641      	mov	r1, r8
 800743c:	9002      	str	r0, [sp, #8]
 800743e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007442:	ee18 0a10 	vmov	r0, s16
 8007446:	f000 fb85 	bl	8007b54 <__mcmp>
 800744a:	463a      	mov	r2, r7
 800744c:	9003      	str	r0, [sp, #12]
 800744e:	4631      	mov	r1, r6
 8007450:	4620      	mov	r0, r4
 8007452:	f000 fb9b 	bl	8007b8c <__mdiff>
 8007456:	68c2      	ldr	r2, [r0, #12]
 8007458:	f109 3bff 	add.w	fp, r9, #4294967295
 800745c:	4605      	mov	r5, r0
 800745e:	bb02      	cbnz	r2, 80074a2 <_dtoa_r+0xa62>
 8007460:	4601      	mov	r1, r0
 8007462:	ee18 0a10 	vmov	r0, s16
 8007466:	f000 fb75 	bl	8007b54 <__mcmp>
 800746a:	4602      	mov	r2, r0
 800746c:	4629      	mov	r1, r5
 800746e:	4620      	mov	r0, r4
 8007470:	9207      	str	r2, [sp, #28]
 8007472:	f000 f92d 	bl	80076d0 <_Bfree>
 8007476:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800747a:	ea43 0102 	orr.w	r1, r3, r2
 800747e:	9b04      	ldr	r3, [sp, #16]
 8007480:	430b      	orrs	r3, r1
 8007482:	464d      	mov	r5, r9
 8007484:	d10f      	bne.n	80074a6 <_dtoa_r+0xa66>
 8007486:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800748a:	d02a      	beq.n	80074e2 <_dtoa_r+0xaa2>
 800748c:	9b03      	ldr	r3, [sp, #12]
 800748e:	2b00      	cmp	r3, #0
 8007490:	dd02      	ble.n	8007498 <_dtoa_r+0xa58>
 8007492:	9b02      	ldr	r3, [sp, #8]
 8007494:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007498:	f88b a000 	strb.w	sl, [fp]
 800749c:	e775      	b.n	800738a <_dtoa_r+0x94a>
 800749e:	4638      	mov	r0, r7
 80074a0:	e7ba      	b.n	8007418 <_dtoa_r+0x9d8>
 80074a2:	2201      	movs	r2, #1
 80074a4:	e7e2      	b.n	800746c <_dtoa_r+0xa2c>
 80074a6:	9b03      	ldr	r3, [sp, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	db04      	blt.n	80074b6 <_dtoa_r+0xa76>
 80074ac:	9906      	ldr	r1, [sp, #24]
 80074ae:	430b      	orrs	r3, r1
 80074b0:	9904      	ldr	r1, [sp, #16]
 80074b2:	430b      	orrs	r3, r1
 80074b4:	d122      	bne.n	80074fc <_dtoa_r+0xabc>
 80074b6:	2a00      	cmp	r2, #0
 80074b8:	ddee      	ble.n	8007498 <_dtoa_r+0xa58>
 80074ba:	ee18 1a10 	vmov	r1, s16
 80074be:	2201      	movs	r2, #1
 80074c0:	4620      	mov	r0, r4
 80074c2:	f000 fad7 	bl	8007a74 <__lshift>
 80074c6:	4631      	mov	r1, r6
 80074c8:	ee08 0a10 	vmov	s16, r0
 80074cc:	f000 fb42 	bl	8007b54 <__mcmp>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	dc03      	bgt.n	80074dc <_dtoa_r+0xa9c>
 80074d4:	d1e0      	bne.n	8007498 <_dtoa_r+0xa58>
 80074d6:	f01a 0f01 	tst.w	sl, #1
 80074da:	d0dd      	beq.n	8007498 <_dtoa_r+0xa58>
 80074dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80074e0:	d1d7      	bne.n	8007492 <_dtoa_r+0xa52>
 80074e2:	2339      	movs	r3, #57	; 0x39
 80074e4:	f88b 3000 	strb.w	r3, [fp]
 80074e8:	462b      	mov	r3, r5
 80074ea:	461d      	mov	r5, r3
 80074ec:	3b01      	subs	r3, #1
 80074ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80074f2:	2a39      	cmp	r2, #57	; 0x39
 80074f4:	d071      	beq.n	80075da <_dtoa_r+0xb9a>
 80074f6:	3201      	adds	r2, #1
 80074f8:	701a      	strb	r2, [r3, #0]
 80074fa:	e746      	b.n	800738a <_dtoa_r+0x94a>
 80074fc:	2a00      	cmp	r2, #0
 80074fe:	dd07      	ble.n	8007510 <_dtoa_r+0xad0>
 8007500:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007504:	d0ed      	beq.n	80074e2 <_dtoa_r+0xaa2>
 8007506:	f10a 0301 	add.w	r3, sl, #1
 800750a:	f88b 3000 	strb.w	r3, [fp]
 800750e:	e73c      	b.n	800738a <_dtoa_r+0x94a>
 8007510:	9b05      	ldr	r3, [sp, #20]
 8007512:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007516:	4599      	cmp	r9, r3
 8007518:	d047      	beq.n	80075aa <_dtoa_r+0xb6a>
 800751a:	ee18 1a10 	vmov	r1, s16
 800751e:	2300      	movs	r3, #0
 8007520:	220a      	movs	r2, #10
 8007522:	4620      	mov	r0, r4
 8007524:	f000 f8f6 	bl	8007714 <__multadd>
 8007528:	45b8      	cmp	r8, r7
 800752a:	ee08 0a10 	vmov	s16, r0
 800752e:	f04f 0300 	mov.w	r3, #0
 8007532:	f04f 020a 	mov.w	r2, #10
 8007536:	4641      	mov	r1, r8
 8007538:	4620      	mov	r0, r4
 800753a:	d106      	bne.n	800754a <_dtoa_r+0xb0a>
 800753c:	f000 f8ea 	bl	8007714 <__multadd>
 8007540:	4680      	mov	r8, r0
 8007542:	4607      	mov	r7, r0
 8007544:	f109 0901 	add.w	r9, r9, #1
 8007548:	e772      	b.n	8007430 <_dtoa_r+0x9f0>
 800754a:	f000 f8e3 	bl	8007714 <__multadd>
 800754e:	4639      	mov	r1, r7
 8007550:	4680      	mov	r8, r0
 8007552:	2300      	movs	r3, #0
 8007554:	220a      	movs	r2, #10
 8007556:	4620      	mov	r0, r4
 8007558:	f000 f8dc 	bl	8007714 <__multadd>
 800755c:	4607      	mov	r7, r0
 800755e:	e7f1      	b.n	8007544 <_dtoa_r+0xb04>
 8007560:	9b03      	ldr	r3, [sp, #12]
 8007562:	9302      	str	r3, [sp, #8]
 8007564:	9d01      	ldr	r5, [sp, #4]
 8007566:	ee18 0a10 	vmov	r0, s16
 800756a:	4631      	mov	r1, r6
 800756c:	f7ff f9db 	bl	8006926 <quorem>
 8007570:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007574:	9b01      	ldr	r3, [sp, #4]
 8007576:	f805 ab01 	strb.w	sl, [r5], #1
 800757a:	1aea      	subs	r2, r5, r3
 800757c:	9b02      	ldr	r3, [sp, #8]
 800757e:	4293      	cmp	r3, r2
 8007580:	dd09      	ble.n	8007596 <_dtoa_r+0xb56>
 8007582:	ee18 1a10 	vmov	r1, s16
 8007586:	2300      	movs	r3, #0
 8007588:	220a      	movs	r2, #10
 800758a:	4620      	mov	r0, r4
 800758c:	f000 f8c2 	bl	8007714 <__multadd>
 8007590:	ee08 0a10 	vmov	s16, r0
 8007594:	e7e7      	b.n	8007566 <_dtoa_r+0xb26>
 8007596:	9b02      	ldr	r3, [sp, #8]
 8007598:	2b00      	cmp	r3, #0
 800759a:	bfc8      	it	gt
 800759c:	461d      	movgt	r5, r3
 800759e:	9b01      	ldr	r3, [sp, #4]
 80075a0:	bfd8      	it	le
 80075a2:	2501      	movle	r5, #1
 80075a4:	441d      	add	r5, r3
 80075a6:	f04f 0800 	mov.w	r8, #0
 80075aa:	ee18 1a10 	vmov	r1, s16
 80075ae:	2201      	movs	r2, #1
 80075b0:	4620      	mov	r0, r4
 80075b2:	f000 fa5f 	bl	8007a74 <__lshift>
 80075b6:	4631      	mov	r1, r6
 80075b8:	ee08 0a10 	vmov	s16, r0
 80075bc:	f000 faca 	bl	8007b54 <__mcmp>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	dc91      	bgt.n	80074e8 <_dtoa_r+0xaa8>
 80075c4:	d102      	bne.n	80075cc <_dtoa_r+0xb8c>
 80075c6:	f01a 0f01 	tst.w	sl, #1
 80075ca:	d18d      	bne.n	80074e8 <_dtoa_r+0xaa8>
 80075cc:	462b      	mov	r3, r5
 80075ce:	461d      	mov	r5, r3
 80075d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075d4:	2a30      	cmp	r2, #48	; 0x30
 80075d6:	d0fa      	beq.n	80075ce <_dtoa_r+0xb8e>
 80075d8:	e6d7      	b.n	800738a <_dtoa_r+0x94a>
 80075da:	9a01      	ldr	r2, [sp, #4]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d184      	bne.n	80074ea <_dtoa_r+0xaaa>
 80075e0:	9b00      	ldr	r3, [sp, #0]
 80075e2:	3301      	adds	r3, #1
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	2331      	movs	r3, #49	; 0x31
 80075e8:	7013      	strb	r3, [r2, #0]
 80075ea:	e6ce      	b.n	800738a <_dtoa_r+0x94a>
 80075ec:	4b09      	ldr	r3, [pc, #36]	; (8007614 <_dtoa_r+0xbd4>)
 80075ee:	f7ff ba95 	b.w	8006b1c <_dtoa_r+0xdc>
 80075f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f47f aa6e 	bne.w	8006ad6 <_dtoa_r+0x96>
 80075fa:	4b07      	ldr	r3, [pc, #28]	; (8007618 <_dtoa_r+0xbd8>)
 80075fc:	f7ff ba8e 	b.w	8006b1c <_dtoa_r+0xdc>
 8007600:	9b02      	ldr	r3, [sp, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	dcae      	bgt.n	8007564 <_dtoa_r+0xb24>
 8007606:	9b06      	ldr	r3, [sp, #24]
 8007608:	2b02      	cmp	r3, #2
 800760a:	f73f aea8 	bgt.w	800735e <_dtoa_r+0x91e>
 800760e:	e7a9      	b.n	8007564 <_dtoa_r+0xb24>
 8007610:	08008ff3 	.word	0x08008ff3
 8007614:	08008f50 	.word	0x08008f50
 8007618:	08008f74 	.word	0x08008f74

0800761c <_localeconv_r>:
 800761c:	4800      	ldr	r0, [pc, #0]	; (8007620 <_localeconv_r+0x4>)
 800761e:	4770      	bx	lr
 8007620:	20000324 	.word	0x20000324

08007624 <malloc>:
 8007624:	4b02      	ldr	r3, [pc, #8]	; (8007630 <malloc+0xc>)
 8007626:	4601      	mov	r1, r0
 8007628:	6818      	ldr	r0, [r3, #0]
 800762a:	f000 bc17 	b.w	8007e5c <_malloc_r>
 800762e:	bf00      	nop
 8007630:	200001d0 	.word	0x200001d0

08007634 <memcpy>:
 8007634:	440a      	add	r2, r1
 8007636:	4291      	cmp	r1, r2
 8007638:	f100 33ff 	add.w	r3, r0, #4294967295
 800763c:	d100      	bne.n	8007640 <memcpy+0xc>
 800763e:	4770      	bx	lr
 8007640:	b510      	push	{r4, lr}
 8007642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800764a:	4291      	cmp	r1, r2
 800764c:	d1f9      	bne.n	8007642 <memcpy+0xe>
 800764e:	bd10      	pop	{r4, pc}

08007650 <_Balloc>:
 8007650:	b570      	push	{r4, r5, r6, lr}
 8007652:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007654:	4604      	mov	r4, r0
 8007656:	460d      	mov	r5, r1
 8007658:	b976      	cbnz	r6, 8007678 <_Balloc+0x28>
 800765a:	2010      	movs	r0, #16
 800765c:	f7ff ffe2 	bl	8007624 <malloc>
 8007660:	4602      	mov	r2, r0
 8007662:	6260      	str	r0, [r4, #36]	; 0x24
 8007664:	b920      	cbnz	r0, 8007670 <_Balloc+0x20>
 8007666:	4b18      	ldr	r3, [pc, #96]	; (80076c8 <_Balloc+0x78>)
 8007668:	4818      	ldr	r0, [pc, #96]	; (80076cc <_Balloc+0x7c>)
 800766a:	2166      	movs	r1, #102	; 0x66
 800766c:	f000 fdd6 	bl	800821c <__assert_func>
 8007670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007674:	6006      	str	r6, [r0, #0]
 8007676:	60c6      	str	r6, [r0, #12]
 8007678:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800767a:	68f3      	ldr	r3, [r6, #12]
 800767c:	b183      	cbz	r3, 80076a0 <_Balloc+0x50>
 800767e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007686:	b9b8      	cbnz	r0, 80076b8 <_Balloc+0x68>
 8007688:	2101      	movs	r1, #1
 800768a:	fa01 f605 	lsl.w	r6, r1, r5
 800768e:	1d72      	adds	r2, r6, #5
 8007690:	0092      	lsls	r2, r2, #2
 8007692:	4620      	mov	r0, r4
 8007694:	f000 fb60 	bl	8007d58 <_calloc_r>
 8007698:	b160      	cbz	r0, 80076b4 <_Balloc+0x64>
 800769a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800769e:	e00e      	b.n	80076be <_Balloc+0x6e>
 80076a0:	2221      	movs	r2, #33	; 0x21
 80076a2:	2104      	movs	r1, #4
 80076a4:	4620      	mov	r0, r4
 80076a6:	f000 fb57 	bl	8007d58 <_calloc_r>
 80076aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076ac:	60f0      	str	r0, [r6, #12]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1e4      	bne.n	800767e <_Balloc+0x2e>
 80076b4:	2000      	movs	r0, #0
 80076b6:	bd70      	pop	{r4, r5, r6, pc}
 80076b8:	6802      	ldr	r2, [r0, #0]
 80076ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80076be:	2300      	movs	r3, #0
 80076c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076c4:	e7f7      	b.n	80076b6 <_Balloc+0x66>
 80076c6:	bf00      	nop
 80076c8:	08008f81 	.word	0x08008f81
 80076cc:	08009004 	.word	0x08009004

080076d0 <_Bfree>:
 80076d0:	b570      	push	{r4, r5, r6, lr}
 80076d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80076d4:	4605      	mov	r5, r0
 80076d6:	460c      	mov	r4, r1
 80076d8:	b976      	cbnz	r6, 80076f8 <_Bfree+0x28>
 80076da:	2010      	movs	r0, #16
 80076dc:	f7ff ffa2 	bl	8007624 <malloc>
 80076e0:	4602      	mov	r2, r0
 80076e2:	6268      	str	r0, [r5, #36]	; 0x24
 80076e4:	b920      	cbnz	r0, 80076f0 <_Bfree+0x20>
 80076e6:	4b09      	ldr	r3, [pc, #36]	; (800770c <_Bfree+0x3c>)
 80076e8:	4809      	ldr	r0, [pc, #36]	; (8007710 <_Bfree+0x40>)
 80076ea:	218a      	movs	r1, #138	; 0x8a
 80076ec:	f000 fd96 	bl	800821c <__assert_func>
 80076f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076f4:	6006      	str	r6, [r0, #0]
 80076f6:	60c6      	str	r6, [r0, #12]
 80076f8:	b13c      	cbz	r4, 800770a <_Bfree+0x3a>
 80076fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80076fc:	6862      	ldr	r2, [r4, #4]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007704:	6021      	str	r1, [r4, #0]
 8007706:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800770a:	bd70      	pop	{r4, r5, r6, pc}
 800770c:	08008f81 	.word	0x08008f81
 8007710:	08009004 	.word	0x08009004

08007714 <__multadd>:
 8007714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007718:	690d      	ldr	r5, [r1, #16]
 800771a:	4607      	mov	r7, r0
 800771c:	460c      	mov	r4, r1
 800771e:	461e      	mov	r6, r3
 8007720:	f101 0c14 	add.w	ip, r1, #20
 8007724:	2000      	movs	r0, #0
 8007726:	f8dc 3000 	ldr.w	r3, [ip]
 800772a:	b299      	uxth	r1, r3
 800772c:	fb02 6101 	mla	r1, r2, r1, r6
 8007730:	0c1e      	lsrs	r6, r3, #16
 8007732:	0c0b      	lsrs	r3, r1, #16
 8007734:	fb02 3306 	mla	r3, r2, r6, r3
 8007738:	b289      	uxth	r1, r1
 800773a:	3001      	adds	r0, #1
 800773c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007740:	4285      	cmp	r5, r0
 8007742:	f84c 1b04 	str.w	r1, [ip], #4
 8007746:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800774a:	dcec      	bgt.n	8007726 <__multadd+0x12>
 800774c:	b30e      	cbz	r6, 8007792 <__multadd+0x7e>
 800774e:	68a3      	ldr	r3, [r4, #8]
 8007750:	42ab      	cmp	r3, r5
 8007752:	dc19      	bgt.n	8007788 <__multadd+0x74>
 8007754:	6861      	ldr	r1, [r4, #4]
 8007756:	4638      	mov	r0, r7
 8007758:	3101      	adds	r1, #1
 800775a:	f7ff ff79 	bl	8007650 <_Balloc>
 800775e:	4680      	mov	r8, r0
 8007760:	b928      	cbnz	r0, 800776e <__multadd+0x5a>
 8007762:	4602      	mov	r2, r0
 8007764:	4b0c      	ldr	r3, [pc, #48]	; (8007798 <__multadd+0x84>)
 8007766:	480d      	ldr	r0, [pc, #52]	; (800779c <__multadd+0x88>)
 8007768:	21b5      	movs	r1, #181	; 0xb5
 800776a:	f000 fd57 	bl	800821c <__assert_func>
 800776e:	6922      	ldr	r2, [r4, #16]
 8007770:	3202      	adds	r2, #2
 8007772:	f104 010c 	add.w	r1, r4, #12
 8007776:	0092      	lsls	r2, r2, #2
 8007778:	300c      	adds	r0, #12
 800777a:	f7ff ff5b 	bl	8007634 <memcpy>
 800777e:	4621      	mov	r1, r4
 8007780:	4638      	mov	r0, r7
 8007782:	f7ff ffa5 	bl	80076d0 <_Bfree>
 8007786:	4644      	mov	r4, r8
 8007788:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800778c:	3501      	adds	r5, #1
 800778e:	615e      	str	r6, [r3, #20]
 8007790:	6125      	str	r5, [r4, #16]
 8007792:	4620      	mov	r0, r4
 8007794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007798:	08008ff3 	.word	0x08008ff3
 800779c:	08009004 	.word	0x08009004

080077a0 <__hi0bits>:
 80077a0:	0c03      	lsrs	r3, r0, #16
 80077a2:	041b      	lsls	r3, r3, #16
 80077a4:	b9d3      	cbnz	r3, 80077dc <__hi0bits+0x3c>
 80077a6:	0400      	lsls	r0, r0, #16
 80077a8:	2310      	movs	r3, #16
 80077aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80077ae:	bf04      	itt	eq
 80077b0:	0200      	lsleq	r0, r0, #8
 80077b2:	3308      	addeq	r3, #8
 80077b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80077b8:	bf04      	itt	eq
 80077ba:	0100      	lsleq	r0, r0, #4
 80077bc:	3304      	addeq	r3, #4
 80077be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80077c2:	bf04      	itt	eq
 80077c4:	0080      	lsleq	r0, r0, #2
 80077c6:	3302      	addeq	r3, #2
 80077c8:	2800      	cmp	r0, #0
 80077ca:	db05      	blt.n	80077d8 <__hi0bits+0x38>
 80077cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80077d0:	f103 0301 	add.w	r3, r3, #1
 80077d4:	bf08      	it	eq
 80077d6:	2320      	moveq	r3, #32
 80077d8:	4618      	mov	r0, r3
 80077da:	4770      	bx	lr
 80077dc:	2300      	movs	r3, #0
 80077de:	e7e4      	b.n	80077aa <__hi0bits+0xa>

080077e0 <__lo0bits>:
 80077e0:	6803      	ldr	r3, [r0, #0]
 80077e2:	f013 0207 	ands.w	r2, r3, #7
 80077e6:	4601      	mov	r1, r0
 80077e8:	d00b      	beq.n	8007802 <__lo0bits+0x22>
 80077ea:	07da      	lsls	r2, r3, #31
 80077ec:	d423      	bmi.n	8007836 <__lo0bits+0x56>
 80077ee:	0798      	lsls	r0, r3, #30
 80077f0:	bf49      	itett	mi
 80077f2:	085b      	lsrmi	r3, r3, #1
 80077f4:	089b      	lsrpl	r3, r3, #2
 80077f6:	2001      	movmi	r0, #1
 80077f8:	600b      	strmi	r3, [r1, #0]
 80077fa:	bf5c      	itt	pl
 80077fc:	600b      	strpl	r3, [r1, #0]
 80077fe:	2002      	movpl	r0, #2
 8007800:	4770      	bx	lr
 8007802:	b298      	uxth	r0, r3
 8007804:	b9a8      	cbnz	r0, 8007832 <__lo0bits+0x52>
 8007806:	0c1b      	lsrs	r3, r3, #16
 8007808:	2010      	movs	r0, #16
 800780a:	b2da      	uxtb	r2, r3
 800780c:	b90a      	cbnz	r2, 8007812 <__lo0bits+0x32>
 800780e:	3008      	adds	r0, #8
 8007810:	0a1b      	lsrs	r3, r3, #8
 8007812:	071a      	lsls	r2, r3, #28
 8007814:	bf04      	itt	eq
 8007816:	091b      	lsreq	r3, r3, #4
 8007818:	3004      	addeq	r0, #4
 800781a:	079a      	lsls	r2, r3, #30
 800781c:	bf04      	itt	eq
 800781e:	089b      	lsreq	r3, r3, #2
 8007820:	3002      	addeq	r0, #2
 8007822:	07da      	lsls	r2, r3, #31
 8007824:	d403      	bmi.n	800782e <__lo0bits+0x4e>
 8007826:	085b      	lsrs	r3, r3, #1
 8007828:	f100 0001 	add.w	r0, r0, #1
 800782c:	d005      	beq.n	800783a <__lo0bits+0x5a>
 800782e:	600b      	str	r3, [r1, #0]
 8007830:	4770      	bx	lr
 8007832:	4610      	mov	r0, r2
 8007834:	e7e9      	b.n	800780a <__lo0bits+0x2a>
 8007836:	2000      	movs	r0, #0
 8007838:	4770      	bx	lr
 800783a:	2020      	movs	r0, #32
 800783c:	4770      	bx	lr
	...

08007840 <__i2b>:
 8007840:	b510      	push	{r4, lr}
 8007842:	460c      	mov	r4, r1
 8007844:	2101      	movs	r1, #1
 8007846:	f7ff ff03 	bl	8007650 <_Balloc>
 800784a:	4602      	mov	r2, r0
 800784c:	b928      	cbnz	r0, 800785a <__i2b+0x1a>
 800784e:	4b05      	ldr	r3, [pc, #20]	; (8007864 <__i2b+0x24>)
 8007850:	4805      	ldr	r0, [pc, #20]	; (8007868 <__i2b+0x28>)
 8007852:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007856:	f000 fce1 	bl	800821c <__assert_func>
 800785a:	2301      	movs	r3, #1
 800785c:	6144      	str	r4, [r0, #20]
 800785e:	6103      	str	r3, [r0, #16]
 8007860:	bd10      	pop	{r4, pc}
 8007862:	bf00      	nop
 8007864:	08008ff3 	.word	0x08008ff3
 8007868:	08009004 	.word	0x08009004

0800786c <__multiply>:
 800786c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007870:	4691      	mov	r9, r2
 8007872:	690a      	ldr	r2, [r1, #16]
 8007874:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007878:	429a      	cmp	r2, r3
 800787a:	bfb8      	it	lt
 800787c:	460b      	movlt	r3, r1
 800787e:	460c      	mov	r4, r1
 8007880:	bfbc      	itt	lt
 8007882:	464c      	movlt	r4, r9
 8007884:	4699      	movlt	r9, r3
 8007886:	6927      	ldr	r7, [r4, #16]
 8007888:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800788c:	68a3      	ldr	r3, [r4, #8]
 800788e:	6861      	ldr	r1, [r4, #4]
 8007890:	eb07 060a 	add.w	r6, r7, sl
 8007894:	42b3      	cmp	r3, r6
 8007896:	b085      	sub	sp, #20
 8007898:	bfb8      	it	lt
 800789a:	3101      	addlt	r1, #1
 800789c:	f7ff fed8 	bl	8007650 <_Balloc>
 80078a0:	b930      	cbnz	r0, 80078b0 <__multiply+0x44>
 80078a2:	4602      	mov	r2, r0
 80078a4:	4b44      	ldr	r3, [pc, #272]	; (80079b8 <__multiply+0x14c>)
 80078a6:	4845      	ldr	r0, [pc, #276]	; (80079bc <__multiply+0x150>)
 80078a8:	f240 115d 	movw	r1, #349	; 0x15d
 80078ac:	f000 fcb6 	bl	800821c <__assert_func>
 80078b0:	f100 0514 	add.w	r5, r0, #20
 80078b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80078b8:	462b      	mov	r3, r5
 80078ba:	2200      	movs	r2, #0
 80078bc:	4543      	cmp	r3, r8
 80078be:	d321      	bcc.n	8007904 <__multiply+0x98>
 80078c0:	f104 0314 	add.w	r3, r4, #20
 80078c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80078c8:	f109 0314 	add.w	r3, r9, #20
 80078cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80078d0:	9202      	str	r2, [sp, #8]
 80078d2:	1b3a      	subs	r2, r7, r4
 80078d4:	3a15      	subs	r2, #21
 80078d6:	f022 0203 	bic.w	r2, r2, #3
 80078da:	3204      	adds	r2, #4
 80078dc:	f104 0115 	add.w	r1, r4, #21
 80078e0:	428f      	cmp	r7, r1
 80078e2:	bf38      	it	cc
 80078e4:	2204      	movcc	r2, #4
 80078e6:	9201      	str	r2, [sp, #4]
 80078e8:	9a02      	ldr	r2, [sp, #8]
 80078ea:	9303      	str	r3, [sp, #12]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d80c      	bhi.n	800790a <__multiply+0x9e>
 80078f0:	2e00      	cmp	r6, #0
 80078f2:	dd03      	ble.n	80078fc <__multiply+0x90>
 80078f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d05a      	beq.n	80079b2 <__multiply+0x146>
 80078fc:	6106      	str	r6, [r0, #16]
 80078fe:	b005      	add	sp, #20
 8007900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007904:	f843 2b04 	str.w	r2, [r3], #4
 8007908:	e7d8      	b.n	80078bc <__multiply+0x50>
 800790a:	f8b3 a000 	ldrh.w	sl, [r3]
 800790e:	f1ba 0f00 	cmp.w	sl, #0
 8007912:	d024      	beq.n	800795e <__multiply+0xf2>
 8007914:	f104 0e14 	add.w	lr, r4, #20
 8007918:	46a9      	mov	r9, r5
 800791a:	f04f 0c00 	mov.w	ip, #0
 800791e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007922:	f8d9 1000 	ldr.w	r1, [r9]
 8007926:	fa1f fb82 	uxth.w	fp, r2
 800792a:	b289      	uxth	r1, r1
 800792c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007930:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007934:	f8d9 2000 	ldr.w	r2, [r9]
 8007938:	4461      	add	r1, ip
 800793a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800793e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007942:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007946:	b289      	uxth	r1, r1
 8007948:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800794c:	4577      	cmp	r7, lr
 800794e:	f849 1b04 	str.w	r1, [r9], #4
 8007952:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007956:	d8e2      	bhi.n	800791e <__multiply+0xb2>
 8007958:	9a01      	ldr	r2, [sp, #4]
 800795a:	f845 c002 	str.w	ip, [r5, r2]
 800795e:	9a03      	ldr	r2, [sp, #12]
 8007960:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007964:	3304      	adds	r3, #4
 8007966:	f1b9 0f00 	cmp.w	r9, #0
 800796a:	d020      	beq.n	80079ae <__multiply+0x142>
 800796c:	6829      	ldr	r1, [r5, #0]
 800796e:	f104 0c14 	add.w	ip, r4, #20
 8007972:	46ae      	mov	lr, r5
 8007974:	f04f 0a00 	mov.w	sl, #0
 8007978:	f8bc b000 	ldrh.w	fp, [ip]
 800797c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007980:	fb09 220b 	mla	r2, r9, fp, r2
 8007984:	4492      	add	sl, r2
 8007986:	b289      	uxth	r1, r1
 8007988:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800798c:	f84e 1b04 	str.w	r1, [lr], #4
 8007990:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007994:	f8be 1000 	ldrh.w	r1, [lr]
 8007998:	0c12      	lsrs	r2, r2, #16
 800799a:	fb09 1102 	mla	r1, r9, r2, r1
 800799e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80079a2:	4567      	cmp	r7, ip
 80079a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80079a8:	d8e6      	bhi.n	8007978 <__multiply+0x10c>
 80079aa:	9a01      	ldr	r2, [sp, #4]
 80079ac:	50a9      	str	r1, [r5, r2]
 80079ae:	3504      	adds	r5, #4
 80079b0:	e79a      	b.n	80078e8 <__multiply+0x7c>
 80079b2:	3e01      	subs	r6, #1
 80079b4:	e79c      	b.n	80078f0 <__multiply+0x84>
 80079b6:	bf00      	nop
 80079b8:	08008ff3 	.word	0x08008ff3
 80079bc:	08009004 	.word	0x08009004

080079c0 <__pow5mult>:
 80079c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079c4:	4615      	mov	r5, r2
 80079c6:	f012 0203 	ands.w	r2, r2, #3
 80079ca:	4606      	mov	r6, r0
 80079cc:	460f      	mov	r7, r1
 80079ce:	d007      	beq.n	80079e0 <__pow5mult+0x20>
 80079d0:	4c25      	ldr	r4, [pc, #148]	; (8007a68 <__pow5mult+0xa8>)
 80079d2:	3a01      	subs	r2, #1
 80079d4:	2300      	movs	r3, #0
 80079d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80079da:	f7ff fe9b 	bl	8007714 <__multadd>
 80079de:	4607      	mov	r7, r0
 80079e0:	10ad      	asrs	r5, r5, #2
 80079e2:	d03d      	beq.n	8007a60 <__pow5mult+0xa0>
 80079e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80079e6:	b97c      	cbnz	r4, 8007a08 <__pow5mult+0x48>
 80079e8:	2010      	movs	r0, #16
 80079ea:	f7ff fe1b 	bl	8007624 <malloc>
 80079ee:	4602      	mov	r2, r0
 80079f0:	6270      	str	r0, [r6, #36]	; 0x24
 80079f2:	b928      	cbnz	r0, 8007a00 <__pow5mult+0x40>
 80079f4:	4b1d      	ldr	r3, [pc, #116]	; (8007a6c <__pow5mult+0xac>)
 80079f6:	481e      	ldr	r0, [pc, #120]	; (8007a70 <__pow5mult+0xb0>)
 80079f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80079fc:	f000 fc0e 	bl	800821c <__assert_func>
 8007a00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a04:	6004      	str	r4, [r0, #0]
 8007a06:	60c4      	str	r4, [r0, #12]
 8007a08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007a0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a10:	b94c      	cbnz	r4, 8007a26 <__pow5mult+0x66>
 8007a12:	f240 2171 	movw	r1, #625	; 0x271
 8007a16:	4630      	mov	r0, r6
 8007a18:	f7ff ff12 	bl	8007840 <__i2b>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a22:	4604      	mov	r4, r0
 8007a24:	6003      	str	r3, [r0, #0]
 8007a26:	f04f 0900 	mov.w	r9, #0
 8007a2a:	07eb      	lsls	r3, r5, #31
 8007a2c:	d50a      	bpl.n	8007a44 <__pow5mult+0x84>
 8007a2e:	4639      	mov	r1, r7
 8007a30:	4622      	mov	r2, r4
 8007a32:	4630      	mov	r0, r6
 8007a34:	f7ff ff1a 	bl	800786c <__multiply>
 8007a38:	4639      	mov	r1, r7
 8007a3a:	4680      	mov	r8, r0
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	f7ff fe47 	bl	80076d0 <_Bfree>
 8007a42:	4647      	mov	r7, r8
 8007a44:	106d      	asrs	r5, r5, #1
 8007a46:	d00b      	beq.n	8007a60 <__pow5mult+0xa0>
 8007a48:	6820      	ldr	r0, [r4, #0]
 8007a4a:	b938      	cbnz	r0, 8007a5c <__pow5mult+0x9c>
 8007a4c:	4622      	mov	r2, r4
 8007a4e:	4621      	mov	r1, r4
 8007a50:	4630      	mov	r0, r6
 8007a52:	f7ff ff0b 	bl	800786c <__multiply>
 8007a56:	6020      	str	r0, [r4, #0]
 8007a58:	f8c0 9000 	str.w	r9, [r0]
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	e7e4      	b.n	8007a2a <__pow5mult+0x6a>
 8007a60:	4638      	mov	r0, r7
 8007a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a66:	bf00      	nop
 8007a68:	08009150 	.word	0x08009150
 8007a6c:	08008f81 	.word	0x08008f81
 8007a70:	08009004 	.word	0x08009004

08007a74 <__lshift>:
 8007a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a78:	460c      	mov	r4, r1
 8007a7a:	6849      	ldr	r1, [r1, #4]
 8007a7c:	6923      	ldr	r3, [r4, #16]
 8007a7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a82:	68a3      	ldr	r3, [r4, #8]
 8007a84:	4607      	mov	r7, r0
 8007a86:	4691      	mov	r9, r2
 8007a88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a8c:	f108 0601 	add.w	r6, r8, #1
 8007a90:	42b3      	cmp	r3, r6
 8007a92:	db0b      	blt.n	8007aac <__lshift+0x38>
 8007a94:	4638      	mov	r0, r7
 8007a96:	f7ff fddb 	bl	8007650 <_Balloc>
 8007a9a:	4605      	mov	r5, r0
 8007a9c:	b948      	cbnz	r0, 8007ab2 <__lshift+0x3e>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	4b2a      	ldr	r3, [pc, #168]	; (8007b4c <__lshift+0xd8>)
 8007aa2:	482b      	ldr	r0, [pc, #172]	; (8007b50 <__lshift+0xdc>)
 8007aa4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007aa8:	f000 fbb8 	bl	800821c <__assert_func>
 8007aac:	3101      	adds	r1, #1
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	e7ee      	b.n	8007a90 <__lshift+0x1c>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f100 0114 	add.w	r1, r0, #20
 8007ab8:	f100 0210 	add.w	r2, r0, #16
 8007abc:	4618      	mov	r0, r3
 8007abe:	4553      	cmp	r3, sl
 8007ac0:	db37      	blt.n	8007b32 <__lshift+0xbe>
 8007ac2:	6920      	ldr	r0, [r4, #16]
 8007ac4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ac8:	f104 0314 	add.w	r3, r4, #20
 8007acc:	f019 091f 	ands.w	r9, r9, #31
 8007ad0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ad4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007ad8:	d02f      	beq.n	8007b3a <__lshift+0xc6>
 8007ada:	f1c9 0e20 	rsb	lr, r9, #32
 8007ade:	468a      	mov	sl, r1
 8007ae0:	f04f 0c00 	mov.w	ip, #0
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	fa02 f209 	lsl.w	r2, r2, r9
 8007aea:	ea42 020c 	orr.w	r2, r2, ip
 8007aee:	f84a 2b04 	str.w	r2, [sl], #4
 8007af2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007af6:	4298      	cmp	r0, r3
 8007af8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007afc:	d8f2      	bhi.n	8007ae4 <__lshift+0x70>
 8007afe:	1b03      	subs	r3, r0, r4
 8007b00:	3b15      	subs	r3, #21
 8007b02:	f023 0303 	bic.w	r3, r3, #3
 8007b06:	3304      	adds	r3, #4
 8007b08:	f104 0215 	add.w	r2, r4, #21
 8007b0c:	4290      	cmp	r0, r2
 8007b0e:	bf38      	it	cc
 8007b10:	2304      	movcc	r3, #4
 8007b12:	f841 c003 	str.w	ip, [r1, r3]
 8007b16:	f1bc 0f00 	cmp.w	ip, #0
 8007b1a:	d001      	beq.n	8007b20 <__lshift+0xac>
 8007b1c:	f108 0602 	add.w	r6, r8, #2
 8007b20:	3e01      	subs	r6, #1
 8007b22:	4638      	mov	r0, r7
 8007b24:	612e      	str	r6, [r5, #16]
 8007b26:	4621      	mov	r1, r4
 8007b28:	f7ff fdd2 	bl	80076d0 <_Bfree>
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b32:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b36:	3301      	adds	r3, #1
 8007b38:	e7c1      	b.n	8007abe <__lshift+0x4a>
 8007b3a:	3904      	subs	r1, #4
 8007b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b40:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b44:	4298      	cmp	r0, r3
 8007b46:	d8f9      	bhi.n	8007b3c <__lshift+0xc8>
 8007b48:	e7ea      	b.n	8007b20 <__lshift+0xac>
 8007b4a:	bf00      	nop
 8007b4c:	08008ff3 	.word	0x08008ff3
 8007b50:	08009004 	.word	0x08009004

08007b54 <__mcmp>:
 8007b54:	b530      	push	{r4, r5, lr}
 8007b56:	6902      	ldr	r2, [r0, #16]
 8007b58:	690c      	ldr	r4, [r1, #16]
 8007b5a:	1b12      	subs	r2, r2, r4
 8007b5c:	d10e      	bne.n	8007b7c <__mcmp+0x28>
 8007b5e:	f100 0314 	add.w	r3, r0, #20
 8007b62:	3114      	adds	r1, #20
 8007b64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007b68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007b6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007b70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007b74:	42a5      	cmp	r5, r4
 8007b76:	d003      	beq.n	8007b80 <__mcmp+0x2c>
 8007b78:	d305      	bcc.n	8007b86 <__mcmp+0x32>
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	bd30      	pop	{r4, r5, pc}
 8007b80:	4283      	cmp	r3, r0
 8007b82:	d3f3      	bcc.n	8007b6c <__mcmp+0x18>
 8007b84:	e7fa      	b.n	8007b7c <__mcmp+0x28>
 8007b86:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8a:	e7f7      	b.n	8007b7c <__mcmp+0x28>

08007b8c <__mdiff>:
 8007b8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b90:	460c      	mov	r4, r1
 8007b92:	4606      	mov	r6, r0
 8007b94:	4611      	mov	r1, r2
 8007b96:	4620      	mov	r0, r4
 8007b98:	4690      	mov	r8, r2
 8007b9a:	f7ff ffdb 	bl	8007b54 <__mcmp>
 8007b9e:	1e05      	subs	r5, r0, #0
 8007ba0:	d110      	bne.n	8007bc4 <__mdiff+0x38>
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	f7ff fd53 	bl	8007650 <_Balloc>
 8007baa:	b930      	cbnz	r0, 8007bba <__mdiff+0x2e>
 8007bac:	4b3a      	ldr	r3, [pc, #232]	; (8007c98 <__mdiff+0x10c>)
 8007bae:	4602      	mov	r2, r0
 8007bb0:	f240 2132 	movw	r1, #562	; 0x232
 8007bb4:	4839      	ldr	r0, [pc, #228]	; (8007c9c <__mdiff+0x110>)
 8007bb6:	f000 fb31 	bl	800821c <__assert_func>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007bc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc4:	bfa4      	itt	ge
 8007bc6:	4643      	movge	r3, r8
 8007bc8:	46a0      	movge	r8, r4
 8007bca:	4630      	mov	r0, r6
 8007bcc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007bd0:	bfa6      	itte	ge
 8007bd2:	461c      	movge	r4, r3
 8007bd4:	2500      	movge	r5, #0
 8007bd6:	2501      	movlt	r5, #1
 8007bd8:	f7ff fd3a 	bl	8007650 <_Balloc>
 8007bdc:	b920      	cbnz	r0, 8007be8 <__mdiff+0x5c>
 8007bde:	4b2e      	ldr	r3, [pc, #184]	; (8007c98 <__mdiff+0x10c>)
 8007be0:	4602      	mov	r2, r0
 8007be2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007be6:	e7e5      	b.n	8007bb4 <__mdiff+0x28>
 8007be8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007bec:	6926      	ldr	r6, [r4, #16]
 8007bee:	60c5      	str	r5, [r0, #12]
 8007bf0:	f104 0914 	add.w	r9, r4, #20
 8007bf4:	f108 0514 	add.w	r5, r8, #20
 8007bf8:	f100 0e14 	add.w	lr, r0, #20
 8007bfc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007c00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007c04:	f108 0210 	add.w	r2, r8, #16
 8007c08:	46f2      	mov	sl, lr
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007c10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007c14:	fa1f f883 	uxth.w	r8, r3
 8007c18:	fa11 f18b 	uxtah	r1, r1, fp
 8007c1c:	0c1b      	lsrs	r3, r3, #16
 8007c1e:	eba1 0808 	sub.w	r8, r1, r8
 8007c22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007c26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007c2a:	fa1f f888 	uxth.w	r8, r8
 8007c2e:	1419      	asrs	r1, r3, #16
 8007c30:	454e      	cmp	r6, r9
 8007c32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007c36:	f84a 3b04 	str.w	r3, [sl], #4
 8007c3a:	d8e7      	bhi.n	8007c0c <__mdiff+0x80>
 8007c3c:	1b33      	subs	r3, r6, r4
 8007c3e:	3b15      	subs	r3, #21
 8007c40:	f023 0303 	bic.w	r3, r3, #3
 8007c44:	3304      	adds	r3, #4
 8007c46:	3415      	adds	r4, #21
 8007c48:	42a6      	cmp	r6, r4
 8007c4a:	bf38      	it	cc
 8007c4c:	2304      	movcc	r3, #4
 8007c4e:	441d      	add	r5, r3
 8007c50:	4473      	add	r3, lr
 8007c52:	469e      	mov	lr, r3
 8007c54:	462e      	mov	r6, r5
 8007c56:	4566      	cmp	r6, ip
 8007c58:	d30e      	bcc.n	8007c78 <__mdiff+0xec>
 8007c5a:	f10c 0203 	add.w	r2, ip, #3
 8007c5e:	1b52      	subs	r2, r2, r5
 8007c60:	f022 0203 	bic.w	r2, r2, #3
 8007c64:	3d03      	subs	r5, #3
 8007c66:	45ac      	cmp	ip, r5
 8007c68:	bf38      	it	cc
 8007c6a:	2200      	movcc	r2, #0
 8007c6c:	441a      	add	r2, r3
 8007c6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007c72:	b17b      	cbz	r3, 8007c94 <__mdiff+0x108>
 8007c74:	6107      	str	r7, [r0, #16]
 8007c76:	e7a3      	b.n	8007bc0 <__mdiff+0x34>
 8007c78:	f856 8b04 	ldr.w	r8, [r6], #4
 8007c7c:	fa11 f288 	uxtah	r2, r1, r8
 8007c80:	1414      	asrs	r4, r2, #16
 8007c82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007c86:	b292      	uxth	r2, r2
 8007c88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007c8c:	f84e 2b04 	str.w	r2, [lr], #4
 8007c90:	1421      	asrs	r1, r4, #16
 8007c92:	e7e0      	b.n	8007c56 <__mdiff+0xca>
 8007c94:	3f01      	subs	r7, #1
 8007c96:	e7ea      	b.n	8007c6e <__mdiff+0xe2>
 8007c98:	08008ff3 	.word	0x08008ff3
 8007c9c:	08009004 	.word	0x08009004

08007ca0 <__d2b>:
 8007ca0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ca4:	4689      	mov	r9, r1
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	ec57 6b10 	vmov	r6, r7, d0
 8007cac:	4690      	mov	r8, r2
 8007cae:	f7ff fccf 	bl	8007650 <_Balloc>
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	b930      	cbnz	r0, 8007cc4 <__d2b+0x24>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	4b25      	ldr	r3, [pc, #148]	; (8007d50 <__d2b+0xb0>)
 8007cba:	4826      	ldr	r0, [pc, #152]	; (8007d54 <__d2b+0xb4>)
 8007cbc:	f240 310a 	movw	r1, #778	; 0x30a
 8007cc0:	f000 faac 	bl	800821c <__assert_func>
 8007cc4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007cc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ccc:	bb35      	cbnz	r5, 8007d1c <__d2b+0x7c>
 8007cce:	2e00      	cmp	r6, #0
 8007cd0:	9301      	str	r3, [sp, #4]
 8007cd2:	d028      	beq.n	8007d26 <__d2b+0x86>
 8007cd4:	4668      	mov	r0, sp
 8007cd6:	9600      	str	r6, [sp, #0]
 8007cd8:	f7ff fd82 	bl	80077e0 <__lo0bits>
 8007cdc:	9900      	ldr	r1, [sp, #0]
 8007cde:	b300      	cbz	r0, 8007d22 <__d2b+0x82>
 8007ce0:	9a01      	ldr	r2, [sp, #4]
 8007ce2:	f1c0 0320 	rsb	r3, r0, #32
 8007ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cea:	430b      	orrs	r3, r1
 8007cec:	40c2      	lsrs	r2, r0
 8007cee:	6163      	str	r3, [r4, #20]
 8007cf0:	9201      	str	r2, [sp, #4]
 8007cf2:	9b01      	ldr	r3, [sp, #4]
 8007cf4:	61a3      	str	r3, [r4, #24]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	bf14      	ite	ne
 8007cfa:	2202      	movne	r2, #2
 8007cfc:	2201      	moveq	r2, #1
 8007cfe:	6122      	str	r2, [r4, #16]
 8007d00:	b1d5      	cbz	r5, 8007d38 <__d2b+0x98>
 8007d02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d06:	4405      	add	r5, r0
 8007d08:	f8c9 5000 	str.w	r5, [r9]
 8007d0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d10:	f8c8 0000 	str.w	r0, [r8]
 8007d14:	4620      	mov	r0, r4
 8007d16:	b003      	add	sp, #12
 8007d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d20:	e7d5      	b.n	8007cce <__d2b+0x2e>
 8007d22:	6161      	str	r1, [r4, #20]
 8007d24:	e7e5      	b.n	8007cf2 <__d2b+0x52>
 8007d26:	a801      	add	r0, sp, #4
 8007d28:	f7ff fd5a 	bl	80077e0 <__lo0bits>
 8007d2c:	9b01      	ldr	r3, [sp, #4]
 8007d2e:	6163      	str	r3, [r4, #20]
 8007d30:	2201      	movs	r2, #1
 8007d32:	6122      	str	r2, [r4, #16]
 8007d34:	3020      	adds	r0, #32
 8007d36:	e7e3      	b.n	8007d00 <__d2b+0x60>
 8007d38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d40:	f8c9 0000 	str.w	r0, [r9]
 8007d44:	6918      	ldr	r0, [r3, #16]
 8007d46:	f7ff fd2b 	bl	80077a0 <__hi0bits>
 8007d4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d4e:	e7df      	b.n	8007d10 <__d2b+0x70>
 8007d50:	08008ff3 	.word	0x08008ff3
 8007d54:	08009004 	.word	0x08009004

08007d58 <_calloc_r>:
 8007d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d5a:	fba1 2402 	umull	r2, r4, r1, r2
 8007d5e:	b94c      	cbnz	r4, 8007d74 <_calloc_r+0x1c>
 8007d60:	4611      	mov	r1, r2
 8007d62:	9201      	str	r2, [sp, #4]
 8007d64:	f000 f87a 	bl	8007e5c <_malloc_r>
 8007d68:	9a01      	ldr	r2, [sp, #4]
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	b930      	cbnz	r0, 8007d7c <_calloc_r+0x24>
 8007d6e:	4628      	mov	r0, r5
 8007d70:	b003      	add	sp, #12
 8007d72:	bd30      	pop	{r4, r5, pc}
 8007d74:	220c      	movs	r2, #12
 8007d76:	6002      	str	r2, [r0, #0]
 8007d78:	2500      	movs	r5, #0
 8007d7a:	e7f8      	b.n	8007d6e <_calloc_r+0x16>
 8007d7c:	4621      	mov	r1, r4
 8007d7e:	f7fe f92d 	bl	8005fdc <memset>
 8007d82:	e7f4      	b.n	8007d6e <_calloc_r+0x16>

08007d84 <_free_r>:
 8007d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d86:	2900      	cmp	r1, #0
 8007d88:	d044      	beq.n	8007e14 <_free_r+0x90>
 8007d8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d8e:	9001      	str	r0, [sp, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f1a1 0404 	sub.w	r4, r1, #4
 8007d96:	bfb8      	it	lt
 8007d98:	18e4      	addlt	r4, r4, r3
 8007d9a:	f000 fa9b 	bl	80082d4 <__malloc_lock>
 8007d9e:	4a1e      	ldr	r2, [pc, #120]	; (8007e18 <_free_r+0x94>)
 8007da0:	9801      	ldr	r0, [sp, #4]
 8007da2:	6813      	ldr	r3, [r2, #0]
 8007da4:	b933      	cbnz	r3, 8007db4 <_free_r+0x30>
 8007da6:	6063      	str	r3, [r4, #4]
 8007da8:	6014      	str	r4, [r2, #0]
 8007daa:	b003      	add	sp, #12
 8007dac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007db0:	f000 ba96 	b.w	80082e0 <__malloc_unlock>
 8007db4:	42a3      	cmp	r3, r4
 8007db6:	d908      	bls.n	8007dca <_free_r+0x46>
 8007db8:	6825      	ldr	r5, [r4, #0]
 8007dba:	1961      	adds	r1, r4, r5
 8007dbc:	428b      	cmp	r3, r1
 8007dbe:	bf01      	itttt	eq
 8007dc0:	6819      	ldreq	r1, [r3, #0]
 8007dc2:	685b      	ldreq	r3, [r3, #4]
 8007dc4:	1949      	addeq	r1, r1, r5
 8007dc6:	6021      	streq	r1, [r4, #0]
 8007dc8:	e7ed      	b.n	8007da6 <_free_r+0x22>
 8007dca:	461a      	mov	r2, r3
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	b10b      	cbz	r3, 8007dd4 <_free_r+0x50>
 8007dd0:	42a3      	cmp	r3, r4
 8007dd2:	d9fa      	bls.n	8007dca <_free_r+0x46>
 8007dd4:	6811      	ldr	r1, [r2, #0]
 8007dd6:	1855      	adds	r5, r2, r1
 8007dd8:	42a5      	cmp	r5, r4
 8007dda:	d10b      	bne.n	8007df4 <_free_r+0x70>
 8007ddc:	6824      	ldr	r4, [r4, #0]
 8007dde:	4421      	add	r1, r4
 8007de0:	1854      	adds	r4, r2, r1
 8007de2:	42a3      	cmp	r3, r4
 8007de4:	6011      	str	r1, [r2, #0]
 8007de6:	d1e0      	bne.n	8007daa <_free_r+0x26>
 8007de8:	681c      	ldr	r4, [r3, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	6053      	str	r3, [r2, #4]
 8007dee:	4421      	add	r1, r4
 8007df0:	6011      	str	r1, [r2, #0]
 8007df2:	e7da      	b.n	8007daa <_free_r+0x26>
 8007df4:	d902      	bls.n	8007dfc <_free_r+0x78>
 8007df6:	230c      	movs	r3, #12
 8007df8:	6003      	str	r3, [r0, #0]
 8007dfa:	e7d6      	b.n	8007daa <_free_r+0x26>
 8007dfc:	6825      	ldr	r5, [r4, #0]
 8007dfe:	1961      	adds	r1, r4, r5
 8007e00:	428b      	cmp	r3, r1
 8007e02:	bf04      	itt	eq
 8007e04:	6819      	ldreq	r1, [r3, #0]
 8007e06:	685b      	ldreq	r3, [r3, #4]
 8007e08:	6063      	str	r3, [r4, #4]
 8007e0a:	bf04      	itt	eq
 8007e0c:	1949      	addeq	r1, r1, r5
 8007e0e:	6021      	streq	r1, [r4, #0]
 8007e10:	6054      	str	r4, [r2, #4]
 8007e12:	e7ca      	b.n	8007daa <_free_r+0x26>
 8007e14:	b003      	add	sp, #12
 8007e16:	bd30      	pop	{r4, r5, pc}
 8007e18:	20000660 	.word	0x20000660

08007e1c <sbrk_aligned>:
 8007e1c:	b570      	push	{r4, r5, r6, lr}
 8007e1e:	4e0e      	ldr	r6, [pc, #56]	; (8007e58 <sbrk_aligned+0x3c>)
 8007e20:	460c      	mov	r4, r1
 8007e22:	6831      	ldr	r1, [r6, #0]
 8007e24:	4605      	mov	r5, r0
 8007e26:	b911      	cbnz	r1, 8007e2e <sbrk_aligned+0x12>
 8007e28:	f000 f9e8 	bl	80081fc <_sbrk_r>
 8007e2c:	6030      	str	r0, [r6, #0]
 8007e2e:	4621      	mov	r1, r4
 8007e30:	4628      	mov	r0, r5
 8007e32:	f000 f9e3 	bl	80081fc <_sbrk_r>
 8007e36:	1c43      	adds	r3, r0, #1
 8007e38:	d00a      	beq.n	8007e50 <sbrk_aligned+0x34>
 8007e3a:	1cc4      	adds	r4, r0, #3
 8007e3c:	f024 0403 	bic.w	r4, r4, #3
 8007e40:	42a0      	cmp	r0, r4
 8007e42:	d007      	beq.n	8007e54 <sbrk_aligned+0x38>
 8007e44:	1a21      	subs	r1, r4, r0
 8007e46:	4628      	mov	r0, r5
 8007e48:	f000 f9d8 	bl	80081fc <_sbrk_r>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d101      	bne.n	8007e54 <sbrk_aligned+0x38>
 8007e50:	f04f 34ff 	mov.w	r4, #4294967295
 8007e54:	4620      	mov	r0, r4
 8007e56:	bd70      	pop	{r4, r5, r6, pc}
 8007e58:	20000664 	.word	0x20000664

08007e5c <_malloc_r>:
 8007e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e60:	1ccd      	adds	r5, r1, #3
 8007e62:	f025 0503 	bic.w	r5, r5, #3
 8007e66:	3508      	adds	r5, #8
 8007e68:	2d0c      	cmp	r5, #12
 8007e6a:	bf38      	it	cc
 8007e6c:	250c      	movcc	r5, #12
 8007e6e:	2d00      	cmp	r5, #0
 8007e70:	4607      	mov	r7, r0
 8007e72:	db01      	blt.n	8007e78 <_malloc_r+0x1c>
 8007e74:	42a9      	cmp	r1, r5
 8007e76:	d905      	bls.n	8007e84 <_malloc_r+0x28>
 8007e78:	230c      	movs	r3, #12
 8007e7a:	603b      	str	r3, [r7, #0]
 8007e7c:	2600      	movs	r6, #0
 8007e7e:	4630      	mov	r0, r6
 8007e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e84:	4e2e      	ldr	r6, [pc, #184]	; (8007f40 <_malloc_r+0xe4>)
 8007e86:	f000 fa25 	bl	80082d4 <__malloc_lock>
 8007e8a:	6833      	ldr	r3, [r6, #0]
 8007e8c:	461c      	mov	r4, r3
 8007e8e:	bb34      	cbnz	r4, 8007ede <_malloc_r+0x82>
 8007e90:	4629      	mov	r1, r5
 8007e92:	4638      	mov	r0, r7
 8007e94:	f7ff ffc2 	bl	8007e1c <sbrk_aligned>
 8007e98:	1c43      	adds	r3, r0, #1
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	d14d      	bne.n	8007f3a <_malloc_r+0xde>
 8007e9e:	6834      	ldr	r4, [r6, #0]
 8007ea0:	4626      	mov	r6, r4
 8007ea2:	2e00      	cmp	r6, #0
 8007ea4:	d140      	bne.n	8007f28 <_malloc_r+0xcc>
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	4631      	mov	r1, r6
 8007eaa:	4638      	mov	r0, r7
 8007eac:	eb04 0803 	add.w	r8, r4, r3
 8007eb0:	f000 f9a4 	bl	80081fc <_sbrk_r>
 8007eb4:	4580      	cmp	r8, r0
 8007eb6:	d13a      	bne.n	8007f2e <_malloc_r+0xd2>
 8007eb8:	6821      	ldr	r1, [r4, #0]
 8007eba:	3503      	adds	r5, #3
 8007ebc:	1a6d      	subs	r5, r5, r1
 8007ebe:	f025 0503 	bic.w	r5, r5, #3
 8007ec2:	3508      	adds	r5, #8
 8007ec4:	2d0c      	cmp	r5, #12
 8007ec6:	bf38      	it	cc
 8007ec8:	250c      	movcc	r5, #12
 8007eca:	4629      	mov	r1, r5
 8007ecc:	4638      	mov	r0, r7
 8007ece:	f7ff ffa5 	bl	8007e1c <sbrk_aligned>
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	d02b      	beq.n	8007f2e <_malloc_r+0xd2>
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	442b      	add	r3, r5
 8007eda:	6023      	str	r3, [r4, #0]
 8007edc:	e00e      	b.n	8007efc <_malloc_r+0xa0>
 8007ede:	6822      	ldr	r2, [r4, #0]
 8007ee0:	1b52      	subs	r2, r2, r5
 8007ee2:	d41e      	bmi.n	8007f22 <_malloc_r+0xc6>
 8007ee4:	2a0b      	cmp	r2, #11
 8007ee6:	d916      	bls.n	8007f16 <_malloc_r+0xba>
 8007ee8:	1961      	adds	r1, r4, r5
 8007eea:	42a3      	cmp	r3, r4
 8007eec:	6025      	str	r5, [r4, #0]
 8007eee:	bf18      	it	ne
 8007ef0:	6059      	strne	r1, [r3, #4]
 8007ef2:	6863      	ldr	r3, [r4, #4]
 8007ef4:	bf08      	it	eq
 8007ef6:	6031      	streq	r1, [r6, #0]
 8007ef8:	5162      	str	r2, [r4, r5]
 8007efa:	604b      	str	r3, [r1, #4]
 8007efc:	4638      	mov	r0, r7
 8007efe:	f104 060b 	add.w	r6, r4, #11
 8007f02:	f000 f9ed 	bl	80082e0 <__malloc_unlock>
 8007f06:	f026 0607 	bic.w	r6, r6, #7
 8007f0a:	1d23      	adds	r3, r4, #4
 8007f0c:	1af2      	subs	r2, r6, r3
 8007f0e:	d0b6      	beq.n	8007e7e <_malloc_r+0x22>
 8007f10:	1b9b      	subs	r3, r3, r6
 8007f12:	50a3      	str	r3, [r4, r2]
 8007f14:	e7b3      	b.n	8007e7e <_malloc_r+0x22>
 8007f16:	6862      	ldr	r2, [r4, #4]
 8007f18:	42a3      	cmp	r3, r4
 8007f1a:	bf0c      	ite	eq
 8007f1c:	6032      	streq	r2, [r6, #0]
 8007f1e:	605a      	strne	r2, [r3, #4]
 8007f20:	e7ec      	b.n	8007efc <_malloc_r+0xa0>
 8007f22:	4623      	mov	r3, r4
 8007f24:	6864      	ldr	r4, [r4, #4]
 8007f26:	e7b2      	b.n	8007e8e <_malloc_r+0x32>
 8007f28:	4634      	mov	r4, r6
 8007f2a:	6876      	ldr	r6, [r6, #4]
 8007f2c:	e7b9      	b.n	8007ea2 <_malloc_r+0x46>
 8007f2e:	230c      	movs	r3, #12
 8007f30:	603b      	str	r3, [r7, #0]
 8007f32:	4638      	mov	r0, r7
 8007f34:	f000 f9d4 	bl	80082e0 <__malloc_unlock>
 8007f38:	e7a1      	b.n	8007e7e <_malloc_r+0x22>
 8007f3a:	6025      	str	r5, [r4, #0]
 8007f3c:	e7de      	b.n	8007efc <_malloc_r+0xa0>
 8007f3e:	bf00      	nop
 8007f40:	20000660 	.word	0x20000660

08007f44 <__ssputs_r>:
 8007f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f48:	688e      	ldr	r6, [r1, #8]
 8007f4a:	429e      	cmp	r6, r3
 8007f4c:	4682      	mov	sl, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	4690      	mov	r8, r2
 8007f52:	461f      	mov	r7, r3
 8007f54:	d838      	bhi.n	8007fc8 <__ssputs_r+0x84>
 8007f56:	898a      	ldrh	r2, [r1, #12]
 8007f58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f5c:	d032      	beq.n	8007fc4 <__ssputs_r+0x80>
 8007f5e:	6825      	ldr	r5, [r4, #0]
 8007f60:	6909      	ldr	r1, [r1, #16]
 8007f62:	eba5 0901 	sub.w	r9, r5, r1
 8007f66:	6965      	ldr	r5, [r4, #20]
 8007f68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f70:	3301      	adds	r3, #1
 8007f72:	444b      	add	r3, r9
 8007f74:	106d      	asrs	r5, r5, #1
 8007f76:	429d      	cmp	r5, r3
 8007f78:	bf38      	it	cc
 8007f7a:	461d      	movcc	r5, r3
 8007f7c:	0553      	lsls	r3, r2, #21
 8007f7e:	d531      	bpl.n	8007fe4 <__ssputs_r+0xa0>
 8007f80:	4629      	mov	r1, r5
 8007f82:	f7ff ff6b 	bl	8007e5c <_malloc_r>
 8007f86:	4606      	mov	r6, r0
 8007f88:	b950      	cbnz	r0, 8007fa0 <__ssputs_r+0x5c>
 8007f8a:	230c      	movs	r3, #12
 8007f8c:	f8ca 3000 	str.w	r3, [sl]
 8007f90:	89a3      	ldrh	r3, [r4, #12]
 8007f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f96:	81a3      	strh	r3, [r4, #12]
 8007f98:	f04f 30ff 	mov.w	r0, #4294967295
 8007f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa0:	6921      	ldr	r1, [r4, #16]
 8007fa2:	464a      	mov	r2, r9
 8007fa4:	f7ff fb46 	bl	8007634 <memcpy>
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb2:	81a3      	strh	r3, [r4, #12]
 8007fb4:	6126      	str	r6, [r4, #16]
 8007fb6:	6165      	str	r5, [r4, #20]
 8007fb8:	444e      	add	r6, r9
 8007fba:	eba5 0509 	sub.w	r5, r5, r9
 8007fbe:	6026      	str	r6, [r4, #0]
 8007fc0:	60a5      	str	r5, [r4, #8]
 8007fc2:	463e      	mov	r6, r7
 8007fc4:	42be      	cmp	r6, r7
 8007fc6:	d900      	bls.n	8007fca <__ssputs_r+0x86>
 8007fc8:	463e      	mov	r6, r7
 8007fca:	6820      	ldr	r0, [r4, #0]
 8007fcc:	4632      	mov	r2, r6
 8007fce:	4641      	mov	r1, r8
 8007fd0:	f000 f966 	bl	80082a0 <memmove>
 8007fd4:	68a3      	ldr	r3, [r4, #8]
 8007fd6:	1b9b      	subs	r3, r3, r6
 8007fd8:	60a3      	str	r3, [r4, #8]
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	4433      	add	r3, r6
 8007fde:	6023      	str	r3, [r4, #0]
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	e7db      	b.n	8007f9c <__ssputs_r+0x58>
 8007fe4:	462a      	mov	r2, r5
 8007fe6:	f000 f981 	bl	80082ec <_realloc_r>
 8007fea:	4606      	mov	r6, r0
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d1e1      	bne.n	8007fb4 <__ssputs_r+0x70>
 8007ff0:	6921      	ldr	r1, [r4, #16]
 8007ff2:	4650      	mov	r0, sl
 8007ff4:	f7ff fec6 	bl	8007d84 <_free_r>
 8007ff8:	e7c7      	b.n	8007f8a <__ssputs_r+0x46>
	...

08007ffc <_svfiprintf_r>:
 8007ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008000:	4698      	mov	r8, r3
 8008002:	898b      	ldrh	r3, [r1, #12]
 8008004:	061b      	lsls	r3, r3, #24
 8008006:	b09d      	sub	sp, #116	; 0x74
 8008008:	4607      	mov	r7, r0
 800800a:	460d      	mov	r5, r1
 800800c:	4614      	mov	r4, r2
 800800e:	d50e      	bpl.n	800802e <_svfiprintf_r+0x32>
 8008010:	690b      	ldr	r3, [r1, #16]
 8008012:	b963      	cbnz	r3, 800802e <_svfiprintf_r+0x32>
 8008014:	2140      	movs	r1, #64	; 0x40
 8008016:	f7ff ff21 	bl	8007e5c <_malloc_r>
 800801a:	6028      	str	r0, [r5, #0]
 800801c:	6128      	str	r0, [r5, #16]
 800801e:	b920      	cbnz	r0, 800802a <_svfiprintf_r+0x2e>
 8008020:	230c      	movs	r3, #12
 8008022:	603b      	str	r3, [r7, #0]
 8008024:	f04f 30ff 	mov.w	r0, #4294967295
 8008028:	e0d1      	b.n	80081ce <_svfiprintf_r+0x1d2>
 800802a:	2340      	movs	r3, #64	; 0x40
 800802c:	616b      	str	r3, [r5, #20]
 800802e:	2300      	movs	r3, #0
 8008030:	9309      	str	r3, [sp, #36]	; 0x24
 8008032:	2320      	movs	r3, #32
 8008034:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008038:	f8cd 800c 	str.w	r8, [sp, #12]
 800803c:	2330      	movs	r3, #48	; 0x30
 800803e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80081e8 <_svfiprintf_r+0x1ec>
 8008042:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008046:	f04f 0901 	mov.w	r9, #1
 800804a:	4623      	mov	r3, r4
 800804c:	469a      	mov	sl, r3
 800804e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008052:	b10a      	cbz	r2, 8008058 <_svfiprintf_r+0x5c>
 8008054:	2a25      	cmp	r2, #37	; 0x25
 8008056:	d1f9      	bne.n	800804c <_svfiprintf_r+0x50>
 8008058:	ebba 0b04 	subs.w	fp, sl, r4
 800805c:	d00b      	beq.n	8008076 <_svfiprintf_r+0x7a>
 800805e:	465b      	mov	r3, fp
 8008060:	4622      	mov	r2, r4
 8008062:	4629      	mov	r1, r5
 8008064:	4638      	mov	r0, r7
 8008066:	f7ff ff6d 	bl	8007f44 <__ssputs_r>
 800806a:	3001      	adds	r0, #1
 800806c:	f000 80aa 	beq.w	80081c4 <_svfiprintf_r+0x1c8>
 8008070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008072:	445a      	add	r2, fp
 8008074:	9209      	str	r2, [sp, #36]	; 0x24
 8008076:	f89a 3000 	ldrb.w	r3, [sl]
 800807a:	2b00      	cmp	r3, #0
 800807c:	f000 80a2 	beq.w	80081c4 <_svfiprintf_r+0x1c8>
 8008080:	2300      	movs	r3, #0
 8008082:	f04f 32ff 	mov.w	r2, #4294967295
 8008086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800808a:	f10a 0a01 	add.w	sl, sl, #1
 800808e:	9304      	str	r3, [sp, #16]
 8008090:	9307      	str	r3, [sp, #28]
 8008092:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008096:	931a      	str	r3, [sp, #104]	; 0x68
 8008098:	4654      	mov	r4, sl
 800809a:	2205      	movs	r2, #5
 800809c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a0:	4851      	ldr	r0, [pc, #324]	; (80081e8 <_svfiprintf_r+0x1ec>)
 80080a2:	f7f8 f8a5 	bl	80001f0 <memchr>
 80080a6:	9a04      	ldr	r2, [sp, #16]
 80080a8:	b9d8      	cbnz	r0, 80080e2 <_svfiprintf_r+0xe6>
 80080aa:	06d0      	lsls	r0, r2, #27
 80080ac:	bf44      	itt	mi
 80080ae:	2320      	movmi	r3, #32
 80080b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080b4:	0711      	lsls	r1, r2, #28
 80080b6:	bf44      	itt	mi
 80080b8:	232b      	movmi	r3, #43	; 0x2b
 80080ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080be:	f89a 3000 	ldrb.w	r3, [sl]
 80080c2:	2b2a      	cmp	r3, #42	; 0x2a
 80080c4:	d015      	beq.n	80080f2 <_svfiprintf_r+0xf6>
 80080c6:	9a07      	ldr	r2, [sp, #28]
 80080c8:	4654      	mov	r4, sl
 80080ca:	2000      	movs	r0, #0
 80080cc:	f04f 0c0a 	mov.w	ip, #10
 80080d0:	4621      	mov	r1, r4
 80080d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080d6:	3b30      	subs	r3, #48	; 0x30
 80080d8:	2b09      	cmp	r3, #9
 80080da:	d94e      	bls.n	800817a <_svfiprintf_r+0x17e>
 80080dc:	b1b0      	cbz	r0, 800810c <_svfiprintf_r+0x110>
 80080de:	9207      	str	r2, [sp, #28]
 80080e0:	e014      	b.n	800810c <_svfiprintf_r+0x110>
 80080e2:	eba0 0308 	sub.w	r3, r0, r8
 80080e6:	fa09 f303 	lsl.w	r3, r9, r3
 80080ea:	4313      	orrs	r3, r2
 80080ec:	9304      	str	r3, [sp, #16]
 80080ee:	46a2      	mov	sl, r4
 80080f0:	e7d2      	b.n	8008098 <_svfiprintf_r+0x9c>
 80080f2:	9b03      	ldr	r3, [sp, #12]
 80080f4:	1d19      	adds	r1, r3, #4
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	9103      	str	r1, [sp, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	bfbb      	ittet	lt
 80080fe:	425b      	neglt	r3, r3
 8008100:	f042 0202 	orrlt.w	r2, r2, #2
 8008104:	9307      	strge	r3, [sp, #28]
 8008106:	9307      	strlt	r3, [sp, #28]
 8008108:	bfb8      	it	lt
 800810a:	9204      	strlt	r2, [sp, #16]
 800810c:	7823      	ldrb	r3, [r4, #0]
 800810e:	2b2e      	cmp	r3, #46	; 0x2e
 8008110:	d10c      	bne.n	800812c <_svfiprintf_r+0x130>
 8008112:	7863      	ldrb	r3, [r4, #1]
 8008114:	2b2a      	cmp	r3, #42	; 0x2a
 8008116:	d135      	bne.n	8008184 <_svfiprintf_r+0x188>
 8008118:	9b03      	ldr	r3, [sp, #12]
 800811a:	1d1a      	adds	r2, r3, #4
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	9203      	str	r2, [sp, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	bfb8      	it	lt
 8008124:	f04f 33ff 	movlt.w	r3, #4294967295
 8008128:	3402      	adds	r4, #2
 800812a:	9305      	str	r3, [sp, #20]
 800812c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80081f8 <_svfiprintf_r+0x1fc>
 8008130:	7821      	ldrb	r1, [r4, #0]
 8008132:	2203      	movs	r2, #3
 8008134:	4650      	mov	r0, sl
 8008136:	f7f8 f85b 	bl	80001f0 <memchr>
 800813a:	b140      	cbz	r0, 800814e <_svfiprintf_r+0x152>
 800813c:	2340      	movs	r3, #64	; 0x40
 800813e:	eba0 000a 	sub.w	r0, r0, sl
 8008142:	fa03 f000 	lsl.w	r0, r3, r0
 8008146:	9b04      	ldr	r3, [sp, #16]
 8008148:	4303      	orrs	r3, r0
 800814a:	3401      	adds	r4, #1
 800814c:	9304      	str	r3, [sp, #16]
 800814e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008152:	4826      	ldr	r0, [pc, #152]	; (80081ec <_svfiprintf_r+0x1f0>)
 8008154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008158:	2206      	movs	r2, #6
 800815a:	f7f8 f849 	bl	80001f0 <memchr>
 800815e:	2800      	cmp	r0, #0
 8008160:	d038      	beq.n	80081d4 <_svfiprintf_r+0x1d8>
 8008162:	4b23      	ldr	r3, [pc, #140]	; (80081f0 <_svfiprintf_r+0x1f4>)
 8008164:	bb1b      	cbnz	r3, 80081ae <_svfiprintf_r+0x1b2>
 8008166:	9b03      	ldr	r3, [sp, #12]
 8008168:	3307      	adds	r3, #7
 800816a:	f023 0307 	bic.w	r3, r3, #7
 800816e:	3308      	adds	r3, #8
 8008170:	9303      	str	r3, [sp, #12]
 8008172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008174:	4433      	add	r3, r6
 8008176:	9309      	str	r3, [sp, #36]	; 0x24
 8008178:	e767      	b.n	800804a <_svfiprintf_r+0x4e>
 800817a:	fb0c 3202 	mla	r2, ip, r2, r3
 800817e:	460c      	mov	r4, r1
 8008180:	2001      	movs	r0, #1
 8008182:	e7a5      	b.n	80080d0 <_svfiprintf_r+0xd4>
 8008184:	2300      	movs	r3, #0
 8008186:	3401      	adds	r4, #1
 8008188:	9305      	str	r3, [sp, #20]
 800818a:	4619      	mov	r1, r3
 800818c:	f04f 0c0a 	mov.w	ip, #10
 8008190:	4620      	mov	r0, r4
 8008192:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008196:	3a30      	subs	r2, #48	; 0x30
 8008198:	2a09      	cmp	r2, #9
 800819a:	d903      	bls.n	80081a4 <_svfiprintf_r+0x1a8>
 800819c:	2b00      	cmp	r3, #0
 800819e:	d0c5      	beq.n	800812c <_svfiprintf_r+0x130>
 80081a0:	9105      	str	r1, [sp, #20]
 80081a2:	e7c3      	b.n	800812c <_svfiprintf_r+0x130>
 80081a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80081a8:	4604      	mov	r4, r0
 80081aa:	2301      	movs	r3, #1
 80081ac:	e7f0      	b.n	8008190 <_svfiprintf_r+0x194>
 80081ae:	ab03      	add	r3, sp, #12
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	462a      	mov	r2, r5
 80081b4:	4b0f      	ldr	r3, [pc, #60]	; (80081f4 <_svfiprintf_r+0x1f8>)
 80081b6:	a904      	add	r1, sp, #16
 80081b8:	4638      	mov	r0, r7
 80081ba:	f7fd ffb7 	bl	800612c <_printf_float>
 80081be:	1c42      	adds	r2, r0, #1
 80081c0:	4606      	mov	r6, r0
 80081c2:	d1d6      	bne.n	8008172 <_svfiprintf_r+0x176>
 80081c4:	89ab      	ldrh	r3, [r5, #12]
 80081c6:	065b      	lsls	r3, r3, #25
 80081c8:	f53f af2c 	bmi.w	8008024 <_svfiprintf_r+0x28>
 80081cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081ce:	b01d      	add	sp, #116	; 0x74
 80081d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d4:	ab03      	add	r3, sp, #12
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	462a      	mov	r2, r5
 80081da:	4b06      	ldr	r3, [pc, #24]	; (80081f4 <_svfiprintf_r+0x1f8>)
 80081dc:	a904      	add	r1, sp, #16
 80081de:	4638      	mov	r0, r7
 80081e0:	f7fe fa48 	bl	8006674 <_printf_i>
 80081e4:	e7eb      	b.n	80081be <_svfiprintf_r+0x1c2>
 80081e6:	bf00      	nop
 80081e8:	0800915c 	.word	0x0800915c
 80081ec:	08009166 	.word	0x08009166
 80081f0:	0800612d 	.word	0x0800612d
 80081f4:	08007f45 	.word	0x08007f45
 80081f8:	08009162 	.word	0x08009162

080081fc <_sbrk_r>:
 80081fc:	b538      	push	{r3, r4, r5, lr}
 80081fe:	4d06      	ldr	r5, [pc, #24]	; (8008218 <_sbrk_r+0x1c>)
 8008200:	2300      	movs	r3, #0
 8008202:	4604      	mov	r4, r0
 8008204:	4608      	mov	r0, r1
 8008206:	602b      	str	r3, [r5, #0]
 8008208:	f7fa fb60 	bl	80028cc <_sbrk>
 800820c:	1c43      	adds	r3, r0, #1
 800820e:	d102      	bne.n	8008216 <_sbrk_r+0x1a>
 8008210:	682b      	ldr	r3, [r5, #0]
 8008212:	b103      	cbz	r3, 8008216 <_sbrk_r+0x1a>
 8008214:	6023      	str	r3, [r4, #0]
 8008216:	bd38      	pop	{r3, r4, r5, pc}
 8008218:	20000668 	.word	0x20000668

0800821c <__assert_func>:
 800821c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800821e:	4614      	mov	r4, r2
 8008220:	461a      	mov	r2, r3
 8008222:	4b09      	ldr	r3, [pc, #36]	; (8008248 <__assert_func+0x2c>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4605      	mov	r5, r0
 8008228:	68d8      	ldr	r0, [r3, #12]
 800822a:	b14c      	cbz	r4, 8008240 <__assert_func+0x24>
 800822c:	4b07      	ldr	r3, [pc, #28]	; (800824c <__assert_func+0x30>)
 800822e:	9100      	str	r1, [sp, #0]
 8008230:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008234:	4906      	ldr	r1, [pc, #24]	; (8008250 <__assert_func+0x34>)
 8008236:	462b      	mov	r3, r5
 8008238:	f000 f80e 	bl	8008258 <fiprintf>
 800823c:	f000 faac 	bl	8008798 <abort>
 8008240:	4b04      	ldr	r3, [pc, #16]	; (8008254 <__assert_func+0x38>)
 8008242:	461c      	mov	r4, r3
 8008244:	e7f3      	b.n	800822e <__assert_func+0x12>
 8008246:	bf00      	nop
 8008248:	200001d0 	.word	0x200001d0
 800824c:	0800916d 	.word	0x0800916d
 8008250:	0800917a 	.word	0x0800917a
 8008254:	080091a8 	.word	0x080091a8

08008258 <fiprintf>:
 8008258:	b40e      	push	{r1, r2, r3}
 800825a:	b503      	push	{r0, r1, lr}
 800825c:	4601      	mov	r1, r0
 800825e:	ab03      	add	r3, sp, #12
 8008260:	4805      	ldr	r0, [pc, #20]	; (8008278 <fiprintf+0x20>)
 8008262:	f853 2b04 	ldr.w	r2, [r3], #4
 8008266:	6800      	ldr	r0, [r0, #0]
 8008268:	9301      	str	r3, [sp, #4]
 800826a:	f000 f897 	bl	800839c <_vfiprintf_r>
 800826e:	b002      	add	sp, #8
 8008270:	f85d eb04 	ldr.w	lr, [sp], #4
 8008274:	b003      	add	sp, #12
 8008276:	4770      	bx	lr
 8008278:	200001d0 	.word	0x200001d0

0800827c <__ascii_mbtowc>:
 800827c:	b082      	sub	sp, #8
 800827e:	b901      	cbnz	r1, 8008282 <__ascii_mbtowc+0x6>
 8008280:	a901      	add	r1, sp, #4
 8008282:	b142      	cbz	r2, 8008296 <__ascii_mbtowc+0x1a>
 8008284:	b14b      	cbz	r3, 800829a <__ascii_mbtowc+0x1e>
 8008286:	7813      	ldrb	r3, [r2, #0]
 8008288:	600b      	str	r3, [r1, #0]
 800828a:	7812      	ldrb	r2, [r2, #0]
 800828c:	1e10      	subs	r0, r2, #0
 800828e:	bf18      	it	ne
 8008290:	2001      	movne	r0, #1
 8008292:	b002      	add	sp, #8
 8008294:	4770      	bx	lr
 8008296:	4610      	mov	r0, r2
 8008298:	e7fb      	b.n	8008292 <__ascii_mbtowc+0x16>
 800829a:	f06f 0001 	mvn.w	r0, #1
 800829e:	e7f8      	b.n	8008292 <__ascii_mbtowc+0x16>

080082a0 <memmove>:
 80082a0:	4288      	cmp	r0, r1
 80082a2:	b510      	push	{r4, lr}
 80082a4:	eb01 0402 	add.w	r4, r1, r2
 80082a8:	d902      	bls.n	80082b0 <memmove+0x10>
 80082aa:	4284      	cmp	r4, r0
 80082ac:	4623      	mov	r3, r4
 80082ae:	d807      	bhi.n	80082c0 <memmove+0x20>
 80082b0:	1e43      	subs	r3, r0, #1
 80082b2:	42a1      	cmp	r1, r4
 80082b4:	d008      	beq.n	80082c8 <memmove+0x28>
 80082b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082be:	e7f8      	b.n	80082b2 <memmove+0x12>
 80082c0:	4402      	add	r2, r0
 80082c2:	4601      	mov	r1, r0
 80082c4:	428a      	cmp	r2, r1
 80082c6:	d100      	bne.n	80082ca <memmove+0x2a>
 80082c8:	bd10      	pop	{r4, pc}
 80082ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082d2:	e7f7      	b.n	80082c4 <memmove+0x24>

080082d4 <__malloc_lock>:
 80082d4:	4801      	ldr	r0, [pc, #4]	; (80082dc <__malloc_lock+0x8>)
 80082d6:	f000 bc1f 	b.w	8008b18 <__retarget_lock_acquire_recursive>
 80082da:	bf00      	nop
 80082dc:	2000066c 	.word	0x2000066c

080082e0 <__malloc_unlock>:
 80082e0:	4801      	ldr	r0, [pc, #4]	; (80082e8 <__malloc_unlock+0x8>)
 80082e2:	f000 bc1a 	b.w	8008b1a <__retarget_lock_release_recursive>
 80082e6:	bf00      	nop
 80082e8:	2000066c 	.word	0x2000066c

080082ec <_realloc_r>:
 80082ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082f0:	4680      	mov	r8, r0
 80082f2:	4614      	mov	r4, r2
 80082f4:	460e      	mov	r6, r1
 80082f6:	b921      	cbnz	r1, 8008302 <_realloc_r+0x16>
 80082f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082fc:	4611      	mov	r1, r2
 80082fe:	f7ff bdad 	b.w	8007e5c <_malloc_r>
 8008302:	b92a      	cbnz	r2, 8008310 <_realloc_r+0x24>
 8008304:	f7ff fd3e 	bl	8007d84 <_free_r>
 8008308:	4625      	mov	r5, r4
 800830a:	4628      	mov	r0, r5
 800830c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008310:	f000 fc6a 	bl	8008be8 <_malloc_usable_size_r>
 8008314:	4284      	cmp	r4, r0
 8008316:	4607      	mov	r7, r0
 8008318:	d802      	bhi.n	8008320 <_realloc_r+0x34>
 800831a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800831e:	d812      	bhi.n	8008346 <_realloc_r+0x5a>
 8008320:	4621      	mov	r1, r4
 8008322:	4640      	mov	r0, r8
 8008324:	f7ff fd9a 	bl	8007e5c <_malloc_r>
 8008328:	4605      	mov	r5, r0
 800832a:	2800      	cmp	r0, #0
 800832c:	d0ed      	beq.n	800830a <_realloc_r+0x1e>
 800832e:	42bc      	cmp	r4, r7
 8008330:	4622      	mov	r2, r4
 8008332:	4631      	mov	r1, r6
 8008334:	bf28      	it	cs
 8008336:	463a      	movcs	r2, r7
 8008338:	f7ff f97c 	bl	8007634 <memcpy>
 800833c:	4631      	mov	r1, r6
 800833e:	4640      	mov	r0, r8
 8008340:	f7ff fd20 	bl	8007d84 <_free_r>
 8008344:	e7e1      	b.n	800830a <_realloc_r+0x1e>
 8008346:	4635      	mov	r5, r6
 8008348:	e7df      	b.n	800830a <_realloc_r+0x1e>

0800834a <__sfputc_r>:
 800834a:	6893      	ldr	r3, [r2, #8]
 800834c:	3b01      	subs	r3, #1
 800834e:	2b00      	cmp	r3, #0
 8008350:	b410      	push	{r4}
 8008352:	6093      	str	r3, [r2, #8]
 8008354:	da08      	bge.n	8008368 <__sfputc_r+0x1e>
 8008356:	6994      	ldr	r4, [r2, #24]
 8008358:	42a3      	cmp	r3, r4
 800835a:	db01      	blt.n	8008360 <__sfputc_r+0x16>
 800835c:	290a      	cmp	r1, #10
 800835e:	d103      	bne.n	8008368 <__sfputc_r+0x1e>
 8008360:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008364:	f000 b94a 	b.w	80085fc <__swbuf_r>
 8008368:	6813      	ldr	r3, [r2, #0]
 800836a:	1c58      	adds	r0, r3, #1
 800836c:	6010      	str	r0, [r2, #0]
 800836e:	7019      	strb	r1, [r3, #0]
 8008370:	4608      	mov	r0, r1
 8008372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008376:	4770      	bx	lr

08008378 <__sfputs_r>:
 8008378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837a:	4606      	mov	r6, r0
 800837c:	460f      	mov	r7, r1
 800837e:	4614      	mov	r4, r2
 8008380:	18d5      	adds	r5, r2, r3
 8008382:	42ac      	cmp	r4, r5
 8008384:	d101      	bne.n	800838a <__sfputs_r+0x12>
 8008386:	2000      	movs	r0, #0
 8008388:	e007      	b.n	800839a <__sfputs_r+0x22>
 800838a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800838e:	463a      	mov	r2, r7
 8008390:	4630      	mov	r0, r6
 8008392:	f7ff ffda 	bl	800834a <__sfputc_r>
 8008396:	1c43      	adds	r3, r0, #1
 8008398:	d1f3      	bne.n	8008382 <__sfputs_r+0xa>
 800839a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800839c <_vfiprintf_r>:
 800839c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a0:	460d      	mov	r5, r1
 80083a2:	b09d      	sub	sp, #116	; 0x74
 80083a4:	4614      	mov	r4, r2
 80083a6:	4698      	mov	r8, r3
 80083a8:	4606      	mov	r6, r0
 80083aa:	b118      	cbz	r0, 80083b4 <_vfiprintf_r+0x18>
 80083ac:	6983      	ldr	r3, [r0, #24]
 80083ae:	b90b      	cbnz	r3, 80083b4 <_vfiprintf_r+0x18>
 80083b0:	f000 fb14 	bl	80089dc <__sinit>
 80083b4:	4b89      	ldr	r3, [pc, #548]	; (80085dc <_vfiprintf_r+0x240>)
 80083b6:	429d      	cmp	r5, r3
 80083b8:	d11b      	bne.n	80083f2 <_vfiprintf_r+0x56>
 80083ba:	6875      	ldr	r5, [r6, #4]
 80083bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083be:	07d9      	lsls	r1, r3, #31
 80083c0:	d405      	bmi.n	80083ce <_vfiprintf_r+0x32>
 80083c2:	89ab      	ldrh	r3, [r5, #12]
 80083c4:	059a      	lsls	r2, r3, #22
 80083c6:	d402      	bmi.n	80083ce <_vfiprintf_r+0x32>
 80083c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083ca:	f000 fba5 	bl	8008b18 <__retarget_lock_acquire_recursive>
 80083ce:	89ab      	ldrh	r3, [r5, #12]
 80083d0:	071b      	lsls	r3, r3, #28
 80083d2:	d501      	bpl.n	80083d8 <_vfiprintf_r+0x3c>
 80083d4:	692b      	ldr	r3, [r5, #16]
 80083d6:	b9eb      	cbnz	r3, 8008414 <_vfiprintf_r+0x78>
 80083d8:	4629      	mov	r1, r5
 80083da:	4630      	mov	r0, r6
 80083dc:	f000 f96e 	bl	80086bc <__swsetup_r>
 80083e0:	b1c0      	cbz	r0, 8008414 <_vfiprintf_r+0x78>
 80083e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083e4:	07dc      	lsls	r4, r3, #31
 80083e6:	d50e      	bpl.n	8008406 <_vfiprintf_r+0x6a>
 80083e8:	f04f 30ff 	mov.w	r0, #4294967295
 80083ec:	b01d      	add	sp, #116	; 0x74
 80083ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f2:	4b7b      	ldr	r3, [pc, #492]	; (80085e0 <_vfiprintf_r+0x244>)
 80083f4:	429d      	cmp	r5, r3
 80083f6:	d101      	bne.n	80083fc <_vfiprintf_r+0x60>
 80083f8:	68b5      	ldr	r5, [r6, #8]
 80083fa:	e7df      	b.n	80083bc <_vfiprintf_r+0x20>
 80083fc:	4b79      	ldr	r3, [pc, #484]	; (80085e4 <_vfiprintf_r+0x248>)
 80083fe:	429d      	cmp	r5, r3
 8008400:	bf08      	it	eq
 8008402:	68f5      	ldreq	r5, [r6, #12]
 8008404:	e7da      	b.n	80083bc <_vfiprintf_r+0x20>
 8008406:	89ab      	ldrh	r3, [r5, #12]
 8008408:	0598      	lsls	r0, r3, #22
 800840a:	d4ed      	bmi.n	80083e8 <_vfiprintf_r+0x4c>
 800840c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800840e:	f000 fb84 	bl	8008b1a <__retarget_lock_release_recursive>
 8008412:	e7e9      	b.n	80083e8 <_vfiprintf_r+0x4c>
 8008414:	2300      	movs	r3, #0
 8008416:	9309      	str	r3, [sp, #36]	; 0x24
 8008418:	2320      	movs	r3, #32
 800841a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800841e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008422:	2330      	movs	r3, #48	; 0x30
 8008424:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80085e8 <_vfiprintf_r+0x24c>
 8008428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800842c:	f04f 0901 	mov.w	r9, #1
 8008430:	4623      	mov	r3, r4
 8008432:	469a      	mov	sl, r3
 8008434:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008438:	b10a      	cbz	r2, 800843e <_vfiprintf_r+0xa2>
 800843a:	2a25      	cmp	r2, #37	; 0x25
 800843c:	d1f9      	bne.n	8008432 <_vfiprintf_r+0x96>
 800843e:	ebba 0b04 	subs.w	fp, sl, r4
 8008442:	d00b      	beq.n	800845c <_vfiprintf_r+0xc0>
 8008444:	465b      	mov	r3, fp
 8008446:	4622      	mov	r2, r4
 8008448:	4629      	mov	r1, r5
 800844a:	4630      	mov	r0, r6
 800844c:	f7ff ff94 	bl	8008378 <__sfputs_r>
 8008450:	3001      	adds	r0, #1
 8008452:	f000 80aa 	beq.w	80085aa <_vfiprintf_r+0x20e>
 8008456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008458:	445a      	add	r2, fp
 800845a:	9209      	str	r2, [sp, #36]	; 0x24
 800845c:	f89a 3000 	ldrb.w	r3, [sl]
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 80a2 	beq.w	80085aa <_vfiprintf_r+0x20e>
 8008466:	2300      	movs	r3, #0
 8008468:	f04f 32ff 	mov.w	r2, #4294967295
 800846c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008470:	f10a 0a01 	add.w	sl, sl, #1
 8008474:	9304      	str	r3, [sp, #16]
 8008476:	9307      	str	r3, [sp, #28]
 8008478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800847c:	931a      	str	r3, [sp, #104]	; 0x68
 800847e:	4654      	mov	r4, sl
 8008480:	2205      	movs	r2, #5
 8008482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008486:	4858      	ldr	r0, [pc, #352]	; (80085e8 <_vfiprintf_r+0x24c>)
 8008488:	f7f7 feb2 	bl	80001f0 <memchr>
 800848c:	9a04      	ldr	r2, [sp, #16]
 800848e:	b9d8      	cbnz	r0, 80084c8 <_vfiprintf_r+0x12c>
 8008490:	06d1      	lsls	r1, r2, #27
 8008492:	bf44      	itt	mi
 8008494:	2320      	movmi	r3, #32
 8008496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800849a:	0713      	lsls	r3, r2, #28
 800849c:	bf44      	itt	mi
 800849e:	232b      	movmi	r3, #43	; 0x2b
 80084a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084a4:	f89a 3000 	ldrb.w	r3, [sl]
 80084a8:	2b2a      	cmp	r3, #42	; 0x2a
 80084aa:	d015      	beq.n	80084d8 <_vfiprintf_r+0x13c>
 80084ac:	9a07      	ldr	r2, [sp, #28]
 80084ae:	4654      	mov	r4, sl
 80084b0:	2000      	movs	r0, #0
 80084b2:	f04f 0c0a 	mov.w	ip, #10
 80084b6:	4621      	mov	r1, r4
 80084b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084bc:	3b30      	subs	r3, #48	; 0x30
 80084be:	2b09      	cmp	r3, #9
 80084c0:	d94e      	bls.n	8008560 <_vfiprintf_r+0x1c4>
 80084c2:	b1b0      	cbz	r0, 80084f2 <_vfiprintf_r+0x156>
 80084c4:	9207      	str	r2, [sp, #28]
 80084c6:	e014      	b.n	80084f2 <_vfiprintf_r+0x156>
 80084c8:	eba0 0308 	sub.w	r3, r0, r8
 80084cc:	fa09 f303 	lsl.w	r3, r9, r3
 80084d0:	4313      	orrs	r3, r2
 80084d2:	9304      	str	r3, [sp, #16]
 80084d4:	46a2      	mov	sl, r4
 80084d6:	e7d2      	b.n	800847e <_vfiprintf_r+0xe2>
 80084d8:	9b03      	ldr	r3, [sp, #12]
 80084da:	1d19      	adds	r1, r3, #4
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	9103      	str	r1, [sp, #12]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	bfbb      	ittet	lt
 80084e4:	425b      	neglt	r3, r3
 80084e6:	f042 0202 	orrlt.w	r2, r2, #2
 80084ea:	9307      	strge	r3, [sp, #28]
 80084ec:	9307      	strlt	r3, [sp, #28]
 80084ee:	bfb8      	it	lt
 80084f0:	9204      	strlt	r2, [sp, #16]
 80084f2:	7823      	ldrb	r3, [r4, #0]
 80084f4:	2b2e      	cmp	r3, #46	; 0x2e
 80084f6:	d10c      	bne.n	8008512 <_vfiprintf_r+0x176>
 80084f8:	7863      	ldrb	r3, [r4, #1]
 80084fa:	2b2a      	cmp	r3, #42	; 0x2a
 80084fc:	d135      	bne.n	800856a <_vfiprintf_r+0x1ce>
 80084fe:	9b03      	ldr	r3, [sp, #12]
 8008500:	1d1a      	adds	r2, r3, #4
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	9203      	str	r2, [sp, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	bfb8      	it	lt
 800850a:	f04f 33ff 	movlt.w	r3, #4294967295
 800850e:	3402      	adds	r4, #2
 8008510:	9305      	str	r3, [sp, #20]
 8008512:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80085f8 <_vfiprintf_r+0x25c>
 8008516:	7821      	ldrb	r1, [r4, #0]
 8008518:	2203      	movs	r2, #3
 800851a:	4650      	mov	r0, sl
 800851c:	f7f7 fe68 	bl	80001f0 <memchr>
 8008520:	b140      	cbz	r0, 8008534 <_vfiprintf_r+0x198>
 8008522:	2340      	movs	r3, #64	; 0x40
 8008524:	eba0 000a 	sub.w	r0, r0, sl
 8008528:	fa03 f000 	lsl.w	r0, r3, r0
 800852c:	9b04      	ldr	r3, [sp, #16]
 800852e:	4303      	orrs	r3, r0
 8008530:	3401      	adds	r4, #1
 8008532:	9304      	str	r3, [sp, #16]
 8008534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008538:	482c      	ldr	r0, [pc, #176]	; (80085ec <_vfiprintf_r+0x250>)
 800853a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800853e:	2206      	movs	r2, #6
 8008540:	f7f7 fe56 	bl	80001f0 <memchr>
 8008544:	2800      	cmp	r0, #0
 8008546:	d03f      	beq.n	80085c8 <_vfiprintf_r+0x22c>
 8008548:	4b29      	ldr	r3, [pc, #164]	; (80085f0 <_vfiprintf_r+0x254>)
 800854a:	bb1b      	cbnz	r3, 8008594 <_vfiprintf_r+0x1f8>
 800854c:	9b03      	ldr	r3, [sp, #12]
 800854e:	3307      	adds	r3, #7
 8008550:	f023 0307 	bic.w	r3, r3, #7
 8008554:	3308      	adds	r3, #8
 8008556:	9303      	str	r3, [sp, #12]
 8008558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800855a:	443b      	add	r3, r7
 800855c:	9309      	str	r3, [sp, #36]	; 0x24
 800855e:	e767      	b.n	8008430 <_vfiprintf_r+0x94>
 8008560:	fb0c 3202 	mla	r2, ip, r2, r3
 8008564:	460c      	mov	r4, r1
 8008566:	2001      	movs	r0, #1
 8008568:	e7a5      	b.n	80084b6 <_vfiprintf_r+0x11a>
 800856a:	2300      	movs	r3, #0
 800856c:	3401      	adds	r4, #1
 800856e:	9305      	str	r3, [sp, #20]
 8008570:	4619      	mov	r1, r3
 8008572:	f04f 0c0a 	mov.w	ip, #10
 8008576:	4620      	mov	r0, r4
 8008578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800857c:	3a30      	subs	r2, #48	; 0x30
 800857e:	2a09      	cmp	r2, #9
 8008580:	d903      	bls.n	800858a <_vfiprintf_r+0x1ee>
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0c5      	beq.n	8008512 <_vfiprintf_r+0x176>
 8008586:	9105      	str	r1, [sp, #20]
 8008588:	e7c3      	b.n	8008512 <_vfiprintf_r+0x176>
 800858a:	fb0c 2101 	mla	r1, ip, r1, r2
 800858e:	4604      	mov	r4, r0
 8008590:	2301      	movs	r3, #1
 8008592:	e7f0      	b.n	8008576 <_vfiprintf_r+0x1da>
 8008594:	ab03      	add	r3, sp, #12
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	462a      	mov	r2, r5
 800859a:	4b16      	ldr	r3, [pc, #88]	; (80085f4 <_vfiprintf_r+0x258>)
 800859c:	a904      	add	r1, sp, #16
 800859e:	4630      	mov	r0, r6
 80085a0:	f7fd fdc4 	bl	800612c <_printf_float>
 80085a4:	4607      	mov	r7, r0
 80085a6:	1c78      	adds	r0, r7, #1
 80085a8:	d1d6      	bne.n	8008558 <_vfiprintf_r+0x1bc>
 80085aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085ac:	07d9      	lsls	r1, r3, #31
 80085ae:	d405      	bmi.n	80085bc <_vfiprintf_r+0x220>
 80085b0:	89ab      	ldrh	r3, [r5, #12]
 80085b2:	059a      	lsls	r2, r3, #22
 80085b4:	d402      	bmi.n	80085bc <_vfiprintf_r+0x220>
 80085b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085b8:	f000 faaf 	bl	8008b1a <__retarget_lock_release_recursive>
 80085bc:	89ab      	ldrh	r3, [r5, #12]
 80085be:	065b      	lsls	r3, r3, #25
 80085c0:	f53f af12 	bmi.w	80083e8 <_vfiprintf_r+0x4c>
 80085c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085c6:	e711      	b.n	80083ec <_vfiprintf_r+0x50>
 80085c8:	ab03      	add	r3, sp, #12
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	462a      	mov	r2, r5
 80085ce:	4b09      	ldr	r3, [pc, #36]	; (80085f4 <_vfiprintf_r+0x258>)
 80085d0:	a904      	add	r1, sp, #16
 80085d2:	4630      	mov	r0, r6
 80085d4:	f7fe f84e 	bl	8006674 <_printf_i>
 80085d8:	e7e4      	b.n	80085a4 <_vfiprintf_r+0x208>
 80085da:	bf00      	nop
 80085dc:	080092d4 	.word	0x080092d4
 80085e0:	080092f4 	.word	0x080092f4
 80085e4:	080092b4 	.word	0x080092b4
 80085e8:	0800915c 	.word	0x0800915c
 80085ec:	08009166 	.word	0x08009166
 80085f0:	0800612d 	.word	0x0800612d
 80085f4:	08008379 	.word	0x08008379
 80085f8:	08009162 	.word	0x08009162

080085fc <__swbuf_r>:
 80085fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fe:	460e      	mov	r6, r1
 8008600:	4614      	mov	r4, r2
 8008602:	4605      	mov	r5, r0
 8008604:	b118      	cbz	r0, 800860e <__swbuf_r+0x12>
 8008606:	6983      	ldr	r3, [r0, #24]
 8008608:	b90b      	cbnz	r3, 800860e <__swbuf_r+0x12>
 800860a:	f000 f9e7 	bl	80089dc <__sinit>
 800860e:	4b21      	ldr	r3, [pc, #132]	; (8008694 <__swbuf_r+0x98>)
 8008610:	429c      	cmp	r4, r3
 8008612:	d12b      	bne.n	800866c <__swbuf_r+0x70>
 8008614:	686c      	ldr	r4, [r5, #4]
 8008616:	69a3      	ldr	r3, [r4, #24]
 8008618:	60a3      	str	r3, [r4, #8]
 800861a:	89a3      	ldrh	r3, [r4, #12]
 800861c:	071a      	lsls	r2, r3, #28
 800861e:	d52f      	bpl.n	8008680 <__swbuf_r+0x84>
 8008620:	6923      	ldr	r3, [r4, #16]
 8008622:	b36b      	cbz	r3, 8008680 <__swbuf_r+0x84>
 8008624:	6923      	ldr	r3, [r4, #16]
 8008626:	6820      	ldr	r0, [r4, #0]
 8008628:	1ac0      	subs	r0, r0, r3
 800862a:	6963      	ldr	r3, [r4, #20]
 800862c:	b2f6      	uxtb	r6, r6
 800862e:	4283      	cmp	r3, r0
 8008630:	4637      	mov	r7, r6
 8008632:	dc04      	bgt.n	800863e <__swbuf_r+0x42>
 8008634:	4621      	mov	r1, r4
 8008636:	4628      	mov	r0, r5
 8008638:	f000 f93c 	bl	80088b4 <_fflush_r>
 800863c:	bb30      	cbnz	r0, 800868c <__swbuf_r+0x90>
 800863e:	68a3      	ldr	r3, [r4, #8]
 8008640:	3b01      	subs	r3, #1
 8008642:	60a3      	str	r3, [r4, #8]
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	1c5a      	adds	r2, r3, #1
 8008648:	6022      	str	r2, [r4, #0]
 800864a:	701e      	strb	r6, [r3, #0]
 800864c:	6963      	ldr	r3, [r4, #20]
 800864e:	3001      	adds	r0, #1
 8008650:	4283      	cmp	r3, r0
 8008652:	d004      	beq.n	800865e <__swbuf_r+0x62>
 8008654:	89a3      	ldrh	r3, [r4, #12]
 8008656:	07db      	lsls	r3, r3, #31
 8008658:	d506      	bpl.n	8008668 <__swbuf_r+0x6c>
 800865a:	2e0a      	cmp	r6, #10
 800865c:	d104      	bne.n	8008668 <__swbuf_r+0x6c>
 800865e:	4621      	mov	r1, r4
 8008660:	4628      	mov	r0, r5
 8008662:	f000 f927 	bl	80088b4 <_fflush_r>
 8008666:	b988      	cbnz	r0, 800868c <__swbuf_r+0x90>
 8008668:	4638      	mov	r0, r7
 800866a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800866c:	4b0a      	ldr	r3, [pc, #40]	; (8008698 <__swbuf_r+0x9c>)
 800866e:	429c      	cmp	r4, r3
 8008670:	d101      	bne.n	8008676 <__swbuf_r+0x7a>
 8008672:	68ac      	ldr	r4, [r5, #8]
 8008674:	e7cf      	b.n	8008616 <__swbuf_r+0x1a>
 8008676:	4b09      	ldr	r3, [pc, #36]	; (800869c <__swbuf_r+0xa0>)
 8008678:	429c      	cmp	r4, r3
 800867a:	bf08      	it	eq
 800867c:	68ec      	ldreq	r4, [r5, #12]
 800867e:	e7ca      	b.n	8008616 <__swbuf_r+0x1a>
 8008680:	4621      	mov	r1, r4
 8008682:	4628      	mov	r0, r5
 8008684:	f000 f81a 	bl	80086bc <__swsetup_r>
 8008688:	2800      	cmp	r0, #0
 800868a:	d0cb      	beq.n	8008624 <__swbuf_r+0x28>
 800868c:	f04f 37ff 	mov.w	r7, #4294967295
 8008690:	e7ea      	b.n	8008668 <__swbuf_r+0x6c>
 8008692:	bf00      	nop
 8008694:	080092d4 	.word	0x080092d4
 8008698:	080092f4 	.word	0x080092f4
 800869c:	080092b4 	.word	0x080092b4

080086a0 <__ascii_wctomb>:
 80086a0:	b149      	cbz	r1, 80086b6 <__ascii_wctomb+0x16>
 80086a2:	2aff      	cmp	r2, #255	; 0xff
 80086a4:	bf85      	ittet	hi
 80086a6:	238a      	movhi	r3, #138	; 0x8a
 80086a8:	6003      	strhi	r3, [r0, #0]
 80086aa:	700a      	strbls	r2, [r1, #0]
 80086ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80086b0:	bf98      	it	ls
 80086b2:	2001      	movls	r0, #1
 80086b4:	4770      	bx	lr
 80086b6:	4608      	mov	r0, r1
 80086b8:	4770      	bx	lr
	...

080086bc <__swsetup_r>:
 80086bc:	4b32      	ldr	r3, [pc, #200]	; (8008788 <__swsetup_r+0xcc>)
 80086be:	b570      	push	{r4, r5, r6, lr}
 80086c0:	681d      	ldr	r5, [r3, #0]
 80086c2:	4606      	mov	r6, r0
 80086c4:	460c      	mov	r4, r1
 80086c6:	b125      	cbz	r5, 80086d2 <__swsetup_r+0x16>
 80086c8:	69ab      	ldr	r3, [r5, #24]
 80086ca:	b913      	cbnz	r3, 80086d2 <__swsetup_r+0x16>
 80086cc:	4628      	mov	r0, r5
 80086ce:	f000 f985 	bl	80089dc <__sinit>
 80086d2:	4b2e      	ldr	r3, [pc, #184]	; (800878c <__swsetup_r+0xd0>)
 80086d4:	429c      	cmp	r4, r3
 80086d6:	d10f      	bne.n	80086f8 <__swsetup_r+0x3c>
 80086d8:	686c      	ldr	r4, [r5, #4]
 80086da:	89a3      	ldrh	r3, [r4, #12]
 80086dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086e0:	0719      	lsls	r1, r3, #28
 80086e2:	d42c      	bmi.n	800873e <__swsetup_r+0x82>
 80086e4:	06dd      	lsls	r5, r3, #27
 80086e6:	d411      	bmi.n	800870c <__swsetup_r+0x50>
 80086e8:	2309      	movs	r3, #9
 80086ea:	6033      	str	r3, [r6, #0]
 80086ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086f0:	81a3      	strh	r3, [r4, #12]
 80086f2:	f04f 30ff 	mov.w	r0, #4294967295
 80086f6:	e03e      	b.n	8008776 <__swsetup_r+0xba>
 80086f8:	4b25      	ldr	r3, [pc, #148]	; (8008790 <__swsetup_r+0xd4>)
 80086fa:	429c      	cmp	r4, r3
 80086fc:	d101      	bne.n	8008702 <__swsetup_r+0x46>
 80086fe:	68ac      	ldr	r4, [r5, #8]
 8008700:	e7eb      	b.n	80086da <__swsetup_r+0x1e>
 8008702:	4b24      	ldr	r3, [pc, #144]	; (8008794 <__swsetup_r+0xd8>)
 8008704:	429c      	cmp	r4, r3
 8008706:	bf08      	it	eq
 8008708:	68ec      	ldreq	r4, [r5, #12]
 800870a:	e7e6      	b.n	80086da <__swsetup_r+0x1e>
 800870c:	0758      	lsls	r0, r3, #29
 800870e:	d512      	bpl.n	8008736 <__swsetup_r+0x7a>
 8008710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008712:	b141      	cbz	r1, 8008726 <__swsetup_r+0x6a>
 8008714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008718:	4299      	cmp	r1, r3
 800871a:	d002      	beq.n	8008722 <__swsetup_r+0x66>
 800871c:	4630      	mov	r0, r6
 800871e:	f7ff fb31 	bl	8007d84 <_free_r>
 8008722:	2300      	movs	r3, #0
 8008724:	6363      	str	r3, [r4, #52]	; 0x34
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800872c:	81a3      	strh	r3, [r4, #12]
 800872e:	2300      	movs	r3, #0
 8008730:	6063      	str	r3, [r4, #4]
 8008732:	6923      	ldr	r3, [r4, #16]
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	89a3      	ldrh	r3, [r4, #12]
 8008738:	f043 0308 	orr.w	r3, r3, #8
 800873c:	81a3      	strh	r3, [r4, #12]
 800873e:	6923      	ldr	r3, [r4, #16]
 8008740:	b94b      	cbnz	r3, 8008756 <__swsetup_r+0x9a>
 8008742:	89a3      	ldrh	r3, [r4, #12]
 8008744:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800874c:	d003      	beq.n	8008756 <__swsetup_r+0x9a>
 800874e:	4621      	mov	r1, r4
 8008750:	4630      	mov	r0, r6
 8008752:	f000 fa09 	bl	8008b68 <__smakebuf_r>
 8008756:	89a0      	ldrh	r0, [r4, #12]
 8008758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800875c:	f010 0301 	ands.w	r3, r0, #1
 8008760:	d00a      	beq.n	8008778 <__swsetup_r+0xbc>
 8008762:	2300      	movs	r3, #0
 8008764:	60a3      	str	r3, [r4, #8]
 8008766:	6963      	ldr	r3, [r4, #20]
 8008768:	425b      	negs	r3, r3
 800876a:	61a3      	str	r3, [r4, #24]
 800876c:	6923      	ldr	r3, [r4, #16]
 800876e:	b943      	cbnz	r3, 8008782 <__swsetup_r+0xc6>
 8008770:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008774:	d1ba      	bne.n	80086ec <__swsetup_r+0x30>
 8008776:	bd70      	pop	{r4, r5, r6, pc}
 8008778:	0781      	lsls	r1, r0, #30
 800877a:	bf58      	it	pl
 800877c:	6963      	ldrpl	r3, [r4, #20]
 800877e:	60a3      	str	r3, [r4, #8]
 8008780:	e7f4      	b.n	800876c <__swsetup_r+0xb0>
 8008782:	2000      	movs	r0, #0
 8008784:	e7f7      	b.n	8008776 <__swsetup_r+0xba>
 8008786:	bf00      	nop
 8008788:	200001d0 	.word	0x200001d0
 800878c:	080092d4 	.word	0x080092d4
 8008790:	080092f4 	.word	0x080092f4
 8008794:	080092b4 	.word	0x080092b4

08008798 <abort>:
 8008798:	b508      	push	{r3, lr}
 800879a:	2006      	movs	r0, #6
 800879c:	f000 fa54 	bl	8008c48 <raise>
 80087a0:	2001      	movs	r0, #1
 80087a2:	f7fa f81b 	bl	80027dc <_exit>
	...

080087a8 <__sflush_r>:
 80087a8:	898a      	ldrh	r2, [r1, #12]
 80087aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ae:	4605      	mov	r5, r0
 80087b0:	0710      	lsls	r0, r2, #28
 80087b2:	460c      	mov	r4, r1
 80087b4:	d458      	bmi.n	8008868 <__sflush_r+0xc0>
 80087b6:	684b      	ldr	r3, [r1, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	dc05      	bgt.n	80087c8 <__sflush_r+0x20>
 80087bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087be:	2b00      	cmp	r3, #0
 80087c0:	dc02      	bgt.n	80087c8 <__sflush_r+0x20>
 80087c2:	2000      	movs	r0, #0
 80087c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087ca:	2e00      	cmp	r6, #0
 80087cc:	d0f9      	beq.n	80087c2 <__sflush_r+0x1a>
 80087ce:	2300      	movs	r3, #0
 80087d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087d4:	682f      	ldr	r7, [r5, #0]
 80087d6:	602b      	str	r3, [r5, #0]
 80087d8:	d032      	beq.n	8008840 <__sflush_r+0x98>
 80087da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087dc:	89a3      	ldrh	r3, [r4, #12]
 80087de:	075a      	lsls	r2, r3, #29
 80087e0:	d505      	bpl.n	80087ee <__sflush_r+0x46>
 80087e2:	6863      	ldr	r3, [r4, #4]
 80087e4:	1ac0      	subs	r0, r0, r3
 80087e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087e8:	b10b      	cbz	r3, 80087ee <__sflush_r+0x46>
 80087ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087ec:	1ac0      	subs	r0, r0, r3
 80087ee:	2300      	movs	r3, #0
 80087f0:	4602      	mov	r2, r0
 80087f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087f4:	6a21      	ldr	r1, [r4, #32]
 80087f6:	4628      	mov	r0, r5
 80087f8:	47b0      	blx	r6
 80087fa:	1c43      	adds	r3, r0, #1
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	d106      	bne.n	800880e <__sflush_r+0x66>
 8008800:	6829      	ldr	r1, [r5, #0]
 8008802:	291d      	cmp	r1, #29
 8008804:	d82c      	bhi.n	8008860 <__sflush_r+0xb8>
 8008806:	4a2a      	ldr	r2, [pc, #168]	; (80088b0 <__sflush_r+0x108>)
 8008808:	40ca      	lsrs	r2, r1
 800880a:	07d6      	lsls	r6, r2, #31
 800880c:	d528      	bpl.n	8008860 <__sflush_r+0xb8>
 800880e:	2200      	movs	r2, #0
 8008810:	6062      	str	r2, [r4, #4]
 8008812:	04d9      	lsls	r1, r3, #19
 8008814:	6922      	ldr	r2, [r4, #16]
 8008816:	6022      	str	r2, [r4, #0]
 8008818:	d504      	bpl.n	8008824 <__sflush_r+0x7c>
 800881a:	1c42      	adds	r2, r0, #1
 800881c:	d101      	bne.n	8008822 <__sflush_r+0x7a>
 800881e:	682b      	ldr	r3, [r5, #0]
 8008820:	b903      	cbnz	r3, 8008824 <__sflush_r+0x7c>
 8008822:	6560      	str	r0, [r4, #84]	; 0x54
 8008824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008826:	602f      	str	r7, [r5, #0]
 8008828:	2900      	cmp	r1, #0
 800882a:	d0ca      	beq.n	80087c2 <__sflush_r+0x1a>
 800882c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008830:	4299      	cmp	r1, r3
 8008832:	d002      	beq.n	800883a <__sflush_r+0x92>
 8008834:	4628      	mov	r0, r5
 8008836:	f7ff faa5 	bl	8007d84 <_free_r>
 800883a:	2000      	movs	r0, #0
 800883c:	6360      	str	r0, [r4, #52]	; 0x34
 800883e:	e7c1      	b.n	80087c4 <__sflush_r+0x1c>
 8008840:	6a21      	ldr	r1, [r4, #32]
 8008842:	2301      	movs	r3, #1
 8008844:	4628      	mov	r0, r5
 8008846:	47b0      	blx	r6
 8008848:	1c41      	adds	r1, r0, #1
 800884a:	d1c7      	bne.n	80087dc <__sflush_r+0x34>
 800884c:	682b      	ldr	r3, [r5, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d0c4      	beq.n	80087dc <__sflush_r+0x34>
 8008852:	2b1d      	cmp	r3, #29
 8008854:	d001      	beq.n	800885a <__sflush_r+0xb2>
 8008856:	2b16      	cmp	r3, #22
 8008858:	d101      	bne.n	800885e <__sflush_r+0xb6>
 800885a:	602f      	str	r7, [r5, #0]
 800885c:	e7b1      	b.n	80087c2 <__sflush_r+0x1a>
 800885e:	89a3      	ldrh	r3, [r4, #12]
 8008860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008864:	81a3      	strh	r3, [r4, #12]
 8008866:	e7ad      	b.n	80087c4 <__sflush_r+0x1c>
 8008868:	690f      	ldr	r7, [r1, #16]
 800886a:	2f00      	cmp	r7, #0
 800886c:	d0a9      	beq.n	80087c2 <__sflush_r+0x1a>
 800886e:	0793      	lsls	r3, r2, #30
 8008870:	680e      	ldr	r6, [r1, #0]
 8008872:	bf08      	it	eq
 8008874:	694b      	ldreq	r3, [r1, #20]
 8008876:	600f      	str	r7, [r1, #0]
 8008878:	bf18      	it	ne
 800887a:	2300      	movne	r3, #0
 800887c:	eba6 0807 	sub.w	r8, r6, r7
 8008880:	608b      	str	r3, [r1, #8]
 8008882:	f1b8 0f00 	cmp.w	r8, #0
 8008886:	dd9c      	ble.n	80087c2 <__sflush_r+0x1a>
 8008888:	6a21      	ldr	r1, [r4, #32]
 800888a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800888c:	4643      	mov	r3, r8
 800888e:	463a      	mov	r2, r7
 8008890:	4628      	mov	r0, r5
 8008892:	47b0      	blx	r6
 8008894:	2800      	cmp	r0, #0
 8008896:	dc06      	bgt.n	80088a6 <__sflush_r+0xfe>
 8008898:	89a3      	ldrh	r3, [r4, #12]
 800889a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800889e:	81a3      	strh	r3, [r4, #12]
 80088a0:	f04f 30ff 	mov.w	r0, #4294967295
 80088a4:	e78e      	b.n	80087c4 <__sflush_r+0x1c>
 80088a6:	4407      	add	r7, r0
 80088a8:	eba8 0800 	sub.w	r8, r8, r0
 80088ac:	e7e9      	b.n	8008882 <__sflush_r+0xda>
 80088ae:	bf00      	nop
 80088b0:	20400001 	.word	0x20400001

080088b4 <_fflush_r>:
 80088b4:	b538      	push	{r3, r4, r5, lr}
 80088b6:	690b      	ldr	r3, [r1, #16]
 80088b8:	4605      	mov	r5, r0
 80088ba:	460c      	mov	r4, r1
 80088bc:	b913      	cbnz	r3, 80088c4 <_fflush_r+0x10>
 80088be:	2500      	movs	r5, #0
 80088c0:	4628      	mov	r0, r5
 80088c2:	bd38      	pop	{r3, r4, r5, pc}
 80088c4:	b118      	cbz	r0, 80088ce <_fflush_r+0x1a>
 80088c6:	6983      	ldr	r3, [r0, #24]
 80088c8:	b90b      	cbnz	r3, 80088ce <_fflush_r+0x1a>
 80088ca:	f000 f887 	bl	80089dc <__sinit>
 80088ce:	4b14      	ldr	r3, [pc, #80]	; (8008920 <_fflush_r+0x6c>)
 80088d0:	429c      	cmp	r4, r3
 80088d2:	d11b      	bne.n	800890c <_fflush_r+0x58>
 80088d4:	686c      	ldr	r4, [r5, #4]
 80088d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d0ef      	beq.n	80088be <_fflush_r+0xa>
 80088de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088e0:	07d0      	lsls	r0, r2, #31
 80088e2:	d404      	bmi.n	80088ee <_fflush_r+0x3a>
 80088e4:	0599      	lsls	r1, r3, #22
 80088e6:	d402      	bmi.n	80088ee <_fflush_r+0x3a>
 80088e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088ea:	f000 f915 	bl	8008b18 <__retarget_lock_acquire_recursive>
 80088ee:	4628      	mov	r0, r5
 80088f0:	4621      	mov	r1, r4
 80088f2:	f7ff ff59 	bl	80087a8 <__sflush_r>
 80088f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088f8:	07da      	lsls	r2, r3, #31
 80088fa:	4605      	mov	r5, r0
 80088fc:	d4e0      	bmi.n	80088c0 <_fflush_r+0xc>
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	059b      	lsls	r3, r3, #22
 8008902:	d4dd      	bmi.n	80088c0 <_fflush_r+0xc>
 8008904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008906:	f000 f908 	bl	8008b1a <__retarget_lock_release_recursive>
 800890a:	e7d9      	b.n	80088c0 <_fflush_r+0xc>
 800890c:	4b05      	ldr	r3, [pc, #20]	; (8008924 <_fflush_r+0x70>)
 800890e:	429c      	cmp	r4, r3
 8008910:	d101      	bne.n	8008916 <_fflush_r+0x62>
 8008912:	68ac      	ldr	r4, [r5, #8]
 8008914:	e7df      	b.n	80088d6 <_fflush_r+0x22>
 8008916:	4b04      	ldr	r3, [pc, #16]	; (8008928 <_fflush_r+0x74>)
 8008918:	429c      	cmp	r4, r3
 800891a:	bf08      	it	eq
 800891c:	68ec      	ldreq	r4, [r5, #12]
 800891e:	e7da      	b.n	80088d6 <_fflush_r+0x22>
 8008920:	080092d4 	.word	0x080092d4
 8008924:	080092f4 	.word	0x080092f4
 8008928:	080092b4 	.word	0x080092b4

0800892c <std>:
 800892c:	2300      	movs	r3, #0
 800892e:	b510      	push	{r4, lr}
 8008930:	4604      	mov	r4, r0
 8008932:	e9c0 3300 	strd	r3, r3, [r0]
 8008936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800893a:	6083      	str	r3, [r0, #8]
 800893c:	8181      	strh	r1, [r0, #12]
 800893e:	6643      	str	r3, [r0, #100]	; 0x64
 8008940:	81c2      	strh	r2, [r0, #14]
 8008942:	6183      	str	r3, [r0, #24]
 8008944:	4619      	mov	r1, r3
 8008946:	2208      	movs	r2, #8
 8008948:	305c      	adds	r0, #92	; 0x5c
 800894a:	f7fd fb47 	bl	8005fdc <memset>
 800894e:	4b05      	ldr	r3, [pc, #20]	; (8008964 <std+0x38>)
 8008950:	6263      	str	r3, [r4, #36]	; 0x24
 8008952:	4b05      	ldr	r3, [pc, #20]	; (8008968 <std+0x3c>)
 8008954:	62a3      	str	r3, [r4, #40]	; 0x28
 8008956:	4b05      	ldr	r3, [pc, #20]	; (800896c <std+0x40>)
 8008958:	62e3      	str	r3, [r4, #44]	; 0x2c
 800895a:	4b05      	ldr	r3, [pc, #20]	; (8008970 <std+0x44>)
 800895c:	6224      	str	r4, [r4, #32]
 800895e:	6323      	str	r3, [r4, #48]	; 0x30
 8008960:	bd10      	pop	{r4, pc}
 8008962:	bf00      	nop
 8008964:	08008c81 	.word	0x08008c81
 8008968:	08008ca3 	.word	0x08008ca3
 800896c:	08008cdb 	.word	0x08008cdb
 8008970:	08008cff 	.word	0x08008cff

08008974 <_cleanup_r>:
 8008974:	4901      	ldr	r1, [pc, #4]	; (800897c <_cleanup_r+0x8>)
 8008976:	f000 b8af 	b.w	8008ad8 <_fwalk_reent>
 800897a:	bf00      	nop
 800897c:	080088b5 	.word	0x080088b5

08008980 <__sfmoreglue>:
 8008980:	b570      	push	{r4, r5, r6, lr}
 8008982:	2268      	movs	r2, #104	; 0x68
 8008984:	1e4d      	subs	r5, r1, #1
 8008986:	4355      	muls	r5, r2
 8008988:	460e      	mov	r6, r1
 800898a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800898e:	f7ff fa65 	bl	8007e5c <_malloc_r>
 8008992:	4604      	mov	r4, r0
 8008994:	b140      	cbz	r0, 80089a8 <__sfmoreglue+0x28>
 8008996:	2100      	movs	r1, #0
 8008998:	e9c0 1600 	strd	r1, r6, [r0]
 800899c:	300c      	adds	r0, #12
 800899e:	60a0      	str	r0, [r4, #8]
 80089a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80089a4:	f7fd fb1a 	bl	8005fdc <memset>
 80089a8:	4620      	mov	r0, r4
 80089aa:	bd70      	pop	{r4, r5, r6, pc}

080089ac <__sfp_lock_acquire>:
 80089ac:	4801      	ldr	r0, [pc, #4]	; (80089b4 <__sfp_lock_acquire+0x8>)
 80089ae:	f000 b8b3 	b.w	8008b18 <__retarget_lock_acquire_recursive>
 80089b2:	bf00      	nop
 80089b4:	2000066d 	.word	0x2000066d

080089b8 <__sfp_lock_release>:
 80089b8:	4801      	ldr	r0, [pc, #4]	; (80089c0 <__sfp_lock_release+0x8>)
 80089ba:	f000 b8ae 	b.w	8008b1a <__retarget_lock_release_recursive>
 80089be:	bf00      	nop
 80089c0:	2000066d 	.word	0x2000066d

080089c4 <__sinit_lock_acquire>:
 80089c4:	4801      	ldr	r0, [pc, #4]	; (80089cc <__sinit_lock_acquire+0x8>)
 80089c6:	f000 b8a7 	b.w	8008b18 <__retarget_lock_acquire_recursive>
 80089ca:	bf00      	nop
 80089cc:	2000066e 	.word	0x2000066e

080089d0 <__sinit_lock_release>:
 80089d0:	4801      	ldr	r0, [pc, #4]	; (80089d8 <__sinit_lock_release+0x8>)
 80089d2:	f000 b8a2 	b.w	8008b1a <__retarget_lock_release_recursive>
 80089d6:	bf00      	nop
 80089d8:	2000066e 	.word	0x2000066e

080089dc <__sinit>:
 80089dc:	b510      	push	{r4, lr}
 80089de:	4604      	mov	r4, r0
 80089e0:	f7ff fff0 	bl	80089c4 <__sinit_lock_acquire>
 80089e4:	69a3      	ldr	r3, [r4, #24]
 80089e6:	b11b      	cbz	r3, 80089f0 <__sinit+0x14>
 80089e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089ec:	f7ff bff0 	b.w	80089d0 <__sinit_lock_release>
 80089f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80089f4:	6523      	str	r3, [r4, #80]	; 0x50
 80089f6:	4b13      	ldr	r3, [pc, #76]	; (8008a44 <__sinit+0x68>)
 80089f8:	4a13      	ldr	r2, [pc, #76]	; (8008a48 <__sinit+0x6c>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80089fe:	42a3      	cmp	r3, r4
 8008a00:	bf04      	itt	eq
 8008a02:	2301      	moveq	r3, #1
 8008a04:	61a3      	streq	r3, [r4, #24]
 8008a06:	4620      	mov	r0, r4
 8008a08:	f000 f820 	bl	8008a4c <__sfp>
 8008a0c:	6060      	str	r0, [r4, #4]
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f000 f81c 	bl	8008a4c <__sfp>
 8008a14:	60a0      	str	r0, [r4, #8]
 8008a16:	4620      	mov	r0, r4
 8008a18:	f000 f818 	bl	8008a4c <__sfp>
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	60e0      	str	r0, [r4, #12]
 8008a20:	2104      	movs	r1, #4
 8008a22:	6860      	ldr	r0, [r4, #4]
 8008a24:	f7ff ff82 	bl	800892c <std>
 8008a28:	68a0      	ldr	r0, [r4, #8]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	2109      	movs	r1, #9
 8008a2e:	f7ff ff7d 	bl	800892c <std>
 8008a32:	68e0      	ldr	r0, [r4, #12]
 8008a34:	2202      	movs	r2, #2
 8008a36:	2112      	movs	r1, #18
 8008a38:	f7ff ff78 	bl	800892c <std>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	61a3      	str	r3, [r4, #24]
 8008a40:	e7d2      	b.n	80089e8 <__sinit+0xc>
 8008a42:	bf00      	nop
 8008a44:	08008f3c 	.word	0x08008f3c
 8008a48:	08008975 	.word	0x08008975

08008a4c <__sfp>:
 8008a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4e:	4607      	mov	r7, r0
 8008a50:	f7ff ffac 	bl	80089ac <__sfp_lock_acquire>
 8008a54:	4b1e      	ldr	r3, [pc, #120]	; (8008ad0 <__sfp+0x84>)
 8008a56:	681e      	ldr	r6, [r3, #0]
 8008a58:	69b3      	ldr	r3, [r6, #24]
 8008a5a:	b913      	cbnz	r3, 8008a62 <__sfp+0x16>
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	f7ff ffbd 	bl	80089dc <__sinit>
 8008a62:	3648      	adds	r6, #72	; 0x48
 8008a64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	d503      	bpl.n	8008a74 <__sfp+0x28>
 8008a6c:	6833      	ldr	r3, [r6, #0]
 8008a6e:	b30b      	cbz	r3, 8008ab4 <__sfp+0x68>
 8008a70:	6836      	ldr	r6, [r6, #0]
 8008a72:	e7f7      	b.n	8008a64 <__sfp+0x18>
 8008a74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a78:	b9d5      	cbnz	r5, 8008ab0 <__sfp+0x64>
 8008a7a:	4b16      	ldr	r3, [pc, #88]	; (8008ad4 <__sfp+0x88>)
 8008a7c:	60e3      	str	r3, [r4, #12]
 8008a7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a82:	6665      	str	r5, [r4, #100]	; 0x64
 8008a84:	f000 f847 	bl	8008b16 <__retarget_lock_init_recursive>
 8008a88:	f7ff ff96 	bl	80089b8 <__sfp_lock_release>
 8008a8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a94:	6025      	str	r5, [r4, #0]
 8008a96:	61a5      	str	r5, [r4, #24]
 8008a98:	2208      	movs	r2, #8
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008aa0:	f7fd fa9c 	bl	8005fdc <memset>
 8008aa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008aa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008aac:	4620      	mov	r0, r4
 8008aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ab0:	3468      	adds	r4, #104	; 0x68
 8008ab2:	e7d9      	b.n	8008a68 <__sfp+0x1c>
 8008ab4:	2104      	movs	r1, #4
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	f7ff ff62 	bl	8008980 <__sfmoreglue>
 8008abc:	4604      	mov	r4, r0
 8008abe:	6030      	str	r0, [r6, #0]
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	d1d5      	bne.n	8008a70 <__sfp+0x24>
 8008ac4:	f7ff ff78 	bl	80089b8 <__sfp_lock_release>
 8008ac8:	230c      	movs	r3, #12
 8008aca:	603b      	str	r3, [r7, #0]
 8008acc:	e7ee      	b.n	8008aac <__sfp+0x60>
 8008ace:	bf00      	nop
 8008ad0:	08008f3c 	.word	0x08008f3c
 8008ad4:	ffff0001 	.word	0xffff0001

08008ad8 <_fwalk_reent>:
 8008ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008adc:	4606      	mov	r6, r0
 8008ade:	4688      	mov	r8, r1
 8008ae0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ae4:	2700      	movs	r7, #0
 8008ae6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008aea:	f1b9 0901 	subs.w	r9, r9, #1
 8008aee:	d505      	bpl.n	8008afc <_fwalk_reent+0x24>
 8008af0:	6824      	ldr	r4, [r4, #0]
 8008af2:	2c00      	cmp	r4, #0
 8008af4:	d1f7      	bne.n	8008ae6 <_fwalk_reent+0xe>
 8008af6:	4638      	mov	r0, r7
 8008af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008afc:	89ab      	ldrh	r3, [r5, #12]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d907      	bls.n	8008b12 <_fwalk_reent+0x3a>
 8008b02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b06:	3301      	adds	r3, #1
 8008b08:	d003      	beq.n	8008b12 <_fwalk_reent+0x3a>
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	47c0      	blx	r8
 8008b10:	4307      	orrs	r7, r0
 8008b12:	3568      	adds	r5, #104	; 0x68
 8008b14:	e7e9      	b.n	8008aea <_fwalk_reent+0x12>

08008b16 <__retarget_lock_init_recursive>:
 8008b16:	4770      	bx	lr

08008b18 <__retarget_lock_acquire_recursive>:
 8008b18:	4770      	bx	lr

08008b1a <__retarget_lock_release_recursive>:
 8008b1a:	4770      	bx	lr

08008b1c <__swhatbuf_r>:
 8008b1c:	b570      	push	{r4, r5, r6, lr}
 8008b1e:	460e      	mov	r6, r1
 8008b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b24:	2900      	cmp	r1, #0
 8008b26:	b096      	sub	sp, #88	; 0x58
 8008b28:	4614      	mov	r4, r2
 8008b2a:	461d      	mov	r5, r3
 8008b2c:	da08      	bge.n	8008b40 <__swhatbuf_r+0x24>
 8008b2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	602a      	str	r2, [r5, #0]
 8008b36:	061a      	lsls	r2, r3, #24
 8008b38:	d410      	bmi.n	8008b5c <__swhatbuf_r+0x40>
 8008b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b3e:	e00e      	b.n	8008b5e <__swhatbuf_r+0x42>
 8008b40:	466a      	mov	r2, sp
 8008b42:	f000 f903 	bl	8008d4c <_fstat_r>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	dbf1      	blt.n	8008b2e <__swhatbuf_r+0x12>
 8008b4a:	9a01      	ldr	r2, [sp, #4]
 8008b4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b54:	425a      	negs	r2, r3
 8008b56:	415a      	adcs	r2, r3
 8008b58:	602a      	str	r2, [r5, #0]
 8008b5a:	e7ee      	b.n	8008b3a <__swhatbuf_r+0x1e>
 8008b5c:	2340      	movs	r3, #64	; 0x40
 8008b5e:	2000      	movs	r0, #0
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	b016      	add	sp, #88	; 0x58
 8008b64:	bd70      	pop	{r4, r5, r6, pc}
	...

08008b68 <__smakebuf_r>:
 8008b68:	898b      	ldrh	r3, [r1, #12]
 8008b6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b6c:	079d      	lsls	r5, r3, #30
 8008b6e:	4606      	mov	r6, r0
 8008b70:	460c      	mov	r4, r1
 8008b72:	d507      	bpl.n	8008b84 <__smakebuf_r+0x1c>
 8008b74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	6123      	str	r3, [r4, #16]
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	6163      	str	r3, [r4, #20]
 8008b80:	b002      	add	sp, #8
 8008b82:	bd70      	pop	{r4, r5, r6, pc}
 8008b84:	ab01      	add	r3, sp, #4
 8008b86:	466a      	mov	r2, sp
 8008b88:	f7ff ffc8 	bl	8008b1c <__swhatbuf_r>
 8008b8c:	9900      	ldr	r1, [sp, #0]
 8008b8e:	4605      	mov	r5, r0
 8008b90:	4630      	mov	r0, r6
 8008b92:	f7ff f963 	bl	8007e5c <_malloc_r>
 8008b96:	b948      	cbnz	r0, 8008bac <__smakebuf_r+0x44>
 8008b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b9c:	059a      	lsls	r2, r3, #22
 8008b9e:	d4ef      	bmi.n	8008b80 <__smakebuf_r+0x18>
 8008ba0:	f023 0303 	bic.w	r3, r3, #3
 8008ba4:	f043 0302 	orr.w	r3, r3, #2
 8008ba8:	81a3      	strh	r3, [r4, #12]
 8008baa:	e7e3      	b.n	8008b74 <__smakebuf_r+0xc>
 8008bac:	4b0d      	ldr	r3, [pc, #52]	; (8008be4 <__smakebuf_r+0x7c>)
 8008bae:	62b3      	str	r3, [r6, #40]	; 0x28
 8008bb0:	89a3      	ldrh	r3, [r4, #12]
 8008bb2:	6020      	str	r0, [r4, #0]
 8008bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bb8:	81a3      	strh	r3, [r4, #12]
 8008bba:	9b00      	ldr	r3, [sp, #0]
 8008bbc:	6163      	str	r3, [r4, #20]
 8008bbe:	9b01      	ldr	r3, [sp, #4]
 8008bc0:	6120      	str	r0, [r4, #16]
 8008bc2:	b15b      	cbz	r3, 8008bdc <__smakebuf_r+0x74>
 8008bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f000 f8d1 	bl	8008d70 <_isatty_r>
 8008bce:	b128      	cbz	r0, 8008bdc <__smakebuf_r+0x74>
 8008bd0:	89a3      	ldrh	r3, [r4, #12]
 8008bd2:	f023 0303 	bic.w	r3, r3, #3
 8008bd6:	f043 0301 	orr.w	r3, r3, #1
 8008bda:	81a3      	strh	r3, [r4, #12]
 8008bdc:	89a0      	ldrh	r0, [r4, #12]
 8008bde:	4305      	orrs	r5, r0
 8008be0:	81a5      	strh	r5, [r4, #12]
 8008be2:	e7cd      	b.n	8008b80 <__smakebuf_r+0x18>
 8008be4:	08008975 	.word	0x08008975

08008be8 <_malloc_usable_size_r>:
 8008be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bec:	1f18      	subs	r0, r3, #4
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	bfbc      	itt	lt
 8008bf2:	580b      	ldrlt	r3, [r1, r0]
 8008bf4:	18c0      	addlt	r0, r0, r3
 8008bf6:	4770      	bx	lr

08008bf8 <_raise_r>:
 8008bf8:	291f      	cmp	r1, #31
 8008bfa:	b538      	push	{r3, r4, r5, lr}
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	460d      	mov	r5, r1
 8008c00:	d904      	bls.n	8008c0c <_raise_r+0x14>
 8008c02:	2316      	movs	r3, #22
 8008c04:	6003      	str	r3, [r0, #0]
 8008c06:	f04f 30ff 	mov.w	r0, #4294967295
 8008c0a:	bd38      	pop	{r3, r4, r5, pc}
 8008c0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c0e:	b112      	cbz	r2, 8008c16 <_raise_r+0x1e>
 8008c10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c14:	b94b      	cbnz	r3, 8008c2a <_raise_r+0x32>
 8008c16:	4620      	mov	r0, r4
 8008c18:	f000 f830 	bl	8008c7c <_getpid_r>
 8008c1c:	462a      	mov	r2, r5
 8008c1e:	4601      	mov	r1, r0
 8008c20:	4620      	mov	r0, r4
 8008c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c26:	f000 b817 	b.w	8008c58 <_kill_r>
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d00a      	beq.n	8008c44 <_raise_r+0x4c>
 8008c2e:	1c59      	adds	r1, r3, #1
 8008c30:	d103      	bne.n	8008c3a <_raise_r+0x42>
 8008c32:	2316      	movs	r3, #22
 8008c34:	6003      	str	r3, [r0, #0]
 8008c36:	2001      	movs	r0, #1
 8008c38:	e7e7      	b.n	8008c0a <_raise_r+0x12>
 8008c3a:	2400      	movs	r4, #0
 8008c3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c40:	4628      	mov	r0, r5
 8008c42:	4798      	blx	r3
 8008c44:	2000      	movs	r0, #0
 8008c46:	e7e0      	b.n	8008c0a <_raise_r+0x12>

08008c48 <raise>:
 8008c48:	4b02      	ldr	r3, [pc, #8]	; (8008c54 <raise+0xc>)
 8008c4a:	4601      	mov	r1, r0
 8008c4c:	6818      	ldr	r0, [r3, #0]
 8008c4e:	f7ff bfd3 	b.w	8008bf8 <_raise_r>
 8008c52:	bf00      	nop
 8008c54:	200001d0 	.word	0x200001d0

08008c58 <_kill_r>:
 8008c58:	b538      	push	{r3, r4, r5, lr}
 8008c5a:	4d07      	ldr	r5, [pc, #28]	; (8008c78 <_kill_r+0x20>)
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	4604      	mov	r4, r0
 8008c60:	4608      	mov	r0, r1
 8008c62:	4611      	mov	r1, r2
 8008c64:	602b      	str	r3, [r5, #0]
 8008c66:	f7f9 fda9 	bl	80027bc <_kill>
 8008c6a:	1c43      	adds	r3, r0, #1
 8008c6c:	d102      	bne.n	8008c74 <_kill_r+0x1c>
 8008c6e:	682b      	ldr	r3, [r5, #0]
 8008c70:	b103      	cbz	r3, 8008c74 <_kill_r+0x1c>
 8008c72:	6023      	str	r3, [r4, #0]
 8008c74:	bd38      	pop	{r3, r4, r5, pc}
 8008c76:	bf00      	nop
 8008c78:	20000668 	.word	0x20000668

08008c7c <_getpid_r>:
 8008c7c:	f7f9 bd96 	b.w	80027ac <_getpid>

08008c80 <__sread>:
 8008c80:	b510      	push	{r4, lr}
 8008c82:	460c      	mov	r4, r1
 8008c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c88:	f000 f894 	bl	8008db4 <_read_r>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	bfab      	itete	ge
 8008c90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c92:	89a3      	ldrhlt	r3, [r4, #12]
 8008c94:	181b      	addge	r3, r3, r0
 8008c96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c9a:	bfac      	ite	ge
 8008c9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c9e:	81a3      	strhlt	r3, [r4, #12]
 8008ca0:	bd10      	pop	{r4, pc}

08008ca2 <__swrite>:
 8008ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca6:	461f      	mov	r7, r3
 8008ca8:	898b      	ldrh	r3, [r1, #12]
 8008caa:	05db      	lsls	r3, r3, #23
 8008cac:	4605      	mov	r5, r0
 8008cae:	460c      	mov	r4, r1
 8008cb0:	4616      	mov	r6, r2
 8008cb2:	d505      	bpl.n	8008cc0 <__swrite+0x1e>
 8008cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cb8:	2302      	movs	r3, #2
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f000 f868 	bl	8008d90 <_lseek_r>
 8008cc0:	89a3      	ldrh	r3, [r4, #12]
 8008cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cca:	81a3      	strh	r3, [r4, #12]
 8008ccc:	4632      	mov	r2, r6
 8008cce:	463b      	mov	r3, r7
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd6:	f000 b817 	b.w	8008d08 <_write_r>

08008cda <__sseek>:
 8008cda:	b510      	push	{r4, lr}
 8008cdc:	460c      	mov	r4, r1
 8008cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ce2:	f000 f855 	bl	8008d90 <_lseek_r>
 8008ce6:	1c43      	adds	r3, r0, #1
 8008ce8:	89a3      	ldrh	r3, [r4, #12]
 8008cea:	bf15      	itete	ne
 8008cec:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cf6:	81a3      	strheq	r3, [r4, #12]
 8008cf8:	bf18      	it	ne
 8008cfa:	81a3      	strhne	r3, [r4, #12]
 8008cfc:	bd10      	pop	{r4, pc}

08008cfe <__sclose>:
 8008cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d02:	f000 b813 	b.w	8008d2c <_close_r>
	...

08008d08 <_write_r>:
 8008d08:	b538      	push	{r3, r4, r5, lr}
 8008d0a:	4d07      	ldr	r5, [pc, #28]	; (8008d28 <_write_r+0x20>)
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	4608      	mov	r0, r1
 8008d10:	4611      	mov	r1, r2
 8008d12:	2200      	movs	r2, #0
 8008d14:	602a      	str	r2, [r5, #0]
 8008d16:	461a      	mov	r2, r3
 8008d18:	f7f9 fd87 	bl	800282a <_write>
 8008d1c:	1c43      	adds	r3, r0, #1
 8008d1e:	d102      	bne.n	8008d26 <_write_r+0x1e>
 8008d20:	682b      	ldr	r3, [r5, #0]
 8008d22:	b103      	cbz	r3, 8008d26 <_write_r+0x1e>
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	bd38      	pop	{r3, r4, r5, pc}
 8008d28:	20000668 	.word	0x20000668

08008d2c <_close_r>:
 8008d2c:	b538      	push	{r3, r4, r5, lr}
 8008d2e:	4d06      	ldr	r5, [pc, #24]	; (8008d48 <_close_r+0x1c>)
 8008d30:	2300      	movs	r3, #0
 8008d32:	4604      	mov	r4, r0
 8008d34:	4608      	mov	r0, r1
 8008d36:	602b      	str	r3, [r5, #0]
 8008d38:	f7f9 fd93 	bl	8002862 <_close>
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	d102      	bne.n	8008d46 <_close_r+0x1a>
 8008d40:	682b      	ldr	r3, [r5, #0]
 8008d42:	b103      	cbz	r3, 8008d46 <_close_r+0x1a>
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	20000668 	.word	0x20000668

08008d4c <_fstat_r>:
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	4d07      	ldr	r5, [pc, #28]	; (8008d6c <_fstat_r+0x20>)
 8008d50:	2300      	movs	r3, #0
 8008d52:	4604      	mov	r4, r0
 8008d54:	4608      	mov	r0, r1
 8008d56:	4611      	mov	r1, r2
 8008d58:	602b      	str	r3, [r5, #0]
 8008d5a:	f7f9 fd8e 	bl	800287a <_fstat>
 8008d5e:	1c43      	adds	r3, r0, #1
 8008d60:	d102      	bne.n	8008d68 <_fstat_r+0x1c>
 8008d62:	682b      	ldr	r3, [r5, #0]
 8008d64:	b103      	cbz	r3, 8008d68 <_fstat_r+0x1c>
 8008d66:	6023      	str	r3, [r4, #0]
 8008d68:	bd38      	pop	{r3, r4, r5, pc}
 8008d6a:	bf00      	nop
 8008d6c:	20000668 	.word	0x20000668

08008d70 <_isatty_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4d06      	ldr	r5, [pc, #24]	; (8008d8c <_isatty_r+0x1c>)
 8008d74:	2300      	movs	r3, #0
 8008d76:	4604      	mov	r4, r0
 8008d78:	4608      	mov	r0, r1
 8008d7a:	602b      	str	r3, [r5, #0]
 8008d7c:	f7f9 fd8d 	bl	800289a <_isatty>
 8008d80:	1c43      	adds	r3, r0, #1
 8008d82:	d102      	bne.n	8008d8a <_isatty_r+0x1a>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	b103      	cbz	r3, 8008d8a <_isatty_r+0x1a>
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	bd38      	pop	{r3, r4, r5, pc}
 8008d8c:	20000668 	.word	0x20000668

08008d90 <_lseek_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4d07      	ldr	r5, [pc, #28]	; (8008db0 <_lseek_r+0x20>)
 8008d94:	4604      	mov	r4, r0
 8008d96:	4608      	mov	r0, r1
 8008d98:	4611      	mov	r1, r2
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	602a      	str	r2, [r5, #0]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	f7f9 fd86 	bl	80028b0 <_lseek>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d102      	bne.n	8008dae <_lseek_r+0x1e>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	b103      	cbz	r3, 8008dae <_lseek_r+0x1e>
 8008dac:	6023      	str	r3, [r4, #0]
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	20000668 	.word	0x20000668

08008db4 <_read_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	4d07      	ldr	r5, [pc, #28]	; (8008dd4 <_read_r+0x20>)
 8008db8:	4604      	mov	r4, r0
 8008dba:	4608      	mov	r0, r1
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	602a      	str	r2, [r5, #0]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	f7f9 fd14 	bl	80027f0 <_read>
 8008dc8:	1c43      	adds	r3, r0, #1
 8008dca:	d102      	bne.n	8008dd2 <_read_r+0x1e>
 8008dcc:	682b      	ldr	r3, [r5, #0]
 8008dce:	b103      	cbz	r3, 8008dd2 <_read_r+0x1e>
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	bd38      	pop	{r3, r4, r5, pc}
 8008dd4:	20000668 	.word	0x20000668

08008dd8 <_init>:
 8008dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dda:	bf00      	nop
 8008ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dde:	bc08      	pop	{r3}
 8008de0:	469e      	mov	lr, r3
 8008de2:	4770      	bx	lr

08008de4 <_fini>:
 8008de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de6:	bf00      	nop
 8008de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dea:	bc08      	pop	{r3}
 8008dec:	469e      	mov	lr, r3
 8008dee:	4770      	bx	lr
